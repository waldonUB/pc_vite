/******config.js start***/

/**
 *  ueditor完整配置项
 *  可以在这里配置整个编辑器的特性
 */
/**************************提示********************************
 * 所有被注释的配置项均为UEditor默认值。
 * 修改默认配置请首先确保已经完全明确该参数的真实用途。
 * 主要有两种修改方案，一种是取消此处注释，然后修改成对应参数；另一种是在实例化编辑器时传入对应参数。
 * 当升级编辑器时，可直接使用旧版配置文件替换新版配置文件,不用担心旧版配置文件中因缺少新功能所需的参数而导致脚本报错。
 **************************提示********************************/
(function () {
  var URL;
  var tmp = window.location.pathname,
    URL =
      window.UEDITOR_HOME_URL ||
      tmp
        .substr(0, tmp.lastIndexOf("/") + 1)
        .replace("_examples/", "")
        .replace("website/", "");
  /**
   * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。
   */
  window.UEDITOR_CONFIG = {
    UEDITOR_HOME_URL: URL, //编辑器资源文件根路径
    BUS_UEDITOR_HOME_URL: "", //具体产品业务根目录，用于引用业务方资源文件
    BUS_UEDITOR_HOME_URL_IMAGE: URL + "/image/comm/ueditor/image", //具体产品业务根目录，用于引用业务方资源文件
    // iframeCssUrl: '/css/innerUE.src.css',   //
    isPasteImage: true, //是否开启粘贴图片直接上传
    upPasteIamgeUrl: "", //粘贴图片直接上传URL
    upLoadImageUrl: "", //上传图片url
    upImageExt: "jpg,jpeg,gif,png,bmp", //图片格式限制
    upImgApp: "", //各产品上传资源库标识，如果在ajax中已经确定则不需要
    upLoadFlashUrl: "", //上传flash url
    upFlashExt: "swf", //flash格式限制
    toolbars: [
      //工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的从新定义 全部属性要小写
      [
        "shrinkopenup",
        "removeformat",
        "pasteplain",
        "|",
        "fontfamily",
        "fontsize",
        "forecolor",
        "backcolor",
        "bold",
        "underline",
        "italic",
        "|",
        "image",
        "insertimage",
        "link",
        "|",
        "qqface",
        "|",
        "insertorderedlist",
        "insertunorderedlist",
        "justify",
        "lineheight",
        "indent",
        "|",
        "unlink",
        "phone",
        "qqservice",
        "insertmp4",
        "flash",
        "|",
        "|",
        "pagebreak",
        "rowspacingtop",
        "rowspacingbottom",
        // 'deletetable', 'insertparagraphbeforetable','edittd', 'insertrow', 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright', 'mergedown', 'splittocells', 'splittorows', 'splittocols',
        "inserttable",
        "|",
        "undo",
        "redo",
        "formatmatch",
        "selectall",
        "|",
        "strikethrough",
        "superscript",
        "subscript",
        "horizontal",
        "zhspace",
        "|",
        "source",
        "fullscreen"
        // , 'swfuploadword'
      ]
    ],
    toolbarsBlock: [
      {
        id: 1,
        idName: "caozuo", //id名
        className: "toolbarsBlock", //class名
        name: "操作",
        count: 0, //每个分块的工具数
        boxWidthSum: 0, //工具宽度之和
        showIconNum: 0,
        initWidth: 142, //初始分款的宽度比
        toolbarsClass: []
      },
      {
        id: 2,
        idName: "wenzi",
        className: "toolbarsBlock",
        name: "文字",
        count: 0,
        boxWidthSum: 0,
        showIconNum: 0,
        initWidth: 309,
        toolbarsClass: []
      },
      {
        id: 3,
        idName: "paiban",
        className: "toolbarsBlock",
        name: "排版",
        count: 0,
        boxWidthSum: 0,
        showIconNum: 0,
        initWidth: 118,
        toolbarsClass: []
      },
      {
        id: 4,
        idName: "charu",
        className: "toolbarsBlock",
        name: "插入",
        count: 0,
        boxWidthSum: 0,
        showIconNum: 0,
        initWidth: 67,
        toolbarsClass: []
      },
      {
        id: 5,
        idName: "shitu",
        className: "toolbarsBlock",
        name: "视图",
        count: 0,
        boxWidthSum: 0,
        showIconNum: 0,
        initWidth: 66,
        toolbarsClass: []
      }
    ],
    // toolbarsClass:{
    //     'removeformat':1,
    //     'pasteplain':1,
    //     'undo':1,
    //     'redo':1,
    //     'selectall':1,

    //     'fontfamily':2,
    //     'fontsize':2,
    //     'bold':2,
    //     'italic':2,
    //     'underline':2,
    //     'forecolor':2,
    //     'backcolor':2,
    //     'strikethrough':2,
    //     'superscript':2,
    //     'subscript':2,

    //     'lineheight':3,
    //     'justify':3,
    //     'rowspacingtop':3,
    //     'rowspacingbottom':3,
    //     'indent':3,

    //     'qqface':4,
    //     'insertorderedlist':4,
    //     'insertunorderedlist':4,
    //     'unlink':4,
    //     'phone':4,
    //     'qqservice':4,
    //     'link':4,
    //     'insertimage':4,
    //     'image':4,
    //     'insertmp4':4,
    //     'flash':4,
    //     'horizontal':4,
    //     'zhspace':4,
    //     'pagebreak':4,
    //     'inserttable':4,

    //     'fullscreen':5,
    //     'source':5
    // },
    toolbarsClass: {
      removeformat: { id: 1, priority: 7 },
      pasteplain: { id: 1, priority: 27 },
      undo: { id: 1, priority: 15 },
      redo: { id: 1, priority: 15 },
      selectall: { id: 1, priority: 26 },
      formatmatch: { id: 1, priority: 16 },
      swfuploadword: { id: 1, priority: 8 },

      fontfamily: { id: 2, priority: 2 },
      fontsize: { id: 2, priority: 3 },
      bold: { id: 2, priority: 6 },
      italic: { id: 2, priority: 28 },
      underline: { id: 2, priority: 14 },
      forecolor: { id: 2, priority: 4 },
      backcolor: { id: 2, priority: 5 },
      strikethrough: { id: 2, priority: 32 },
      superscript: { id: 2, priority: 33 },
      subscript: { id: 2, priority: 34 },

      lineheight: { id: 3, priority: 10 },
      justify: { id: 3, priority: 9 },
      rowspacingtop: { id: 3, priority: 20 },
      rowspacingbottom: { id: 3, priority: 20 },
      indent: { id: 3, priority: 11 },
      insertorderedlist: { id: 3, priority: 21 },
      insertunorderedlist: { id: 3, priority: 22 },

      qqface: { id: 4, priority: 35 },
      unlink: { id: 4, priority: 36 },
      phone: { id: 4, priority: 24 },
      qqservice: { id: 4, priority: 25 },
      link: { id: 4, priority: 13 },
      insertimage: { id: 4, priority: 12 },
      "hoverimage ": { id: 4, priority: 23 },
      insertmp4: { id: 4, priority: 18 },

      // 'flash':4{id:4,priority:10},
      horizontal: { id: 4, priority: 30 },
      zhspace: { id: 4, priority: 29 },
      pagebreak: { id: 4, priority: 31 },
      inserttable: { id: 4, priority: 17 },
      insertmp3: { id: 4, priority: 19 },

      fullscreen: { id: 5, priority: 1 },
      source: { id: 5, priority: 1 },
      bgcolortoggle: { id: 5, priority: 37 }
    },
    comDogId: 200296,
    srcIds: {
      backcolor: 1,
      bold: 2,
      pagebreak: 3,
      fontfamily: 4,
      fontsize: 5,
      forecolor: 6,
      formatmatch: 7,
      fullscreen: 8,
      horizontal: 9,
      hoverimage: 10,
      indent: 11,
      insertimage: 12,
      insertmp4: 13,
      insertorderedlist: 14,
      inserttable: 15,
      insertunorderedlist: 16,
      italic: 17,
      justify: 18,
      lineheight: 19,
      link: 20,
      pasteplain: 21,
      phone: 22,
      qqservice: 23,
      redo: 24,
      removeformat: 25,
      rowspacingbottom: 26,
      rowspacingtop: 27,
      selectall: 28,
      shrinkopenup: 29,
      source: 30,
      strikethrough: 31,
      subscript: 32,
      superscript: 33,
      swfuploadword: 34,
      underline: 35,
      undo: 36,
      zhspace: 37,
      insertmp3: 38,
      bgcolortoggle: 39
    },
    outerFunction: {}, // 存储一些非ueditor自身的方法(外部引入的)
    useDefaultFontsizeComBox: true

    //若实例化编辑器的页面手动修改的domain，此处需要设置为true
    //,customDomain:false

    //针对getAllHtml方法，会在对应的head标签中增加该编码设置。
    //,charset:"utf-8"

    //常用配置项目
    //,isShow : true    //默认显示编辑器

    //,isHideTool: false  //默认是否显示快速操作浮动工具

    //,initialContent:'欢迎使用ueditor!'    //初始化编辑器的内容,也可以通过textarea/script给值，看官网例子

    //,autoClearinitialContent:true //是否自动清除编辑器初始内容，注意：如果focus属性设置为true,这个也为真，那么编辑器一上来就会触发导致初始化的内容看不到了

    //,iframeCssUrl: URL + '/themes/default/iframe.css' //给编辑器内部引入一个css文件

    //,textarea:'editorValue' // 提交表单时，服务器获取编辑器提交内容的所用的参数，多实例时可以给容器name属性，会将name给定的值最为每个实例的键值，不用每次实例化的时候都设置这个值

    //,focus:false //初始化时，是否让编辑器获得焦点true或false

    //,minFrameHeight:320  // 最小高度,默认320

    //,autoClearEmptyNode : true //getContent时，是否删除空的inlineElement节点（包括嵌套的情况）

    //,fullscreen : false //是否开启初始化时即全屏，默认关闭

    //,readonly : false /编辑器初始化结束后,编辑区域是否是只读的，默认是false

    //,zIndex : 900     //编辑器层级的基数,默认是900

    //,initialStyle:'body{font-size:18px}'   //编辑器内部样式,可以用来改变字体等

    //,emotionLocalization:false //是否开启表情本地化，默认关闭。若要开启请确保emotion文件夹下包含官网提供的images表情文件夹

    //,pasteplain:false  //是否纯文本粘贴。false为不使用纯文本粘贴，true为使用纯文本粘贴

    //,allHtmlEnabled:false //提交到后台的数据是否包含整个html字符串
    //iframeUrlMap
    //dialog内容的路径 ～会被替换成URL,垓属性一旦打开，将覆盖所有的dialog的默认路径
    //,iframeUrlMap:{
    // 'anchor':'~/dialogs/anchor/anchor.html',
    // }

    //insertorderedlist
    //有序列表的下拉配置,值留空时支持多语言自动识别，若配置值，则以此值为准
    // ,'insertorderedlist':{
    //      'decimal' : '' ,         //'1,2,3...'
    //      'lower-alpha' : '' ,    // 'a,b,c...'
    //      'lower-roman' : '' ,    //'i,ii,iii...'
    //      'upper-alpha' : '' ,    //'A,B,C'
    //      'upper-roman' : ''      //'I,II,III...'
    // }

    //insertunorderedlist
    //无序列表的下拉配置，值留空时支持多语言自动识别，若配置值，则以此值为准
    //,insertunorderedlist : {
    //    'circle' : '',  // '○ 小圆圈'
    //    'disc' : '',    // '● 小圆点'
    //    'square' : ''   //'■ 小方块'
    //}

    //fontfamily
    //字体设置 可在label文件中定义，若配置，则以配置值为准
    // ,'fontfamily':[
    //     { label:'',name:'songti',val:'宋体,SimSun'},
    //     { label:'',name:'kaiti',val:'楷体,楷体_GB2312, SimKai'},
    //     { label:'',name:'yahei',val:'微软雅黑,Microsoft YaHei'},
    //     { label:'',name:'heiti',val:'黑体, SimHei'},
    //     { label:'',name:'lishu',val:'隶书, SimLi'},
    //     { label:'',name:'andaleMono',val:'andale mono'},
    //     { label:'',name:'arial',val:'arial, helvetica,sans-serif'},
    //     { label:'',name:'arialBlack',val:'arial black,avant garde'},
    //     { label:'',name:'comicSansMs',val:'comic sans ms'},
    //     { label:'',name:'impact',val:'impact,chicago'},
    //     { label:'',name:'timesNewRoman',val:'times new roman'}
    //   ]

    //fontsize
    //字号
    //,'fontsize':[12, 14, 16, 18, 20, 22, 24, 30, 36, 48, 60, 72]

    //paragraph
    //段落格式 值留空时支持多语言自动识别，若配置，则以配置值为准
    //,'paragraph':{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''}

    //rowspacingtop
    //段间距 值和显示的名字相同
    //,'rowspacingtop':['5', '10', '15', '20', '25']

    //rowspacingBottom
    //段间距 值和显示的名字相同
    //,'rowspacingbottom':['5', '10', '15', '20', '25']

    //lineheight
    //行内间距 值和显示的名字相同
    //,'lineheight':['1', '1.5','1.75','2','2.5', '3', '4', '5']

    //customstyle
    //自定义样式，不支持国际化，此处配置值即可最后显示值
    //block的元素是依据设置段落的逻辑设置的，inline的元素依据BIU的逻辑设置
    //尽量使用一些常用的标签
    //参数说明
    //tag 使用的标签名字
    //label 显示的名字也是用来标识不同类型的标识符，注意这个值每个要不同，
    //style 添加的样式
    //每一个对象就是一个自定义的样式
    //,'customstyle':[
    //      {tag:'h1', name:'tc', label:'', style:'border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'},
    //      {tag:'h1', name:'tl',label:'', style:'border-bottom:#ccc 2px solid;padding:0 4px 0 0;margin:0 0 10px 0;'},
    //      {tag:'span',name:'im', label:'', style:'font-style:italic;font-weight:bold;color:#000'},
    //      {tag:'span',name:'hi', label:'', style:'font-style:italic;font-weight:bold;color:rgb(51, 153, 204)'}
    //  ]

    //打开右键菜单功能
    //,enableContextMenu: true
    //右键菜单的内容，可以参考plugins/contextmenu.js里边的默认菜单的例子，label留空支持国际化，否则以此配置为准
    // ,contextMenu:[
    //     {
    //         label:'',       //显示的名称
    //         cmdName:'selectall',//执行的command命令，当点击这个右键菜单时
    //         //exec可选，有了exec就会在点击时执行这个function，优先级高于cmdName
    //         exec:function () {
    //             //this是当前编辑器的实例
    //             //this.ui._dialogs['inserttableDialog'].open();
    //         }
    //     }
    //    ]

    //wordCount
    //,wordCount:false          //是否开启字数统计
    //,maximumWords:10000       //允许的最大字符数
    //字数统计提示，{#count}代表当前字数，{#leave}代表还可以输入多少字符数,留空支持多语言自动切换，否则按此配置显示
    //,wordCountMsg:''   //当前已输入 {#count} 个字符，您还可以输入{#leave} 个字符
    //超出字数限制提示  留空支持多语言自动切换，否则按此配置显示
    //,wordOverFlowMsg:''    //<span style="color:red;">你输入的字符个数已经超出最大允许值，服务器可能会拒绝保存！</span>

    //highlightcode
    // 代码高亮时需要加载的第三方插件的路径
    // ,highlightJsUrl:URL + "third-party/SyntaxHighlighter/shCore.js"
    // ,highlightCssUrl:URL + "third-party/SyntaxHighlighter/shCoreDefault.css"

    //tab
    //点击tab键时移动的距离,tabSize倍数，tabNode什么字符做为单位
    //,tabSize:4
    //,tabNode:'&nbsp;'

    //elementPathEnabled
    //是否启用元素路径，默认是不显示
    //,elementPathEnabled : false

    //removeFormat
    //清除格式时可以删除的标签和属性
    //removeForamtTags标签
    //,removeFormatTags:'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var'
    //removeFormatAttributes属性
    //,removeFormatAttributes:'class,style,lang,width,height,align,hspace,valign'

    //undo
    //可以最多回退的次数,默认20
    //,maxUndoCount:20
    //当输入的字符数超过该值时，保存一次现场
    // ,maxInputCount:1

    //autoHeightEnabled
    // 是否自动长高,默认false
    // ,autoHeightEnabled:false

    //autoFloatEnabled
    //是否保持toolbar的位置不动,默认true
    //,autoFloatEnabled:true
    //浮动时工具栏距离浏览器顶部的高度，用于某些具有固定头部的页面
    //,topOffset:30

    //indentValue
    //首行缩进距离,默认是2em
    //,indentValue:'2em'

    //pageBreakTag
    //分页标识符,默认是_baidu_page_break_tag_
    //,pageBreakTag:'_baidu_page_break_tag_'

    //sourceEditor
    //源码的查看方式,codemirror 是代码高亮，textarea是文本框,默认是codemirror
    //,sourceEditor:"codemirror"
    //如果sourceEditor是codemirror，还用配置一下两个参数
    //codeMirrorJsUrl js加载的路径，默认是 URL + "third-party/codemirror2.15/codemirror.js"
    //,codeMirrorJsUrl:URL + "third-party/codemirror2.15/codemirror.js"
    //codeMirrorCssUrl css加载的路径，默认是 URL + "third-party/codemirror2.15/codemirror.css"
    //,codeMirrorCssUrl:URL + "third-party/codemirror2.15/codemirror.css"
    //编辑器初始化完成后是否进入源码模式，默认为否。
    //,sourceEditorFirst:false

    //serialize
    // 配置编辑器的过滤规则
    // serialize是个object,可以有属性blackList，whiteList属性，默认是{}
    // 例子:
    // , serialize : {
    //       //黑名单，编辑器会过滤掉一下标签
    //       blackList:{object:1, applet:1, input:1, meta:1, base:1, button:1, select:1, textarea:1, '#comment':1, 'map':1, 'area':1}
    // }

    //autotypeset
    //  //自动排版参数
    //  ,autotypeset:{
    //      mergeEmptyline : true,         //合并空行
    //      removeClass : true,           //去掉冗余的class
    //      removeEmptyline : false,      //去掉空行
    //      textAlign : "left" ,           //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
    //      imageBlockLine : 'center',      //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
    //      pasteFilter : false,            //根据规则过滤没事粘贴进来的内容
    //      clearFontSize : false,          //去掉所有的内嵌字号，使用编辑器默认的字号
    //      clearFontFamily : false,        //去掉所有的内嵌字体，使用编辑器默认的字体
    //      removeEmptyNode : false ,       // 去掉空节点
    //      //可以去掉的标签
    //      removeTagNames : {标签名字:1},
    //      indent : false,                 // 行首缩进
    //      indentValue : '2em'             //行首缩进的大小
    //  }
  };
})();
/******config.js end***/
(function () {
  /*****editor.js start**/
  UEDITOR_CONFIG = window.UEDITOR_CONFIG || {};

  var baidu = window.baidu || {};
  window.baidu = baidu;

  window.UE = baidu.editor = {};
  UE.plugins = {};
  UE.commands = {};
  UE.instants = {};
  UE.I18N = {};

  //UE.defaultplugins = {};
  //
  //UE.commands = function(){
  //    var commandList = {},tmpList= {};
  //    return {
  //
  //        register : function(commandsName,pluginName){
  //            commandsName = commandsName.split(',');
  //            for(var i= 0,ci;ci=commandsName[i++];){
  //                commandList[ci] = pluginName;
  //            }
  //
  //        },
  //        get : function(commandName){
  //            return commandList[commandName];
  //        },
  //        getList : function(){
  //            return commandList;
  //        }
  //    }
  //}();

  //UE.version = "1.2.3.0";

  var dom = (UE.dom = {});

  /*****editor.js end**/
  //zh-cn.src.js start
  /*
   * UEdit内部使用的字符集
   */
  UE.I18N["zh-cn"] = {
    labelMap: {
      bold: "加粗",
      indent: "段首缩进",
      italic: "斜体",
      underline: "下划线",
      strikethrough: "删除线",
      flash: "Flash",
      formatmatch: "格式刷",
      source: "源代码",
      qqservice: "QQ/MSN/Skype/阿里旺旺/淘宝旺旺",
      pasteplain: "纯文本粘贴模式",
      shrinkopenup: "展开",
      removeformat: "清除格式",
      rowspacingtop: "段前距",
      rowspacingbottom: "段后距",
      unlink: "取消链接",
      phone: "电话",

      insertrow: "前插入行",
      insertcol: "前插入列",
      mergeright: "右合并单元格",
      mergedown: "下合并单元格",
      deleterow: "删除行",
      deletecol: "删除列",
      splittorows: "拆分成行",
      splittocols: "拆分成列",
      splittocells: "完全拆分单元格",
      mergecells: "合并多个单元格",
      deletetable: "删除表格",
      insertparagraphbeforetable: "表格前插行",
      edittd: "单元格属性",

      fullscreen: "全屏",
      subscript: "下标",
      superscript: "上标",
      selectall: "全选",
      horizontal: "分隔线",
      zhspace: "中文空格",
      undo: "撤销",
      redo: "前进",
      fontfamily: "微软雅黑",
      fontsize: "14px",
      insertimage: "图片",
      insertmp4: "MP4",
      inserttable: "表格",
      link: "超链接",

      justifyleft: "居左对齐",
      justifyright: "居右对齐",
      justifycenter: "居中对齐",
      justifyjustify: "两端对齐",
      forecolor: "字体颜色",
      backcolor: "背景色",
      insertorderedlist: "有序列表",
      insertunorderedlist: "无序列表",
      rowspacingtop: "段前距",
      rowspacingbottom: "段后距",
      pagebreak: "分页",
      swfuploadword: "word文档上传",
      //'imageleft':'左浮动', 'imageright':'右浮动', 'attachment':'附件', 'imagecenter':'居中', 'wordimage':'图片转存',
      lineheight: "行间距",
      hoverimage: "鼠标经过换图",
      insertmp3: "MP3",
      bgcolortoggle: "黑色背景"
    },
    insertorderedlist: {
      decimal: "1,2,3...",
      "lower-alpha": "a,b,c...",
      "lower-roman": "i,ii,iii...",
      "upper-alpha": "A,B,C...",
      "upper-roman": "I,II,III..."
    },
    insertunorderedlist: {
      circle: "○ 小圆圈",
      disc: "● 小圆点",
      square: "■ 小方块 "
    },
    contextMenu: {
      delete: "删除",
      selectall: "全选",
      deletecode: "删除代码",
      cleardoc: "清空文档",
      confirmclear: "确定清空当前文档么？",
      unlink: "删除超链接",
      paragraph: "段落格式",
      edittable: "表格属性",
      edittd: "单元格属性",
      justifyleft: "居左对齐",
      justifyright: "居右对齐",
      justifycenter: "居中对齐",
      justifyjustify: "两端对齐",
      table: "表格",
      deletetable: "删除表格",
      insertparagraphbeforetable: "表格前插入行",
      deleterow: "删除行",
      deletecol: "删除列",
      insertrow: "插入行",
      insertcol: "插入列",
      mergeright: "向右合并",
      mergeleft: "向左合并",
      mergedown: "向下合并",
      mergecells: "合并单元格",
      splittocells: "完全拆分单元格",
      splittocols: "拆分成列",
      splittorows: "拆分成行",
      copy: "复制(Ctrl + c)",
      copymsg: "请使用 'Ctrl + c'执行复制操作",
      paste: "粘贴(Ctrl + v)",
      pastemsg: "请使用'Ctrl + v'执行复制操作"
    },
    //'paragraph':{'p':'段落', 'h1':'标题 1', 'h2':'标题 2', 'h3':'标题 3', 'h4':'标题 4', 'h5':'标题 5', 'h6':'标题 6'},
    /*
        'fontfamily':{
               'songti':'宋体',
               'kaiti':'楷体',
               'heiti':'黑体',
               'youyuan':'幼圆',
               'fangsong':'仿宋体',
               'xinximingti':'新细明体',
               'huawenkaiti':'华文楷体',
               'fangzshuti':'方正舒体',
               'huawencaiyun':'华文彩云',
               'huawensongti':'华文宋体',
               'lishu':'隶书',
               'yahei':'微软雅黑',
               'andaleMono':'andale mono',
               'arial': 'arial',
               'arialBlack':'arial black',
               'comicSansMs':'comic sans ms',
               'impact':'impact',
               'timesNewRoman':'times new roman'
        },
        */
    fontfamily: [
      { first: "宋体,SimSun", second: "宋体" },
      { first: "隶书, SimLi", second: "隶书" },
      { first: "楷体,楷体_GB2312, SimKai", second: "楷体" },
      { first: "黑体, SimHei", second: "黑体" },
      { first: "幼圆, 幼圆", second: "幼圆" },
      { first: "仿宋体, FangSong_GB2312", second: "仿宋体" },
      { first: "微软雅黑,Microsoft YaHei", second: "微软雅黑" },
      { first: "新细明体, PMingLiU", second: "新细明体" },
      { first: "华文楷体, STKaiti", second: "华文楷体" },
      { first: "方正舒体, 方正舒体", second: "方正舒体" },
      { first: "华文彩云, 华文彩云", second: "华文彩云" },
      { first: "华文宋体, 华文宋体", second: "华文宋体" },
      { first: "andale mono", second: "andale mono" },
      { first: "arial, helvetica,sans-serif", second: "arial" },
      { first: "arial black,avant garde", second: "arial black" },
      { first: "comic sans ms", second: "comic sans ms" },
      { first: "impact,chicago", second: "impact" },
      { first: "times new roman", second: "times new roman" }
    ],
    customstyle: {
      tc: "标题居中",
      tl: "标题居左",
      im: "强调",
      hi: "明显强调"
    },
    elementPathTip: "元素路径",
    //'wordCountTip':"字数统计",
    //'wordCountMsg':'当前已输入{#count}个字符, 您还可以输入{#leave}个字符。 ',
    wordOverFlowMsg:
      '<span style="color:red;">当前已输入{#count}个字，已超过{#pass}个字。</span>',
    ok: "确认",
    cancel: "取消",
    closeDialog: "关闭对话框",
    // 'tableDrag':"表格拖动必须引入uiUtils.js文件！",
    // 'autofloatMsg':"工具栏浮动依赖编辑器UI，您首先需要引入UI文件!",
    anthorMsg: "链接",
    clearColor: "清空颜色",
    standardColor: "标准颜色",
    themeColor: "主题颜色",
    property: "属性",
    default: "默认",
    modify: "修改",
    justifyleft: "居左对齐",
    justifyright: "居右对齐",
    justifycenter: "居中",
    justify: "两端对齐",
    clear: "清除",
    anchorMsg: "锚点",
    delete: "删除",
    clickToUpload: "点击上传",
    unset: "尚未设置语言文件",
    t_row: "行",
    t_col: "列",
    more: "更多",

    //===============dialog i18N=======================
    linkPicker: {
      linkText: "文本内容",
      linkAddress: "链接地址",
      linkStyle: "链接样式",
      hasUnderLine: "有下划线",
      noneUnderLine: "无下划线",
      openType: "打开方式",
      newWindow: "新窗口",
      currentWindow: "当前窗口",
      confirmLink: "确定",
      cancelLink: "取消",
      unLink: "清除链接"
    },
    link: {
      static: {
        lang_input_text: "文本内容：",
        lang_input_url: "链接地址：",
        lang_input_title: "标题：",
        lang_input_target: "是否在新窗口打开："
      },
      validLink: "只支持选中一个链接时生效",
      httpPrompt:
        "您输入的超链接中不包含http等协议名称，默认将为您添加http://前缀"
    },
    wordCountTip: "字数统计",
    wordCountMsg: "当前已输入{#count}个字，您还可以输入{#leave}个字。 ",

    inserttable: {
      static: {
        lang_baseInfo: "基础信息",
        lang_rows: "行数",
        lang_rowUnit: "行",
        lang_width: "宽度",
        lang_widthUnit: "px",
        lang_height: "高度",
        lang_heightUnit: "px",
        lang_cols: "列数",
        lang_colUnit: "列",
        lang_warmPrompt: "温馨提示",
        lang_maxPadding: "边距最大不能超过13px! ",
        lang_extendInfo: "扩展信息",
        lang_preview: "可预览",
        lang_tableBorder: "表格边框",
        lang_borderSize: "边框大小",
        lang_borderColor: "边框颜色",
        lang_mar_pad: "边距间距",
        lang_margin: "边距",
        lang_padding: "间距",
        lang_table_background: "填充颜色",
        lang_table_alignment: "对齐方式",
        lang_borderFor: "边框设置",
        align: { options: ["默认", "居中", "居左", "居右"] },
        borderType: { options: ["所有单元格", "仅表格"] },
        lang_cellPadding: "单元格间距",
        commCellPadding: { options: ["默认", "无边距"] },
        lang_forPreview: "这是用来预览的",
        lang_borderStyle: "边框样式",
        borderStyle: { options: ["———", "--------", "· · · · · ·"] }
      },
      errorNum: "请输入正确的数值",
      errorColor: "请输入正确的颜色值，如#34abdd，red",
      clearColor: "清除颜色",
      overflowMsg: "最大值不能超过{#value}px!",
      overflowPreviewMsg: "超过{#value} px时将不再提供实时预览。"
    },
    edittd: {
      static: {
        lang_background: "背景颜色",
        lang_alignment: "对齐方式",
        lang_borderSet: "边框设置",
        lang_horizontal: "水平",
        lang_vertical: "垂直",
        vAlign: { options: ["默认", "居中对齐", "顶端对齐", "底部对齐"] },
        align: { options: ["默认", "居中对齐", "左对齐", "右对齐"] },
        unitBorderStyle: { options: ["———", "--------", "· · · · · ·"] }
      },
      clearColor: "清除颜色"
    }
  };
  //zh-cn.src.js end
  /*****browser.js start**/
  /**
   * @import editor_all.js
   * @class baidu.editor.browser     判断浏览器
   */
  var browser = (UE.browser = (function () {
    var agent = navigator.userAgent.toLowerCase(),
      opera = window.opera,
      browser = {
        /**
         * 检测浏览器是否为IE
         * @name baidu.editor.browser.ie
         * @property    检测浏览器是否为IE
         * @grammar     baidu.editor.browser.ie
         * @return     {Boolean}    返回是否为ie浏览器
         */
        ie: !!window.ActiveXObject,

        /**
         * 检测浏览器是否为Opera
         * @name baidu.editor.browser.opera
         * @property    检测浏览器是否为Opera
         * @grammar     baidu.editor.browser.opera
         * @return     {Boolean}    返回是否为opera浏览器
         */
        opera: !!opera && opera.version,

        /**
         * 检测浏览器是否为WebKit内核
         * @name baidu.editor.browser.webkit
         * @property    检测浏览器是否为WebKit内核
         * @grammar     baidu.editor.browser.webkit
         * @return     {Boolean}    返回是否为WebKit内核
         */
        webkit: agent.indexOf(" applewebkit/") > -1,

        /**
         * 检查是否为Macintosh系统
         * @name baidu.editor.browser.mac
         * @property    检查是否为Macintosh系统
         * @grammar     baidu.editor.browser.mac
         * @return     {Boolean}    返回是否为Macintosh系统
         */
        mac: agent.indexOf("macintosh") > -1,

        /**
         * 检查浏览器是否为quirks模式
         * @name baidu.editor.browser.quirks
         * @property    检查浏览器是否为quirks模式
         * @grammar     baidu.editor.browser.quirks
         * @return     {Boolean}    返回是否为quirks模式
         */
        quirks: document.compatMode == "BackCompat"
      };

    /**
     * 检测浏览器是否为Gecko内核，如Firefox
     * @name baidu.editor.browser.gecko
     * @property    检测浏览器是否为Gecko内核
     * @grammar     baidu.editor.browser.gecko
     * @return     {Boolean}    返回是否为Gecko内核
     */
    browser.gecko =
      navigator.product == "Gecko" && !browser.webkit && !browser.opera;

    var version = 0;

    // Internet Explorer 6.0+
    if (browser.ie) {
      version = parseFloat(agent.match(/msie (\d+)/)[1]);
      /**
       * 检测浏览器是否为 IE9 模式
       */
      browser.ie9Compat = document.documentMode == 9;
      /**
       * 检测浏览器是否为 IE8 浏览器
       * @name baidu.editor.browser.IE8
       * @property    检测浏览器是否为 IE8 浏览器
       * @grammar     baidu.editor.browser.IE8
       * @return     {Boolean}    返回是否为 IE8 浏览器
       */
      browser.ie8 = !!document.documentMode;

      /**
       * 检测浏览器是否为 IE8 模式
       * @name baidu.editor.browser.ie8Compat
       * @property    检测浏览器是否为 IE8 模式
       * @grammar     baidu.editor.browser.ie8Compat
       * @return     {Boolean}    返回是否为 IE8 模式
       */
      browser.ie8Compat = document.documentMode == 8;

      /**
       * 检测浏览器是否运行在 兼容IE7模式
       * @name baidu.editor.browser.ie7Compat
       * @property    检测浏览器是否为兼容IE7模式
       * @grammar     baidu.editor.browser.ie7Compat
       * @return     {Boolean}    返回是否为兼容IE7模式
       */
      browser.ie7Compat =
        (version == 7 && !document.documentMode) || document.documentMode == 7;

      /**
       * 检测浏览器是否IE6模式或怪异模式
       * @name baidu.editor.browser.ie6Compat
       * @property    检测浏览器是否IE6 模式或怪异模式
       * @grammar     baidu.editor.browser.ie6Compat
       * @return     {Boolean}    返回是否为IE6 模式或怪异模式
       */
      browser.ie6Compat = version < 7 || browser.quirks;
    }

    // Gecko.
    if (browser.gecko) {
      var geckoRelease = agent.match(/rv:([\d\.]+)/);
      if (geckoRelease) {
        geckoRelease = geckoRelease[1].split(".");
        version =
          geckoRelease[0] * 10000 +
          (geckoRelease[1] || 0) * 100 +
          (geckoRelease[2] || 0) * 1;
      }
    }
    /**
     * 检测浏览器是否为chrome
     * @name baidu.editor.browser.chrome
     * @property    检测浏览器是否为chrome
     * @grammar     baidu.editor.browser.chrome
     * @return     {Boolean}    返回是否为chrome浏览器
     */
    if (/chrome\/(\d+\.\d)/i.test(agent)) {
      browser.chrome = +RegExp["\x241"];
    }
    /**
     * 检测浏览器是否为safari
     * @name baidu.editor.browser.safari
     * @property    检测浏览器是否为safari
     * @grammar     baidu.editor.browser.safari
     * @return     {Boolean}    返回是否为safari浏览器
     */
    if (
      /(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent) &&
      !/chrome/i.test(agent)
    ) {
      browser.safari = +(RegExp["\x241"] || RegExp["\x242"]);
    }

    // Opera 9.50+
    if (browser.opera) version = parseFloat(opera.version());

    // WebKit 522+ (Safari 3+)
    if (browser.webkit)
      version = parseFloat(agent.match(/ applewebkit\/(\d+)/)[1]);

    /**
     * 浏览器版本
     *
     * gecko内核浏览器的版本会转换成这样(如 1.9.0.2 -> 10900).
     *
     * webkit内核浏览器版本号使用其build号 (如 522).
     * @name baidu.editor.browser.version
     * @grammar     baidu.editor.browser.version
     * @return     {Boolean}    返回浏览器版本号
     * @example
     * if ( baidu.editor.browser.ie && <b>baidu.editor.browser.version</b> <= 6 )
     *     alert( "Ouch!" );
     */
    browser.version = version;

    /**
     * 是否是兼容模式的浏览器
     * @name baidu.editor.browser.isCompatible
     * @grammar     baidu.editor.browser.isCompatible
     * @return     {Boolean}    返回是否是兼容模式的浏览器
     * @example
     * if ( baidu.editor.browser.isCompatible )
     *     alert( "Your browser is pretty cool!" );
     */
    browser.isCompatible =
      !browser.mobile &&
      ((browser.ie && version >= 6) ||
        (browser.gecko && version >= 10801) ||
        (browser.opera && version >= 9.5) ||
        (browser.air && version >= 1) ||
        (browser.webkit && version >= 522) ||
        false);
    return browser;
  })());
  //快捷方式
  var ie = browser.ie,
    webkit = browser.webkit,
    gecko = browser.gecko,
    opera = browser.opera;
  /*****browser.js end**/

  /*****utils.js start***/
  /**
   * @import editor_all.js
   * @import core/utils.js
   * @class baidu.editor.utils     工具类
   * @lends baidu.editor.utils.prototype
   */
  var utils = (UE.utils = {
    each: function (obj, iterator, context) {
      if (obj == null) return;
      if (Array.prototype.forEach && obj.forEach === Array.prototype.forEach) {
        obj.forEach(iterator, context);
      } else if (obj.length === +obj.length) {
        for (var i = 0, l = obj.length; i < l; i++) {
          if (iterator.call(context, obj[i], i, obj) === false) return;
        }
      } else {
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (iterator.call(context, obj[key], key, obj) === false) return;
          }
        }
      }
    },

    /**
     * 以obj为原型创建实例
     * @public
     * @function
     * @param {Object} obj
     * @return {Object} 返回新的对象
     */
    makeInstance: function (obj) {
      var noop = new Function();
      noop.prototype = obj;
      obj = new noop();
      noop.prototype = null;
      return obj;
    },

    /**
     * 将s对象中的属性扩展到t对象上
     * @public
     * @function
     * @param {Object} t
     * @param {Object} s
     * @param {Boolean} b 是否保留已有属性
     * @returns {Object}  t 返回扩展了s对象属性的t
     */
    extend: function (t, s, b) {
      if (s) {
        for (var k in s) {
          if (!b || !t.hasOwnProperty(k)) {
            t[k] = s[k];
          }
        }
      }
      return t;
    },

    /**
     * subClass继承superClass
     * @public
     * @function
     * @param {Object} subClass       子类
     * @param {Object} superClass    超类
     * @return    {Object}    扩展后的新对象
     */
    inherits: function (subClass, superClass) {
      var oldP = subClass.prototype,
        newP = utils.makeInstance(superClass.prototype);
      utils.extend(newP, oldP, true);
      subClass.prototype = newP;
      return (newP.constructor = subClass);
    },

    /**
     * 为对象绑定函数
     * @public
     * @function
     * @param {Function} fn        函数
     * @param {Object} this_       对象
     * @return {Function}  绑定后的函数
     */
    bind: function (fn, this_) {
      return function () {
        return fn.apply(this_, arguments);
      };
    },

    /**
     * 创建延迟执行的函数
     * @public
     * @function
     * @param {Function} fn       要执行的函数
     * @param {Number} delay      延迟时间，单位为毫秒
     * @param {Boolean} exclusion 是否互斥执行，true则执行下一次defer时会先把前一次的延迟函数删除
     * @return {Function}    延迟执行的函数
     */
    defer: function (fn, delay, exclusion) {
      var timerID;
      return function () {
        if (exclusion) {
          clearTimeout(timerID);
        }
        timerID = setTimeout(fn, delay);
      };
    },

    /**
     * 判断是否为数组
     * @public
     * @function
     * @param {Object} array
     * @return {Boolean} true：为数组，false：不为数组
     */
    isArray: function (array) {
      return Object.prototype.toString.apply(array) === "[object Array]";
    },

    /**
     * 判断是否为字符串
     * @public
     * @function
     * @param {Object} str
     * @return {Boolean} true：为字符串。 false：不为字符串
     */
    isString: function (str) {
      return typeof str == "string" || str.constructor == String;
    },

    /**
     * 判断对象是否为空
     * @param {Object} obj
     * @return {Boolean} true 空，false 不空
     */
    isEmptyObject: function (obj) {
      for (var p in obj) {
        return false;
      }
      return true;
    },

    /**
     * 判断obj对象是否为方法
     * @name isFunction
     * @grammar UE.utils.isFunction(obj)  => true|false
     */
    isFunction: function (source) {
      // chrome下,'function' == typeof /a/ 为true.
      return "[object Function]" == Object.prototype.toString.call(source);
    },

    /**
     * 查找元素在数组中的索引, 若找不到返回-1
     * @public
     * @function
     * @param {Array} array     要查找的数组
     * @param {*} item          查找的元素
     * @param {Number} at       开始查找的位置
     * @returns {Number}        返回在数组中的索引
     */
    indexOf: function (array, item, at) {
      for (var i = at || 0, l = array.length; i < l; i++) {
        if (array[i] === item) {
          return i;
        }
      }
      return -1;
    },

    /**
     * 删除字符串首尾空格
     * @public
     * @function
     * @param {String} str        字符串
     * @return {String} str       删除空格后的字符串
     */
    trim: function (str) {
      return str.replace(/(^[ \t\n\r]+)|([ \t\n\r]+$)/g, "");
    },

    findNode: function (nodes, tagNames, fn) {
      for (var i = 0, ci; (ci = nodes[i++]); ) {
        if (
          fn ? fn(ci) : this.indexOf(tagNames, ci.tagName.toLowerCase()) != -1
        ) {
          return ci;
        }
      }
    },

    /**
     * 移除数组中的元素
     * @public
     * @function
     * @param {Array} array       要删除元素的数组
     * @param {*} item            要删除的元素
     */
    removeItem: function (array, item) {
      for (var i = 0, l = array.length; i < l; i++) {
        if (array[i] === item) {
          array.splice(i, 1);
          i--;
        }
      }
    },

    /**
     * 将字符串转换成hashmap
     * @public
     * @function
     * @param {String/Array} list       字符串，以‘，’隔开
     * @returns {Object}          转成hashmap的对象
     */
    listToMap: function (list) {
      if (!list) return {};
      list = utils.isArray(list) ? list : list.split(",");
      for (var i = 0, ci, obj = {}; (ci = list[i++]); ) {
        obj[ci.toUpperCase()] = obj[ci] = 1;
      }
      return obj;
    },

    /**
     * 将str中的html符号转义
     * @public
     * @function
     * @param {String} str      需要转义的字符串
     * @returns {String}        转义后的字符串
     */
    unhtml: function (str, reg) {
      return str
        ? str.replace(
            reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp|.?uml);)?/g,
            function (a, b) {
              if (b) {
                return a;
              } else {
                return {
                  "<": "&lt;",
                  "&": "&amp;",
                  '"': "&quot;",
                  ">": "&gt;",
                  "'": "&#39;"
                }[a];
              }
            }
          )
        : "";
    },

    /**
     * 将str中的转义字符还原成html字符
     * @name html
     * @grammar UE.utils.html(str)  => String   //详细参见<code><a href = '#unhtml'>unhtml</a></code>
     */
    html: function (str) {
      return str
        ? str.replace(/&((g|l|quo)t|amp|#39);/g, function (m) {
            return {
              "&lt;": "<",
              "&amp;": "&",
              "&quot;": '"',
              "&gt;": ">",
              "&#39;": "'"
            }[m];
          })
        : "";
    },
    encodeHtml: function (html) {
      return html && html.replace
        ? html
            .replace(/&/g, "&amp;")
            .replace(/ /g, "&nbsp;")
            .replace(/\b&nbsp;+/g, " ")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/\\/g, "&#92;")
            .replace(/\'/g, "&#39;")
            .replace(/\"/g, "&quot;")
            .replace(/\n/g, "<br/>")
            .replace(/\r/g, "")
        : html;
    },
    decodeHtml: function (html) {
      return html && html.replace
        ? html
            .replace(/&nbsp;/gi, " ")
            .replace(/&lt;/gi, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#92;/gi, "\\")
            .replace(/&#39;/gi, "'")
            .replace(/&quot;/gi, '"')
            .replace(/\<br\/\>/gi, "\n")
            .replace(/&amp;/gi, "&")
        : html;
    },
    /**
     * 将css样式转换为驼峰的形式。如font-size -> fontSize
     * @public
     * @function
     * @param {String} cssName      需要转换的样式
     * @returns {String}        转换后的样式
     */
    cssStyleToDomStyle: (function () {
      var test = document.createElement("div").style,
        cache = {
          float:
            test.cssFloat != undefined
              ? "cssFloat"
              : test.styleFloat != undefined
              ? "styleFloat"
              : "float"
        };

      return function (cssName) {
        return (
          cache[cssName] ||
          (cache[cssName] = cssName
            .toLowerCase()
            .replace(/-./g, function (match) {
              return match.charAt(1).toUpperCase();
            }))
        );
      };
    })(),

    /**
     * 加载css文件，执行回调函数
     * @public
     * @function
     * @param {document}   doc  document对象
     * @param {String}    path  文件路径
     * @param {Function}   fun  回调函数
     * @param {String}     id   元素id
     */
    loadFile: (function () {
      var tmpList = {};
      return function (doc, obj, fun) {
        var item = tmpList[obj.src || obj.href];
        if (item) {
          if (utils.isArray(item.funs)) {
            item.ready ? fun() : tmpList[obj.src || obj.href].funs.push(fun);
          }
          return;
        }
        tmpList[obj.src || obj.href] = fun ? { funs: [fun] } : 1;

        if (!doc.body) {
          doc.write('<script src="' + obj.src + '"></script>');
          return;
        }
        if (obj.id && doc.getElementById(obj.id)) {
          return;
        }
        var element = doc.createElement(obj.tag);
        delete obj.tag;
        for (var p in obj) {
          element.setAttribute(p, obj[p]);
        }
        element.onload = element.onreadystatechange = function () {
          if (!this.readyState || /loaded|complete/.test(this.readyState)) {
            item = tmpList[obj.src || obj.href];
            if (item.funs) {
              item.ready = 1;
              for (var fi; (fi = item.funs.pop()); ) {
                fi();
              }
            }
            element.onload = element.onreadystatechange = null;
          }
        };
        doc.getElementsByTagName("head")[0].appendChild(element);
      };
    })(),

    fixColor: function (name, value) {
      if (/color/i.test(name) && /rgba?/.test(value)) {
        var array = value.split(",");
        if (array.length > 3)
          if (/rgba/.test(value)) return value;
          else return "";
        value = "#";
        for (var i = 0, color; (color = array[i++]); ) {
          color = parseInt(color.replace(/[^\d]/gi, ""), 10).toString(16);
          value += color.length == 1 ? "0" + color : color;
        }
        value = value.toUpperCase();
      }
      return value;
    },

    /**
     * 只针对border,padding,margin做了处理，因为性能问题
     * @public
     * @function
     * @param {String}    val style字符串
     */
    optCss: function (val) {
      var padding, margin, border;
      val = val.replace(
        /(padding|margin|border)\-([^:]+):([^;]+);?/gi,
        function (str, key, name, val) {
          if (val.split(" ").length == 1) {
            switch (key) {
              case "padding":
                !padding && (padding = {});
                padding[name] = val;
                return "";
              case "margin":
                !margin && (margin = {});
                margin[name] = val;
                return "";
              case "border":
                return val == "initial" ? "" : str;
            }
          }
          return str;
        }
      );

      function opt(obj, name) {
        if (!obj) {
          return "";
        }
        var t = obj.top,
          b = obj.bottom,
          l = obj.left,
          r = obj.right,
          val = "";
        if (!t || !l || !b || !r) {
          for (var p in obj) {
            val += name + "-" + p + ":" + obj[p] + ";";
          }
        } else {
          val +=
            name +
            ":" +
            (t == b && b == l && l == r
              ? t
              : t == b && l == r
              ? t + " " + l
              : l == r
              ? t + " " + l + " " + b
              : t + " " + r + " " + b + " " + l) +
            ";";
        }
        return val;
      }
      val += opt(padding, "padding") + opt(margin, "margin");
      return val
        .replace(/^[ \n\r\t;]*|[ \n\r\t]*$/, "")
        .replace(/;([ \n\r\t]+)|\1;/g, ";")
        .replace(/(&((l|g)t|quot|#39))?;{2,}/g, function (a, b) {
          return b ? b + ";;" : ";";
        });
    },

    /**
     * 转换cm/pt到px
     * @name transUnitToPx
     * @grammar UE.utils.transUnitToPx('20pt') => '27px'
     * @grammar UE.utils.transUnitToPx('0pt') => '0'
     */
    transUnitToPx: function (val) {
      // if (!/(pt|cm)/.test(val)) {
      //     return val
      // }
      if (!/(pt)/.test(val)) {
        return val;
      }
      var unit;
      val.replace(/([\d.]+)(\w+)/, function (str, v, u) {
        val = v;
        unit = u;
      });
      switch (unit) {
        case "cm":
          // val = parseFloat(val) * 25;
          break;
        case "pt":
          val = Math.round((parseFloat(val) * 96) / 72);
      }

      return val + (val ? "px" : "");
    },

    cssRule: browser.ie
      ? function (key, style, doc) {
          var indexList, index;
          doc = doc || document;
          if (doc.indexList) {
            indexList = doc.indexList;
          } else {
            indexList = doc.indexList = {};
          }
          var sheetStyle;
          if (!indexList[key]) {
            if (style === undefined) {
              return "";
            }
            sheetStyle = doc.createStyleSheet(
              "",
              (index = doc.styleSheets.length)
            );
            indexList[key] = index;
          } else {
            sheetStyle = doc.styleSheets[indexList[key]];
          }
          if (style === undefined) {
            return sheetStyle.cssText;
          }
          sheetStyle.cssText = style || "";
        }
      : function (key, style, doc) {
          doc = doc || document;
          var head = doc.getElementsByTagName("head")[0],
            node;
          if (!(node = doc.getElementById(key))) {
            if (style === undefined) {
              return "";
            }
            node = doc.createElement("style");
            node.id = key;
            head.appendChild(node);
          }
          if (style === undefined) {
            return node.innerHTML;
          }
          if (style !== "") {
            node.innerHTML = style;
          } else {
            head.removeChild(node);
          }
        },

    /**
     * DOMContentLoaded 事件注册
     * @public
     * @function
     * @param {Function} 触发的事件
     */
    domReady: (function () {
      var isReady = false,
        fnArr = [];
      function doReady() {
        //确保onready只执行一次
        isReady = true;
        for (var ci; (ci = fnArr.pop()); ) {
          ci();
        }
      }
      return function (onready) {
        if (document.readyState === "complete") {
          return onready && setTimeout(onready, 1);
        }
        onready && fnArr.push(onready);
        isReady && doReady();
        $(window).load(doReady);
        /*
                if( browser.ie ){
                    (function(){
                        if ( isReady ) return;
                        try {
                            document.documentElement.doScroll("left");
                        } catch( error ) {
                            setTimeout( arguments.callee, 0 );
                            return;
                        }
                        doReady();
                    })();
                    window.attachEvent('onload',doReady);
                }else{
                    document.addEventListener( "DOMContentLoaded", function(){
                        document.removeEventListener( "DOMContentLoaded", arguments.callee, false );
                        doReady();
                    }, false );
                    window.addEventListener('load',doReady,false);
                }
                    */
      };
    })(),
    isNumberKey: function (e, iSminus) {
      //按下数字键则返回true,用法：<input type="text" onkeypress="javascript:return Fai.isNumberKey(event);"/>
      if ($.browser.msie) {
        if (iSminus && event.keyCode == 45) {
          return true;
        }
        if ((event.keyCode > 47 && event.keyCode < 58) || event.keyCode == 8) {
          return true;
        } else {
          return false;
        }
      } else {
        if (iSminus && e.which == 45) {
          return true;
        }
        if ((e.which > 47 && e.which < 58) || e.which == 8) {
          return true;
        } else {
          return false;
        }
      }
    }
  });
  // 重写utils中各种数据类型的判断方法
  utils.each(
    ["String", "Function", "Array", "Number", "RegExp", "Object"],
    function (v) {
      UE.utils["is" + v] = function (obj) {
        return Object.prototype.toString.apply(obj) == "[object " + v + "]";
      };
    }
  );
  utils.domReady();
  /*****utils.js end***/
  /*****EventBase.js  start***/
  /**
   * 事件基础类
   * @import editor.js
   * @import core/utils.js
   * @public
   * @class
   * @name baidu.editor.EventBase
   */

  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @unfile
   * @module UE
   */

  /**
   * UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。
   * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。
   * @unfile
   * @module UE
   * @class EventBase
   */

  /**
   * 通过此构造器，子类可以继承EventBase获取事件监听的方法
   * @constructor
   * @example
   * ```javascript
   * UE.EventBase.call(editor);
   * ```
   */
  var EventBase = (UE.EventBase = function () {});

  EventBase.prototype = {
    /**@lends baidu.editor.EventBase.prototype*/
    /**
     * 注册事件监听器
     * @public
     * @function
     * @param {String} types 事件名
     * @param {Function} listener 监听器数组
     */
    addListener: function (types, listener) {
      types = utils.trim(types).split(" ");
      for (var i = 0, ti; (ti = types[i++]); ) {
        getListener(this, ti, true).push(listener);
      }
    },

    /**
     * 移除事件监听器
     * @public
     * @function
     * @param {String} types 事件名
     * @param {Function} listener 监听器数组
     */
    removeListener: function (types, listener) {
      types = utils.trim(types).split(" ");
      for (var i = 0, ti; (ti = types[i++]); ) {
        utils.removeItem(getListener(this, ti) || [], listener);
      }
    },

    /**
     * 触发事件
     * @public
     * @function
     * @param {String} type 事件名
     *
     */
    fireEvent: function (types) {
      types = utils.trim(types).split(" ");
      for (var i = 0, ti; (ti = types[i++]); ) {
        var listeners = getListener(this, ti),
          r,
          t,
          k;

        if (listeners) {
          k = listeners.length;
          while (k--) {
            t = listeners[k].apply(this, arguments);
            /*if (ti == "keydown" || ti == "keyup") {
                            console.log(listeners[k]);
                        }*/
            if (t !== undefined) {
              r = t;
            }
          }
        }
        if ((t = this["on" + ti.toLowerCase()])) {
          r = t.apply(this, arguments);
        }
      }
      return r;
    }
  };

  /**
   * 获得对象所拥有监听类型的所有监听器
   * @public
   * @function
   * @param {Object} obj  查询监听器的对象
   * @param {String} type 事件类型
   * @param {Boolean} force  为true且当前所有type类型的侦听器不存在时，创建一个空监听器数组
   * @returns {Array} 监听器数组
   */
  function getListener(obj, type, force) {
    var allListeners;
    type = type.toLowerCase();
    return (
      (allListeners =
        obj.__allListeners || (force && (obj.__allListeners = {}))) &&
      (allListeners[type] || (force && (allListeners[type] = [])))
    );
  }
  /*****EventBase.js  end***/
  /***dtd.js start******/
  /**
   * dtd html语义化的体现类
   * @import editor.js
   * @import core/dom/dom.js
   * @constructor
   * @namespace dtd
   */
  var dtd = (dom.dtd = (function () {
    function _(s) {
      for (var k in s) {
        s[k.toUpperCase()] = s[k];
      }
      return s;
    }
    function X(t) {
      var a = arguments;
      for (var i = 1; i < a.length; i++) {
        var x = a[i];
        for (var k in x) {
          if (!t.hasOwnProperty(k)) {
            t[k] = x[k];
          }
        }
      }
      return t;
    }
    var A = _({ isindex: 1, fieldset: 1 }),
      B = _({ input: 1, button: 1, select: 1, textarea: 1, label: 1 }),
      C = X(_({ a: 1 }), B),
      D = X({ iframe: 1 }, C),
      E = _({
        hr: 1,
        ul: 1,
        menu: 1,
        div: 1,
        blockquote: 1,
        noscript: 1,
        table: 1,
        center: 1,
        address: 1,
        dir: 1,
        pre: 1,
        h5: 1,
        dl: 1,
        h4: 1,
        noframes: 1,
        h6: 1,
        ol: 1,
        h1: 1,
        h3: 1,
        h2: 1
      }),
      F = _({ ins: 1, del: 1, script: 1, style: 1 }),
      G = X(
        _({
          b: 1,
          acronym: 1,
          bdo: 1,
          var: 1,
          "#": 1,
          abbr: 1,
          code: 1,
          br: 1,
          i: 1,
          cite: 1,
          kbd: 1,
          u: 1,
          strike: 1,
          s: 1,
          tt: 1,
          strong: 1,
          q: 1,
          samp: 1,
          em: 1,
          dfn: 1,
          span: 1
        }),
        F
      ),
      H = X(
        _({
          sub: 1,
          img: 1,
          embed: 1,
          video: 1,
          object: 1,
          sup: 1,
          basefont: 1,
          map: 1,
          applet: 1,
          font: 1,
          big: 1,
          small: 1
        }),
        G
      ),
      I = X(_({ p: 1 }), H),
      J = X(_({ iframe: 1 }), H, B),
      K = _({
        img: 1,
        embed: 1,
        noscript: 1,
        br: 1,
        kbd: 1,
        center: 1,
        button: 1,
        basefont: 1,
        h5: 1,
        h4: 1,
        samp: 1,
        h6: 1,
        ol: 1,
        h1: 1,
        h3: 1,
        h2: 1,
        form: 1,
        font: 1,
        "#": 1,
        select: 1,
        menu: 1,
        ins: 1,
        abbr: 1,
        label: 1,
        code: 1,
        table: 1,
        script: 1,
        cite: 1,
        input: 1,
        iframe: 1,
        strong: 1,
        textarea: 1,
        noframes: 1,
        big: 1,
        small: 1,
        span: 1,
        hr: 1,
        sub: 1,
        bdo: 1,
        var: 1,
        div: 1,
        object: 1,
        sup: 1,
        strike: 1,
        dir: 1,
        map: 1,
        dl: 1,
        applet: 1,
        del: 1,
        isindex: 1,
        fieldset: 1,
        ul: 1,
        b: 1,
        acronym: 1,
        a: 1,
        blockquote: 1,
        i: 1,
        u: 1,
        s: 1,
        tt: 1,
        address: 1,
        q: 1,
        pre: 1,
        p: 1,
        em: 1,
        dfn: 1
      }),
      L = X(_({ a: 0 }), J), //a不能被切开，所以把他
      M = _({ tr: 1 }),
      N = _({ "#": 1 }),
      O = X(_({ param: 1 }), K),
      P = X(_({ form: 1 }), A, D, E, I),
      Q = _({ li: 1 }),
      R = _({ style: 1, script: 1 }),
      S = _({ base: 1, link: 1, meta: 1, title: 1 }),
      T = X(S, R),
      U = _({ head: 1, body: 1 }),
      V = _({ html: 1 });

    var block = _({
        address: 1,
        blockquote: 1,
        center: 1,
        dir: 1,
        div: 1,
        video: 1,
        dl: 1,
        fieldset: 1,
        form: 1,
        h1: 1,
        h2: 1,
        h3: 1,
        h4: 1,
        h5: 1,
        h6: 1,
        hr: 1,
        isindex: 1,
        menu: 1,
        noframes: 1,
        ol: 1,
        p: 1,
        pre: 1,
        table: 1,
        ul: 1
      }),
      //针对优酷的embed他添加了结束标识，导致粘贴进来会变成两个，暂时去掉 ,embed:1
      empty = _({
        area: 1,
        base: 1,
        br: 1,
        col: 1,
        hr: 1,
        img: 1,
        input: 1,
        link: 1,
        meta: 1,
        param: 1,
        embed: 1,
        source: 1
      });

    return _({
      // $ 表示自定的属性

      // body外的元素列表.
      $nonBodyContent: X(V, U, S),

      //块结构元素列表
      $block: block,

      //内联元素列表
      $inline: L,

      $body: X(_({ script: 1, style: 1 }), block),

      $cdata: _({ script: 1, style: 1 }),

      //自闭和元素
      $empty: empty,

      //不是自闭合，但不能让range选中里边
      $nonChild: _({ iframe: 1, textarea: 1 }),
      //列表元素列表
      $listItem: _({ dd: 1, dt: 1, li: 1 }),

      //列表根元素列表
      $list: _({ ul: 1, ol: 1, dl: 1 }),

      //不能认为是空的元素
      $isNotEmpty: _({
        table: 1,
        ul: 1,
        ol: 1,
        dl: 1,
        iframe: 1,
        area: 1,
        base: 1,
        col: 1,
        hr: 1,
        img: 1,
        source: 1,
        video: 1,
        embed: 1,
        input: 1,
        link: 1,
        meta: 1,
        param: 1
      }),

      //如果没有子节点就可以删除的元素列表，像span,a
      $removeEmpty: _({
        a: 1,
        abbr: 1,
        acronym: 1,
        address: 1,
        b: 1,
        bdo: 1,
        big: 1,
        cite: 1,
        code: 1,
        del: 1,
        dfn: 1,
        em: 1,
        font: 1,
        i: 1,
        ins: 1,
        label: 1,
        kbd: 1,
        q: 1,
        s: 1,
        samp: 1,
        small: 1,
        span: 1,
        strike: 1,
        strong: 1,
        sub: 1,
        sup: 1,
        tt: 1,
        u: 1,
        var: 1
      }),

      $removeEmptyBlock: _({ p: 1, div: 1 }),

      //在table元素里的元素列表
      $tableContent: _({
        caption: 1,
        col: 1,
        colgroup: 1,
        tbody: 1,
        td: 1,
        tfoot: 1,
        th: 1,
        thead: 1,
        tr: 1,
        table: 1
      }),
      //不转换的标签
      $notTransContent: _({ pre: 1, script: 1, style: 1, textarea: 1 }),
      html: U,
      head: T,
      style: N,
      script: N,
      body: P,
      base: {},
      link: {},
      meta: {},
      title: N,
      col: {},
      tr: _({ td: 1, th: 1 }),
      img: {},
      embed: {},
      colgroup: _({ thead: 1, col: 1, tbody: 1, tr: 1, tfoot: 1 }),
      noscript: P,
      td: P,
      br: {},
      th: P,
      center: P,
      kbd: L,
      button: X(I, E),
      basefont: {},
      h5: L,
      h4: L,
      samp: L,
      h6: L,
      ol: Q,
      h1: L,
      h3: L,
      option: N,
      h2: L,
      form: X(A, D, E, I),
      select: _({ optgroup: 1, option: 1 }),
      font: L,
      ins: L,
      menu: Q,
      abbr: L,
      label: L,
      table: _({
        thead: 1,
        col: 1,
        tbody: 1,
        tr: 1,
        colgroup: 1,
        caption: 1,
        tfoot: 1
      }),
      code: L,
      tfoot: M,
      cite: L,
      li: P,
      input: {},
      iframe: P,
      strong: L,
      textarea: N,
      noframes: P,
      big: L,
      small: L,
      span: _({ "#": 1, br: 1 }),
      hr: L,
      dt: L,
      sub: L,
      optgroup: _({ option: 1 }),
      param: {},
      bdo: L,
      var: L,
      div: P,
      object: O,
      sup: L,
      dd: P,
      strike: L,
      area: {},
      dir: Q,
      map: X(_({ area: 1, form: 1, p: 1 }), A, F, E),
      applet: O,
      dl: _({ dt: 1, dd: 1 }),
      del: L,
      isindex: {},
      fieldset: X(_({ legend: 1 }), K),
      thead: M,
      ul: Q,
      acronym: L,
      b: L,
      a: X(_({ a: 1 }), J),
      blockquote: X(_({ td: 1, tr: 1, tbody: 1, li: 1 }), P),
      caption: L,
      i: L,
      u: L,
      tbody: M,
      s: L,
      address: X(D, I),
      tt: L,
      legend: L,
      q: L,
      pre: X(G, C),
      p: X(_({ a: 1 }), L),
      em: L,
      dfn: L
    });
  })());
  /***dtd.js end******/
  /**filterword.js start**/
  /**
   * 根据传入html字符串过滤word
   * @module UE
   * @since 1.2.6.1
   * @method filterWord
   * @param { String } html html字符串
   * @return { String } 已过滤后的结果字符串
   * @example
   * ```javascript
   * UE.filterWord(html);
   * ```
   */
  var filterWord = (UE.filterWord = (function () {
    //是否是word过来的内容
    function isWordDocument(str) {
      return /(class="?Mso|style="[^"]*\bmso\-|w:WordDocument|<v:)/gi.test(str);
    }
    //去掉小数
    function transUnit(v) {
      v = v.replace(/[\d.]+\w+/g, function (m) {
        return utils.transUnitToPx(m);
      });
      return v;
    }

    function filterPasteWord(str) {
      return (
        str
          .replace(/[\t\r\n]+/g, "")
          .replace(/<!--[\s\S]*?-->/gi, "")
          //转换图片
          .replace(/<v:shape [^>]*>[\s\S]*?.<\/v:shape>/gi, function (str) {
            //opera能自己解析出image所这里直接返回空
            if (browser.opera) {
              return "";
            }
            try {
              var width = str.match(/width:([ \d.]*p[tx])/i)[1],
                height = str.match(/height:([ \d.]*p[tx])/i)[1],
                src = str.match(/src=\s*"([^"]*)"/i)[1];
              return (
                '<img width="' +
                transUnit(width) +
                '" height="' +
                transUnit(height) +
                '" src="' +
                src +
                '" />'
              );
            } catch (e) {
              return "";
            }
          })
          //针对wps添加的多余标签处理
          .replace(/<\/?div[^>]*>/g, "")
          //去掉多余的属性
          .replace(/v:\w+=(["']?)[^'"]+\1/g, "")
          .replace(
            /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|xml|meta|link|style|\w+:\w+)(?=[\s\/>]))[^>]*>/gi,
            ""
          )
          .replace(
            /<p [^>]*class="?MsoHeading"?[^>]*>(.*?)<\/p>/gi,
            "<p><strong>$1</strong></p>"
          )
          //去掉多余的属性
          .replace(
            /\s+(class|lang|align)\s*=\s*(['"]?)([\w-]+)\2/gi,
            function (str, name, marks, val) {
              //保留list的标示
              return name == "class" && val == "MsoListParagraph" ? str : "";
            }
          )
          //清除多余的font/span不能匹配&nbsp;有可能是空格
          .replace(/<(font|span)[^>]*>\s*<\/\1>/gi, "")
          //处理style的问题
          .replace(
            /(<[a-z][^>]*)\sstyle=(["'])([^\2]*?)\2/gi,
            function (str, tag, tmp, style) {
              var n = [],
                s = style
                  .replace(/^\s+|\s+$/, "")
                  .replace(/&#39;/g, "'")
                  .replace(/&quot;/gi, "'")
                  .split(/;\s*/g);

              for (var i = 0, v; (v = s[i]); i++) {
                var name,
                  value,
                  parts = v.split(":");

                if (parts.length == 2) {
                  name = parts[0].toLowerCase();
                  value = parts[1].toLowerCase();
                  if (
                    (/^(background)\w*/.test(name) &&
                      value.replace(/(initial|\s)/g, "").length == 0) ||
                    (/^(margin)\w*/.test(name) && /^0\w+$/.test(value))
                  ) {
                    continue;
                  }

                  switch (name) {
                    case "mso-padding-alt":
                    case "mso-padding-top-alt":
                    case "mso-padding-right-alt":
                    case "mso-padding-bottom-alt":
                    case "mso-padding-left-alt":
                    case "mso-margin-alt":
                    case "mso-margin-top-alt":
                    case "mso-margin-right-alt":
                    case "mso-margin-bottom-alt":
                    case "mso-margin-left-alt":
                    //ie下会出现挤到一起的情况
                    //case "mso-table-layout-alt":
                    case "mso-height":
                    case "mso-width":
                    case "mso-vertical-align-alt":
                      //trace:1819 ff下会解析出padding在table上
                      if (!/<table/.test(tag))
                        n[i] =
                          name.replace(/^mso-|-alt$/g, "") +
                          ":" +
                          transUnit(value);
                      continue;
                    case "horiz-align":
                      n[i] = "text-align:" + value;
                      continue;

                    case "vert-align":
                      n[i] = "vertical-align:" + value;
                      continue;

                    case "font-color":
                    case "mso-foreground":
                      n[i] = "color:" + value;
                      continue;

                    case "mso-background":
                    case "mso-highlight":
                      n[i] = "background:" + value;
                      continue;

                    case "mso-default-height":
                      n[i] = "min-height:" + transUnit(value);
                      continue;

                    case "mso-default-width":
                      n[i] = "min-width:" + transUnit(value);
                      continue;

                    case "mso-padding-between-alt":
                      n[i] =
                        "border-collapse:separate;border-spacing:" +
                        transUnit(value);
                      continue;

                    case "text-line-through":
                      if (value == "single" || value == "double") {
                        n[i] = "text-decoration:line-through";
                      }
                      continue;
                    case "mso-zero-height":
                      if (value == "yes") {
                        n[i] = "display:none";
                      }
                      continue;
                    case "background":
                      break;
                    case "margin":
                      if (!/[1-9]/.test(value)) {
                        continue;
                      }
                  }

                  if (
                    /^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test(
                      name
                    ) ||
                    (/text\-indent|padding|margin/.test(name) &&
                      /\-[\d.]+/.test(value))
                  ) {
                    continue;
                  }

                  n[i] = name + ":" + parts[1];
                }
              }
              return (
                tag +
                (n.length
                  ? ' style="' + n.join(";").replace(/;{2,}/g, ";") + '"'
                  : "")
              );
            }
          )
          .replace(/[\d.]+(cm|pt)/g, function (str) {
            return utils.transUnitToPx(str);
          })
      );
    }

    return function (html) {
      return isWordDocument(html) ? filterPasteWord(html) : html;
    };
  })());
  /**filterword.js end**/
  /**
   * html字符串转换成uNode节点
   * @file
   * @module UE
   * @since 1.2.6.1
   */

  /**
   * html字符串转换成uNode节点的静态方法
   * @method htmlparser
   * @param { String } htmlstr 要转换的html代码
   * @param { Boolean } ignoreBlank 若设置为true，转换的时候忽略\n\r\t等空白字符
   * @return { uNode } 给定的html片段转换形成的uNode对象
   * @example
   * ```javascript
   * var root = UE.htmlparser('<p><b>htmlparser</b></p>', true);
   * ```
   */
  var htmlparser = (UE.htmlparser = function (htmlstr, ignoreBlank) {
    var re_tag = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g,
      re_attr = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g;

    //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
    var allowEmptyTags = {
      b: 1,
      code: 1,
      i: 1,
      u: 1,
      strike: 1,
      s: 1,
      tt: 1,
      strong: 1,
      q: 1,
      samp: 1,
      em: 1,
      span: 1,
      sub: 1,
      img: 1,
      sup: 1,
      font: 1,
      big: 1,
      small: 1,
      iframe: 1,
      a: 1,
      br: 1,
      pre: 1
    };
    htmlstr = htmlstr.replace(new RegExp(domUtils.fillChar, "g"), "");
    if (!ignoreBlank) {
      htmlstr = htmlstr.replace(
        new RegExp(
          "[\\r\\t\\n" +
            (ignoreBlank ? "" : " ") +
            "]*</?(\\w+)\\s*(?:[^>]*)>[\\r\\t\\n" +
            (ignoreBlank ? "" : " ") +
            "]*",
          "g"
        ),
        function (a, b) {
          //br暂时单独处理
          if (b && allowEmptyTags[b.toLowerCase()]) {
            return a.replace(/(^[\n\r]+)|([\n\r]+$)/g, "");
          }
          return a
            .replace(
              new RegExp("^[\\r\\n" + (ignoreBlank ? "" : " ") + "]+"),
              ""
            )
            .replace(
              new RegExp("[\\r\\n" + (ignoreBlank ? "" : " ") + "]+$"),
              ""
            );
        }
      );
    }

    var uNode = UE.uNode,
      needParentNode = {
        td: "tr",
        tr: ["tbody", "thead", "tfoot"],
        tbody: "table",
        th: "tr",
        thead: "table",
        tfoot: "table",
        caption: "table",
        li: ["ul", "ol"],
        dt: "dl",
        dd: "dl",
        option: "select"
      },
      needChild = {
        ol: "li",
        ul: "li"
      };

    function text(parent, data) {
      if (needChild[parent.tagName]) {
        var tmpNode = uNode.createElement(needChild[parent.tagName]);
        parent.appendChild(tmpNode);
        tmpNode.appendChild(uNode.createText(data));
        parent = tmpNode;
      } else {
        parent.appendChild(uNode.createText(data));
      }
    }

    function element(parent, tagName, htmlattr) {
      var needParentTag;
      if ((needParentTag = needParentNode[tagName])) {
        var tmpParent = parent,
          hasParent;
        while (tmpParent.type != "root") {
          if (
            utils.isArray(needParentTag)
              ? utils.indexOf(needParentTag, tmpParent.tagName) != -1
              : needParentTag == tmpParent.tagName
          ) {
            parent = tmpParent;
            hasParent = true;
            break;
          }
          tmpParent = tmpParent.parentNode;
        }
        if (!hasParent) {
          parent = element(
            parent,
            utils.isArray(needParentTag) ? needParentTag[0] : needParentTag
          );
        }
      }
      //按dtd处理嵌套
      //if(parent.type != 'root' && !dtd[parent.tagName][tagName])
      //      parent = parent.parentNode;
      var elm = new uNode({
        parentNode: parent,
        type: "element",
        tagName: tagName.toLowerCase(),
        //是自闭合的处理一下
        children: dtd.$empty[tagName] ? null : []
      });
      //如果属性存在，处理属性
      if (htmlattr) {
        var attrs = {},
          match;
        while ((match = re_attr.exec(htmlattr))) {
          attrs[match[1].toLowerCase()] = utils.unhtml(
            match[2] || match[3] || match[4]
          );
        }
        elm.attrs = attrs;
      }

      parent.children.push(elm);
      //如果是自闭合节点返回父亲节点
      return dtd.$empty[tagName] ? parent : elm;
    }

    function comment(parent, data) {
      parent.children.push(
        new uNode({
          type: "comment",
          data: data,
          parentNode: parent
        })
      );
    }

    var match,
      currentIndex = 0,
      nextIndex = 0;
    //设置根节点
    var root = new uNode({
      type: "root",
      children: []
    });
    var currentParent = root;
    while ((match = re_tag.exec(htmlstr))) {
      currentIndex = match.index;
      try {
        if (currentIndex > nextIndex) {
          //text node
          text(currentParent, htmlstr.slice(nextIndex, currentIndex));
        }
        if (match[3]) {
          //start tag
          currentParent = element(
            currentParent,
            match[3].toLowerCase(),
            match[4]
          );
        } else if (match[1]) {
          if (currentParent.type != "root") {
            var tmpParent = currentParent;
            while (
              currentParent.type == "element" &&
              currentParent.tagName != match[1].toLowerCase()
            ) {
              currentParent = currentParent.parentNode;
              if (currentParent.type == "root") {
                currentParent = tmpParent;
                throw "break";
              }
            }
            //end tag
            currentParent = currentParent.parentNode;
          }
        } else if (match[2]) {
          //comment
          comment(currentParent, match[2]);
        }
      } catch (e) {}

      nextIndex = re_tag.lastIndex;
    }
    //如果结束是文本，就有可能丢掉，所以这里手动判断一下
    //例如 <li>sdfsdfsdf<li>sdfsdfsdfsdf
    if (nextIndex < htmlstr.length) {
      text(currentParent, htmlstr.slice(nextIndex));
    }
    return root;
  });
  /***uNode.js start**/
  /**
   * 编辑器模拟的节点类
   * @file
   * @module UE
   * @class uNode
   * @since 1.2.6.1
   */
  /**
   * 通过一个键值对，创建一个uNode对象
   * @constructor
   * @param { Object } attr 传入要创建的uNode的初始属性
   * @example
   * ```javascript
   * var node = new uNode({
   *     type:'element',
   *     tagName:'span',
   *     attrs:{style:'font-size:14px;'}
   * }
   * ```
   */
  /**
   * UEditor公用空间，UEditor所有的功能都挂载在该空间下
   * @unfile
   * @module UE
   */
  (function () {
    var uNode = (UE.uNode = function (obj) {
      this.type = obj.type;
      this.data = obj.data;
      this.tagName = obj.tagName;
      this.parentNode = obj.parentNode;
      this.attrs = obj.attrs || {};
      this.children = obj.children;
    });

    var notTransAttrs = {
      href: 1,
      src: 1,
      _src: 1,
      _href: 1,
      cdata_data: 1
    };

    var notTransTagName = {
      style: 1,
      script: 1
    };

    var indentChar = "    ",
      breakChar = "\n";

    function insertLine(arr, current, begin) {
      arr.push(breakChar);
      return current + (begin ? 1 : -1);
    }

    function insertIndent(arr, current) {
      //插入缩进
      for (var i = 0; i < current; i++) {
        arr.push(indentChar);
      }
    }

    //创建uNode的静态方法
    //支持标签和html
    uNode.createElement = function (html) {
      if (/[<>]/.test(html)) {
        return UE.htmlparser(html).children[0];
      } else {
        return new uNode({
          type: "element",
          children: [],
          tagName: html
        });
      }
    };
    uNode.createText = function (data, noTrans) {
      return new UE.uNode({
        type: "text",
        data: noTrans ? data : utils.unhtml(data || "")
      });
    };
    function nodeToHtml(node, arr, formatter, current) {
      switch (node.type) {
        case "root":
          for (var i = 0, ci; (ci = node.children[i++]); ) {
            //插入新行
            if (
              formatter &&
              ci.type == "element" &&
              !dtd.$inlineWithA[ci.tagName] &&
              i > 1
            ) {
              insertLine(arr, current, true);
              insertIndent(arr, current);
            }
            nodeToHtml(ci, arr, formatter, current);
          }
          break;
        case "text":
          isText(node, arr);
          break;
        case "element":
          isElement(node, arr, formatter, current);
          break;
        case "comment":
          isComment(node, arr, formatter);
      }
      return arr;
    }

    function isText(node, arr) {
      if (node.parentNode.tagName == "pre") {
        //源码模式下输入html标签，不能做转换处理，直接输出
        arr.push(node.data);
      } else {
        arr.push(
          notTransTagName[node.parentNode.tagName]
            ? utils.html(node.data)
            : node.data.replace(/[ ]{2}/g, " &nbsp;")
        );
      }
    }

    function isElement(node, arr, formatter, current) {
      var attrhtml = "";
      if (node.attrs) {
        attrhtml = [];
        var attrs = node.attrs;
        for (var a in attrs) {
          //这里就针对
          //<p>'<img src='http://nsclick.baidu.com/u.gif?&asdf=\"sdf&asdfasdfs;asdf'></p>
          //这里边的\"做转换，要不用innerHTML直接被截断了，属性src
          //有可能做的不够
          attrhtml.push(
            a +
              (attrs[a] !== undefined
                ? '="' +
                  (notTransAttrs[a]
                    ? utils.html(attrs[a]).replace(/["]/g, function (a) {
                        return "&quot;";
                      })
                    : utils.unhtml(attrs[a])) +
                  '"'
                : "")
          );
        }
        attrhtml = attrhtml.join(" ");
      }
      arr.push(
        "<" +
          node.tagName +
          (attrhtml ? " " + attrhtml : "") +
          (dtd.$empty[node.tagName] ? "/" : "") +
          ">"
      );
      //插入新行
      if (
        formatter &&
        !dtd.$inlineWithA[node.tagName] &&
        node.tagName != "pre"
      ) {
        if (node.children && node.children.length) {
          current = insertLine(arr, current, true);
          insertIndent(arr, current);
        }
      }
      if (node.children && node.children.length) {
        for (var i = 0, ci; (ci = node.children[i++]); ) {
          if (
            formatter &&
            ci.type == "element" &&
            !dtd.$inlineWithA[ci.tagName] &&
            i > 1
          ) {
            insertLine(arr, current);
            insertIndent(arr, current);
          }
          nodeToHtml(ci, arr, formatter, current);
        }
      }
      if (!dtd.$empty[node.tagName]) {
        if (
          formatter &&
          !dtd.$inlineWithA[node.tagName] &&
          node.tagName != "pre"
        ) {
          if (node.children && node.children.length) {
            current = insertLine(arr, current);
            insertIndent(arr, current);
          }
        }
        arr.push("</" + node.tagName + ">");
      }
    }

    function isComment(node, arr) {
      arr.push("<!--" + node.data + "-->");
    }

    function getNodeById(root, id) {
      var node;
      if (root.type == "element" && root.getAttr("id") == id) {
        return root;
      }
      if (root.children && root.children.length) {
        for (var i = 0, ci; (ci = root.children[i++]); ) {
          if ((node = getNodeById(ci, id))) {
            return node;
          }
        }
      }
    }

    function getNodesByTagName(node, tagName, arr) {
      if (node.type == "element" && node.tagName == tagName) {
        arr.push(node);
      }
      if (node.children && node.children.length) {
        for (var i = 0, ci; (ci = node.children[i++]); ) {
          getNodesByTagName(ci, tagName, arr);
        }
      }
    }
    function nodeTraversal(root, fn) {
      if (root.children && root.children.length) {
        for (var i = 0, ci; (ci = root.children[i]); ) {
          nodeTraversal(ci, fn);
          //ci被替换的情况，这里就不再走 fn了
          if (ci.parentNode) {
            if (ci.children && ci.children.length) {
              fn(ci);
            }
            if (ci.parentNode) i++;
          }
        }
      } else {
        fn(root);
      }
    }
    uNode.prototype = {
      /**
       * 当前节点对象，转换成html文本
       * @method toHtml
       * @return { String } 返回转换后的html字符串
       * @example
       * ```javascript
       * node.toHtml();
       * ```
       */

      /**
       * 当前节点对象，转换成html文本
       * @method toHtml
       * @param { Boolean } formatter 是否格式化返回值
       * @return { String } 返回转换后的html字符串
       * @example
       * ```javascript
       * node.toHtml( true );
       * ```
       */
      toHtml: function (formatter) {
        var arr = [];
        nodeToHtml(this, arr, formatter, 0);
        return arr.join("");
      },

      /**
       * 获取节点的html内容
       * @method innerHTML
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @return { String } 返回节点的html内容
       * @example
       * ```javascript
       * var htmlstr = node.innerHTML();
       * ```
       */

      /**
       * 设置节点的html内容
       * @method innerHTML
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @param { String } htmlstr 传入要设置的html内容
       * @return { UE.uNode } 返回节点本身
       * @example
       * ```javascript
       * node.innerHTML('<span>text</span>');
       * ```
       */
      innerHTML: function (htmlstr) {
        if (this.type != "element" || dtd.$empty[this.tagName]) {
          return this;
        }
        if (utils.isString(htmlstr)) {
          if (this.children) {
            for (var i = 0, ci; (ci = this.children[i++]); ) {
              ci.parentNode = null;
            }
          }
          this.children = [];
          var tmpRoot = UE.htmlparser(htmlstr);
          for (var i = 0, ci; (ci = tmpRoot.children[i++]); ) {
            this.children.push(ci);
            ci.parentNode = this;
          }
          return this;
        } else {
          var tmpRoot = new UE.uNode({
            type: "root",
            children: this.children
          });
          return tmpRoot.toHtml();
        }
      },

      /**
       * 获取节点的纯文本内容
       * @method innerText
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @return { String } 返回节点的存文本内容
       * @example
       * ```javascript
       * var textStr = node.innerText();
       * ```
       */

      /**
       * 设置节点的纯文本内容
       * @method innerText
       * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
       * @param { String } textStr 传入要设置的文本内容
       * @return { UE.uNode } 返回节点本身
       * @example
       * ```javascript
       * node.innerText('<span>text</span>');
       * ```
       */
      innerText: function (textStr, noTrans) {
        if (this.type != "element" || dtd.$empty[this.tagName]) {
          return this;
        }
        if (textStr) {
          if (this.children) {
            for (var i = 0, ci; (ci = this.children[i++]); ) {
              ci.parentNode = null;
            }
          }
          this.children = [];
          this.appendChild(uNode.createText(textStr, noTrans));
          return this;
        } else {
          return this.toHtml().replace(/<[^>]+>/g, "");
        }
      },

      /**
       * 获取当前对象的data属性
       * @method getData
       * @return { Object } 若节点的type值是elemenet，返回空字符串，否则返回节点的data属性
       * @example
       * ```javascript
       * node.getData();
       * ```
       */
      getData: function () {
        if (this.type == "element") return "";
        return this.data;
      },

      /**
       * 获取当前节点下的第一个子节点
       * @method firstChild
       * @return { UE.uNode } 返回第一个子节点
       * @example
       * ```javascript
       * node.firstChild(); //返回第一个子节点
       * ```
       */
      firstChild: function () {
        //if (this.type != 'element' || dtd.$empty[this.tagName]) {
        //    return this;
        //}
        return this.children ? this.children[0] : null;
      },

      /**
       * 获取当前节点下的最后一个子节点
       * @method lastChild
       * @return { UE.uNode } 返回最后一个子节点
       * @example
       * ```javascript
       * node.lastChild(); //返回最后一个子节点
       * ```
       */
      lastChild: function () {
        //if (this.type != 'element' || dtd.$empty[this.tagName] ) {
        //    return this;
        //}
        return this.children ? this.children[this.children.length - 1] : null;
      },

      /**
       * 获取和当前节点有相同父亲节点的前一个节点
       * @method previousSibling
       * @return { UE.uNode } 返回前一个节点
       * @example
       * ```javascript
       * node.children[2].previousSibling(); //返回子节点node.children[1]
       * ```
       */
      previousSibling: function () {
        var parent = this.parentNode;
        for (var i = 0, ci; (ci = parent.children[i]); i++) {
          if (ci === this) {
            return i == 0 ? null : parent.children[i - 1];
          }
        }
      },

      /**
       * 获取和当前节点有相同父亲节点的后一个节点
       * @method nextSibling
       * @return { UE.uNode } 返回后一个节点,找不到返回null
       * @example
       * ```javascript
       * node.children[2].nextSibling(); //如果有，返回子节点node.children[3]
       * ```
       */
      nextSibling: function () {
        var parent = this.parentNode;
        for (var i = 0, ci; (ci = parent.children[i++]); ) {
          if (ci === this) {
            return parent.children[i];
          }
        }
      },

      /**
       * 用新的节点替换当前节点
       * @method replaceChild
       * @param { UE.uNode } target 要替换成该节点参数
       * @param { UE.uNode } source 要被替换掉的节点
       * @return { UE.uNode } 返回替换之后的节点对象
       * @example
       * ```javascript
       * node.replaceChild(newNode, childNode); //用newNode替换childNode,childNode是node的子节点
       * ```
       */
      replaceChild: function (target, source) {
        if (this.children) {
          if (target.parentNode) {
            target.parentNode.removeChild(target);
          }
          for (var i = 0, ci; (ci = this.children[i]); i++) {
            if (ci === source) {
              this.children.splice(i, 1, target);
              source.parentNode = null;
              target.parentNode = this;
              return target;
            }
          }
        }
      },

      /**
       * 在节点的子节点列表最后位置插入一个节点
       * @method appendChild
       * @param { UE.uNode } node 要插入的节点
       * @return { UE.uNode } 返回刚插入的子节点
       * @example
       * ```javascript
       * node.appendChild( newNode ); //在node内插入子节点newNode
       * ```
       */
      appendChild: function (node) {
        if (
          this.type == "root" ||
          (this.type == "element" && !dtd.$empty[this.tagName])
        ) {
          if (!this.children) {
            this.children = [];
          }
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
          for (var i = 0, ci; (ci = this.children[i]); i++) {
            if (ci === node) {
              this.children.splice(i, 1);
              break;
            }
          }
          this.children.push(node);
          node.parentNode = this;
          return node;
        }
      },

      /**
       * 在传入节点的前面插入一个节点
       * @method insertBefore
       * @param { UE.uNode } target 要插入的节点
       * @param { UE.uNode } source 在该参数节点前面插入
       * @return { UE.uNode } 返回刚插入的子节点
       * @example
       * ```javascript
       * node.parentNode.insertBefore(newNode, node); //在node节点后面插入newNode
       * ```
       */
      insertBefore: function (target, source) {
        if (this.children) {
          if (target.parentNode) {
            target.parentNode.removeChild(target);
          }
          for (var i = 0, ci; (ci = this.children[i]); i++) {
            if (ci === source) {
              this.children.splice(i, 0, target);
              target.parentNode = this;
              return target;
            }
          }
        }
      },

      /**
       * 在传入节点的后面插入一个节点
       * @method insertAfter
       * @param { UE.uNode } target 要插入的节点
       * @param { UE.uNode } source 在该参数节点后面插入
       * @return { UE.uNode } 返回刚插入的子节点
       * @example
       * ```javascript
       * node.parentNode.insertAfter(newNode, node); //在node节点后面插入newNode
       * ```
       */
      insertAfter: function (target, source) {
        if (this.children) {
          if (target.parentNode) {
            target.parentNode.removeChild(target);
          }
          for (var i = 0, ci; (ci = this.children[i]); i++) {
            if (ci === source) {
              this.children.splice(i + 1, 0, target);
              target.parentNode = this;
              return target;
            }
          }
        }
      },

      /**
       * 从当前节点的子节点列表中，移除节点
       * @method removeChild
       * @param { UE.uNode } node 要移除的节点引用
       * @param { Boolean } keepChildren 是否保留移除节点的子节点，若传入true，自动把移除节点的子节点插入到移除的位置
       * @return { * } 返回刚移除的子节点
       * @example
       * ```javascript
       * node.removeChild(childNode,true); //在node的子节点列表中移除child节点，并且吧child的子节点插入到移除的位置
       * ```
       */
      removeChild: function (node, keepChildren) {
        if (this.children) {
          for (var i = 0, ci; (ci = this.children[i]); i++) {
            if (ci === node) {
              this.children.splice(i, 1);
              ci.parentNode = null;
              if (keepChildren && ci.children && ci.children.length) {
                for (var j = 0, cj; (cj = ci.children[j]); j++) {
                  this.children.splice(i + j, 0, cj);
                  cj.parentNode = this;
                }
              }
              return ci;
            }
          }
        }
      },

      /**
       * 获取当前节点所代表的元素属性，即获取attrs对象下的属性值
       * @method getAttr
       * @param { String } attrName 要获取的属性名称
       * @return { * } 返回attrs对象下的属性值
       * @example
       * ```javascript
       * node.getAttr('title');
       * ```
       */
      getAttr: function (attrName) {
        return this.attrs && this.attrs[attrName.toLowerCase()];
      },

      /**
       * 设置当前节点所代表的元素属性，即设置attrs对象下的属性值
       * @method setAttr
       * @param { String } attrName 要设置的属性名称
       * @param { * } attrVal 要设置的属性值，类型视设置的属性而定
       * @return { * } 返回attrs对象下的属性值
       * @example
       * ```javascript
       * node.setAttr('title','标题');
       * ```
       */
      setAttr: function (attrName, attrVal) {
        if (!attrName) {
          delete this.attrs;
          return;
        }
        if (!this.attrs) {
          this.attrs = {};
        }
        if (utils.isObject(attrName)) {
          for (var a in attrName) {
            if (!attrName[a]) {
              delete this.attrs[a];
            } else {
              this.attrs[a.toLowerCase()] = attrName[a];
            }
          }
        } else {
          if (!attrVal) {
            delete this.attrs[attrName];
          } else {
            this.attrs[attrName.toLowerCase()] = attrVal;
          }
        }
      },

      /**
       * 获取当前节点在父节点下的位置索引
       * @method getIndex
       * @return { Number } 返回索引数值，如果没有父节点，返回-1
       * @example
       * ```javascript
       * node.getIndex();
       * ```
       */
      getIndex: function () {
        var parent = this.parentNode;
        for (var i = 0, ci; (ci = parent.children[i]); i++) {
          if (ci === this) {
            return i;
          }
        }
        return -1;
      },

      /**
       * 在当前节点下，根据id查找节点
       * @method getNodeById
       * @param { String } id 要查找的id
       * @return { UE.uNode } 返回找到的节点
       * @example
       * ```javascript
       * node.getNodeById('textId');
       * ```
       */
      getNodeById: function (id) {
        var node;
        if (this.children && this.children.length) {
          for (var i = 0, ci; (ci = this.children[i++]); ) {
            if ((node = getNodeById(ci, id))) {
              return node;
            }
          }
        }
      },

      /**
       * 在当前节点下，根据元素名称查找节点列表
       * @method getNodesByTagName
       * @param { String } tagNames 要查找的元素名称
       * @return { Array } 返回找到的节点列表
       * @example
       * ```javascript
       * node.getNodesByTagName('span');
       * ```
       */
      getNodesByTagName: function (tagNames) {
        tagNames = utils
          .trim(tagNames)
          .replace(/[ ]{2,}/g, " ")
          .split(" ");
        var arr = [],
          me = this;
        utils.each(tagNames, function (tagName) {
          if (me.children && me.children.length) {
            for (var i = 0, ci; (ci = me.children[i++]); ) {
              getNodesByTagName(ci, tagName, arr);
            }
          }
        });
        return arr;
      },

      /**
       * 根据样式名称，获取节点的样式值
       * @method getStyle
       * @param { String } name 要获取的样式名称
       * @return { String } 返回样式值
       * @example
       * ```javascript
       * node.getStyle('font-size');
       * ```
       */
      getStyle: function (name) {
        var cssStyle = this.getAttr("style");
        if (!cssStyle) {
          return "";
        }
        var reg = new RegExp("(^|;)\\s*" + name + ":([^;]+)", "i");
        var match = cssStyle.match(reg);
        if (match && match[0]) {
          return match[2];
        }
        return "";
      },

      /**
       * 给节点设置样式
       * @method setStyle
       * @param { String } name 要设置的的样式名称
       * @param { String } val 要设置的的样值
       * @example
       * ```javascript
       * node.setStyle('font-size', '12px');
       * ```
       */
      setStyle: function (name, val) {
        function exec(name, val) {
          var reg = new RegExp("(^|;)\\s*" + name + ":([^;]+;?)", "gi");
          cssStyle = cssStyle.replace(reg, "$1");
          if (val) {
            cssStyle = name + ":" + utils.unhtml(val) + ";" + cssStyle;
          }
        }

        var cssStyle = this.getAttr("style");
        if (!cssStyle) {
          cssStyle = "";
        }
        if (utils.isObject(name)) {
          for (var a in name) {
            exec(a, name[a]);
          }
        } else {
          exec(name, val);
        }
        this.setAttr("style", utils.trim(cssStyle));
      },

      /**
       * 传入一个函数，递归遍历当前节点下的所有节点
       * @method traversal
       * @param { Function } fn 遍历到节点的时，传入节点作为参数，运行此函数
       * @example
       * ```javascript
       * traversal(node, function(){
       *     console.log(node.type);
       * });
       * ```
       */
      traversal: function (fn) {
        if (this.children && this.children.length) {
          nodeTraversal(this, fn);
        }
        return this;
      }
    };
  })();
  /***uNode.js end**/
  /**domUtils.js start***/
  /**
   * Dom操作工具包
   * @file
   * @module UE.dom.domUtils
   * @since 1.2.6.1
   */

  /**
   * Dom操作工具包
   * @unfile
   * @module UE.dom.domUtils
   */
  function getDomNode(node, start, ltr, startFromChild, fn, guard) {
    var tmpNode = startFromChild && node[start],
      parent;
    !tmpNode && (tmpNode = node[ltr]);
    while (!tmpNode && (parent = (parent || node).parentNode)) {
      if (parent.tagName == "BODY" || (guard && !guard(parent))) {
        return null;
      }
      tmpNode = parent[ltr];
    }
    if (tmpNode && fn && !fn(tmpNode)) {
      return getDomNode(tmpNode, start, ltr, false, fn);
    }
    return tmpNode;
  }

  var attrFix =
      ie && browser.version < 9
        ? {
            tabindex: "tabIndex",
            readonly: "readOnly",
            for: "htmlFor",
            class: "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder"
          }
        : {
            tabindex: "tabIndex",
            readonly: "readOnly"
          },
    styleBlock = utils.listToMap([
      "-webkit-box",
      "-moz-box",
      "block",
      "list-item",
      "table",
      "table-row-group",
      "table-header-group",
      "table-footer-group",
      "table-row",
      "table-column-group",
      "table-column",
      "table-cell",
      "table-caption"
    ]);

  var domUtils = (dom.domUtils = {
    //节点常量
    NODE_ELEMENT: 1,
    NODE_DOCUMENT: 9,
    NODE_TEXT: 3,
    NODE_COMMENT: 8,
    NODE_DOCUMENT_FRAGMENT: 11,

    //位置关系
    POSITION_IDENTICAL: 0,
    POSITION_DISCONNECTED: 1,
    POSITION_FOLLOWING: 2,
    POSITION_PRECEDING: 4,
    POSITION_IS_CONTAINED: 8,
    POSITION_CONTAINS: 16,
    //ie6使用其他的会有一段空白出现
    fillChar: ie && browser.version == "6" ? "\ufeff" : "\u200B",
    //-------------------------Node部分--------------------------------
    keys: {
      /*Backspace*/ 8: 1,
      /*Delete*/ 46: 1,
      /*Shift*/ 16: 1,
      /*Ctrl*/ 17: 1,
      /*Alt*/ 18: 1,
      37: 1,
      38: 1,
      39: 1,
      40: 1,
      13: 1 /*enter*/
    },
    /**
     * 获取两个节点的位置关系
     * @function
     * @param {Node} nodeA     节点A
     * @param {Node} nodeB     节点B
     * @returns {Number}       返回位置关系
     */
    getPosition: function (nodeA, nodeB) {
      // 如果两个节点是同一个节点
      if (nodeA === nodeB) {
        // domUtils.POSITION_IDENTICAL
        return 0;
      }
      var node,
        parentsA = [nodeA],
        parentsB = [nodeB];
      node = nodeA;
      while ((node = node.parentNode)) {
        // 如果nodeB是nodeA的祖先节点
        if (node === nodeB) {
          // domUtils.POSITION_IS_CONTAINED + domUtils.POSITION_FOLLOWING
          return 10;
        }
        parentsA.push(node);
      }
      node = nodeB;
      while ((node = node.parentNode)) {
        // 如果nodeA是nodeB的祖先节点
        if (node === nodeA) {
          // domUtils.POSITION_CONTAINS + domUtils.POSITION_PRECEDING
          return 20;
        }
        parentsB.push(node);
      }
      parentsA.reverse();
      parentsB.reverse();
      if (parentsA[0] !== parentsB[0]) {
        // domUtils.POSITION_DISCONNECTED
        return 1;
      }
      var i = -1;
      while ((i++, parentsA[i] === parentsB[i])) {}
      nodeA = parentsA[i];
      nodeB = parentsB[i];
      while ((nodeA = nodeA.nextSibling)) {
        if (nodeA === nodeB) {
          // domUtils.POSITION_PRECEDING
          return 4;
        }
      }
      // domUtils.POSITION_FOLLOWING
      return 2;
    },

    /**
     * 返回节点索引，zero-based
     * @function
     * @param {Node} node     节点
     * @returns {Number}    节点的索引
     */
    getNodeIndex: function (node, normalized) {
      var preNode = node,
        i = 0;
      while ((preNode = preNode.previousSibling)) {
        if (normalized && preNode.nodeType == 3) {
          continue;
        }
        i++;
      }
      return i;
    },

    /**
     * 判断节点是否在树上
     * @param node
     */
    inDoc: function (node, doc) {
      while ((node = node.parentNode)) {
        if (node === doc) {
          return true;
        }
      }
      return false;
    },

    /**
     * 查找祖先节点
     * @function
     * @param {Node}     node        节点
     * @param {Function} tester      以函数为规律
     * @param {Boolean} includeSelf 包含自己
     * @returns {Node}      返回祖先节点
     */
    findParent: function (node, tester, includeSelf) {
      if (!domUtils.isBody(node)) {
        node = includeSelf ? node : node.parentNode;
        while (node) {
          if (!tester || tester(node) || this.isBody(node)) {
            return tester && !tester(node) && this.isBody(node) ? null : node;
          }
          node = node.parentNode;
        }
      }
      return null;
    },
    /**
     * 查找祖先节点
     * @function
     * @param {Node}     node        节点
     * @param {String}   tagName      标签名称
     * @param {Boolean} includeSelf 包含自己
     * @returns {Node}      返回祖先节点
     */
    findParentByTagName: function (node, tagName, includeSelf, excludeFn) {
      if (
        node &&
        node.nodeType &&
        !this.isBody(node) &&
        (node.nodeType == 1 || node.nodeType)
      ) {
        tagName = utils.listToMap(utils.isArray(tagName) ? tagName : [tagName]);
        node = node.nodeType == 3 || !includeSelf ? node.parentNode : node;
        while (node && node.tagName && node.nodeType != 9) {
          if (excludeFn && excludeFn(node)) {
            break;
          }
          if (tagName[node.tagName]) return node;
          node = node.parentNode;
        }
      }

      return null;
    },
    /**
     * 查找祖先节点集合
     * @param {Node} node               节点
     * @param {Function} tester         函数
     * @param {Boolean} includeSelf     是否从自身开始找
     * @param {Boolean} closerFirst
     * @returns {Array}     祖先节点集合
     */
    findParents: function (node, includeSelf, tester, closerFirst) {
      var parents =
        includeSelf && ((tester && tester(node)) || !tester) ? [node] : [];
      while ((node = domUtils.findParent(node, tester))) {
        parents.push(node);
      }
      return closerFirst ? parents : parents.reverse();
    },

    /**
     * 往后插入节点
     * @function
     * @param  {Node}     node            基准节点
     * @param  {Node}     nodeToInsert    要插入的节点
     * @return {Node}     返回node
     */
    insertAfter: function (node, nodeToInsert) {
      return node.parentNode.insertBefore(nodeToInsert, node.nextSibling);
    },

    /**
     * 删除该节点
     * @function
     * @param {Node} node            要删除的节点
     * @param {Boolean} keepChildren 是否保留子节点不删除
     * @return {Node} 返回要删除的节点
     */
    remove: function (node, keepChildren) {
      var parent = node.parentNode,
        child;
      if (parent) {
        if (keepChildren && node.hasChildNodes()) {
          while ((child = node.firstChild)) {
            parent.insertBefore(child, node);
          }
        }
        parent.removeChild(node);
      }
      return node;
    },

    /**
     * 取得node节点在dom树上的下一个节点
     * @function
     * @param {Node} node       节点
     * @param {Boolean} startFromChild 为true从子节点开始找
     * @param {Function} fn fn为真的节点
     * @return {Node}    返回下一个节点
     */
    getNextDomNode: function (node, startFromChild, filter, guard) {
      return getDomNode(
        node,
        "firstChild",
        "nextSibling",
        startFromChild,
        filter,
        guard
      );
    },
    /**
     * 是bookmark节点
     * @param {Node} node        判断是否为书签节点
     * @return {Boolean}        返回是否为书签节点
     */
    isBookmarkNode: function (node) {
      return (
        node.nodeType == 1 && node.id && /^_baidu_bookmark_/i.test(node.id)
      );
    },
    /**
     * 获取节点所在window对象
     * @param {Node} node     节点
     * @return {window}    返回window对象
     */
    getWindow: function (node) {
      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    /**
     * 得到公共的祖先节点
     * @param   {Node}     nodeA      节点A
     * @param   {Node}     nodeB      节点B
     * @return {Node} nodeA和nodeB的公共节点
     */
    getCommonAncestor: function (nodeA, nodeB) {
      if (nodeA === nodeB) return nodeA;
      var parentsA = [nodeA],
        parentsB = [nodeB],
        parent = nodeA,
        i = -1;
      while ((parent = parent.parentNode)) {
        if (parent === nodeB) {
          return parent;
        }
        parentsA.push(parent);
      }
      parent = nodeB;
      while ((parent = parent.parentNode)) {
        if (parent === nodeA) return parent;
        parentsB.push(parent);
      }
      parentsA.reverse();
      parentsB.reverse();
      while ((i++, parentsA[i] === parentsB[i])) {}
      return i == 0 ? null : parentsA[i - 1];
    },
    /**
     * 清除该节点左右空的inline节点
     * @function
     * @param {Node}     node
     * @param {Boolean} ingoreNext   默认为false清除右边为空的inline节点。true为不清除右边为空的inline节点
     * @param {Boolean} ingorePre    默认为false清除左边为空的inline节点。true为不清除左边为空的inline节点
     * @exmaple <b></b><i></i>xxxx<b>bb</b> --> xxxx<b>bb</b>
     */
    clearEmptySibling: function (node, ingoreNext, ingorePre) {
      function clear(next, dir) {
        var tmpNode;
        while (
          next &&
          !domUtils.isBookmarkNode(next) &&
          (domUtils.isEmptyInlineElement(next) ||
            //这里不能把空格算进来会吧空格干掉，出现文字间的空格丢掉了
            !new RegExp("[^\t\n\r" + domUtils.fillChar + "]").test(
              next.nodeValue
            ))
        ) {
          tmpNode = next[dir];
          domUtils.remove(next);
          next = tmpNode;
        }
      }

      !ingoreNext && clear(node.nextSibling, "nextSibling");
      !ingorePre && clear(node.previousSibling, "previousSibling");
    },
    //---------------------------Text----------------------------------
    /**
     * 将一个文本节点拆分成两个文本节点
     * @param {TextNode} node          文本节点
     * @param {Integer} offset         拆分的位置
     * @return {TextNode}   拆分后的后一个文本节
     */
    split: function (node, offset) {
      var doc = node.ownerDocument;
      if (browser.ie && offset == node.nodeValue.length) {
        var next = doc.createTextNode("");
        return domUtils.insertAfter(node, next);
      }
      var retval = node.splitText(offset);
      //ie8下splitText不会跟新childNodes,我们手动触发他的更新
      if (browser.ie8) {
        var tmpNode = doc.createTextNode("");
        domUtils.insertAfter(retval, tmpNode);
        domUtils.remove(tmpNode);
      }
      return retval;
    },

    /**
     * 判断是否为空白节点
     * @param {TextNode}   node   节点
     * @return {Boolean}      返回是否为文本节点
     */
    isWhitespace: function (node) {
      return !new RegExp("[^ \t\n\r" + domUtils.fillChar + "]").test(
        node.nodeValue
      );
    },
    //------------------------------Element-------------------------------------------
    /**
     * 获取元素相对于viewport的像素坐标
     * @param {Element} element      元素
     * @returns {Object}             返回坐标对象{x:left,y:top}
     */
    getXY: function (element) {
      var x = 0,
        y = 0;
      while (element.offsetParent) {
        y += element.offsetTop;
        x += element.offsetLeft;
        element = element.offsetParent;
      }
      return {
        x: x,
        y: y
      };
    },
    /**
     * 绑原生DOM事件
     * @param {Element|Window|Document} target     元素
     * @param {Array|String} type                  事件类型
     * @param {Function} handler                   执行函数
     */
    on: function (obj, type, handler) {
      var types = utils.isArray(type) ? type : [type],
        k = types.length;
      if (k)
        while (k--) {
          type = types[k];
          if (obj.addEventListener) {
            obj.addEventListener(type, handler, false);
          } else {
            if (!handler._d) {
              handler._d = {};
            }
            var key = type + handler.toString();
            if (!handler._d[key]) {
              handler._d[key] = function (evt) {
                return handler.call(evt.srcElement, evt || window.event);
              };
              obj.attachEvent("on" + type, handler._d[key]);
            }
          }
        }

      obj = null;
    },

    /**
     * 解除原生DOM事件绑定
     * @param {Element|Window|Document} obj         元素
     * @param {Array|String} type                   事件类型
     * @param {Function} handler                    执行函数
     */
    un: function (obj, type, handler) {
      var types = utils.isArray(type) ? type : [type],
        k = types.length;
      if (k)
        while (k--) {
          type = types[k];
          if (obj.removeEventListener) {
            obj.removeEventListener(type, handler, false);
          } else {
            var key = type + handler.toString();
            obj.detachEvent(
              "on" + type,
              handler._d ? handler._d[key] : handler
            );
            if (handler._d && handler._d[key]) {
              delete handler._d[key];
            }
          }
        }
    },

    /**
     * 比较两个节点是否tagName相同且有相同的属性和属性值
     * @param {Element}   nodeA              节点A
     * @param {Element}   nodeB              节点B
     * @return {Boolean}     返回两个节点的标签，属性和属性值是否相同
     * @example
     * &lt;span  style="font-size:12px"&gt;ssss&lt;/span&gt;和&lt;span style="font-size:12px"&gt;bbbbb&lt;/span&gt; 相等
     *  &lt;span  style="font-size:13px"&gt;ssss&lt;/span&gt;和&lt;span style="font-size:12px"&gt;bbbbb&lt;/span&gt; 不相等
     */
    isSameElement: function (nodeA, nodeB) {
      if (nodeA.tagName != nodeB.tagName) {
        return 0;
      }
      var thisAttribs = nodeA.attributes,
        otherAttribs = nodeB.attributes;
      if (!ie && thisAttribs.length != otherAttribs.length) {
        return 0;
      }
      var attrA,
        attrB,
        al = 0,
        bl = 0;
      for (var i = 0; (attrA = thisAttribs[i++]); ) {
        if (attrA.nodeName == "style") {
          if (attrA.specified) {
            al++;
          }
          if (domUtils.isSameStyle(nodeA, nodeB)) {
            continue;
          } else {
            return 0;
          }
        }
        if (ie) {
          if (attrA.specified) {
            al++;
            attrB = otherAttribs.getNamedItem(attrA.nodeName);
          } else {
            continue;
          }
        } else {
          attrB = nodeB.attributes[attrA.nodeName];
        }
        if (!attrB.specified || attrA.nodeValue != attrB.nodeValue) {
          return 0;
        }
      }
      // 有可能attrB的属性包含了attrA的属性之外还有自己的属性
      if (ie) {
        for (i = 0; (attrB = otherAttribs[i++]); ) {
          if (attrB.specified) {
            bl++;
          }
        }
        if (al != bl) {
          return 0;
        }
      }
      return 1;
    },

    /**
     * 判断两个元素的style属性是不是一致
     * @param {Element} elementA       元素A
     * @param {Element} elementB       元素B
     * @return   {boolean}   返回判断结果，true为一致
     */
    isSameStyle: function (elementA, elementB) {
      var styleA = elementA.style.cssText
          .replace(/( ?; ?)/g, ";")
          .replace(/( ?: ?)/g, ":"),
        styleB = elementB.style.cssText
          .replace(/( ?; ?)/g, ";")
          .replace(/( ?: ?)/g, ":");
      if (browser.opera) {
        styleA = elementA.style;
        styleB = elementB.style;
        if (styleA.length != styleB.length) return 0;
        for (var p in styleA) {
          if (/^(\d+|csstext)$/i.test(p)) {
            continue;
          }
          if (styleA[p] != styleB[p]) {
            return 0;
          }
        }
        return 1;
      }

      if (!styleA || !styleB) {
        return styleA == styleB ? 1 : 0;
      }
      styleA = styleA.split(";");
      styleB = styleB.split(";");
      if (styleA.length != styleB.length) {
        return 0;
      }
      for (var i = 0, ci; (ci = styleA[i++]); ) {
        if (utils.indexOf(styleB, ci) == -1) {
          return 0;
        }
      }
      return 1;
    },

    /**
     * 检查是否为块元素
     * @function
     * @param {Element} node       元素
     * @param {String} customNodeNames 自定义的块元素的tagName
     * @return {Boolean} 是否为块元素
     */
    isBlockElm: function (node) {
      return (
        node.nodeType == 1 &&
        (dtd.$block[node.tagName] ||
          styleBlock[domUtils.getComputedStyle(node, "display")]) &&
        !dtd.$nonChild[node.tagName]
      );
    },

    /**
     * 判断是否body
     * @param {Node} 节点
     * @return {Boolean}   是否是body节点
     */
    isBody: function (node) {
      return node && node.nodeType == 1 && node.tagName.toLowerCase() == "body";
    },
    isBreakPage: function (node) {
      return $(node).hasClass("breakPage");
    },
    /**
     * 以node节点为中心，将该节点的父节点拆分成2块
     * @param {Element} node       节点
     * @param {Element} parent 要被拆分的父节点
     * @example <div>xxxx<b>xxx</b>xxx</div> ==> <div>xxx</div><b>xx</b><div>xxx</div>
     */
    breakParent: function (node, parent) {
      var tmpNode,
        parentClone = node,
        clone = node,
        leftNodes,
        rightNodes;
      do {
        parentClone = parentClone.parentNode;
        if (leftNodes) {
          tmpNode = parentClone.cloneNode(false);
          tmpNode.appendChild(leftNodes);
          leftNodes = tmpNode;
          tmpNode = parentClone.cloneNode(false);
          tmpNode.appendChild(rightNodes);
          rightNodes = tmpNode;
        } else {
          leftNodes = parentClone.cloneNode(false);
          rightNodes = leftNodes.cloneNode(false);
        }
        while ((tmpNode = clone.previousSibling)) {
          leftNodes.insertBefore(tmpNode, leftNodes.firstChild);
        }
        while ((tmpNode = clone.nextSibling)) {
          rightNodes.appendChild(tmpNode);
        }
        clone = parentClone;
      } while (parent !== parentClone);
      tmpNode = parent.parentNode;
      tmpNode.insertBefore(leftNodes, parent);
      tmpNode.insertBefore(rightNodes, parent);
      tmpNode.insertBefore(node, rightNodes);
      domUtils.remove(parent);
      return node;
    },

    /**
     * 检查是否是空inline节点
     * @param   {Node}    node      节点
     * @return {Boolean}  返回1为是，0为否
     * @example
     * &lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt; //true
     * <b><i></i><u></u></b> true
     * &lt;b&gt;&lt;/b&gt; true  &lt;b&gt;xx&lt;i&gt;&lt;/i&gt;&lt;/b&gt; //false
     */
    isEmptyInlineElement: function (node) {
      if (node.nodeType != 1 || !dtd.$removeEmpty[node.tagName]) {
        return 0;
      }
      node = node.firstChild;
      while (node) {
        //如果是创建的bookmark就跳过
        if (domUtils.isBookmarkNode(node)) {
          return 0;
        }
        if (
          (node.nodeType == 1 && !domUtils.isEmptyInlineElement(node)) ||
          (node.nodeType == 3 && !domUtils.isWhitespace(node))
        ) {
          return 0;
        }
        node = node.nextSibling;
      }
      return 1;
    },

    /**
     * 删除空白子节点
     * @param   {Element}   node    需要删除空白子节点的元素
     */
    trimWhiteTextNode: function (node) {
      function remove(dir) {
        var child;
        while (
          (child = node[dir]) &&
          child.nodeType == 3 &&
          domUtils.isWhitespace(child)
        ) {
          node.removeChild(child);
        }
      }

      remove("firstChild");
      remove("lastChild");
    },

    /**
     * 合并子节点
     * @param    {Node}    node     节点
     * @param    {String}    tagName     标签
     * @param    {String}    attrs     属性
     * @example &lt;span style="font-size:12px;"&gt;xx&lt;span style="font-size:12px;"&gt;aa&lt;/span&gt;xx&lt;/span  使用后
     * &lt;span style="font-size:12px;"&gt;xxaaxx&lt;/span
     */
    mergChild: function (node, tagName, attrs) {
      var list = domUtils.getElementsByTagName(
        node,
        node.tagName.toLowerCase()
      );
      for (var i = 0, ci; (ci = list[i++]); ) {
        if (!ci.parentNode || domUtils.isBookmarkNode(ci)) {
          continue;
        }
        //span单独处理
        if (ci.tagName.toLowerCase() == "span") {
          if (node === ci.parentNode) {
            domUtils.trimWhiteTextNode(node);
            if (node.childNodes.length == 1) {
              node.style.cssText = ci.style.cssText + ";" + node.style.cssText;
              domUtils.remove(ci, true);
              continue;
            }
          }
          ci.style.cssText = node.style.cssText + ";" + ci.style.cssText;
          if (attrs) {
            var style = attrs.style;
            if (style) {
              style = style.split(";");
              for (var j = 0, s; (s = style[j++]); ) {
                ci.style[utils.cssStyleToDomStyle(s.split(":")[0])] = s.split(
                  ":"
                )[1];
              }
            }
          }
          if (domUtils.isSameStyle(ci, node)) {
            domUtils.remove(ci, true);
          }
          continue;
        }
        if (domUtils.isSameElement(node, ci)) {
          domUtils.remove(ci, true);
        }
      }

      if (tagName == "span") {
        var as = domUtils.getElementsByTagName(node, "a");
        for (var i = 0, ai; (ai = as[i++]); ) {
          ai.style.cssText = ";" + node.style.cssText;
          ai.style.textDecoration = "underline";
        }
      }
    },

    /**
     * 封装原生的getElemensByTagName
     * @param  {Node}    node       根节点
     * @param  {String}   name      标签的tagName
     * @return {Array}      返回符合条件的元素数组
     */
    getElementsByTagName: function (node, name) {
      var list = node.getElementsByTagName(name),
        arr = [];
      for (var i = 0, ci; (ci = list[i++]); ) {
        arr.push(ci);
      }
      return arr;
    },
    /**
     * 将子节点合并到父节点上
     * @param {Element} node    节点
     * @example &lt;span style="color:#ff"&gt;&lt;span style="font-size:12px"&gt;xxx&lt;/span&gt;&lt;/span&gt; ==&gt; &lt;span style="color:#ff;font-size:12px"&gt;xxx&lt;/span&gt;
     */
    mergToParent: function (node) {
      var parent = node.parentNode;
      while (parent && dtd.$removeEmpty[parent.tagName]) {
        if (parent.tagName == node.tagName || parent.tagName == "A") {
          //针对a标签单独处理
          domUtils.trimWhiteTextNode(parent);
          //span需要特殊处理  不处理这样的情况 <span stlye="color:#fff">xxx<span style="color:#ccc">xxx</span>xxx</span>
          if (
            (parent.tagName == "SPAN" && !domUtils.isSameStyle(parent, node)) ||
            (parent.tagName == "A" && node.tagName == "SPAN")
          ) {
            if (parent.childNodes.length > 1 || parent !== node.parentNode) {
              node.style.cssText =
                parent.style.cssText + ";" + node.style.cssText;
              parent = parent.parentNode;
              continue;
            } else {
              parent.style.cssText += ";" + node.style.cssText;
              //trace:952 a标签要保持下划线
              if (parent.tagName == "A") {
                parent.style.textDecoration = "underline";
              }
            }
          }
          if (parent.tagName != "A") {
            parent === node.parentNode && domUtils.remove(node, true);
            break;
          }
        }
        parent = parent.parentNode;
      }
    },
    /**
     * 合并左右兄弟节点
     * @function
     * @param {Node}     node
     * @param {Boolean} ingoreNext   默认为false合并上一个兄弟节点。true为不合并上一个兄弟节点
     * @param {Boolean} ingorePre    默认为false合并下一个兄弟节点。true为不合并下一个兄弟节点
     * @example &lt;b&gt;xxxx&lt;/b&gt;&lt;b&gt;xxx&lt;/b&gt;&lt;b&gt;xxxx&lt;/b&gt; ==> &lt;b&gt;xxxxxxxxxxx&lt;/b&gt;
     */
    mergSibling: function (node, ingorePre, ingoreNext) {
      function merg(rtl, start, node) {
        var next;
        if (
          (next = node[rtl]) &&
          !domUtils.isBookmarkNode(next) &&
          next.nodeType == 1 &&
          domUtils.isSameElement(node, next)
        ) {
          while (next.firstChild) {
            if (start == "firstChild") {
              node.insertBefore(next.lastChild, node.firstChild);
            } else {
              node.appendChild(next.firstChild);
            }
          }
          domUtils.remove(next);
        }
      }

      !ingorePre && merg("previousSibling", "firstChild", node);
      !ingoreNext && merg("nextSibling", "lastChild", node);
    },
    /**
     * 合并node节点下相同的子节点
     * @name mergeChild
     * @desc
     * UE.dom.domUtils.mergeChild(node,tagName) //tagName要合并的子节点的标签
     * @example
     * <p><span style="font-size:12px;">xx<span style="font-size:12px;">aa</span>xx</span></p>
     * ==> UE.dom.domUtils.mergeChild(node,'span')
     * <p><span style="font-size:12px;">xxaaxx</span></p>
     */
    mergeChild: function (node, tagName, attrs) {
      var list = domUtils.getElementsByTagName(
        node,
        node.tagName.toLowerCase()
      );
      for (var i = 0, ci; (ci = list[i++]); ) {
        if (!ci.parentNode || domUtils.isBookmarkNode(ci)) {
          continue;
        }
        //span单独处理
        if (ci.tagName.toLowerCase() == "span") {
          if (node === ci.parentNode) {
            domUtils.trimWhiteTextNode(node);
            if (node.childNodes.length == 1) {
              node.style.cssText = ci.style.cssText + ";" + node.style.cssText;
              domUtils.remove(ci, true);
              continue;
            }
          }
          ci.style.cssText = node.style.cssText + ";" + ci.style.cssText;
          if (attrs) {
            var style = attrs.style;
            if (style) {
              style = style.split(";");
              for (var j = 0, s; (s = style[j++]); ) {
                ci.style[utils.cssStyleToDomStyle(s.split(":")[0])] = s.split(
                  ":"
                )[1];
              }
            }
          }
          if (domUtils.isSameStyle(ci, node)) {
            domUtils.remove(ci, true);
          }
          continue;
        }
        if (domUtils.isSameElement(node, ci)) {
          domUtils.remove(ci, true);
        }
      }
    },

    /**
     * 将节点node合并到父节点上
     * @name mergeToParent
     * @grammar UE.dom.domUtils.mergeToParent(node)
     * @example
     * <span style="color:#fff"><span style="font-size:12px">xxx</span></span> ==> <span style="color:#fff;font-size:12px">xxx</span>
     */
    mergeToParent: function (node) {
      var parent = node.parentNode;
      while (parent && dtd.$removeEmpty[parent.tagName]) {
        if (parent.tagName == node.tagName || parent.tagName == "A") {
          //针对a标签单独处理
          domUtils.trimWhiteTextNode(parent);
          //span需要特殊处理  不处理这样的情况 <span stlye="color:#fff">xxx<span style="color:#ccc">xxx</span>xxx</span>
          if (
            (parent.tagName == "SPAN" && !domUtils.isSameStyle(parent, node)) ||
            (parent.tagName == "A" && node.tagName == "SPAN")
          ) {
            if (parent.childNodes.length > 1 || parent !== node.parentNode) {
              node.style.cssText =
                parent.style.cssText + ";" + node.style.cssText;
              parent = parent.parentNode;
              continue;
            } else {
              parent.style.cssText += ";" + node.style.cssText;
              //trace:952 a标签要保持下划线
              if (parent.tagName == "A") {
                parent.style.textDecoration = "underline";
              }
            }
          }
          if (parent.tagName != "A") {
            parent === node.parentNode && domUtils.remove(node, true);
            break;
          }
        }
        parent = parent.parentNode;
      }
    },
    /**
     * 合并节点node的左右兄弟节点
     * @name mergeSibling
     * @grammar UE.dom.domUtils.mergeSibling(node)
     * @grammar UE.dom.domUtils.mergeSibling(node,ignorePre)    //ignorePre指定是否忽略左兄弟
     * @grammar UE.dom.domUtils.mergeSibling(node,ignorePre,ignoreNext)  //ignoreNext指定是否忽略右兄弟
     * @example
     * <b>xxxx</b><b>ooo</b><b>xxxx</b> ==> <b>xxxxoooxxxx</b>
     */
    mergeSibling: function (node, ignorePre, ignoreNext) {
      function merge(rtl, start, node) {
        var next;
        if (
          (next = node[rtl]) &&
          !domUtils.isBookmarkNode(next) &&
          next.nodeType == 1 &&
          domUtils.isSameElement(node, next)
        ) {
          while (next.firstChild) {
            if (start == "firstChild") {
              node.insertBefore(next.lastChild, node.firstChild);
            } else {
              node.appendChild(next.firstChild);
            }
          }
          domUtils.remove(next);
        }
      }
      !ignorePre && merge("previousSibling", "firstChild", node);
      !ignoreNext && merge("nextSibling", "lastChild", node);
    },
    /**
     * 使得元素及其子节点不能被选择
     * @function
     * @param   {Node}     node      节点
     */
    unselectable:
      ie || browser.opera
        ? function (node) {
            //for ie9
            node.onselectstart = function () {
              return false;
            };
            node.onclick = node.onkeyup = node.onkeydown = function () {
              return false;
            };
            node.unselectable = "on";
            node.setAttribute("unselectable", "on");
            for (var i = 0, ci; (ci = node.all[i++]); ) {
              switch (ci.tagName.toLowerCase()) {
                case "iframe":
                case "textarea":
                case "input":
                case "select":
                  break;
                default:
                  ci.unselectable = "on";
                  node.setAttribute("unselectable", "on");
              }
            }
          }
        : function (node) {
            node.style.MozUserSelect = node.style.webkitUserSelect = node.style.KhtmlUserSelect =
              "none";
          },
    /**
     * 删除元素上的属性，可以删除多个
     * @function
     * @param {Element} element      元素
     * @param {Array} attrNames      要删除的属性数组
     */
    removeAttributes: function (node, attrNames) {
      attrNames = utils.isArray(attrNames)
        ? attrNames
        : utils
            .trim(attrNames)
            .replace(/[ ]{2,}/g, " ")
            .split(" ");
      for (var i = 0, ci; (ci = attrNames[i++]); ) {
        ci = attrFix[ci] || ci;
        switch (ci) {
          case "className":
            node[ci] = "";
            break;
          case "style":
            node.style.cssText = "";
            !browser.ie &&
              node.getAttributeNode("style") &&
              node.removeAttributeNode(node.getAttributeNode("style"));
        }
        node.removeAttribute(ci);
      }
    },
    creElm: function (doc, tag, attrs) {
      return this.setAttributes(doc.createElement(tag), attrs);
    },
    /**
     * 给节点添加属性
     * @function
     * @param {Node} node      节点
     * @param {Object} attrNames     要添加的属性名称，采用json对象存放
     */
    setAttributes: function (node, attrs) {
      for (var name in attrs) {
        var value = attrs[name];
        switch (name) {
          case "class":
            //ie下要这样赋值，setAttribute不起作用
            node.className = value;
            break;
          case "forecolor":
            node.style.cssText = node.style.cssText + ";" + value;
            break;
          case "wUnderline":
            node.style.cssText = node.style.textDecoration + ";" + value;
            break;
          case "wBold":
            node.style.cssText = node.style.fontWeight + ";" + value;
            break;
          case "wfontSize":
            node.style.cssText = node.style.fontSize + ";" + value;
            break;
          case "wfontfamily":
            node.style.cssText = node.style.fontFamily + ";" + value;
            break;
          case "wColor":
            node.style.cssText = node.style.color + ";" + value;
            break;
          case "wbackColor":
            node.style.cssText = node.style.backgroundColor + ";" + value;
            break;
          case "innerHTML":
            node[name] = value;
            break;
          case "value":
            node.value = value;
            break;
          case "wbackColorClose":
            break;
          case "style":
            node.style.cssText = node.style.cssText + ";" + value;
            break;
          default:
            node.setAttribute(attrFix[name] || name, value);
        }
      }
      return node;
    },

    /**
     * 获取元素element的计算样式
     * @name getComputedStyle
     * @grammar UE.dom.domUtils.getComputedStyle(element,styleName)  => String //返回对应样式名称的样式值
     * @example
     * getComputedStyle(document.body,"font-size")  =>  "15px"
     * getComputedStyle(form,"color")  =>  "#ffccdd"
     */
    getComputedStyle: function (element, styleName) {
      //以下的属性单独处理
      var pros = "width height top left";

      if (pros.indexOf(styleName) > -1) {
        return (
          element[
            "offset" +
              styleName.replace(/^\w/, function (s) {
                return s.toUpperCase();
              })
          ] + "px"
        );
      }
      //忽略文本节点
      if (element.nodeType == 3) {
        element = element.parentNode;
      }
      //ie下font-size若body下定义了font-size，则从currentStyle里会取到这个font-size. 取不到实际值，故此修改.
      if (
        browser.ie &&
        browser.version < 9 &&
        styleName == "font-size" &&
        !element.style.fontSize &&
        !dtd.$empty[element.tagName] &&
        !dtd.$nonChild[element.tagName]
      ) {
        var span = element.ownerDocument.createElement("span");
        span.style.cssText = "padding:0;border:0;font-family:simsun;";
        span.innerHTML = ".";
        element.appendChild(span);
        var result = span.offsetHeight;
        element.removeChild(span);
        span = null;
        return result + "px";
      }
      try {
        var value =
          domUtils.getStyle(element, styleName) ||
          (window.getComputedStyle
            ? domUtils
                .getWindow(element)
                .getComputedStyle(element, "")
                .getPropertyValue(styleName)
            : (element.currentStyle || element.style)[
                utils.cssStyleToDomStyle(styleName)
              ]);
      } catch (e) {
        return "";
      }
      return utils.transUnitToPx(utils.fixColor(styleName, value));
    },

    /**
     * 删除cssClass，可以支持删除多个class
     * @param {Element} element         元素
     * @param {Array} classNames        删除的className
     */
    removeClasses: function (elm, classNames) {
      classNames = utils.isArray(classNames)
        ? classNames
        : utils
            .trim(classNames)
            .replace(/[ ]{2,}/g, " ")
            .split(" ");
      for (var i = 0, ci, cls = elm.className; (ci = classNames[i++]); ) {
        cls = cls.replace(new RegExp("\\b" + ci + "\\b"), "");
      }
      cls = utils.trim(cls).replace(/[ ]{2,}/g, " ");
      if (cls) {
        elm.className = cls;
      } else {
        domUtils.removeAttributes(elm, ["class"]);
      }
    },
    /**
     * 增加一个class
     * @param element
     * @param className
     */
    addClass: function (element, className) {
      if (!this.hasClass(element, className)) {
        element.className += " " + className;
      }
    },
    /**
     * 删除元素的样式
     * @param {Element} element元素
     * @param {String} name        删除的样式名称
     */
    removeStyle: function (node, name) {
      node.style[utils.cssStyleToDomStyle(name)] = "";
      if (!node.style.cssText) {
        domUtils.removeAttributes(node, ["style"]);
      }
    },
    /**
     * 判断元素element是否包含样式类名className,支持以空格分开的多个类名,多个类名顺序不同也可以比较
     * @name hasClass
     * @grammar UE.dom.domUtils.hasClass(element,className)  =>true|false
     */
    hasClass: function (element, className) {
      if (!element) return;
      if (utils.isRegExp(className)) {
        return className.test(element.className);
      }
      className = utils
        .trim(className)
        .replace(/[ ]{2,}/g, " ")
        .split(" ");
      for (var i = 0, ci, cls = element.className; (ci = className[i++]); ) {
        if (!new RegExp("\\b" + ci + "\\b", "i").test(cls)) {
          return false;
        }
      }
      return i - 1 == className.length;
    },

    /**
     * 阻止事件默认行为
     * @param {Event} evt    需要组织的事件对象
     */
    preventDefault: function (evt) {
      evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
    },
    /**
     * 获得元素样式
     * @param {Element} element    元素
     * @param {String}  name    样式名称
     * @return  {String}   返回元素样式值
     */
    getStyle: function (element, name) {
      var value = element.style[utils.cssStyleToDomStyle(name)];
      return utils.fixColor(name, value);
    },
    setStyle: function (element, name, value) {
      element.style[utils.cssStyleToDomStyle(name)] = value;
    },
    setStyles: function (element, styles) {
      for (var name in styles) {
        if (styles.hasOwnProperty(name)) {
          domUtils.setStyle(element, name, styles[name]);
        }
      }
    },
    /**
     * 删除_moz_dirty属性
     * @function
     * @param {Node}    node    节点
     */
    removeDirtyAttr: function (node) {
      for (
        var i = 0, ci, nodes = node.getElementsByTagName("*");
        (ci = nodes[i++]);

      ) {
        ci.removeAttribute("_moz_dirty");
      }
      node.removeAttribute("_moz_dirty");
    },
    /**
     * 返回子节点的数量
     * @function
     * @param {Node}    node    父节点
     * @param  {Function}    fn    过滤子节点的规则，若为空，则得到所有子节点的数量
     * @return {Number}    符合条件子节点的数量
     */
    getChildCount: function (node, fn) {
      var count = 0,
        first = node.firstChild;
      fn =
        fn ||
        function () {
          return 1;
        };
      while (first) {
        if (fn(first)) {
          count++;
        }
        first = first.nextSibling;
      }
      return count;
    },

    /**
     * 判断是否为空节点
     * @function
     * @param {Node}    node    节点
     * @return {Boolean}    是否为空节点
     */
    isEmptyNode: function (node) {
      return (
        !node.firstChild ||
        domUtils.getChildCount(node, function (node) {
          return (
            !domUtils.isBr(node) &&
            !domUtils.isBookmarkNode(node) &&
            !domUtils.isWhitespace(node)
          );
        }) == 0
      );
    },
    /**
     * 清空节点所有的className
     * @function
     * @param {Array}    nodes    节点数组
     */
    clearSelectedArr: function (nodes) {
      var node;
      while ((node = nodes.pop())) {
        domUtils.removeAttributes(node, ["class"]);
      }
    },
    /**
     * 将显示区域滚动到显示节点的位置
     * @function
     * @param    {Node}   node    节点
     * @param    {window}   win      window对象
     * @param    {Number}    offsetTop    距离上方的偏移量
     */
    scrollToView: function (node, win, offsetTop) {
      var getViewPaneSize = function () {
          var doc = win.document,
            mode = doc.compatMode == "CSS1Compat";
          return {
            width:
              (mode ? doc.documentElement.clientWidth : doc.body.clientWidth) ||
              0,
            height:
              (mode
                ? doc.documentElement.clientHeight
                : doc.body.clientHeight) || 0
          };
        },
        getScrollPosition = function (win) {
          if ("pageXOffset" in win) {
            return {
              x: win.pageXOffset || 0,
              y: win.pageYOffset || 0
            };
          } else {
            var doc = win.document;
            return {
              x: doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
              y: doc.documentElement.scrollTop || doc.body.scrollTop || 0
            };
          }
        };
      var winHeight = getViewPaneSize().height,
        offset = winHeight * -1 + offsetTop;
      offset += node.offsetHeight || 0;
      var elementPosition = domUtils.getXY(node);
      offset += elementPosition.y;
      var currentScroll = getScrollPosition(win).y;
      // offset += 50;
      if (offset > currentScroll || offset < currentScroll - winHeight) {
        win.scrollTo(0, offset + (offset < 0 ? -20 : 20));
      }
    },
    /**
     * 判断节点是否为br
     * @function
     * @param {Node}    node   节点
     */
    isBr: function (node) {
      return node.nodeType == 1 && node.tagName == "BR";
    },
    isFillChar: function (node) {
      return (
        node.nodeType == 3 &&
        !node.nodeValue.replace(new RegExp(domUtils.fillChar), "").length
      );
    },
    isStartInblock: function (range) {
      var tmpRange = range.cloneRange(),
        flag = 0,
        start = tmpRange.startContainer,
        tmp;
      while (start && domUtils.isFillChar(start)) {
        tmp = start;
        start = start.previousSibling;
      }
      if (tmp) {
        tmpRange.setStartBefore(tmp);
        start = tmpRange.startContainer;
      }
      if (
        start.nodeType == 1 &&
        domUtils.isEmptyNode(start) &&
        tmpRange.startOffset == 1
      ) {
        tmpRange.setStart(start, 0).collapse(true);
      }
      while (!tmpRange.startOffset) {
        start = tmpRange.startContainer;
        if (domUtils.isBlockElm(start) || domUtils.isBody(start)) {
          flag = 1;
          break;
        }
        var pre = tmpRange.startContainer.previousSibling,
          tmpNode;
        if (!pre) {
          tmpRange.setStartBefore(tmpRange.startContainer);
        } else {
          while (pre && domUtils.isFillChar(pre)) {
            tmpNode = pre;
            pre = pre.previousSibling;
          }
          if (tmpNode) {
            tmpRange.setStartBefore(tmpNode);
          } else {
            tmpRange.setStartBefore(tmpRange.startContainer);
          }
        }
      }
      return flag && !domUtils.isBody(tmpRange.startContainer) ? 1 : 0;
    },
    isEmptyBlock: function (node) {
      var reg = new RegExp("[ \t\r\n" + domUtils.fillChar + "]", "g");
      if (
        node[browser.ie ? "innerText" : "textContent"].replace(reg, "").length >
        0
      ) {
        return 0;
      }
      for (var n in dtd.$isNotEmpty) {
        if (node.getElementsByTagName(n).length) {
          return 0;
        }
      }
      return 1;
    },

    setViewportOffset: function (element, offset) {
      var left = parseInt(element.style.left) | 0;
      var top = parseInt(element.style.top) | 0;
      var rect = element.getBoundingClientRect();
      var offsetLeft = offset.left - rect.left;
      var offsetTop = offset.top - rect.top;
      if (offsetLeft) {
        element.style.left = left + offsetLeft + "px";
      }
      if (offsetTop) {
        element.style.top = top + offsetTop + "px";
      }
    },
    fillNode: function (doc, node) {
      var tmpNode = browser.ie
        ? doc.createTextNode(domUtils.fillChar)
        : doc.createElement("br");
      node.innerHTML = "";
      node.appendChild(tmpNode);
    },
    moveChild: function (src, tag, dir) {
      while (src.firstChild) {
        if (dir && tag.firstChild) {
          tag.insertBefore(src.lastChild, tag.firstChild);
        } else {
          tag.appendChild(src.firstChild);
        }
      }
    },
    //判断是否有额外属性
    hasNoAttributes: function (node) {
      return browser.ie
        ? /^<\w+\s*?>/.test(node.outerHTML)
        : node.attributes.length == 0;
    },
    //判断是否是编辑器自定义的参数
    isCustomeNode: function (node) {
      return node.nodeType == 1 && node.getAttribute("_ue_custom_node_");
    },
    isTagNode: function (node, tagName) {
      return node.nodeType == 1 && node.tagName.toLowerCase() == tagName;
    },
    /**
     * 找同辈元素,默认找所有，如果传入class则按class筛选
     * @function
     * @param {Node}     node
     * @param {String} class
     */
    findSiblings: function (node, className) {
      var parentNode = node.parentNode;
      var childNodes = parentNode.childNodes;
      var siblings = [];
      for (var index = 0, length = childNodes.length; index < length; index++) {
        if (
          childNodes[index].nodeType == 1 &&
          childNodes[index] != node &&
          (className ? this.hasClass(childNodes[index], className) : true)
        ) {
          siblings.push(childNodes[index]);
        }
      }
      return siblings.length ? siblings : null;
    },
    ing: function (options) {
      for (var topWin = window; ; ) {
        if (topWin != topWin.parent) {
          topWin = topWin.parent;
        } else {
          break;
        }
      }
      var body = topWin.document.getElementsByTagName("body");
      var randomId = Math.round(Math.random() * 100001);
      if (body.length) {
        var defaultOptions = {
          tips: "呵呵",
          autoClose: true,
          closeTime: 4000
        };
        options = $.extend(defaultOptions, options);
        body = body[0];
        $(body).find(".edui-tips").remove();
        var dom =
          '<div id="edui-tips_' +
          randomId +
          '" class="edui-tips" style="position: fixed;left: 50%; top: 50px;-webkit-user-select: none;cursor: default;-moz-transform: translate(-50%, 0);-ms-transform: translate(-50%, 0);-webkit-transform: translate(-50%, 0);transform: translate(-50%, 0);height: 40px;line-height: 40px;white-space: nowrap;padding: 0 15px;font-size: 12px;color: #d65c38;background-color: #f8f0cf;z-index: 9999;-moz-box-shadow: 0px 5px 10px -5px #b3b3b3;-ms-box-shadow: 0px 5px 10px -5px #b3b3b3;-webkit-box-shadow: 0px 5px 10px -5px #b3b3b3;box-shadow: 0px 5px 10px -5px #b3b3b3;-ms-transition: opacity 1s;-moz-transition: opacity 1s;-webkit-transition: opacity 1s;transition: opacity 1s;">' +
          '<div style="display: inline-block;vertical-align: middle;">' +
          options.tips +
          "</div>" +
          '<div class="edui-tips-close" style="display: inline-block;margin-left: 6px;vertical-align: middle;width: 10px;height: 100%;cursor: pointer;background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/UE_qt.png) no-repeat -430px -174px"></div>' +
          "</div>";
        var $tips = $(body)
          .append(dom)
          .find("#edui-tips_" + randomId);

        var close = function () {
          $tips.css("opacity", 0);
          setTimeout(function () {
            $tips.remove();
          }, 1000);
        };
        $tips.find(".edui-tips-close").hover(
          function () {
            $(this).css("background-position", "-459px -174px");
          },
          function () {
            $(this).css("background-position", "-430px -174px");
          }
        );
        $tips.find(".edui-tips-close").on("click", function () {
          close();
          window.focus();
        });

        options.autoClose &&
          setTimeout(function () {
            close();
          }, options.closeTime);
      }
    },
    //重置range，一般remove,innerhtml等需要移除节点的操作之前，最好执行该函数，把range移出
    resetRange: function () {
      UE.editor.selection.getRange().setCursor(true);
    },

    //弹出选择框
    UEPopup: function (options) {
      for (var topWin = window; ; ) {
        if (topWin != topWin.parent) {
          topWin = topWin.parent;
        } else {
          break;
        }
      }
      typeof Fai !== "undefined" && (topWin = Fai.top);
      var body = topWin.document.getElementsByTagName("body");
      var randomId = Math.round(Math.random() * 100001);
      if (body.length) {
        var defaultOptions = {
          id: randomId, //标识当前弹窗的id，可以随便定义,必须传进来的参数
          title: "设置添加视频",
          videoSrc: "",
          placeholder: ["请输入视频通用代码"],
          sureBtnText: "确认",
          cancelBtnText: "取消"
        };
        options = $.extend(defaultOptions, options);
        body = body[0];
        var dom =
          '<div id="edui-popup_' +
          options.id +
          '" class="popupInput" style="background-color: rgba(0, 0, 0, .7);position: fixed;top: 0;left: 0;width: 100vw;height: 100vh;text-align:left;display:flex;justify-content: center;align-items: center;z-index:9032;">' +
          '<div class="popupBody" style="position: relative;border-radius: 4px;width: 490px;height:360px;background-color: #fff;font-family:微软雅黑">' +
          '<div class="closeBtn" style="background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/mbg01.png) -449px -187px no-repeat;position: absolute;top: 23px;right: 30px;width: 20px;height: 20px;cursor:pointer;"></div>' +
          '<div class="title" style="padding: 18px 40px 18px 35px;line-height: 27px;color:#333;font-size: 16px;border-bottom: 1px solid #dadada;">' +
          options.title +
          "</div>" +
          '<div class="content" style="width:81%;height:206px;margin:0px auto;font-size:13px;padding-left:0px;">' +
          '<div class="cTitle" style="padding:33px 0 10px 0;color:#333;">' +
          '<span style="margin-right:10px;">视频来源：</span>' +
          '<input type="radio" name="videoSourse" id="localTran" value="local" checked>' +
          '<label for="localTran" style="display: inline-block;cursor: pointer;position: relative;padding-left: 25px;margin-right: 15px;font-size: 13px;">本地上传</label>' +
          '<input style="margin-left:25px;" type="radio" name="videoSourse" id="linkTran" value="link">' +
          '<label for="linkTran" style="display: inline-block;cursor: pointer;position: relative;padding-left: 25px;margin-right: 15px;font-size: 13px;">视频地址</label>' +
          '<input style="margin-left:25px;" type="radio" name="videoSourse" id="netTran" value="net">' +
          '<label for="netTran" style="display: inline-block;cursor: pointer;position: relative;padding-left: 25px;margin-right: 15px;font-size: 13px;">通用代码</label>' +
          "</div>" +
          '<div class="cContent_1 local" style="padding:10px 0;position:relative;margin-left:76px;" >' +
          '<input readonly="readonly" class="videoName videoInf" type="text" name="text" style="width:230px;height:34px;margin-right:10px;padding:4px;box-sizing:border-box;border:1px #E2E1E6 solid;">' +
          '<input class="videoSelectLocale"  type="file" style="width:400px;height:32px;display:none;position:absolute;top:10px;left:0;">' +
          '<input class="videoSelect" type="button" value="视频选择" style="width:80px;height:34px;border:1px #e3e2e8 solid;border-radius:2px;font-family: 微软雅黑;cursor:pointer;">' +
          '<p style="padding:17px 0;">仅支持MP4格式的视频，<a href="//shimo.im/doc/7fr21HGjfMEglyt5?r=0ED7J1/" target="_blank" style="color:#5778D7;">如何转换为MP4格式?</a></p>' +
          "</div>" +
          '<div class="cContent_2 net" style="padding:10px 0;display:none;margin-left:76px;" >' +
          '<textarea class="netVideoName videoInf" name="textarea" style="width:320px;height:90px;color:#333333;box-sizing:border-box;resize:none;padding:8px;border:1px #e1e0e5 solid;font-size:13px;font-family:微软雅黑;" placeholder="' +
          options.placeholder +
          '"></textarea>' +
          '<p style="padding:0;font-size:13px;margin-top:12px;">仅支持<a href="//v.qq.com/" target="_blank" style="color:#5778D7;font-size:13px;">腾讯</a>、<a href="//www.youku.com/" target="_blank" style="color:#5778D7;font-size:13px;">优酷</a>、<a href="//www.iqiyi.com/" target="_blank" style="color:#5778D7;font-size:13px;">爱奇艺</a>视频，<a href="//shimo.im/doc/64jThpNJ2LMWdlyU?r=0ED7J1/" target="_blank" style="color:#5778D7;font-size:13px;">什么是视频通用代码?</a></p>' +
          "</div>" +
          '<div class="cContent_3 link" style="padding:10px 0;display:none;margin-left:76px;" >' +
          '<input class="videoLink" type="text" name="text" style="width:320px;height:34px;margin-right:10px;padding:4px;box-sizing:border-box;border:1px #E2E1E6 solid;">' +
          "</div>" +
          "</div>" +
          '<div class="footer" style="height: 70px;display: flex;justify-content: center;align-items: center;font-size: 14px;background-color:#fff;border-radius:4px;background:none;">' +
          '<div class="btn sureBtn" style="border-color: #5874D8;margin-right: 36px;background-color: #5874D8;width: 102px;height:35px;line-height: 33px;border-radius: 3px;text-align: center;color: #fff;border: 1px solid #fff;cursor: pointer;">' +
          options.sureBtnText +
          "</div>" +
          '<div class="btn cancelBtn" style="border: 1px solid #E3E2E8;box-sizing:border-box;color: #666;width: 102px;height:35px;line-height: 33px;border-radius: 3px;text-align: center;cursor: pointer;">' +
          options.cancelBtnText +
          "</div>" +
          "</div>" +
          "</div>" +
          "</div>";
        var $popup = $(body)
          .append(dom)
          .find("#edui-popup_" + options.id);
        bindEvent();
      }

      // 添加样式，radio的自定义样式
      $('<style id="createVideoStyle">')
        .text(
          // 'label {display: inline-block;cursor: pointer;position: relative;padding-left: 25px;margin-right: 15px;font-size: 13px;}'+
          'label:before {content: "";display: inline-block;width: 14px;height: 14px;border:1px solid #d8d8d8;margin-right: 10px;position: absolute;left: 0;bottom: 1px;background-color: #fff;}' +
            ".cTitle label:before {border-radius: 8px;}" +
            "input[type=radio]{display: none;}" +
            'input[type=radio]:checked + label:before {content: "\u2022";color: #828282;font-size: 21px;text-align: center;line-height: 12px;}' +
            ".videoSelect{background-color:#fff;color:#333;}" +
            ".videoSelect:hover{background-color:#5874D8;color:#ffffff;border:none;}" +
            "textarea::-webkit-input-placeholder{color:#999999;}"
        )
        .appendTo($(body));
      // console.log(options.isUeditorOem)
      if (options.isUeditorOem) {
        $popup.find(".link p").css("display", "none");
      }

      // 更换视频时，输入框为视频的上传方式以及保留视频的信息
      var videoInputValue;
      if (
        baidu.editor.ui.tool.node &&
        baidu.editor.ui.tool.ele &&
        $(baidu.editor.ui.tool.ele).attr("value") == "alter"
      ) {
        var name = $(baidu.editor.ui.tool.ele).attr("name");
        // console.log(baidu.editor.ui.tool.ele)
        // if(baidu.editor.ui.tool.ele.tagName.toLowerCase() == 'video'){
        //     $popup.find('.videoName').val(name);
        //     videoInputValue = $popup.find('.videoName').val();
        // }else{
        //     videoInputValue = name;
        //     $popup.find('input[value="local"]').attr('checked',null);
        //     $popup.find('input[value="net"]').attr('checked','');
        //     $popup.find('.netVideoName').val(name);
        // }
        if (baidu.editor.ui.tool.ele.getAttribute("key") == "local") {
          $popup.find(".videoName").val(name);
          videoInputValue = $popup.find(".videoName").val();
        } else if (baidu.editor.ui.tool.ele.getAttribute("key") == "link") {
          videoInputValue = name;
          $popup.find('input[value="local"]').attr("checked", null);
          $popup.find('input[value="net"]').attr("checked", null);
          $popup.find('input[value="link"]').attr("checked", "");
          $popup.find(".videoLink").val(name);
        } else {
          videoInputValue = name;
          $popup.find('input[value="local"]').attr("checked", null);
          $popup.find('input[value="link"]').attr("checked", null);
          $popup.find('input[value="net"]').attr("checked", "");
          $popup.find(".netVideoName").val(name);
        }
      }
      var length = $popup.find('input[type="radio"]').length;
      for (var i = 0; i < length; i++) {
        if ($popup.find('input[type="radio"]')[i].checked) {
          var selected = "." + $popup.find('input[type="radio"]')[i].value;
          $popup.find(selected).css("display", "block");
        } else {
          var selected = "." + $popup.find('input[type="radio"]')[i].value;
          $popup.find(selected).css("display", "none");
        }
      }

      // 视频直接上传
      var result1;
      var htmlSelectMP4 = function (result) {
        var $body = $(topWin.document.getElementsByTagName("body"));
        var inp = $body.find(".videoName");
        if (result) {
          var data = $.parseJSON(result);
          data = data.data;
          if (data.length) {
            inp.val(data[0].fileName);
          }
          // 如果更换视频的时候上传的还是原来的视频，那么视频的result1不更新
          if (
            !(
              baidu.editor.ui.tool.ele &&
              $(baidu.editor.ui.tool.ele).attr("value") == "alter" &&
              $popup.find(".videoName").val() === videoInputValue
            )
          ) {
            result1 = result;
          }
        }
      };
      var htmlUploadMP4 = function (result) {
        var str = "",
          videoPoster = "";
        if (result) {
          var data = $.parseJSON(result);
          data = data.data;
          videoPoster = data[0].videoFirstImg
            ? "poster=" + data[0].videoFirstImg
            : "";
          // options.videoSrc = navigator.userAgent.indexOf("Edge") > -1 ? 'http:'+data[0].filePath : data[0].filePath;
          options.videoSrc = data[0].filePath;
          if (data.length) {
            str =
              '<p style="text-align:center;">' +
              '<video preload="meta" ' +
              videoPoster +
              ' key="local" name = "' +
              data[0].fileName +
              '" style="WIDTH:400px;BACKGROUND:#000;HEIGHT:400px" controls="controls" controlsList="nodownload">' +
              '<source src="' +
              options.videoSrc +
              '" type="video/mp4" />' + //Safari / iOS video
              '<embed width="400" height="400" type="application/x-shockwave-flash" src="' +
              Fai.top._resRoot +
              "/js/comm/jwplayer/jwplayer.swf?file=" +
              data[0].filePath +
              '" allowfullscreen="true" />' +
              "</video></br>" +
              "</p>";
          } else {
            str = "";
          }
        }
        var range = editor.selection.getRange();
        if (range.startContainer.tagName != "P") {
          $(range.startContainer)
            .parents("p")
            .after('<p style="line-height:1.5em;"></br></p>');
          var nextElement = $(range.startContainer).parents("p").next()[0];
          range.startContainer = nextElement;
          range.endContainer = nextElement;
          range.startOffset = 0;
          range.endOffset = 0;
        }
        UE.editor.execCommand("inserthtml", str);
      };

      //解析视频地址
      function paserVideoURL(videoUrl, qqAutoplay) {
        var videoSrc = "";
        var urlSplitArr = [];
        urlSplitArr = videoUrl.split("/");
        var httpStr = ""; //urlSplitArr[0].indexOf("https") > -1 ? "https:" : "http:";
        var urlDomain = urlSplitArr.length >= 2 ? urlSplitArr[2] : "";
        var arrLength = urlSplitArr.length;
        var urlId = "";

        var tmpUrl = urlSplitArr[arrLength - 1];
        //注意 </iframe> 闭合的情况
        if (/iframe/.test(urlSplitArr[arrLength - 1])) {
          tmpUrl = urlSplitArr[arrLength - 2];
        }
        if (urlDomain === "v.youku.com") {
          urlId = tmpUrl.split("id_")[1].split(".html")[0].split("_")[0];
          videoSrc = httpStr + "//player.youku.com/embed/" + urlId + "?";
        }

        if (urlDomain === "player.youku.com") {
          if (/\<(iframe)(.)*\1/.test(decodeHtml(videoUrl))) {
            var _tmpMatch = decodeHtml(videoUrl).match(
              /src\s*=\s*(\"|\').+?\1/gim
            );
            _tmpMatch = _tmpMatch && _tmpMatch[0];
            if (!_tmpMatch) {
              return;
            }
            videoSrc = _tmpMatch
              .replace(/src\s*=\s*(?:\'|\")/gim, "")
              .replace(/(?:\'|\")/, "");
          } else {
            if (tmpUrl.endsWith("swf")) {
              if (/iframe/.test(urlSplitArr[arrLength - 1])) {
                urlId = urlSplitArr[arrLength - 3];
              } else {
                urlId = urlSplitArr[arrLength - 2];
              }
            } else {
              urlId = tmpUrl;
            }
            videoSrc = httpStr + "//player.youku.com/embed/" + urlId;
          }
        }
        if (urlDomain === "v.qq.com" || urlDomain === "static.video.qq.com") {
          var urlId_unfiltered = tmpUrl.split("vid=");
          //var urlId_unfiltered = urlSplitArr[arrLength - 1].split("vid=");
          if (urlId_unfiltered.length > 1) {
            urlId = urlId_unfiltered[1].split("&")[0];
          } else {
            urlId = urlId_unfiltered[0].split(".html")[0];
          }
          if (qqAutoplay) {
            // videoSrc = httpStr+"//v.qq.com/iframe/player.html?vid=" + urlId + "&tiny=1&auto=1";
            videoSrc =
              httpStr +
              "//imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?vid=" +
              urlId +
              "&tiny=1&auto=1";
          } else {
            // videoSrc = httpStr+"//v.qq.com/iframe/player.html?vid=" + urlId + "&tiny=1&auto=0";
            videoSrc =
              httpStr +
              "//imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?vid=" +
              urlId +
              "&tiny=1&auto=0";
          }
        }
        if (urlDomain == "open.iqiyi.com") {
          var urlInf = tmpUrl.split("vid=")[1].split("&");
          urlId = urlInf[0];
          urlTvid = urlInf[1].split("tvId=")[1];
          videoSrc =
            httpStr +
            "//www.iqiyi.com/common/flashplayer/20171129/15311a7ff0f5.swf?vid=" +
            urlId +
            "&albumId=" +
            urlTvid +
            "&tvId=" +
            urlTvid;
        }
        return videoSrc.replace(/^http:|^https:/gim, "");
      }
      // 进行html解码
      function decodeHtml(html) {
        return html && html.replace
          ? html
              .replace(/&nbsp;/gi, " ")
              .replace(/&lt;/gi, "<")
              .replace(/&gt;/g, ">")
              .replace(/&#92;/gi, "\\")
              .replace(/&#39;/gi, "'")
              .replace(/&quot;/gi, '"')
              .replace(/\<br\/\>/gi, "\n")
              .replace(/&amp;/gi, "&")
          : html;
      }

      // 事件绑定
      function bindEvent() {
        $popup.find(".closeBtn,.cancelBtn").on("click", function () {
          // 更换视频的时候如果点击取消，那么value值alter也要清除
          if (
            baidu.editor.ui.tool.ele &&
            $(baidu.editor.ui.tool.ele).attr("value") == "alter"
          ) {
            $(baidu.editor.ui.tool.ele).attr("value", null);
          }
          $(body).find("#createVideoStyle").remove();
          $popup.remove();
        });
        $popup.find('input[type="radio"]').on("click", function () {
          var length = $popup.find('input[type="radio"]').length;
          for (var i = 0; i < length; i++) {
            $popup.find(".videoName, .netVideoName ").val("");
            if ($popup.find('input[type="radio"]')[i].checked) {
              var selected = "." + $popup.find('input[type="radio"]')[i].value;
              $popup.find(selected).css("display", "block");
            } else {
              var selected = "." + $popup.find('input[type="radio"]')[i].value;
              $popup.find(selected).css("display", "none");
            }
          }
        });

        // 没有素材库的时候所做的处理
        if (!editor.options.outerFunction.htmlChoiceMP4) {
          $popup
            .find(".videoSelectLocale")
            .css({ display: "block", opacity: 0 });
        }
        var imgRUL = "";
        $popup.find(".videoSelectLocale").on("change", function (e) {
          var chang = $popup.find(".videoSelectLocale");
          $popup.find(".videoName").val(e.currentTarget.files[0].name);
          //     toUrl = UE.editor.options.upLoadImageUrl + '?app=' + UE.editor.options.upImgApp + '&maxWidth=1024&maxHeight=1024&imgMode=2',
          //     jFile = $popup.find('.videoSelectLocale')[0],
          //     uptext = UE.editor.options.upImageExt,
          //     me = this;
          // startUplaod(jFile, me, toUrl, uptext);
          // var file = null;
          // if(this.files && this.files[0] ){
          //     file = this.files[0];
          // }else if(this.files && this.files.item(0)) {
          //     file = this.files.item(0);
          // }
          // imgRUL = window.URL.createObjectURL(file);
        });

        $popup.find(".videoSelect").on("click", function () {
          if (editor.options.outerFunction.htmlChoiceMP4) {
            editor.options.outerFunction.htmlChoiceMP4(htmlSelectMP4);
          }
          // editor.options.outerFunction.htmlChoiceMP4 && editor.options.outerFunction.htmlChoiceMP4(htmlSelectMP4);
        });

        $popup.find(".sureBtn").on("click", function () {
          // 视频更换
          if (
            $(baidu.editor.ui.tool.ele) &&
            $(baidu.editor.ui.tool.ele).attr("value") == "alter" &&
            ($popup.find(".videoName").val() !== videoInputValue ||
              $popup.find(".netVideoName").val() === videoInputValue ||
              $popup.find(".videoLink").val() === videoInputValue) &&
            ($popup.find(".videoName").val() ||
              $popup.find(".netVideoName").val() ||
              $popup.find(".videoLink").val())
          ) {
            // 避免视频更换的时候直接跳到编辑器开头了
            // if((/youku.com/).test($(baidu.editor.ui.tool.ele).attr('name')) ){
            if (baidu.editor.ui.tool.ele.parentNode.nextSibling) {
              var range = editor.selection.getRange();
              // range.selectNode($ele[0].parentNode).select();
              range.setCursor(true);
            }
            // 由于更换过程中会把旧视频清除，而range会移到上一个元素，所以需要将光标focus在替换的p元素
            // $(baidu.editor.ui.tool.ele).parent().remove();
            $(baidu.editor.ui.tool.ele).parent().replaceWith("<p><br/></p>");
            // var focusDom = $(range.startContainer).parents('p').next()[0] || $(range.startContainer).parents('div').next()[0]
            // range.setStart(focusDom,0);
            // range.setEnd(focusDom,0);
            // range.select(true)
            // }else{
            //     $(baidu.editor.ui.tool.ele).remove();
            // }
          }
          var length = $popup.find('input[type="radio"]').length;
          for (var i = 0; i < length; i++) {
            // 有素材库的视频直接上传
            if (
              $popup.find('input[type="radio"]')[i].checked &&
              $($popup.find('input[type="radio"]')[i]).val() == "local" &&
              editor.options.outerFunction.htmlChoiceMP4
            ) {
              var inputCon = $popup.find('input[name="text"]').val();
              if (!inputCon) {
                var videoOptions = {
                  tips: "请上传视频"
                };
                domUtils.ing(videoOptions);
              } else {
                htmlUploadMP4(result1);
                $(body).find("#createVideoStyle").remove();
                $popup.remove();
              }
            } else if (
              $popup.find('input[type="radio"]')[i].checked &&
              $($popup.find('input[type="radio"]')[i]).val() == "local" &&
              !editor.options.outerFunction.htmlChoiceMP4
            ) {
              // 没素材库的直接上传
              // var str = '';
              // str = '<p style="text-align:center;">'+
              //     '<video key="local" style="WIDTH:400px;BACKGROUND:#000;HEIGHT:400px" controls="controls">'+
              //         '<source src="'+imgRUL+'" type="video/mp4" />'+ //Safari / iOS video
              //     '</video>&#8203;<br />'+
              // '</p>';
              // editor.pasteChoiceMp4( str );
              $(body).find("#createVideoStyle").remove();
              $popup.remove();
            } else if (
              $popup.find('input[type="radio"]')[i].checked &&
              ($($popup.find('input[type="radio"]')[i]).val() == "net" ||
                $($popup.find('input[type="radio"]')[i]).val() == "link")
            ) {
              // 视频通用代码上传
              var textareaCon =
                $popup.find('textarea[name="textarea"]').val() ||
                $popup.find('input[class="videoLink"]').val();
              if (/iframe/.test(textareaCon)) {
                var patt1;
                if (
                  /qq.com/.test(textareaCon) ||
                  /iqiyi.com/.test(textareaCon)
                ) {
                  patt1 = /src=\"([^\"]*)\"/;
                } else {
                  patt1 = /src=\'([^\']*)\'/;
                }
                var videoSourse = textareaCon.match(patt1)[1];
                if (paserVideoURL(textareaCon)) {
                  // options.videoSrc = paserVideoURL(textareaCon);
                  var textareaChange;
                  // 添加name属性时，对单引号和双引号做的转换
                  if (
                    /qq.com/.test(textareaCon) ||
                    /iqiyi.com/.test(textareaCon)
                  ) {
                    textareaChange = "'" + textareaCon + "'";
                  } else {
                    textareaChange = '"' + textareaCon + '"';
                  }
                  var str = "";
                  // str = '<div class="netVideoCon" style="text-align:center;">'+
                  //         '<div id="netVideo" class="netVideo" key="netVideo" name=' + textareaChange + ' style="width:400px;height:400px;position:relative;display:inline-block;">'+
                  //             // '<div contenteditable="false" class="netVideo_mask"></div>'+
                  //             '<embed mode="transparent" wmode="transparent" width="400" height="400" src="'+options.videoSrc+'" />'+
                  //             '<div contenteditable="false" class="netVideo_mask"></div>'+
                  //             // '<embed rel="nofollow" src="'+options.videoSrc+'" quality="high" width="400" height="400" align="middle" allowScriptAccess="always" allowFullScreen="true" mode="transparent"  wmode="transparent"></embed>'
                  //         '</div>'+
                  //     '</div>';

                  str =
                    '<div contenteditable="false" class="netVideoCon" style="text-align:center;">' +
                    '<div id="netVideo" class="netVideo" key="netVideo" name=' +
                    textareaChange +
                    ' style="height:400px;position:relative;display:inline-block;">' +
                    // '<div contenteditable="false" class="netVideo_mask"></div>'+
                    '<iframe ifrom="fromIframe" mode="transparent" wmode="transparent" allowScriptAccess="always" allowfullscreen="true" frameborder="no" width="400" height="400" src="' +
                    videoSourse +
                    '" />' +
                    '<div contenteditable="false" class="netVideo_mask"></div>' +
                    // '<embed rel="nofollow" src="'+options.videoSrc+'" quality="high" width="400" height="400" align="middle" allowScriptAccess="always" allowFullScreen="true" mode="transparent"  wmode="transparent"></embed>'
                    "</div>" +
                    "</div>";
                  // editor.pasteChoiceMp4( str );
                  editor.execCommand("inserthtml", str);
                  $(body).find("#createVideoStyle").remove();
                  $popup.remove();
                }
                // else{
                //     var videoOptions = {
                //         tips:"请输入正确的视频通用代码"
                //     }
                //     domUtils.ing(videoOptions);
                // }
              } else if (/embed/.test(textareaCon)) {
                editor.execCommand(
                  "inserthtml",
                  '<p style="text-align:center;">' + textareaCon + "</p>"
                );
                $popup.remove();
              } else {
                if (textareaCon) {
                  str =
                    '<p style="text-align:center;">' +
                    '<video preload="meta" name="' +
                    textareaCon +
                    '" key="link" style="WIDTH:400px;BACKGROUND:#000;HEIGHT:400px" controls="controls" controlsList="nodownload">' +
                    '<source src="' +
                    textareaCon +
                    '" type="video/mp4" />' + //Safari / iOS video
                    '<embed width="400" height="400" type="application/x-shockwave-flash" src="" allowfullscreen="true" />' +
                    "</video></br>" +
                    "</p>";
                  editor.execCommand("inserthtml", str);
                  $popup.remove();
                } else {
                  var videoOptions = {
                    tips: "请输入正确的视频地址"
                  };
                  domUtils.ing(videoOptions);
                }
              }
            }
          }
          // $popup.remove();
        });

        /*
                // 补充
                var Html4Upload = baidu.editor.Html4Upload = function(fromfile, tourl, callback) {
                    tourl += '&forIframe=1';
                    var uid = new Date().getTime(),
                        idIO = 'jUploadFrame' + uid,
                        _this = this;
                    var jIO = $('<iframe name="' + idIO + '" class="xheHideArea" style="display:none" />').appendTo('body');
                    var jForm = $('<form action="' + tourl + '" target="' + idIO + '" method="post" enctype="multipart/form-data" class="xheHideArea"></form>').appendTo('body');
                    var jOldFile = $(fromfile),
                        jNewFile = jOldFile.clone().attr('disabled', true);
                    jOldFile.before(jNewFile).appendTo(jForm);
                    this.remove = function() {
                        //jForm.css('display', 'none');
                        jForm.remove();
                    }

                    this.onLoad = function() { callback($(jIO[0].contentWindow.document.body).text(), true); }
                    this.start = function() {
                        jForm.submit();
                        jIO.load(this.onLoad);
                    }
                    return this;
                }
                function startUplaod(fromfiles, me, tourl, uptext) {
                    var arrMsg = [];
                    var url = window.UEDITOR_CONFIG.UEDITOR_HOME_URL + "/";

                    if (url.substring(url.length - 1, url.length) == "/") {
                        url = url.substring(0, url.length - 1)
                    }
                    var upload, fileList, filename, jUploadTip = $('<div style="margin:22px 0;text-align:center;line-height:30px;">文件上传中，请稍候……<br /></div>'),
                        sLoading = '<img src="' + url + '/image/menu/loading.gif">';
                    if (!checkFileExt(fromfiles.value, uptext)) return;
                    jUploadTip.append(sLoading);
                    upload = new baidu.editor.Html4Upload(fromfiles, tourl, onUploadCallback);

                    bShowPanel = false; //防止按钮面板被关闭
                    new baidu.editor.ShowModal('文件上传中(Esc取消上传)', jUploadTip, 320, 150, function() {
                        bShowPanel = true;
                        upload.remove();
                    });
                    upload.start();
                    upload.remove();
                };
                function checkFileExt(filename, uptext) {
                    if (uptext == '*' || filename.match(new RegExp('\.(' + uptext.replace(/,/g, '|') + ')$', 'i'))) return true;
                    else {
                        alert('上传文件扩展名必需为: ' + uptext);
                        return false;
                    }
                };
                function removeModal() {
                    $('.xheModal').remove();
                    $('.xheModalOverlay').remove();
                    $('.xheModalShadow').remove();
                };

                function onUploadCallback(sText, bFinish) {
                    var data = Object,
                        onUpload = '';
                    var result;
                    try { result = jQuery.parseJSON(sText); } catch (ex) {};
                    if (!result || !result.success) {
                        var msg;
                        if (result && result.msg) {
                            msg = result.msg;
                        } else {
                            msg = '上传失败';
                        }
                        alert(msg);
                        removeModal();
                        return false;
                    }
                    removeModal();
                    setUploadMsg(result.url);
                    if (onUpload) onUpload(arrMsg); //用户上传回调
                    return true;
                };
                function setUploadMsg(arrMsg) {
                    if (typeof(arrMsg) == 'string') arrMsg = [arrMsg]; //允许单URL传递
                    var bImmediate = false,
                        i, count = arrMsg.length,
                        msg, url, arrUrl = [];
                    for (i = 0; i < count; i++) {
                        msg = arrMsg[i];
                        if (typeof(msg) == 'string') {
                            url = msg;
                        } else {
                            url = msg.url;
                        }
                        if (url.substr(0, 1) == '!') {
                            bImmediate = true;
                            url = url.substr(1);
                        }
                        arrUrl.push(url);
                    }
                    $('.xheDialogDiv').find('button')[0].onclick(arrUrl.join(' '));
                };
*/
      }
    },

    //弹出边距设置框
    imgMarginPopup: function (options) {
      for (var topWin = window; ; ) {
        if (topWin != topWin.parent) {
          topWin = topWin.parent;
        } else {
          break;
        }
      }
      // typeof Fai !== 'undefined' && (topWin = Fai.top);
      var body = topWin.document.getElementsByTagName("body");
      var randomId = Math.round(Math.random() * 100001);
      if (body.length) {
        var defaultOptions = {
          id: randomId, //标识当前弹窗的id，可以随便定义,必须传进来的参数
          title: "设置边距",
          sureBtnText: "确认",
          cancelBtnText: "取消"
        };
        options = $.extend(defaultOptions, options);
        body = body[0];
        var ele = baidu.editor.ui.tool.ele;
        var dom =
          '<div id="edui-popup_' +
          options.id +
          '" class="popupInput" style="background-color: rgba(0, 0, 0, .7);position: fixed;top: 0;left: 0;width: 100vw;height: 100vh;text-align:left;display:flex;justify-content: center;align-items: center;z-index:9033;">' +
          '<div class="popupBody" style="position: relative;border-radius: 2px;width: 420px;height:290px;background-color: #fff;">' +
          '<div class="title" style="padding: 18px 40px 18px 17px;line-height: 27px;font-size: 14px;border-bottom: 1px solid #dadada;">' +
          options.title +
          "</div>" +
          '<div class="closeBtn" style="background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/mbg01.png) -449px -187px no-repeat;position: absolute;top: 20px;right: 12px;width: 20px;height: 20px;cursor:pointer;"></div>' +
          '<div class="content" style="width:85%;height:110px;margin:0px auto;font-size:14px;">' +
          '<div style="text-align:center;padding-top:38px">' +
          '<div style="position:relative;display:inline-block">' +
          '<label for="leftMar" style="margin-right:10px;">左:</label>' +
          '<input class="leftMargin" id="leftMar" type="number" min="0" style="width:106px;height:33px;box-sizing: border-box;padding:0 6px;border-radius:2px;border:1px solid #ccc;"> px' +
          // '<i class="addNmuber" name="left" style="position:absolute;top:3px;left:118px;cursor:pointer; width: 0;height: 0;border-left: 5px solid transparent;border-right: 5px solid transparent;border-bottom: 10px solid #aaa;"></i>'+
          // '<i class="subNmuber" name="left" style="position:absolute;top:20px;left:118px;cursor:pointer; width: 0;height: 0;border-left: 5px solid transparent;border-right: 5px solid transparent;border-top: 10px solid #aaa;"></i>'+
          '<i class="addNmuber" name="left" style="position:absolute;top:1px;left:113px;cursor:pointer; width: 20px;height: 16px;border-left: 1px solid #ccc;background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/mbg01.png) -17px -1287px no-repeat;"></i>' +
          '<i class="subNmuber" name="left" style="position:absolute;top:17px;left:113px;cursor:pointer; width: 20px;height: 15px;border-left: 1px solid #ccc;border-top: 1px solid #ccc;background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/mbg01.png) 4px -1287px no-repeat;"></i>' +
          "</div>" +
          '<div style="position:relative;display:inline-block">' +
          '<label for="rightMar" style="margin:0 10px 0 18px;">右:</label>' +
          '<input class="rightMargin" id="rightMar" type="number" min="0" style="width:106px;height:33px;box-sizing: border-box;padding:0 6px;border-radius:2px;border:1px solid #ccc;"> px' +
          // '<i class="addNmuber" name="right" style="position:absolute;top:3px;right:27px;cursor:pointer; width: 0;height: 0;border-left: 5px solid transparent;border-right: 5px solid transparent;border-bottom: 10px solid #aaa;"></i>'+
          // '<i class="subNmuber" name="right" style="position:absolute;top:20px;right:27px;cursor:pointer; width: 0;height: 0;border-left: 5px solid transparent;border-right: 5px solid transparent;border-top: 10px solid #aaa;"></i>'+
          '<i class="addNmuber" name="right" style="position:absolute;top:1px;left:130px;cursor:pointer; width: 20px;height: 16px;border-left: 1px solid #ccc;background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/mbg01.png) -17px -1287px no-repeat;"></i>' +
          '<i class="subNmuber" name="right" style="position:absolute;top:17px;left:130px;cursor:pointer; width: 20px;height: 15px;border-left: 1px solid #ccc;border-top: 1px solid #ccc;background: url(' +
          UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/mbg01.png) 4px -1287px no-repeat;"></i>' +
          "</div>" +
          "</div>" +
          "</div>" +
          '<div class="footer" style="height: 90px;display: flex;justify-content: center;align-items: center;font-size: 14px;background-color:#fff;">' +
          '<input type="button" disabled class="btn sureBtn" value="' +
          options.sureBtnText +
          '" style="margin-right: 36px;background-color: #ccc;width: 102px;height:35px;line-height: 33px;border-radius: 3px;text-align: center;color: #fff;border: none;cursor: pointer;">' +
          '<input type="button" class="btn cancelBtn" value="' +
          options.cancelBtnText +
          '" style="border: 1px solid #e7e7eb;box-sizing:border-box;color: #666;width: 102px;height:35px;line-height: 33px;border-radius: 3px;text-align: center;cursor: pointer;">' +
          "</div>" +
          "</div>" +
          "</div>";

        var $popup = $(body)
          .append(dom)
          .find("#edui-popup_" + options.id);
        bindEvent();
      }

      var marginLeft = parseInt($(ele).css("marginLeft"));
      var marginRight = parseInt($(ele).css("marginRight"));
      if ($(ele).css("marginLeft")) {
        $popup.find(".leftMargin").attr("value", marginLeft);
      }
      if ($(ele).css("marginRight")) {
        $popup.find(".rightMargin").attr("value", marginRight);
      }

      // 插入style样式，把input type=number的默认箭头去掉
      $('<style id="createStyle">')
        .text(
          'input::-webkit-outer-spin-button,input::-webkit-inner-spin-button {-webkit-appearance: none !important;margin: 0;}input[type="number"]{-moz-appearance:textfield;}'
          // 'i.addNmuber:before{content:"";display:inline-block;width:1px;height:16px;position:absolute;top:-3px;left:-10px;background-color:#ccc;}'+
          // 'i.subNmuber:before{content:"";display:inline-block;width:1px;height:16px;position:absolute;bottom:-3px;left:-10px;background-color:#ccc;}'+
          // 'i.addNmuber:after{content:"";display:inline-block;width:20px;height:1px;position:absolute;top:13px;left:-10px;background-color:#ccc;}'
        )
        .appendTo($(body));

      // 事件绑定
      function bindEvent() {
        // 取消按钮
        $popup.find(".cancelBtn,.closeBtn").on("click", function () {
          $popup.remove();
          $(body).find("#createStyle").remove();
        });

        // 输入框变化时触发。不用change是因为直接输入数字无法即时触发，需失去焦点才触发
        $popup.find(".leftMargin,.rightMargin").on("input", function (ev) {
          // 禁止输入负数
          // var val = ev.target.value;
          // ev.target.value = val>0?val:0
          ev.target.value = ev.target.value.replace(/\-/g, "");

          $popup.find(".sureBtn").removeAttr("disabled");
          $popup.find(".sureBtn").css("background-color", "#4a68ec");
        });

        // input内部增减按钮
        $popup.find(".addNmuber").on("click", function (ev) {
          if ($(ev.target).attr("name") === "left") {
            var inputValue = $(ev.target).siblings(".leftMargin").attr("value");
            $(ev.target)
              .siblings(".leftMargin")
              .attr("value", parseInt(inputValue) + 1);
          } else {
            var inputValue = $(ev.target)
              .siblings(".rightMargin")
              .attr("value");
            $(ev.target)
              .siblings(".rightMargin")
              .attr("value", parseInt(inputValue) + 1);
          }
          $popup.find(".sureBtn").removeAttr("disabled");
          $popup.find(".sureBtn").css("background-color", "#4a68ec");
        });
        $popup.find(".subNmuber").on("click", function (ev) {
          if (
            $(ev.target).attr("name") === "left" &&
            $(ev.target).siblings(".leftMargin").attr("value") > 0
          ) {
            var inputValue = $(ev.target).siblings(".leftMargin").attr("value");
            $(ev.target)
              .siblings(".leftMargin")
              .attr("value", parseInt(inputValue) - 1);
            $popup.find(".sureBtn").removeAttr("disabled");
            $popup.find(".sureBtn").css("background-color", "#4a68ec");
          } else if (
            $(ev.target).attr("name") === "right" &&
            $(ev.target).siblings(".rightMargin").attr("value") > 0
          ) {
            var inputValue = $(ev.target)
              .siblings(".rightMargin")
              .attr("value");
            $(ev.target)
              .siblings(".rightMargin")
              .attr("value", parseInt(inputValue) - 1);
            $popup.find(".sureBtn").removeAttr("disabled");
            $popup.find(".sureBtn").css("background-color", "#4a68ec");
          }
          // $popup.find('.sureBtn').removeAttr('disabled');
          // $popup.find('.sureBtn').css('background-color','#4a68ec');
        });

        // 长按箭头时数字不断增加
        var addId, subId;
        $popup.find(".addNmuber").on("mousedown", function (ev) {
          addId = setInterval(function () {
            if ($(ev.target).attr("name") === "left") {
              var inputValue = $(ev.target)
                .siblings(".leftMargin")
                .attr("value");
              $(ev.target)
                .siblings(".leftMargin")
                .attr("value", parseInt(inputValue) + 1);
            } else {
              var inputValue = $(ev.target)
                .siblings(".rightMargin")
                .attr("value");
              $(ev.target)
                .siblings(".rightMargin")
                .attr("value", parseInt(inputValue) + 1);
            }
            $popup.find(".sureBtn").removeAttr("disabled");
            $popup.find(".sureBtn").css("background-color", "#4a68ec");
          }, 180);
        });
        $popup.find(".addNmuber").on("mouseup", function (ev) {
          clearInterval(addId);
        });
        $popup.find(".addNmuber").on("mouseout", function (ev) {
          clearInterval(addId);
        });
        $popup.find(".subNmuber").on("mousedown", function (ev) {
          subId = setInterval(function () {
            if (
              $(ev.target).attr("name") === "left" &&
              $(ev.target).siblings(".leftMargin").attr("value") > 0
            ) {
              var inputValue = $(ev.target)
                .siblings(".leftMargin")
                .attr("value");
              $(ev.target)
                .siblings(".leftMargin")
                .attr("value", parseInt(inputValue) - 1);
              $popup.find(".sureBtn").removeAttr("disabled");
              $popup.find(".sureBtn").css("background-color", "#4a68ec");
            } else if (
              $(ev.target).attr("name") === "right" &&
              $(ev.target).siblings(".rightMargin").attr("value") > 0
            ) {
              var inputValue = $(ev.target)
                .siblings(".rightMargin")
                .attr("value");
              $(ev.target)
                .siblings(".rightMargin")
                .attr("value", parseInt(inputValue) - 1);
              $popup.find(".sureBtn").removeAttr("disabled");
              $popup.find(".sureBtn").css("background-color", "#4a68ec");
            }
          }, 180);
        });
        $popup.find(".subNmuber").on("mouseup", function (ev) {
          clearInterval(subId);
        });
        $popup.find(".subNmuber").on("mouseout", function (ev) {
          clearInterval(subId);
        });

        // 确认按钮
        $popup.find(".sureBtn").on("click", function () {
          var inputMarginLeft = $popup.find(".leftMargin").attr("value");
          var inputMarginRight = $popup.find(".rightMargin").attr("value");
          $(ele).css("marginLeft", inputMarginLeft + "px");
          $(ele).css("marginRight", inputMarginRight + "px");
          if ($(ele).css("float") === "left") {
            $(ele).attr("ll", $(ele).css("margin-left"));
            $(ele).attr("lr", $(ele).css("margin-right"));
          } else if ($(ele).css("float") === "right") {
            $(ele).attr("rl", $(ele).css("margin-left"));
            $(ele).attr("rr", $(ele).css("margin-right"));
          } else if (
            $(ele).css("float") === "none" &&
            $(ele).parent().css("text-align") !== "center"
          ) {
            $(ele).attr("nl", $(ele).css("margin-left"));
            $(ele).attr("nr", $(ele).css("margin-right"));
          } else if ($(ele).parent().css("text-align") === "center") {
            $(ele).attr("cl", $(ele).css("margin-left"));
            $(ele).attr("cr", $(ele).css("margin-right"));
          }
          $popup.remove();
          $(body).find("#createStyle").remove();
        });
      }
    },

    // 创建表格的弹窗
    tablePopup: function (options) {
      for (var topWin = window; ; ) {
        if (topWin != topWin.parent) {
          topWin = topWin.parent;
        } else {
          break;
        }
      }

      // typeof Fai !== 'undefined' && (topWin = Fai.top);
      var body = topWin.document.getElementsByTagName("body");
      var randomId = Math.round(Math.random() * 100001);
      if (body.length) {
        var defaultOptions = {
          id: randomId, //标识当前弹窗的id，可以随便定义,必须传进来的参数
          title: "表格",
          sureBtnText: "确认",
          cancelBtnText: "取消"
        };
        options = $.extend(defaultOptions, options);
        body = body[0];
        var ele = baidu.editor.ui.tool.ele;

        var iframeContent = [
          '<div id="edui-popup_' +
            options.id +
            '" class="popupInput" style="background-color: rgba(0, 0, 0, .7);position: fixed;top: 0;left: 0;width: 100vw;height: 100vh;text-align:left;display:flex;justify-content: center;align-items: center;z-index:9032;">',
          '<div class="wrapper" id="tablewrapper_id" style="height: 560px;width:715px;position:absolute;left:50%;top:50%;margin-left:-357px;margin-top:-280px;background-color:#ffffff;border-radius:3px;">',
          '<div class="title" style="padding: 20px 40px 21px 20px;line-height: 22px;font-size: 16px;border-bottom: 1px solid #e3e2e8;">' +
            options.title +
            "</div>",
          '<div class="closeBtn" style="background: url(' +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/mbg02.png) -58px 2px no-repeat;position: absolute;top: 22px;right: 18px;width: 18px;height: 18px;cursor:pointer;"></div>',
          '<fieldset  class="base">',
          // '<legend style="margin-left: 5px; font-weight: bold;font-size: 12px;color: #0066cc;">',
          // '</legend>',
          '<table style="float: left;">',
          '<tr style="margin:0 0 7px 0;"><td style="font-size:14px;">基础信息</td></tr>',
          "<tr>",
          '<td width="156"><label for="numRows">行数：</label><input id="numRows" maxLength="2" value="5行" type="text" style="border:1px solid #e3e2e8;" /></td>',
          '<td width="170">',
          '<label for="ueditorWidth">宽度：</label><input id="ueditorWidth" type="text" style="border:1px solid #e3e2e8;" value="默认" />',
          '<label for="ueditorWidthUnit"></label>',
          "</td>",
          "</tr>",
          "<tr>",
          '<td width="156"><label for="numCols">列数：</label><input id="numCols" maxLength="2" value="5列" type="text" style="border:1px solid #e3e2e8;" /></td>',
          '<td width="170">',
          '<label for="ueditorHeight">高度：</label><input id="ueditorHeight" type="text" style="border:1px solid #e3e2e8;" value="默认" />',
          '<label for="ueditorHeightUnit"></label>',
          "</select>",
          "</td>",
          "</tr>",
          "</table>",
          '<div id="message" style="display: none">',
          "<p>温馨提示：</p>",
          '<p id="messageContent"><var id="lang_maxPadding"></var></p>',
          "</div>",
          "</fieldset>",
          "<div>",
          '<fieldset  class="extend">',
          // '<legend style="color: #0066cc;font-weight: bold;">',
          // '</legend>',
          "<table >",
          '<tr style="margin:0 0 7px 0;"><td style="font-size:14px;">扩展信息(可预览)</td></tr>',
          "<tr>",
          '<td width="182"><label for="border">边框大小：</label><input id="border" type="text" style="border:1px solid #e3e2e8;color:#000;" />&nbsp;</td>',
          '<td colspan="3">',
          '<span class="bold">边框样式</span>：',
          "</td>",
          "<td>",
          '<div id="borderStyle" style="width: 76px;height:30px;margin-right: 10px;position:relative;border:1px solid #e3e2e8;border-radius:3px;" value="solid">',
          '<div class="borderStyleInner" style="width: 34px;height:30px;position:relative;overflow: hidden;margin-left:10px;display:inline-block;"><div style="width: 50px;height: 1px;box-sizing: border-box;border-bottom: 1px solid #666;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></div>',
          '<p class="borderStyleIcon tableIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
          '<p class="borderStyleMask tableMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
          '<ul class="borderStyleCon" style="width: 78px;height:97px;list-style-type: none;box-sizing: border-box;padding:8px 0 0 0;position:absolute;top:36px;left:-1px;border-radius:3px;background-color:#fff;box-shadow:0 0 8px 1px rgba(0,0,0,0.14);display:none;">',
          // '<li value="solid">————</li>',
          // '<li value="dashed">----------</li>',
          // '<li value="dotted">·················</li>',
          '<li value="solid"><div class="liSolid" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
          '<li value="dashed"><div class="liDashed" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
          '<li value="dotted"><div class="liDotted" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
          "</ul>",
          "</div>",
          "</td>",
          "</tr>",
          "<tr>",
          '<td width="182"><label for="borderColor">边框颜色：</label><input id="borderColor" type="text" style="border:1px solid #e3e2e8;cursor: pointer;" readonly="readonly" bdColor = "#000000"/></td>',
          '<td colspan="3"><span class="bold" style="float:left;line-height:30px;">填充颜色：</span><input id="bgColor" type="text" style="border:1px solid #e3e2e8;cursor: pointer;" readonly="readonly" /></td>',
          "</tr>",
          "<tr>",
          '<td width="158" style="padding-left:27px;"><label for="cellPadding">边距：</label><input id="cellPadding" type="text" style="border:1px solid #e3e2e8;" />&nbsp;</td>',
          '<td style="padding-left:25px;"><label for="cellSpacing">间距：</label><input id="cellSpacing" type="text" style="border:1px solid #e3e2e8;" /></td>',
          "</tr>",
          "<tr>",
          '<td colspan="3"><span class="bold">对齐方式</span>：',
          "</td>",
          "<td>",
          '<div id="align" style="width: 108px;height:30px;margin-right: 10px;position:relative;border:1px solid #e3e2e8;border-radius:3px;" value="left">',
          '<nobr class="alignInner" style="margin: 6px 0 0 10px;display:inline-block;">左对齐</nobr>',
          '<p class="alignIcon tableIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
          '<p class="alignMask tableMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
          '<ul class="alignCon" style="width: 110px;height:106px;list-style-type: none;box-sizing: border-box;padding:8px 0 0 0;position:absolute;top:36px;left:-1px;border-radius:3px;background-color:#fff;z-index:999;box-shadow:0 0 8px 1px rgba(0,0,0,0.14);display:none;">',
          '<li value="left">左对齐</li>',
          '<li value="center">居中对齐</li>',
          '<li value="right">右对齐</li>',
          "</ul>",
          "</div>",
          "</td>",
          "</tr>",
          "<tr>",
          '<td colspan="3">',
          '<span class="bold">边框设置</span>：',
          "</td>",
          "<td>",
          '<div id="borderType" style="width: 108px;height:30px;margin-right: 10px;position:relative;border:1px solid #e3e2e8;border-radius:3px;" value="0">',
          '<nobr class="borderTypeInner" style="margin: 6px 0 0 10px;display:inline-block;">所有单元格</nobr>',
          '<p class="borderTypeIcon tableIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
          '<p class="borderTypeMask tableMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
          '<ul class="borderTypeCon" style="width: 110px;height:72px;list-style-type: none;box-sizing: border-box;padding:8px 0 0 0;position:absolute;top:36px;left:-1px;border-radius:3px;background-color:#fff;box-shadow:0 0 8px 1px rgba(0,0,0,0.14);display:none;">',
          '<li value="0">所有单元格</li>',
          '<li value="1">仅表格</li>',
          "</ul>",
          "</div>",
          "</td>",
          "</tr>",
          "</table>",
          "</fieldset>",

          '<div id="preview">',
          '<table border="1" borderColor="#000" cellpadding="0" cellspacing="0" style="border-collapse: collapse;">',
          '<tr><td colspan="3" style="width:90px;">这是用来预览的</td></tr>',
          "<tr><td></td><td></td><td></td></tr>",
          "<tr><td></td><td></td><td></td></tr>",
          "</table>",
          "</div>",
          "</div>",
          '<div style="float: right;margin: 15px 240px 10px 0px; _width:200px;_margin-right:0px;">',
          '<button class="tableSure" style=" height: 34px;margin-right: 45px;width: 100px;border:1px solid #5874d8;border-radius:2px;color:#fff;font-size: 14px;line-height: 18px;text-align: center;cursor: pointer;line-height: 18px;">确定</button>',
          '<button class="tableCancel" style=" height: 34px;width: 100px;margin-right: -5px;border:1px solid #e3e2e8;border-radius:2px;font-size: 14px;line-height: 18px;text-align: center;cursor: pointer;line-height: 18px;">取消</button>',
          "</div>",
          "</div>",
          "</div>"
        ];
        var dom = iframeContent.join("");
        var $popup = $(body)
          .append(dom)
          .find("#edui-popup_" + options.id);

        $popup.find("#border")[0].value = "1px";
        $popup.find("#cellSpacing")[0].value = "0px";

        // "表格属性"编辑时初始化
        var state = editor.queryCommandState("edittable");
        if (state == 0) {
          var range = editor.selection.getRange(),
            table = domUtils.findParentByTagName(
              range.startContainer,
              "table",
              true
            );
          if (table) {
            var numRows = table.rows.length,
              cellCount = 0;
            //列取最大数
            for (var i = 0, ri; (ri = table.rows[i++]); ) {
              var tmpCellCount = 0;
              for (var j = 0, cj; (cj = ri.cells[j++]); ) {
                if (cj.style.display != "none") {
                  tmpCellCount++;
                }
              }
              cellCount = Math.max(tmpCellCount, cellCount);
            }
            domUtils.setAttributes($popup.find("#numRows")[0], {
              value: numRows + "行",
              disabled: true
            });
            domUtils.setAttributes($popup.find("#numCols")[0], {
              value: cellCount + "列",
              disabled: true
            });

            $popup.find("#cellPadding")[0].value = table.getAttribute(
              "cellPadding"
            )
              ? table.getAttribute("cellPadding") + "px"
              : "";
            $popup.find("#cellSpacing")[0].value = table.getAttribute(
              "cellSpacing"
            )
              ? table.getAttribute("cellSpacing") + "px"
              : "0px";

            var value = table.getAttribute("width");
            value = !value
              ? ["", table.offsetWidth]
              : /%$/.test(value)
              ? value.match(/(\d+)(%)?/)
              : ["", value.replace(/px/i, "")];

            $popup.find("#ueditorWidth")[0].value = value[1] + "px";
            // //$G('ueditorWidthUnit').options[value[2] ? 1:0].selected = true;
            value = table.getAttribute("height");
            value = !value
              ? ["", ""]
              : /%$/.test(value)
              ? value.match(/(\d+)(%)?/)
              : ["", value.replace(/px/i, "")];
            $popup.find("#ueditorHeight")[0].value = value[1]
              ? value[1] + "px"
              : "默认";
            // $popup.find("#ueditorHeight")[0].value = value[1]; //? value[1] : $(table).outerHeight();
            // //$G('ueditorHeightUnit').options[value[2]?1:0].selected = true;
            // $popup.find('#borderColor')[0].value = (table.getAttribute('borderColor') || "#000000").toUpperCase();
            $popup
              .find("#borderColor")
              .css(
                "background-color",
                (table.getAttribute("borderColor") || "#000000").toUpperCase()
              );
            $popup.find("#border")[0].value =
              table.getAttribute("border") + "px";
            // for (var i = 0, ip, opts = $popup.find("#align").options; ip = opts[i++];) {
            //     if (ip.value == (table.getAttribute('align') || "").toLowerCase()) {
            //         ip.selected = true;
            //         break;
            //     }
            // }
            // $popup.find("#preview").css('width','298px');
            $popup.find(".alignInner")[0].innerHTML = $popup.find(
              "#align li[value=" +
                (table.getAttribute("align") || "left").toLowerCase() +
                "]"
            )[0].innerHTML;
            $popup
              .find("#align")
              .attr("value", (table.getAttribute("align") || "").toLowerCase());

            $popup.find(".borderTypeInner")[0].innerHTML = $popup.find(
              "#borderType li[value=" +
                (table.getAttribute("borderType") || "0") +
                "]"
            )[0].innerHTML;
            $popup
              .find("#borderType")
              .attr("value", table.getAttribute("borderType") || "0");

            // $G("borderType").options[table.getAttribute('borderType') == '1' ? 1 : 0].selected = true;
            // //$G("commCellPadding").options[table.getAttribute('commCellPadding') == '1' ? 1: 0].selected = true;
            // $popup.find("#bgColor")[0].value = (table.getAttribute("bgColor") || "").toUpperCase();
            $popup
              .find("#bgColor")
              .css(
                "background-color",
                (table.style.backgroundColor || "").toUpperCase()
              );
            var stateBorderStyle =
              table.style.borderStyle === "none" || !table.style.borderStyle
                ? "solid"
                : table.style.borderStyle;
            $popup.find(".borderStyleInner")[0].innerHTML = $popup.find(
              'li[value="' + stateBorderStyle + '"]'
            )[0].innerHTML;
            $popup
              .find("#borderStyle")
              .attr("value", table.style.borderStyle || "solid");
            createTable();
          }
        } else {
          // $focus($G("numRows"));
        }
        bindEvent();
      }

      // 插入css
      $('<style id="createStyle">')
        .text(
          ".wrapper{font-size: 12px;}" +
            ".wrapper .closeBtn{-moz-transition: all 0.15s;-webkit-transition: all 0.15s;-o-transition: all 0.15s;transition: all 0.15s;-webkit-transform: rotate(0deg);-moz-transform: rotate(0deg);-ms-transform: rotate(0deg);transform: rotate(0deg);}" +
            ".wrapper .closeBtn:hover{-webkit-transform: rotate(90deg);-moz-transform: rotate(90deg);-ms-transform: rotate(90deg);transform: rotate(90deg);}" +
            ".base{width: 675px;height: 132px;margin:10px 20px 0 20px;border: 1px solid #e3e2e8;border-radius: 3px;box-sizing:border-box;font-size:13px;color:#333;}" +
            ".base table tr{height: 25px;display: block;margin-bottom: 17px;}" +
            ".base table input{height: 32px;width: 78px;padding-left: 10px;box-sizing: border-box;border-radius: 3px;margin-left:4px;}" +
            ".extend {width: 379px;height: 258px;margin:10px 0px 10px 20px;_margin-left:5px;;float: left;border: 1px solid #e3e2e8;box-sizing:border-box;border-radius: 3px 0 0 3px;font-size:13px;color:#333;}" +
            ".extend table{height: 155px;}" +
            ".extend table input{height: 32px;width: 78px;padding-left: 10px;box-sizing: border-box;border-radius: 3px;margin-left:4px;}" +
            ".extend table tr{display: block;margin-bottom: 4px;}" +
            ".wrapper .tableSure{background-color:#5874d8;}" +
            ".wrapper .tableSure:active{background-color:#4a67d1}" +
            ".wrapper .tableCancel{background-color:#fff;color:#333;}" +
            ".wrapper .tableCancel:hover{background-color:#5874d8;color:#fff;}" +
            ".wrapper .tableCancel:active{background-color:#4a67d1}" +
            "#preview{width: 296px;height: 258px;box-sizing:border-box;float: left;border: 1px solid #e3e2e8;border-left:none;margin: 10px 20px 0 0;background-color: #f2f2f2;font-size:13px;border-radius:0 3px 3px 0;}" +
            "#preview table {margin:3px 5px;}" +
            "#preview table td{width: 30px;height: 20px;}" +
            "#message{float: left;width: 180px;margin-left: 10px;font-size: 10px;color: red;line-height: 15px}" +
            "#messageContent{color: green;margin-top: 5px;}" +
            ".extend select{width: 90px}" +
            "#borderType{width: 92px;_width: 112px }" +
            "#borderColor{background-color:#000000;}" +
            ".wrapper .extend .borderStyleIcon{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -27px;}" +
            ".wrapper .extend .borderStyleIcon.active{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -58px;}" +
            ".wrapper .extend .borderStyleCon{width: 68px;height: 25px;margin: 0 auto;text-align: center;line-height: 25px;cursor: pointer;}" +
            ".wrapper .extend .borderStyleCon li{width: 68px;height: 25px;box-sizing: border-box;margin: 0 auto;position:relative;margin-bottom: 4px;}" +
            ".wrapper .extend .borderStyleCon li:hover{background-color: #5874d8;}" +
            ".wrapper .extend .borderStyleCon li .liSolid,.wrapper .extend .borderStyleInner .liSolid{border-bottom:1px solid #666}" +
            ".wrapper .extend .borderStyleCon li:hover .liSolid{border-bottom:1px solid #fff}" +
            ".wrapper .extend .borderStyleCon li .liDashed,.wrapper .extend .borderStyleInner .liDashed{border-bottom:1px dashed #666}" +
            ".wrapper .extend .borderStyleCon li:hover .liDashed{border-bottom:1px dashed #fff}" +
            ".wrapper .extend .borderStyleCon li .liDotted,.wrapper .extend .borderStyleInner .liDotted{border-bottom:1px dotted #666}" +
            ".wrapper .extend .borderStyleCon li:hover .liDotted{border-bottom:1px dotted #fff}" +
            ".wrapper .extend .alignIcon{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -27px;}" +
            ".wrapper .extend .alignIcon.active{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -58px;}" +
            ".wrapper .extend .alignCon{width: 68px;height: 25px;margin: 0 auto;text-align: center;line-height: 25px;cursor: pointer;}" +
            ".wrapper .extend .alignCon li{width: 100px;height: 28px;box-sizing: border-box;margin: 0 auto;font-size: 13px;color: #333;margin-bottom: 3px}" +
            ".wrapper .extend .alignCon li:hover{background-color: #5874d8;color: #fff;}" +
            ".wrapper .extend .borderTypeIcon{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -27px;}" +
            ".wrapper .extend .borderTypeIcon.active{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -58px;}" +
            ".wrapper .extend .borderTypeCon{width: 68px;height: 25px;margin: 0 auto;text-align: center;line-height: 25px;cursor: pointer;}" +
            ".wrapper .extend .borderTypeCon li{width: 100px;height: 28px;box-sizing: border-box;margin: 0 auto;font-size: 13px;color: #333;margin-bottom: 3px}" +
            ".wrapper .extend .borderTypeCon li:hover{background-color: #5874d8;color: #fff;}" +
            ".colorPicker-openUpColorText{float: left;margin-right: 1px;font-size: 12px;line-height: 14px;height: 18px;width: 14px;padding: 3px 5px;cursor: pointer;background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/gou.png?v=201709011515) no-repeat;}" +
            ".colorPicker-nocolor{float: right; margin-right: 1px; font-size: 12px;line-height: 14px;height: 18px; width: 14px; padding: 3px 5px; cursor: pointer;background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/clean.png?v=201709011515) no-repeat;}" +
            ".colorpicker-tablefirstrow{height:30px;}"
        )
        .appendTo($(body));

      function bindEvent() {
        $popup.find("button")[1].onclick = function () {
          $popup.remove();
          $(body).find("#createStyle").remove();
        };
        // console.log($popup.find('input'))
        // $popup.find('.closeBtn').on('click',function(){
        //     $popup.remove();
        //     $(body).find('#createStyle').remove();
        // });
        $popup.find(".closeBtn")[0].onclick = function () {
          $popup.remove();
          $(body).find("#createStyle").remove();
        };

        // input取得焦点之后去掉单位并且选中状态
        $popup.find("input").bind("focus", function () {
          var focusId = [
            "numRows",
            "numCols",
            "ueditorWidth",
            "ueditorHeight",
            "border",
            "cellPadding",
            "cellSpacing"
          ];
          if (focusId.indexOf(this.id) >= 0 && parseInt(this.value)) {
            this.value = parseInt(this.value);
          }
          $(this).select();
        });
        //input失去焦点的时候
        $popup.find("input").bind("blur", function (ev) {
          switch (this.id) {
            case "numRows":
              if (this.value.replace(/(^\s*)|(\s*$)/g, "") == "") {
                domUtils.ing({
                  tips: "行数不能为空！"
                });
                $(this).focus();
                return false;
              }
              this.value = parseInt(this.value) + "行";
              if (
                $popup.find("#ueditorHeight").val() != "默认" &&
                parseInt($popup.find("#ueditorHeight").val()) <
                  parseInt(this.value) * 23 + 1
              ) {
                $popup.find("#ueditorHeight").val("默认");
                $popup.find("#message")[0].style.display = "";
                $popup.find("#messageContent")[0].innerHTML =
                  "行数为" +
                  this.value +
                  ",最小高度需为" +
                  (parseInt(this.value) * 23 + 1) +
                  "px";
              }
              break;
            case "numCols":
              if (this.value.replace(/(^\s*)|(\s*$)/g, "") == "") {
                domUtils.ing({
                  tips: "列数不能为空！"
                });
                $(this).focus();
                return false;
              }
              this.value = parseInt(this.value) + "列";
              break;
            case "ueditorWidth":
              if (parseInt(this.value)) {
                this.value = parseInt(this.value) + "px";
              } else {
                this.value = "默认";
              }
              break;
            case "ueditorHeight":
              if (parseInt(this.value)) {
                var curentRow = parseInt($popup.find("#numRows").val());
                if (this.value < curentRow * 23 + 1) {
                  $popup.find("#" + this.id)[0].value = "默认";
                  $popup.find("#message")[0].style.display = "";
                  $popup.find("#messageContent")[0].innerHTML =
                    "行数为" +
                    curentRow +
                    "行,最小高度需为" +
                    (curentRow * 23 + 1) +
                    "px";
                } else {
                  this.value = parseInt(this.value) + "px";
                }
              } else {
                this.value = "默认";
              }
              break;
            case "border":
              if (this.value.replace(/(^\s*)|(\s*$)/g, "") == "") {
                domUtils.ing({
                  tips: "边框大小不能为空！"
                });
                $(this).focus();
                return false;
              }
            case "cellSpacing":
              if (this.value.replace(/(^\s*)|(\s*$)/g, "") == "") {
                this.value = "0px";
              }
            case "cellPadding":
              if (this.value.replace(/(^\s*)|(\s*$)/g, "") !== "") {
                this.value = parseInt(this.value) + "px";
              }
          }
        });
        // 按键时只能输入数字
        $popup.find("input").bind("keyup", function (ev) {
          var focusId = ["numRows", "numCols", "ueditorWidth", "ueditorHeight"];
          if (
            focusId.indexOf(this.id) >= 0 &&
            !isNum(this.value) &&
            this.value != ""
          ) {
            // return ev.keyCode>=48 && ev.keyCode<=57;
            // this.value = filter(this.value, this.id);
            $popup.find("#" + this.id)[0].value = "";
            $popup.find("#message")[0].style.display = "";
            $popup.find("#messageContent")[0].innerHTML = "请输入正确的数值";

            return (this.value = "");
          }
        });

        // 确认按钮
        $popup.find("button")[0].onclick = function () {
          var inputs = $popup.find("input");
          divSelects = [];
          divSelects.push($popup.find("#borderStyle")[0]);
          divSelects.push($popup.find("#align")[0]);
          divSelects.push($popup.find("#borderType")[0]);
          for (var i = 0, opt = {}, ci; (ci = inputs[i++]); ) {
            if (ci.id === "ueditorHeight" && ci.value === "默认") {
              ci.value = "";
            } else if (ci.id === "ueditorWidth" && ci.value === "默认") {
              ci.value = "";
            }
            // if(ci.id === 'numRows' || ci.id === 'numCols'){
            //     if(ci.value.replace(/(^\s*)|(\s*$)/g, "") == ""){
            //         domUtils.ing({
            //             tips: '行数或列数不能为空！'
            //         });
            //         $(ci).focus();
            //         return false;
            //     }
            // }

            // if(ci.id === 'border'){
            //     if(ci.value.replace(/(^\s*)|(\s*$)/g, "") == ""){
            //         domUtils.ing({
            //             tips: '边框大小不能为空！'
            //         });
            //         $(ci).focus();
            //         return false;
            //     }
            // }
            // switch (ci.id) {
            //     case 'numRows':
            //     case 'numCols':
            //     case 'ueditorHeight':
            //     case 'ueditorWidth':
            //         // if (ci.value && !/^[1-9]+[0-9]*$/.test(parseInt(ci.value))) {
            //         //     domUtils.ing({
            //         //         tips: '请输入正确的数值'
            //         //     });
            //         //     $(ci).focus();
            //         //     return false;
            //         // }
            //         if(ci.id === 'ueditorHeight' && ci.value === '默认'){
            //             ci.value = ''
            //         }else if(ci.id === 'ueditorWidth' && ci.value === '默认'){ci.value = ''}
            //         // ci.value ? ci.value = parseInt(ci.value) : "";
            //         break;
            //     case 'cellspacing':
            //     case 'cellpadding':
            //     case 'border':
            //         // if (ci.value && !/^[0-9]*$/.test(parseInt(ci.value))) {
            //         //     // alert(lang.errorNum);
            //         //     // $focus(ci);
            //         //     domUtils.ing({
            //         //         tips: '请输入正确的数值'
            //         //     });
            //         //     $(ci).focus();
            //         //     return false;
            //         // }
            //         break;
            //     case 'bgColor':
            //     case 'borderColor':
            //         // if (ci.value && !/^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(ci.value)) {
            //         //     // alert(lang.errorColor);
            //         //     // $focus(ci);
            //         //     domUtils.ing({
            //         //         tips: '请输入正确的颜色值，如#34abdd'
            //         //     });
            //         //     $(ci).focus();
            //         //     return false;
            //         // }
            //         break;
            //     default:
            // }
            if (ci.id === "bgColor" || ci.id === "borderColor") {
              opt[ci.id] = ci.style.backgroundColor;
            } else {
              opt[ci.id] = parseInt(ci.value) || (ci.id == "border" ? 0 : "");
            }
          }
          for (var i = 0, ci; (ci = divSelects[i++]); ) {
            opt[ci.id] = ci.getAttribute("value").toUpperCase();
          }

          // var state = editor.queryCommandState("edittable");
          var state = UE.editor.queryCommandState("edittable");

          // editor.execCommand(state == -1 ? 'inserttable' : 'edittable', opt);
          UE.editor.execCommand(state == -1 ? "inserttable" : "edittable", opt);
          $popup.remove();
          $(body).find("#createStyle").remove();
        };

        // 边框颜色事件绑定
        $popup.find("#borderColor")[0].onclick = function (e) {
          var me = this;
          var target = e.target;
          var colorLeft = $(me).position().left + 4;
          var colorTop = $(me).position().top + 32 + 4;
          genColorPicker();
          $popup
            .find(".colorPicker")
            .css({ display: "block", left: colorLeft, top: colorTop });
          $popup.find(".colorPicker-preview_textModifyColor").val($(me).val());

          $popup.find(".box").bind("mouseover", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              $popup
                .find(".colorPicker-preview_textModifyColor")
                .val(ev.target.getAttribute("data-color"));
              $popup
                .find(".colorPicker-preview")
                .css("background-color", ev.target.getAttribute("data-color"));
            }
          });

          $popup.find(".box").bind("click", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              // $(me).val(ev.target.getAttribute('data-color'))
              $(me).css(
                "background-color",
                ev.target.getAttribute("data-color")
              );
              createTable();
              // $popup.find('.colorPicker').css('display','none');
              $popup.find(".colorPicker").remove();
            }
          });
          $popup
            .find(".colorPicker-openUpColorText")
            .bind("click", function (ev) {
              var textModifyColor = $popup
                .find(".colorPicker-preview_textModifyColor")
                .val();
              if (/^#[0-9a-fA-F]{6}$/.test(textModifyColor)) {
                // $(me).val(textModifyColor);
                $(me).css("background-color", textModifyColor);
                createTable();
                $popup.find(".colorPicker").remove();
              } else {
                domUtils.ing({
                  tips: "您输入的十六进制颜色值无效！"
                });
              }
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          $popup.find(".colorPicker-nocolor").bind("click", function (ev) {
            // $(me).val("#000000");
            $(me).css("background-color", "#000000");
            createTable();
            // $popup.find('.colorPicker').css('display','none');
            $popup.find(".colorPicker").remove();
          });
          $popup.find(".wrapper").bind("click", function (ev) {
            $popup.find(".colorPicker").remove();
          });
          $popup
            .find(".colorPicker-preview_textModifyColor")
            .bind("click", function (ev) {
              $popup.find(".colorPicker-preview_textModifyColor").val("");
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          e.cancelBubble = true;
        };
        $popup.find("#borderColor").bind("keyup", function () {
          $popup.find(".colorPicker").remove();
          createTable();
        });
        // 填充颜色事件绑定
        $popup.find("#bgColor")[0].onclick = function (e) {
          var me = this;
          var target = e.target;
          var colorLeft = $(me).position().left + 4;
          var colorTop = $(me).position().top + 32 + 4;
          genColorPicker();
          $popup
            .find(".colorPicker")
            .css({ display: "block", left: colorLeft, top: colorTop });
          $popup.find(".colorPicker-preview_textModifyColor").val($(me).val());

          $popup.find(".box").bind("mouseover", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              $popup
                .find(".colorPicker-preview_textModifyColor")
                .val(ev.target.getAttribute("data-color"));
              $popup
                .find(".colorPicker-preview")
                .css("background-color", ev.target.getAttribute("data-color"));
            }
          });

          $popup.find(".box").bind("click", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              // $(me).val(ev.target.getAttribute('data-color'))
              $(me).css(
                "background-color",
                ev.target.getAttribute("data-color")
              );
              createTable();
              // $popup.find('.colorPicker').css('display','none');
              $popup.find(".colorPicker").remove();
            }
          });
          $popup
            .find(".colorPicker-openUpColorText")
            .bind("click", function (ev) {
              var textModifyColor = $popup
                .find(".colorPicker-preview_textModifyColor")
                .val();
              if (/^#[0-9a-fA-F]{6}$/.test(textModifyColor)) {
                // $(me).val(textModifyColor);
                $(me).css("background-color", textModifyColor);
                createTable();
                $popup.find(".colorPicker").remove();
              } else {
                domUtils.ing({
                  tips: "您输入的十六进制颜色值无效！"
                });
              }
              ev.cancelBubble = true;
              ev.stopPropagation();
              // $popup.find('.colorPicker').css('display','none');
              // $popup.find('.colorPicker').remove();
            });
          $popup.find(".colorPicker-nocolor").bind("click", function (ev) {
            // $(me).val("");
            $(me).css("background-color", "transparent");
            createTable();
            // $popup.find('.colorPicker').css('display','none');
            $popup.find(".colorPicker").remove();
          });
          $popup.find(".wrapper").bind("click", function () {
            $popup.find(".colorPicker").remove();
          });
          $popup
            .find(".colorPicker-preview_textModifyColor")
            .on("click", function (ev) {
              $popup.find(".colorPicker-preview_textModifyColor").val("");
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          e.cancelBubble = true;
        };
        $popup.find("#bgColor").bind("keyup", function () {
          $popup.find(".colorPicker").remove();
          createTable();
        });

        addPxChangeListener();

        // 边框样式style的事件绑定
        $popup.find("#borderStyle li").bind("click", function (e) {
          $popup.find(".borderStyleInner")[0].innerHTML = this.innerHTML;
          $popup.find(".borderStyleCon").css("display", "none");
          $popup.find(".borderStyleIcon").removeClass("active");
          $popup.find("#borderStyle").attr("value", this.getAttribute("value"));
          createTable();
        });
        // 对齐方式事件绑定
        $popup.find("#align li").bind("click", function (e) {
          $popup.find(".alignInner")[0].innerHTML = this.innerHTML;
          $popup.find(".alignCon").css("display", "none");
          $popup.find(".alignIcon").removeClass("active");
          $popup.find("#align").attr("value", this.getAttribute("value"));
          createTable();
        });
        // 边框设置事件绑定
        $popup.find("#borderType li").bind("click", function (e) {
          $popup.find(".borderTypeInner")[0].innerHTML = this.innerHTML;
          $popup.find(".borderTypeCon").css("display", "none");
          $popup.find(".borderTypeIcon").removeClass("active");
          $popup.find("#borderType").attr("value", this.getAttribute("value"));
          createTable();
        });
        //集合所有列表展开的mask 点击事件
        var hasSelects = $popup.find(".tableMask");
        var SelectUis = $popup.find("ul");
        var SelectIcons = $popup.find(".tableIcon");
        for (var i = 0; i < hasSelects.length; i++) {
          hasSelects[i].index = i;
          hasSelects[i].onclick = function (e) {
            var e = e || window.event;
            var This = this;
            for (var i = 0; i < SelectUis.length; i++) {
              SelectUis[i].style.display = "none";
              $(SelectIcons[i]).removeClass("active");
            }
            SelectUis[this.index].style.display = "block";
            $(this).prev().addClass("active");
            $popup[0].onclick = function () {
              SelectUis[This.index].style.display = "none";
              $(SelectIcons[This.index]).removeClass("active");
            };
            e.cancelBubble = true;
          };
        }
      }

      /**
       * 绑定border、spaceing等更改事件
       */
      function addPxChangeListener() {
        var ids = ["border", "cellPadding", "cellSpacing"];
        for (var i = 0; i < ids.length; i++) {
          var ci = $popup.find("#" + ids[i]);
          ci.bind("keyup", function () {
            $popup.find("#message")[0].style.display = "none";
            switch (this.id) {
              case "border":
                $popup.find("#border")[0].value = filter(this.value, "border");
                break;
              case "cellPadding":
                $popup.find("#cellPadding")[0].value = filter(
                  this.value,
                  "cellPadding"
                );
                break;
              case "cellSpacing":
                $popup.find("#cellSpacing")[0].value = filter(
                  this.value,
                  "cellSpacing"
                );
                break;
              default:
            }
            createTable();
          });
        }
      }
      function filter(value, property) {
        var maxPreviewValue = 5,
          maxValue = 10;
        if (!isNum(value) && value != "") {
          $popup.find("#" + property)[0].value = "";
          $popup.find("#message")[0].style.display = "";
          $popup.find("#messageContent")[0].innerHTML = "请输入正确的数值";
          return property == "border" ? 1 : 0;
        }
        if (value > maxPreviewValue) {
          $popup.find("#message")[0].style.display = "";
          $popup.find(
            "#messageContent"
          )[0].innerHTML = "超过{#value} px时将不再提供实时预览。".replace(
            "{#value}",
            maxPreviewValue
          );
          if (value > maxValue) {
            $popup.find(
              "#messageContent"
            )[0].innerHTML = "最大值不能超过{#value}px!".replace(
              "{#value}",
              maxValue
            );
            $popup.find("#" + property)[0].value = maxValue;
            return maxValue;
          }
        }
        return value;
      }
      function isNum(str) {
        return /^(0|[1-9][0-9]*)$/.test(str);
      }

      /**
       * 依据属性框中的属性值创建table对象
       */
      function createTable() {
        var border = parseInt($popup.find("#border")[0].value) || 1,
          borderColor =
            $popup.find("#borderColor").css("background-color") || "#000000",
          cellPadding = parseInt($popup.find("#cellPadding")[0].value) || "",
          cellSpacing = parseInt($popup.find("#cellSpacing")[0].value) || 0,
          bgColor =
            $popup.find("#bgColor").css("background-color") || "#FFFFFF",
          align = $popup.find("#align").attr("value") || "",
          borderType = $popup.find("#borderType").attr("value") || 0,
          borderStyle = $popup.find("#borderStyle").attr("value") || "solid";

        border = setMax(border, 5);
        cellPadding = setMax(cellPadding, 5);
        cellSpacing = setMax(cellSpacing, 5);

        var html = ["<table "];
        if (cellSpacing > 0) {
          html.push(
            ' style="border-collapse:separate; border:' +
              (border || 1) +
              "px solid " +
              (borderColor || "#000000") +
              ';"'
          );
        } else {
          html.push(
            ' style="border-collapse:collapse; border:' +
              (border || 1) +
              "px solid " +
              (borderColor || "#000000") +
              ';"'
          );
        }
        //html.push('border:' + (border||1) +'px solid ' + (borderColor||'#000000;"'));

        if (borderType == "1") {
          html.push(' frame="box" rules="none" ');
        }
        cellSpacing > 0 && html.push(' cellSpacing="' + cellSpacing + '" ');

        //这一块是表格的预览版本
        html.push(
          ' border="' +
            (border || 1) +
            '" borderColor="' +
            (borderColor || "#ff0000") +
            '"'
        );
        bgColor && html.push(' bgColor="' + bgColor + '"');
        html.push(
          ' ><tr><td colspan="3" style="width:90px;">这是用来预览的</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></table>'
        );
        var preview = $popup.find("#preview")[0];
        preview.innerHTML = html.join("");
        //如果针对每个单元格
        var table = preview.firstChild,
          tableBorderStyle = (tableTdBorderStyle =
            borderStyle +
            " " +
            border +
            "px" +
            " " +
            (borderColor || "#000000"));

        if (borderType == 1) {
          tableTdBorderStyle = "none";
        }
        for (
          var i = 0, td, tds = table.getElementsByTagName("td");
          (td = tds[i++]);

        ) {
          td.style.padding = cellPadding + "px";
          // 设置单元格的边框
          td.style.border = tableTdBorderStyle;
        }
        /**
         * @desc 通过style内联样式设置修正表格的样式
         * @author jser
         * @date 2017-1-17
         */
        // 设置表格边框
        table.style.border = tableBorderStyle;
        // 设置表格背景色
        table.style.backgroundColor = bgColor;
        // 设置单元格是否合并
        // table.style.borderCollapse = cellSpacing ? "separate" : "collapse";
        // 设置单元格间距
        table.style.borderSpacing = cellSpacing > 0 ? cellSpacing + "px" : "";

        setTablePosition(align.toLowerCase());
      }
      function setMax(value, max) {
        return value > max ? max : value;
      }

      /**
       * 根据传入的value值变更table的位置
       * @param value
       */
      function setTablePosition(value) {
        var table = $popup.find("#preview")[0].children[0],
          // margin = (table.parentNode.offsetWidth - table.offsetWidth) / 2;
          margin = (296 - table.offsetWidth) / 2;
        if (value == "center") {
          table.style.marginLeft = margin + "px";
        } else if (value == "right") {
          table.style.marginLeft = 2 * margin - 5 + "px";
        } else {
          table.style.marginLeft = "5px";
        }
      }

      // 颜色选择面板
      var COLORS = (
        "FFFFFF,FFCCCC,FFCC99,FFFF99,FFFFCC,99FF99,99FFFF,CCFFFF,CCCCFF,FFCCFF," +
        "CCCCCC,FF6666,FF9966,FFFF66,FFFF33,66FF99,33FFFF,66FFFF,9999FF,FF99FF," +
        "C0C0C0,FF0000,FF9900,FFCC66,FFFF00,33FF33,66CCCC,33CCFF,6666CC,CC66CC," +
        "999999,CC0000,FF6600,FFCC33,FFCC00,33CC00,00CCCC,3366FF,6633FF,CC33CC," +
        "666666,990000,CC6600,CC9933,999900,009900,339999,3333FF,6600CC,993399," +
        "333333,660000,993300,996633,666600,006600,336666,000099,333399,663366," +
        "000000,330000,663300,663333,333300,003300,003333,000066,330099,330033,"
      ).split(",");

      function genColorPicker() {
        var html =
          '<div class="colorPicker" style="display:none;width:210px;height:168px;border: 1px solid #9bbeea;background-color: #fff;position:absolute;box-sizing: border-box;padding: 3px;">' +
          '<div class="colorPicker-topbar clearfix" style="width:200px; height:27px;">' +
          '<div unselectable="on" class="colorPicker-preview" style="width:50px;margin-right: 5px;height: 20px;border: 1px inset black;margin-left: 1px;float:left;"></div>' +
          '<input type="text" id="textModifyColor" class="colorPicker-preview_textModifyColor" style="width:80px;height: 16px;border: 1px inset #C5BCBC;color:#B2B8B9;padding: 2px!important;margin-left: 1px;float: left;" value="输入颜色值" />' +
          '<div unselectable="on" title="确定" id="openUpColorText" class="colorPicker-openUpColorText" style="margin-left: 5px;"></div>' +
          '<div unselectable="on" title="清除颜色" class="colorPicker-nocolor"></div>' +
          "</div>" +
          // '<table  class="box" style="border-collapse: collapse;" onmouseover="function(event){if(ev.target.nodeName.toLowerCase() === "a"){$popup.find(".colorPicker-preview_textModifyColor").val(ev.target.getAttribute("data-color"))};" onclick="colorClick(event);" cellspacing="0" cellpadding="0">' +
          '<table  class="box" style="border-collapse: collapse;"  cellspacing="0" cellpadding="0">' +
          //'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#366092;padding-top: 2px"><td colspan="10">'+editor.getLang("themeColor")+'</td> </tr>'+
          '<tr class="colorpicker-tablefirstrow" >';
        for (var i = 0; i < COLORS.length; i++) {
          if (i && i % 10 === 0) {
            //html += '</tr>'+(i==60?'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#366092;"><td colspan="10">'+editor.getLang("standardColor")+'</td></tr>':'')+'<tr'+(i==60?' class="edui-colorpicker-tablefirstrow"':'')+'>';
            html +=
              "</tr>" +
              (i == 60 ? "" : "") +
              "<tr" +
              (i == 60 ? ' class="colorpicker-tablefirstrow"' : "") +
              ">";
          }
          html +=
            i < 70
              ? '<td style="padding: 0 2px;"><a hidefocus title="' +
                COLORS[i] +
                '" onclick="return false;" href="javascript:" unselectable="on" class="colorpicker-colorcell"' +
                ' data-color="#' +
                COLORS[i] +
                '"' +
                ' style="background-color:#' +
                COLORS[i] +
                ";border:solid #ccc;width:14px;height:14px;display:block;" +
                (i < 10 || i >= 60
                  ? "border-width:1px;"
                  : i >= 10 && i < 20
                  ? "border-width:1px 1px 0 1px;"
                  : "border-width:0 1px 0 1px;") +
                '"' +
                "></a></td>"
              : "";
        }
        html += "</tr></table></div>";
        $popup.find(".wrapper").append(html);
        // return html;
      }
    },

    //“单元格属性”弹窗
    editTablePopup: function (options) {
      for (var topWin = window; ; ) {
        if (topWin != topWin.parent) {
          topWin = topWin.parent;
        } else {
          break;
        }
      }
      // typeof Fai !== 'undefined' && (topWin = Fai.top);
      var body = topWin.document.getElementsByTagName("body");
      var randomId = Math.round(Math.random() * 100001);
      if (body.length) {
        var defaultOptions = {
          id: randomId, //标识当前弹窗的id，可以随便定义,必须传进来的参数
          title: "单元格属性",
          sureBtnText: "确认",
          cancelBtnText: "取消"
        };
        options = $.extend(defaultOptions, options);
        body = body[0];
        var iframeContent = [
          '<div id="edui-popup_' +
            options.id +
            '" class="popupInput" style="background-color: rgba(0, 0, 0, .7);position: fixed;top: 0;left: 0;width: 100vw;height: 100vh;text-align:left;display:flex;justify-content: center;align-items: center;z-index:9032;">',
          '<div class="wrapper" id="tablewrapper_id" style="height: 356px;width:454px;position:relative;background-color:#ffffff;border-radius:3px;">',
          '<div class="title" style="padding: 18px 40px 18px 35px;line-height: 27px;font-size: 16px;border-bottom: 1px solid #e3e2e8;">' +
            options.title +
            "</div>",
          '<div class="closeBtn" style="background: url(' +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/mbg02.png) -58px 1px no-repeat;position: absolute;top: 24px;right: 20px;width: 18px;height: 18px;cursor:pointer;"></div>',
          '<table id="unit_edittd_id" class="cellStyle" style=" margin: 4px 10px 5px 35px;font-size: 12px;border-collapse:separate; border-spacing:0 20px;">',
          '<tr style="height: 34px;">',
          '<td width="70"><span class="strong" style="font-size:13px;color:#333;">边框设置：</span></td>',
          "<td>",
          '<input id="unitBorderColor" name="color" style="width: 78px;height:32px;box-sizing:border-box;margin-right: 12px;border: 1px solid #ccc;border-radius:3px;cursor: pointer;" readonly="readonly" type="text">',
          '<input id="unitBorderSize" type="text" style="width: 78px;height:32px;box-sizing:border-box;padding-left: 10px;margin-right: 0px;border:1px solid #e3e2e8;border-radius:3px;" />',
          "</td>",
          "<td>",
          '<div id="unitBorderStyle" class="unitSelect" style="width: 78px;height:32px;box-sizing:border-box;margin-left: 6px;margin-left: 10px;position:relative;border:1px solid #e3e2e8;border-radius:3px;">',
          '<div class="borderStyleInner" style="width: 34px;height:30px;position:relative;overflow: hidden;margin-left:10px;display:inline-block;"><div style="width: 50px;height: 1px;box-sizing: border-box;border-bottom: 1px solid #000;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></div>',
          '<p class="borderStyleIcon unitIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
          '<p class="borderStyleMask unitMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
          '<ul class="borderStyleCon unitCon" style="width: 78px;height:97px;box-sizing: border-box;padding:8px 0 0;list-style-type:none;position:absolute;top:36px;left:-1px;box-shadow: rgba(0, 0, 0, 0.137255) 0px 0px 8px 1px;border-radius:3px;background-color:#fff;display:none;">',
          '<li value="solid"><div class="liSolid" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
          '<li value="dashed"><div class="liDashed" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
          '<li value="dotted"><div class="liDotted" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
          "</ul>",
          "</div>",
          "</td>",
          '<td style="display:none;">',
          '<div id="unitBorderShow" class="borderShow unitSelect" style="width: 78px;height:32px;position:relative;margin-right: 10px;border:1px solid #e3e2e8;border-radius:3px;cursor:pointer;">',
          '<p style="width:20px;height:20px;position:absolute;top:5px;left:12px;border:1px solid #333;border-left-style:dotted;"></p>',
          '<p class="borderShowIcon unitIcon" style="width:12px;height:12px;position:absolute;top:10px;right:8px;"></p>',
          '<p class="borderShowMask unitMask" style="position:absolute;top:0;left:0;right:0;bottom:0;"></p>',
          '<div class="borderSelect unitCon" style="width:100px;height:100px;position:absolute;top:40px;box-shadow:0 0 8px 1px rgba(0,0,0,0.14);display:none;">',
          '<div class="top topClickBef clickBef" value="top">',
          "</div>",
          '<div class="right rightClickBef clickBef" value="right">',
          "</div>",
          '<div class="bottom bottomClickBef clickBef" value="bottom">',
          "</div>",
          '<div class="left leftClickBef clickBef" value="left">',
          "</div>",
          "</div>",
          "</div>",

          "</td>",
          "</tr>",
          '<tr style="height: 25px">',
          '<td width="70"><span class="strong" style="font-size:13px;color:#333;">填充颜色：</span></td>',
          '<td><span class="edittd_transparent" style="margin-right:5px;"><input id="cellRadioFir" type="radio" name="isTransparent" value="true"/><label for="cellRadioFir" style="font-size:13px;color:#333;">透明</label></span><span class="edittd_transparent"><input id="cellRadioSec" type="radio" name="isTransparent" value="false"/><label for="cellRadioSec" style="font-size:13px;color:#333;">非透明</label></span></td>',
          '<td><input id="unitBgColor" name="color" style="width: 78px;height:32px;box-sizing:border-box;margin-left: -24px;border: 1px solid #e3e2e8;border-radius:3px;" type="text"></td>',
          "</tr>",
          '<tr style="height: 25px">',
          '<td><span class="strong" style="font-size:13px;color:#333;">对齐方式：</span></td>',
          "<td>",
          '<div id="unitAlign" value="left" class="align" style="width:101px;height:30px;border:1px solid #e3e2e8;border-radius:3px;">',
          '<div class="left active" name="left"></div>',
          '<div class="center" name="center"></div>',
          '<div class="right" name="right"></div>',
          "</div>",
          "</td>",
          "<td>",
          '<div id="unitVAlign" value="top" class="vAlign" style="width:101px;height:30px;margin-left: -54px;border:1px solid #e3e2e8;border-radius:3px;">',
          '<div class="top active" name="top"></div>',
          '<div class="middle" name="middle"></div>',
          '<div class="bottom" name="bottom"></div>',
          "</div>",
          "</td>",
          '</tr style="height: 25px">',

          '<tr style="height: 74px">',
          "<td></td>",
          "<td>",
          '<button class="tableSure" style=" height: 34px;width: 100px;margin-top:45px;border: 1px solid #5874d8;border-radius: 3px;color: #fff;font-size: 14px;text-align: center;cursor: pointer;line-height: 18px;">确定</button>',

          "</td>",
          "<td>",

          '<button class="tableCancel" style="height: 34px;width: 100px;margin-top:45px;margin-left: -30px;border: 1px solid #e3e2e8;border-radius: 3px;font-size: 14px;text-align: center;cursor: pointer;line-height: 18px;">取消</button>',
          "</td>",
          "</tr>",
          "</table>",
          "</div>",
          "</div>"
        ];
        var dom = iframeContent.join("");
        var $popup = $(body)
          .append(dom)
          .find("#edui-popup_" + options.id);

        // 初始化
        var $radios = $popup.find('input[name="isTransparent"]');
        if (!editor.currentSelectedArr.length) {
          var range = editor.selection.getRange();
          var td = domUtils.findParentByTagName(
            range.startContainer,
            "td",
            true
          );
          var table = domUtils.findParentByTagName(
            range.startContainer,
            "table",
            true
          );

          if (td) {
            // word文档导入表格时出现的问题
            var tdFirstChild = $(td).children().first();
            if (
              !td.align &&
              tdFirstChild.length &&
              tdFirstChild.css("text-align")
            ) {
              if (
                tdFirstChild.css("text-align") == "end" ||
                tdFirstChild.css("text-align") == "right"
              ) {
                td.align = "right";
              } else if (
                tdFirstChild.css("text-align") == "start" ||
                tdFirstChild.css("text-align") == "justify"
              ) {
                td.align = "left";
              } else if (tdFirstChild.css("text-align") == "center") {
                td.align = "center";
              }
              tdFirstChild.css("text-align", "");
            }
            if (!td.vAlign && tdFirstChild.length) {
              td.vAlign = "top";
            }
            var bgColor = td.bgColor || table.bgColor;
            var isTransparent = false;
            if (!bgColor || bgColor == "transparent") {
              isTransparent = true;
            }
            if (isTransparent) {
              $radios[0].checked = true;
              $popup.find("#unitBgColor").attr("disabled", true);
            } else {
              $radios[1].checked = true;
            }

            // 表格单元格的对齐设置初始化
            for (
              var i = 0;
              i < $popup.find("#unitVAlign").children().length;
              i++
            ) {
              if (
                td.vAlign ===
                $popup.find("#unitVAlign").children()[i].getAttribute("name")
              ) {
                $($popup.find("#unitVAlign").children()[i]).addClass("active");
                $popup.find("#unitVAlign").attr("value", td.vAlign);
              } else {
                $($popup.find("#unitVAlign").children()[i]).removeClass(
                  "active"
                );
              }
            }
            for (
              var i = 0;
              i < $popup.find("#unitAlign").children().length;
              i++
            ) {
              td.align = td.align ? td.align : "left";
              if (
                td.align ===
                $popup.find("#unitAlign").children()[i].getAttribute("name")
              ) {
                $($popup.find("#unitAlign").children()[i]).addClass("active");
                $popup.find("#unitAlign").attr("value", td.align);
              } else {
                $($popup.find("#unitAlign").children()[i]).removeClass(
                  "active"
                );
              }
            }

            $popup.find("#unitBorderSize")[0].value = parseInt(
              td.style.borderBottomWidth
            )
              ? parseInt(td.style.borderBottomWidth) + "px"
              : "1px";
            $popup
              .find("#unitBorderColor")
              .css(
                "background-color",
                td.getAttribute("borderColor") || "#000000"
              );
            $popup
              .find("#unitBgColor")
              .css(
                "background-color",
                (isTransparent ? "" : bgColor).toUpperCase()
              );

            var uBorderStyle =
              !td.style.borderBottomStyle ||
              td.style.borderBottomStyle === "none"
                ? "solid"
                : td.style.borderBottomStyle;
            uBorderStyleClass =
              ".li" +
              uBorderStyle.substring(0, 1).toUpperCase() +
              uBorderStyle.substring(1);
            // console.log($popup.find(uBorderStyleClass)[0].outerHTML)
            // $popup.find('#unitBorderStyle .borderStyleInner')[0].innerHTML = $popup.find('#unitBorderStyle li[value="'+uBorderStyle+'"]')[0].innerHTML;
            $popup.find(
              "#unitBorderStyle .borderStyleInner"
            )[0].innerHTML = $popup.find(uBorderStyleClass)[0].outerHTML;
            $popup.find("#unitBorderStyle").attr("value", uBorderStyle);
          }
        }

        bindEvent();
      }
      $('<style id="createStyle">')
        .text(
          ".wrapper .closeBtn{-moz-transition: all 0.15s;-webkit-transition: all 0.15s;-o-transition: all 0.15s;transition: all 0.15s;-webkit-transform: rotate(0deg);-moz-transform: rotate(0deg);-ms-transform: rotate(0deg);transform: rotate(0deg);}" +
            ".wrapper .closeBtn:hover{-webkit-transform: rotate(90deg);-moz-transform: rotate(90deg);-ms-transform: rotate(90deg);transform: rotate(90deg);}" +
            ".wrapper .tableSure{background-color:#5874d8;}" +
            ".wrapper .tableSure:active{background-color:#4a67d1}" +
            ".wrapper .tableCancel{background-color:#fff;color:#333;}" +
            ".wrapper .tableCancel:hover{background-color:#5874d8;color:#fff;}" +
            ".wrapper .tableCancel:active{background-color:#4a67d1}" +
            ".cellStyle .vAlign div{float:left;width:33px;height:30px;border-right:1px solid #e3e2e8;cursor: pointer;}" +
            ".cellStyle .vAlign div.top{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -20px 7px;border-radius: 3px 0 0 3px;}" +
            ".cellStyle .vAlign div.middle{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -20px -23px;}" +
            ".cellStyle .vAlign div.bottom{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -20px -53px;border-right:none;border-radius: 0 3px 3px 0;}" +
            ".cellStyle .vAlign div.active{}" +
            ".cellStyle .vAlign .active.bottom{background: #5874d8 url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat 10px -53px;border-radius: 0 3px 3px 0;}" +
            ".cellStyle .vAlign .active.top{background: #5874d8 url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat 10px 7px;border-radius: 3px 0 0 3px;}" +
            ".cellStyle .vAlign .active.middle{background: #5874d8 url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat 10px -23px;}" +
            ".cellStyle .align div{float:left;width:33px;height:30px;border-right:1px solid #e3e2e8;cursor: pointer;}" +
            ".cellStyle .align div.left{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -22px -81px;;border-radius: 3px 0 0 3px;}" +
            ".cellStyle .align div.center{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -22px -111px;}" +
            ".cellStyle .align div.right{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -22px -141px;border-right:none;border-radius: 0 3px 3px 0;}" +
            ".cellStyle .align div.active{}" +
            ".cellStyle .align .active.right{background: #5874d8 url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat 8px -141px;border-radius: 0 3px 3px 0;}" +
            ".cellStyle .align .active.left{background: #5874d8 url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat 8px -81px;border-radius: 3px 0 0 3px;}" +
            ".cellStyle .align .active.center{background: #5874d8 url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat 8px -111px;}" +
            ".cellStyle .borderShow .borderShowIcon{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -27px;}" +
            ".cellStyle .borderShow .borderShowIcon.active{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -58px;}" +
            ".cellStyle .borderStyleIcon{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -27px;}" +
            ".cellStyle .borderStyleIcon.active{background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/mbg02.png) no-repeat -59px -58px;}" +
            ".cellStyle .borderStyleCon{width: 68px;height: 25px;margin: 0 auto;text-align: center;line-height: 25px;cursor: pointer;}" +
            ".cellStyle .borderStyleCon li{width: 68px;height: 25px;box-sizing: border-box;margin: 0 auto 4px;position: relative;}" +
            ".cellStyle .borderStyleCon li:hover{background-color: #5874d8;}" +
            ".cellStyle .borderStyleCon li .liSolid,.cellStyle .borderStyleInner .liSolid{border-bottom:1px solid #666;}" +
            ".cellStyle .borderStyleCon li:hover .liSolid{border-bottom:1px solid #fff;}" +
            ".cellStyle .borderStyleCon li .liDashed,.cellStyle .borderStyleInner .liDashed{border-bottom:1px dashed #666;}" +
            ".cellStyle .borderStyleCon li:hover .liDashed{border-bottom:1px dashed #fff;}" +
            ".cellStyle .borderStyleCon li .liDotted,.cellStyle .borderStyleInner .liDotted{border-bottom:1px dotted #666;}" +
            ".cellStyle .borderStyleCon li:hover .liDotted{border-bottom:1px dotted #fff;}" +
            ".cellStyle .edittd_transparent label {display: inline-block;cursor: pointer;position: relative;padding-left: 23px;margin:0 15px 0 0;font-size: 13px;background:none;height:19px;line-height:19px;}" +
            '.cellStyle .edittd_transparent label:before {content: "";display: inline-block;width: 14px;height: 14px;border: 1px solid #e3e2e8;margin-right: 10px;position: absolute;left: 0;bottom: 1px;background-color: #fff;}' +
            ".cellStyle .edittd_transparent label:before {border-radius: 8px;}" +
            ".cellStyle input[type=radio]{display: none;}" +
            '.cellStyle .edittd_transparent input[type=radio]:checked + label:before {content: "\u2022";color: #828282;font-size: 18px;text-align: center;line-height: 12px;}' +
            ".colorPicker-openUpColorText{float: left;margin-right: 1px;font-size: 12px;line-height: 14px;height: 18px;width: 14px;padding: 3px 5px;cursor: pointer;background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/gou.png?v=201709011515) no-repeat;}" +
            ".colorPicker-nocolor{float: right; margin-right: 1px; font-size: 12px;line-height: 14px;height: 18px; width: 14px; padding: 3px 5px; cursor: pointer;background: url(" +
            UE.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
            "/image/clean.png?v=201709011515) no-repeat;}" +
            ".colorpicker-tablefirstrow{height:30px;}"
        )
        .appendTo($(body));

      function bindEvent() {
        $popup.find(".closeBtn").bind("click", function () {
          $popup.remove();
          $(body).find("#createStyle").remove();
        });
        $popup.find("button")[1].onclick = function () {
          $popup.remove();
          $(body).find("#createStyle").remove();
        };
        // 确认按钮
        $popup.find("button")[0].onclick = function () {
          var isTransparent = $radios[0].checked;
          if (isTransparent) {
            bgColor = "transparent";
          } else {
            var bgColor = $popup.find("#unitBgColor").css("background-color");
          }
          if (
            $popup
              .find("#unitBorderSize")[0]
              .value.replace(/(^\s*)|(\s*$)/g, "") == ""
          ) {
            domUtils.ing({
              tips: "请输入有效的边框大小！"
            });
            $(this).focus();
            return false;
          }

          var tdItem = {
            bgColor: bgColor,
            align: $popup.find("#unitAlign")[0].getAttribute("value") || "",
            vAlign: $popup.find("#unitVAlign")[0].getAttribute("value") || "",
            borderSize: $popup.find("#unitBorderSize")[0].value || "",
            borderColor:
              $popup.find("#unitBorderColor").css("background-color") || "",
            unitBorderStyle:
              $popup.find("#unitBorderStyle")[0].value || "solid",
            borderSelectShow: borderSelect || "['top','right','bottom','left']"
          };
          editor.execCommand("edittd", tdItem);
          $popup.remove();
          $(body).find("#createStyle").remove();
        };

        // 记录四条边框的显示与否
        var borderValue,
          borderSelect = ["top", "right", "bottom", "left"];
        $popup.find(".top,.right,.bottom,.left").bind("click", function () {
          borderValue = this.getAttribute("value");
          if ($(this).hasClass("clickBef")) {
            $(this).removeClass("clickBef");
            $(this).addClass("clickAft");
            if (borderSelect.indexOf(borderValue) >= 0) {
              borderSelect.splice(borderSelect.indexOf(borderValue), 1);
            }
          } else {
            $(this).removeClass("clickAft");
            $(this).addClass("clickBef");
            if (borderSelect.indexOf(borderValue) < 0) {
              borderSelect.push(borderValue);
            }
          }
        });

        // 边框样式solid\dashed\dotted选择
        $popup.find("#unitBorderStyle li").bind("click", function (e) {
          $popup.find(".borderStyleInner")[0].innerHTML = this.innerHTML;
          $popup.find(".borderStyleCon").css("display", "none");
          $popup.find(".borderStyleIcon").removeClass("active");
          $popup
            .find("#unitBorderStyle")
            .attr("value", this.getAttribute("value"));
        });
        var hasUnitSelects = [];
        hasUnitSelects.push($popup.find(".borderStyleMask")[0]);

        var unitSelectUis = $popup.find(".unitCon");
        var unitSelectIcons = $popup.find(".unitIcon");
        for (var i = 0; i < hasUnitSelects.length; i++) {
          hasUnitSelects[i].index = i;
          hasUnitSelects[i].onclick = function (e) {
            var e = e || window.event;
            var This = this;
            for (var j = 0; j < unitSelectUis.length; j++) {
              unitSelectUis[j].style.display = "none";
              $(unitSelectIcons[j]).removeClass("active");
            }
            unitSelectUis[this.index].style.display = "block";
            $(This).parent().find(".unitIcon").addClass("active");

            $popup[0].onclick = function () {
              unitSelectUis[This.index].style.display = "none";
              $(unitSelectIcons[This.index]).removeClass("active");
            };
            e.cancelBubble = true;
          };
        }

        // radios单选框
        $radios.bind("change", function () {
          if (this.getAttribute("value") == "true") {
            $popup.find("#unitBgColor")[0].setAttribute("disabled", true);
            $popup.find("#unitBgColor")[0].removeAttribute("readonly");
            $popup.find("#unitBgColor")[0].style.cursor = "";
          } else {
            $popup.find("#unitBgColor")[0].removeAttribute("disabled");
            $popup.find("#unitBgColor")[0].setAttribute("readonly", true);
            $popup.find("#unitBgColor")[0].style.cursor = "pointer";
          }
        });

        // 表格单元格的对齐设置
        $popup
          .find("#unitVAlign")
          .find(".top,.bottom,.middle")
          .bind("click", function () {
            var vAlign = $popup.find("#unitVAlign").children();
            for (var i = 0; i < vAlign.length; i++) {
              if (this === vAlign[i]) {
                $(vAlign[i]).addClass("active");
                $popup
                  .find("#unitVAlign")
                  .attr("value", $(vAlign[i]).attr("name"));
              } else {
                $(vAlign[i]).removeClass("active");
              }
            }
          });
        $popup
          .find("#unitAlign")
          .find(".left,.right,.center")
          .bind("click", function () {
            var align = $popup.find("#unitAlign").children();
            for (var i = 0; i < align.length; i++) {
              if (this === align[i]) {
                $(align[i]).addClass("active");
                $popup
                  .find("#unitAlign")
                  .attr("value", $(align[i]).attr("name"));
              } else {
                $(align[i]).removeClass("active");
              }
            }
          });

        // 输入框的交互
        $popup.find("#unitBorderSize").bind("focus", function () {
          if (parseInt(this.value)) {
            this.value = parseInt(this.value);
          }
          $(this).select();
        });
        $popup.find("#unitBorderSize").bind("blur", function (ev) {
          if (
            this.value.replace(/(^\s*)|(\s*$)/g, "") == "" ||
            !isNum(this.value)
          ) {
            domUtils.ing({
              tips: "请输入有效的边框大小！"
            });
            $(this).focus();
            return false;
          }
          this.value = parseInt(this.value) + "px";
        });
        $popup.find("#unitBorderSize").bind("keyup", function (ev) {
          if (!isNum(this.value) && this.value != "") {
            $popup.find("#" + this.id)[0].value = "";
            domUtils.ing({
              tips: "请输入正确的数值"
            });
          }
        });

        // 单元格边框颜色事件绑定
        $popup.find("#unitBorderColor")[0].onclick = function (e) {
          var me = this;
          var target = e.target;
          var colorLeft = $(me).position().left;
          var colorTop = $(me).position().top + 32 + 4;
          genColorPicker();
          $popup
            .find(".colorPicker")
            .css({ display: "block", left: colorLeft, top: colorTop });
          $popup.find(".colorPicker-preview_textModifyColor").val($(me).val());

          $popup.find(".box").bind("mouseover", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              $popup
                .find(".colorPicker-preview_textModifyColor")
                .val(ev.target.getAttribute("data-color"));
              $popup
                .find(".colorPicker-preview")
                .css("background-color", ev.target.getAttribute("data-color"));
            }
          });

          $popup.find(".box").bind("click", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              // $(me).val(ev.target.getAttribute('data-color'))
              $(me).css(
                "background-color",
                ev.target.getAttribute("data-color")
              );
              // createTable()
              // $popup.find('.colorPicker').css('display','none');
              $popup.find(".colorPicker").remove();
            }
          });
          $popup
            .find(".colorPicker-openUpColorText")
            .bind("click", function (ev) {
              var textModifyColor = $popup
                .find(".colorPicker-preview_textModifyColor")
                .val();
              if (/^#[0-9a-fA-F]{6}$/.test(textModifyColor)) {
                // $(me).val(textModifyColor);
                $(me).css("background-color", textModifyColor);
                // createTable();
                $popup.find(".colorPicker").remove();
              } else {
                domUtils.ing({
                  tips: "您输入的十六进制颜色值无效！"
                });
              }
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          $popup.find(".colorPicker-nocolor").bind("click", function (ev) {
            // $(me).val("#000000");
            $(me).css("background-color", "#000000");
            // createTable()
            // $popup.find('.colorPicker').css('display','none');
            $popup.find(".colorPicker").remove();
          });
          $popup.find(".wrapper").bind("click", function (ev) {
            $popup.find(".colorPicker").remove();
          });
          $popup
            .find(".colorPicker-preview_textModifyColor")
            .bind("click", function (ev) {
              $popup.find(".colorPicker-preview_textModifyColor").val("");
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          e.cancelBubble = true;
        };
        $popup.find("#borderColor").bind("keyup", function () {
          $popup.find(".colorPicker").remove();
          // createTable();
        });
        // 单元格填充颜色事件绑定
        $popup.find("#unitBgColor")[0].onclick = function (e) {
          var me = this;
          var target = e.target;
          var colorLeft = $(me).position().left - 24; //这里减去18是因为me的margin-left为18px
          var colorTop = $(me).position().top + 32 + 4;
          genColorPicker();
          $popup
            .find(".colorPicker")
            .css({ display: "block", left: colorLeft, top: colorTop });
          $popup.find(".colorPicker-preview_textModifyColor").val($(me).val());

          $popup.find(".box").bind("mouseover", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              $popup
                .find(".colorPicker-preview_textModifyColor")
                .val(ev.target.getAttribute("data-color"));
              $popup
                .find(".colorPicker-preview")
                .css("background-color", ev.target.getAttribute("data-color"));
            }
          });

          $popup.find(".box").bind("click", function (ev) {
            if (ev.target.nodeName.toLowerCase() === "a") {
              // $(me).val(ev.target.getAttribute('data-color'))
              $(me).css(
                "background-color",
                ev.target.getAttribute("data-color")
              );
              // createTable()
              // $popup.find('.colorPicker').css('display','none');
              $popup.find(".colorPicker").remove();
            }
          });
          $popup
            .find(".colorPicker-openUpColorText")
            .bind("click", function (ev) {
              var textModifyColor = $popup
                .find(".colorPicker-preview_textModifyColor")
                .val();
              if (/^#[0-9a-fA-F]{6}$/.test(textModifyColor)) {
                // $(me).val(textModifyColor);
                $(me).css("background-color", textModifyColor);
                // createTable();
                $popup.find(".colorPicker").remove();
              } else {
                domUtils.ing({
                  tips: "您输入的十六进制颜色值无效！"
                });
              }
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          $popup.find(".colorPicker-nocolor").bind("click", function (ev) {
            // $(me).val("#000000");
            $(me).css("background-color", "#000000");
            // createTable()
            // $popup.find('.colorPicker').css('display','none');
            $popup.find(".colorPicker").remove();
          });
          $popup.find(".wrapper").bind("click", function (ev) {
            $popup.find(".colorPicker").remove();
          });
          $popup
            .find(".colorPicker-preview_textModifyColor")
            .bind("click", function (ev) {
              $popup.find(".colorPicker-preview_textModifyColor").val("");
              ev.cancelBubble = true;
              ev.stopPropagation();
            });
          e.cancelBubble = true;
        };
        $popup.find("#borderColor").bind("keyup", function () {
          $popup.find(".colorPicker").remove();
          // createTable();
        });
      }

      function isNum(str) {
        return /^(0|[1-9][0-9]*)$/.test(str);
      }

      function genColorPicker() {
        // 颜色选择面板
        var COLORS = (
          "ffffff,FFCCCC,FFCC99,FFFF99,FFFFCC,99FF99,99FFFF,CCFFFF,CCCCFF,FFCCFF," +
          "CCCCCC,FF6666,FF9966,FFFF66,FFFF33,66FF99,33FFFF,66FFFF,9999FF,FF99FF," +
          "C0C0C0,FF0000,FF9900,FFCC66,FFFF00,33FF33,66CCCC,33CCFF,6666CC,CC66CC," +
          "999999,CC0000,FF6600,FFCC33,FFCC00,33CC00,00CCCC,3366FF,6633FF,CC33CC," +
          "666666,990000,CC6600,CC9933,999900,009900,339999,3333FF,6600CC,993399," +
          "333333,660000,993300,996633,666600,006600,336666,000099,333399,663366," +
          "000000,330000,663300,663333,333300,003300,003333,000066,330099,330033,"
        ).split(",");
        var html =
          '<div class="colorPicker" style="display:none;width:210px;height:168px;border: 1px solid #9bbeea;background-color: #fff;position:absolute;box-sizing: border-box;padding: 3px;">' +
          '<div class="colorPicker-topbar clearfix" style="width:200px; height:27px;">' +
          '<div unselectable="on" class="colorPicker-preview" style="width:50px;margin-right: 5px;height: 20px;border: 1px inset black;margin-left: 1px;float:left;"></div>' +
          '<input type="text" id="textModifyColor" class="colorPicker-preview_textModifyColor" style="width:80px;height: 16px;border: 1px inset #C5BCBC;color:#B2B8B9;padding: 2px!important;margin-left: 1px;float: left;" value="输入颜色值" />' +
          '<div unselectable="on" title="确定" id="openUpColorText" class="colorPicker-openUpColorText" style="margin-left: 5px;"></div>' +
          '<div unselectable="on" title="清除颜色" class="colorPicker-nocolor"></div>' +
          "</div>" +
          // '<table  class="box" style="border-collapse: collapse;" onmouseover="function(event){if(ev.target.nodeName.toLowerCase() === "a"){$popup.find(".colorPicker-preview_textModifyColor").val(ev.target.getAttribute("data-color"))};" onclick="colorClick(event);" cellspacing="0" cellpadding="0">' +
          '<table  class="box" style="border-collapse: collapse;"  cellspacing="0" cellpadding="0">' +
          //'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#366092;padding-top: 2px"><td colspan="10">'+editor.getLang("themeColor")+'</td> </tr>'+
          '<tr class="colorpicker-tablefirstrow" >';
        for (var i = 0; i < COLORS.length; i++) {
          if (i && i % 10 === 0) {
            //html += '</tr>'+(i==60?'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#366092;"><td colspan="10">'+editor.getLang("standardColor")+'</td></tr>':'')+'<tr'+(i==60?' class="edui-colorpicker-tablefirstrow"':'')+'>';
            html +=
              "</tr>" +
              (i == 60 ? "" : "") +
              "<tr" +
              (i == 60 ? ' class="colorpicker-tablefirstrow"' : "") +
              ">";
          }
          html +=
            i < 70
              ? '<td style="padding: 0 2px;"><a hidefocus title="' +
                COLORS[i] +
                '" onclick="return false;" href="javascript:" unselectable="on" class="colorpicker-colorcell"' +
                ' data-color="#' +
                COLORS[i] +
                '"' +
                ' style="background-color:#' +
                COLORS[i] +
                ";border:solid #ccc;width:14px;height:14px;display:block;" +
                (i < 10 || i >= 60
                  ? "border-width:1px;"
                  : i >= 10 && i < 20
                  ? "border-width:1px 1px 0 1px;"
                  : "border-width:0 1px 0 1px;") +
                '"' +
                "></a></td>"
              : "";
        }
        html += "</tr></table></div>";
        $popup.find(".wrapper").append(html);
        // return html;
      }
    }
  });
  var fillCharReg = new RegExp(domUtils.fillChar, "g");
  /**domUtils.js end***/
  /**Range.js start**/
  /**
   * @file
   * @name UE.dom.Range
   * @short Range
   * @desc Range范围实现类，本类是UEditor底层核心类，统一w3cRange和ieRange之间的差异，包括接口和属性
   */
  (function () {
    var guid = 0,
      fillChar = domUtils.fillChar,
      fillData;

    /**
     * 更新range的collapse状态
     * @param  {Range}   range    range对象
     */
    function updateCollapse(range) {
      range.collapsed =
        range.startContainer &&
        range.endContainer &&
        range.startContainer === range.endContainer &&
        range.startOffset == range.endOffset;
    }

    function selectOneNode(rng) {
      return (
        !rng.collapsed &&
        rng.startContainer.nodeType == 1 &&
        rng.startContainer === rng.endContainer &&
        rng.endOffset - rng.startOffset == 1
      );
    }
    function setEndPoint(toStart, node, offset, range) {
      //如果node是自闭合标签要处理
      if (
        node.nodeType == 1 &&
        (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName])
      ) {
        offset = domUtils.getNodeIndex(node) + (toStart ? 0 : 1);
        node = node.parentNode;
      }
      if (toStart) {
        range.startContainer = node;
        range.startOffset = offset;
        if (!range.endContainer) {
          range.collapse(true);
        }
      } else {
        range.endContainer = node;
        range.endOffset = offset;
        if (!range.startContainer) {
          range.collapse(false);
        }
      }
      updateCollapse(range);
      return range;
    }

    function execContentsAction(range, action) {
      //调整边界
      //range.includeBookmark();
      var start = range.startContainer,
        end = range.endContainer,
        startOffset = range.startOffset,
        endOffset = range.endOffset,
        doc = range.document,
        frag = doc.createDocumentFragment(),
        tmpStart,
        tmpEnd;
      if (start.nodeType == 1) {
        start =
          start.childNodes[startOffset] ||
          (tmpStart = start.appendChild(doc.createTextNode("")));
      }
      if (end.nodeType == 1) {
        end =
          end.childNodes[endOffset] ||
          (tmpEnd = end.appendChild(doc.createTextNode("")));
      }
      if (start === end && start.nodeType == 3) {
        frag.appendChild(
          doc.createTextNode(
            start.substringData(startOffset, endOffset - startOffset)
          )
        );
        //is not clone
        if (action) {
          start.deleteData(startOffset, endOffset - startOffset);
          range.collapse(true);
        }
        return frag;
      }
      var current,
        currentLevel,
        clone = frag,
        startParents = domUtils.findParents(start, true),
        endParents = domUtils.findParents(end, true);
      for (var i = 0; startParents[i] == endParents[i]; ) {
        i++;
      }
      for (var j = i, si; (si = startParents[j]); j++) {
        current = si.nextSibling;
        if (si == start) {
          if (!tmpStart) {
            if (range.startContainer.nodeType == 3) {
              clone.appendChild(
                doc.createTextNode(start.nodeValue.slice(startOffset))
              );
              //is not clone
              if (action) {
                start.deleteData(
                  startOffset,
                  start.nodeValue.length - startOffset
                );
              }
            } else {
              clone.appendChild(!action ? start.cloneNode(true) : start);
            }
          }
        } else {
          currentLevel = si.cloneNode(false);
          clone.appendChild(currentLevel);
        }
        while (current) {
          if (current === end || current === endParents[j]) {
            break;
          }
          si = current.nextSibling;
          clone.appendChild(!action ? current.cloneNode(true) : current);
          current = si;
        }
        clone = currentLevel;
      }
      clone = frag;
      if (!startParents[i]) {
        clone.appendChild(startParents[i - 1].cloneNode(false));
        clone = clone.firstChild;
      }
      for (var j = i, ei; (ei = endParents[j]); j++) {
        current = ei.previousSibling;
        if (ei == end) {
          if (!tmpEnd && range.endContainer.nodeType == 3) {
            clone.appendChild(
              doc.createTextNode(end.substringData(0, endOffset))
            );
            //is not clone
            if (action) {
              end.deleteData(0, endOffset);
            }
          }
        } else {
          currentLevel = ei.cloneNode(false);
          clone.appendChild(currentLevel);
        }
        //如果两端同级，右边第一次已经被开始做了
        if (j != i || !startParents[i]) {
          while (current) {
            if (current === start) {
              break;
            }
            ei = current.previousSibling;
            clone.insertBefore(
              !action ? current.cloneNode(true) : current,
              clone.firstChild
            );
            current = ei;
          }
        }
        clone = currentLevel;
      }
      if (action) {
        range
          .setStartBefore(
            !endParents[i]
              ? endParents[i - 1]
              : !startParents[i]
              ? startParents[i - 1]
              : endParents[i]
          )
          .collapse(true);
      }
      tmpStart && domUtils.remove(tmpStart);
      tmpEnd && domUtils.remove(tmpEnd);
      return frag;
    }

    /**
     * @name Range
     * @grammar new UE.dom.Range(document)  => Range 实例
     * @desc 创建一个跟document绑定的空的Range实例
     * - ***startContainer*** 开始边界的容器节点,可以是elementNode或者是textNode
     * - ***startOffset*** 容器节点中的偏移量，如果是elementNode就是childNodes中的第几个，如果是textNode就是nodeValue的第几个字符
     * - ***endContainer*** 结束边界的容器节点,可以是elementNode或者是textNode
     * - ***endOffset*** 容器节点中的偏移量，如果是elementNode就是childNodes中的第几个，如果是textNode就是nodeValue的第几个字符
     * - ***document*** 跟range关联的document对象
     * - ***collapsed*** 是否是闭合状态
     */
    var Range = (dom.Range = function (document) {
      var me = this;
      me.startContainer = me.startOffset = me.endContainer = me.endOffset = null;
      me.document = document;
      me.collapsed = true;
    });

    /**
     * 删除fillData
     * @param doc
     * @param excludeNode
     */
    function removeFillData(doc, excludeNode) {
      try {
        if (fillData && domUtils.inDoc(fillData, doc)) {
          if (!fillData.nodeValue.replace(fillCharReg, "").length) {
            var tmpNode = fillData.parentNode;
            domUtils.remove(fillData);
            while (
              tmpNode &&
              domUtils.isEmptyInlineElement(tmpNode) &&
              //safari的contains有bug
              (browser.safari
                ? !(
                    domUtils.getPosition(tmpNode, excludeNode) &
                    domUtils.POSITION_CONTAINS
                  )
                : !tmpNode.contains(excludeNode))
            ) {
              fillData = tmpNode.parentNode;
              domUtils.remove(tmpNode);
              tmpNode = fillData;
            }
          } else {
            fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, "");
          }
        }
      } catch (e) {}
    }

    /**
     *
     * @param node
     * @param dir
     */
    function mergeSibling(node, dir) {
      var tmpNode;
      node = node[dir];
      while (node && domUtils.isFillChar(node)) {
        tmpNode = node[dir];
        domUtils.remove(node);
        node = tmpNode;
      }
    }

    Range.prototype = {
      /**
       * @name cloneContents
       * @grammar range.cloneContents()  => DocumentFragment
       * @desc 克隆选中的内容到一个fragment里，如果选区是空的将返回null
       */
      cloneContents: function () {
        return this.collapsed ? null : execContentsAction(this, 0);
      },
      /**
       * @name deleteContents
       * @grammar range.deleteContents()  => Range
       * @desc 删除当前选区范围中的所有内容并返回range实例，这时的range已经变成了闭合状态
       * @example
       * DOM Element :
       * <b>x<i>x[x<i>xx]x</b>
       * //执行方法后
       * <b>x<i>x<i>|x</b>
       * 注意range改变了
       * range.startContainer => b
       * range.startOffset  => 2
       * range.endContainer => b
       * range.endOffset => 2
       * range.collapsed => true
       */
      deleteContents: function () {
        var txt;
        if (!this.collapsed) {
          execContentsAction(this, 1);
        }
        if (browser.webkit) {
          txt = this.startContainer;
          if (txt.nodeType == 3 && !txt.nodeValue.length) {
            this.setStartBefore(txt).collapse(true);
            domUtils.remove(txt);
          }
        }
        return this;
      },
      /**
       * @name extractContents
       * @grammar range.extractContents()  => DocumentFragment
       * @desc 将当前的内容放到一个fragment里并返回这个fragment，这时的range已经变成了闭合状态
       * @example
       * DOM Element :
       * <b>x<i>x[x<i>xx]x</b>
       * //执行方法后
       * 返回的fragment里的 dom结构是
       * <i>x<i>xx
       * dom树上的结构是
       * <b>x<i>x<i>|x</b>
       * 注意range改变了
       * range.startContainer => b
       * range.startOffset  => 2
       * range.endContainer => b
       * range.endOffset => 2
       * range.collapsed => true
       */
      extractContents: function () {
        return this.collapsed ? null : execContentsAction(this, 2);
      },
      /**
       * @name  setStart
       * @grammar range.setStart(node,offset)  => Range
       * @desc    设置range的开始位置位于node节点内，偏移量为offset
       * 如果node是elementNode那offset指的是childNodes中的第几个，如果是textNode那offset指的是nodeValue的第几个字符
       */
      setStart: function (node, offset) {
        return setEndPoint(true, node, offset, this);
      },
      /**
       * 设置range的结束位置位于node节点，偏移量为offset
       * 如果node是elementNode那offset指的是childNodes中的第几个，如果是textNode那offset指的是nodeValue的第几个字符
       * @name  setEnd
       * @grammar range.setEnd(node,offset)  => Range
       */
      setEnd: function (node, offset) {
        return setEndPoint(false, node, offset, this);
      },
      /**
       * 将Range开始位置设置到node节点之后
       * @name  setStartAfter
       * @grammar range.setStartAfter(node)  => Range
       * @example
       * <b>xx<i>x|x</i>x</b>
       * 执行setStartAfter(i)后
       * range.startContainer =>b
       * range.startOffset =>2
       */
      setStartAfter: function (node) {
        return this.setStart(node.parentNode, domUtils.getNodeIndex(node) + 1);
      },
      /**
       * 将Range开始位置设置到node节点之前
       * @name  setStartBefore
       * @grammar range.setStartBefore(node)  => Range
       * @example
       * <b>xx<i>x|x</i>x</b>
       * 执行setStartBefore(i)后
       * range.startContainer =>b
       * range.startOffset =>1
       */
      setStartBefore: function (node) {
        return this.setStart(node.parentNode, domUtils.getNodeIndex(node));
      },
      /**
       * 将Range结束位置设置到node节点之后
       * @name  setEndAfter
       * @grammar range.setEndAfter(node)  => Range
       * @example
       * <b>xx<i>x|x</i>x</b>
       * setEndAfter(i)后
       * range.endContainer =>b
       * range.endtOffset =>2
       */
      setEndAfter: function (node) {
        return this.setEnd(node.parentNode, domUtils.getNodeIndex(node) + 1);
      },
      /**
       * 将Range结束位置设置到node节点之前
       * @name  setEndBefore
       * @grammar range.setEndBefore(node)  => Range
       * @example
       * <b>xx<i>x|x</i>x</b>
       * 执行setEndBefore(i)后
       * range.endContainer =>b
       * range.endtOffset =>1
       */
      setEndBefore: function (node) {
        return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));
      },
      /**
       * 将Range开始位置设置到node节点内的开始位置
       * @name  setStartAtFirst
       * @grammar range.setStartAtFirst(node)  => Range
       */
      setStartAtFirst: function (node) {
        return this.setStart(node, 0);
      },
      /**
       * 将Range开始位置设置到node节点内的结束位置
       * @name  setStartAtLast
       * @grammar range.setStartAtLast(node)  => Range
       */
      setStartAtLast: function (node) {
        return this.setStart(
          node,
          node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length
        );
      },
      /**
       * 将Range结束位置设置到node节点内的开始位置
       * @name  setEndAtFirst
       * @grammar range.setEndAtFirst(node)  => Range
       */
      setEndAtFirst: function (node) {
        return this.setEnd(node, 0);
      },
      /**
       * 将Range结束位置设置到node节点内的结束位置
       * @name  setEndAtLast
       * @grammar range.setEndAtLast(node)  => Range
       */
      setEndAtLast: function (node) {
        return this.setEnd(
          node,
          node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length
        );
      },

      /**
       * 选中完整的指定节点,并返回包含该节点的range
       * @name  selectNode
       * @grammar range.selectNode(node)  => Range
       */
      selectNode: function (node) {
        return this.setStartBefore(node).setEndAfter(node);
      },
      /**
       * 选中node内部的所有节点，并返回对应的range
       * @name selectNodeContents
       * @grammar range.selectNodeContents(node)  => Range
       * @example
       * <b>xx[x<i>xxx</i>]xxx</b>
       * 执行后
       * <b>[xxx<i>xxx</i>xxx]</b>
       * range.startContainer =>b
       * range.startOffset =>0
       * range.endContainer =>b
       * range.endOffset =>3
       */
      selectNodeContents: function (node) {
        return this.setStart(node, 0).setEndAtLast(node);
      },

      /**
       * 克隆一个新的range对象
       * @name  cloneRange
       * @grammar range.cloneRange() => Range
       */
      cloneRange: function () {
        var me = this;
        return new Range(me.document)
          .setStart(me.startContainer, me.startOffset)
          .setEnd(me.endContainer, me.endOffset);
      },

      /**
       * 让选区闭合到尾部，若toStart为真，则闭合到头部
       * @name  collapse
       * @grammar range.collapse() => Range
       * @grammar range.collapse(true) => Range   //闭合选区到头部
       */
      collapse: function (toStart) {
        var me = this;
        if (toStart) {
          me.endContainer = me.startContainer;
          me.endOffset = me.startOffset;
        } else {
          me.startContainer = me.endContainer;
          me.startOffset = me.endOffset;
        }
        me.collapsed = true;
        return me;
      },

      /**
       * 调整range的边界，使其"收缩"到最小的位置
       * @name  shrinkBoundary
       * @grammar range.shrinkBoundary()  => Range  //range开始位置和结束位置都调整，参见<code><a href="#adjustmentboundary">adjustmentBoundary</a></code>
       * @grammar range.shrinkBoundary(true)  => Range  //仅调整开始位置，忽略结束位置
       * @example
       * <b>xx[</b>xxxxx] ==> <b>xx</b>[xxxxx]
       * <b>x[xx</b><i>]xxx</i> ==> <b>x[xx]</b><i>xxx</i>
       * [<b><i>xxxx</i>xxxxxxx</b>] ==> <b><i>[xxxx</i>xxxxxxx]</b>
       */
      shrinkBoundary: function (ignoreEnd) {
        var me = this,
          child,
          collapsed = me.collapsed;
        function check(node) {
          return (
            node.nodeType == 1 &&
            !domUtils.isBookmarkNode(node) &&
            !dtd.$empty[node.tagName] &&
            !dtd.$nonChild[node.tagName]
          );
        }
        while (
          me.startContainer.nodeType == 1 && //是element
          (child = me.startContainer.childNodes[me.startOffset]) && //子节点也是element
          check(child)
        ) {
          me.setStart(child, 0);
        }
        if (collapsed) {
          return me.collapse(true);
        }
        if (!ignoreEnd) {
          while (
            me.endContainer.nodeType == 1 && //是element
            me.endOffset > 0 && //如果是空元素就退出 endOffset=0那么endOffst-1为负值，childNodes[endOffset]报错
            (child = me.endContainer.childNodes[me.endOffset - 1]) && //子节点也是element
            check(child)
          ) {
            me.setEnd(child, child.childNodes.length);
          }
        }
        return me;
      },
      /**
       * 获取当前range所在位置的公共祖先节点，当前range位置可以位于文本节点内，也可以包含整个元素节点，也可以位于两个节点之间
       * @name  getCommonAncestor
       * @grammar range.getCommonAncestor([includeSelf, ignoreTextNode])  => Element
       * @example
       * <b>xx[xx<i>xx]x</i>xxx</b> ==>getCommonAncestor() ==> b
       * <b>[<img/>]</b>
       * range.startContainer ==> b
       * range.startOffset ==> 0
       * range.endContainer ==> b
       * range.endOffset ==> 1
       * range.getCommonAncestor() ==> b
       * range.getCommonAncestor(true) ==> img
       * <b>xxx|xx</b>
       * range.startContainer ==> textNode
       * range.startOffset ==> 3
       * range.endContainer ==> textNode
       * range.endOffset ==> 3
       * range.getCommonAncestor() ==> textNode
       * range.getCommonAncestor(null,true) ==> b
       */
      getCommonAncestor: function (includeSelf, ignoreTextNode) {
        var me = this,
          start = me.startContainer,
          end = me.endContainer;
        if (start === end) {
          if (includeSelf && selectOneNode(this)) {
            start = start.childNodes[me.startOffset];
            if (start.nodeType == 1) return start;
          }
          //只有在上来就相等的情况下才会出现是文本的情况
          return ignoreTextNode && start.nodeType == 3
            ? start.parentNode
            : start;
        }
        return domUtils.getCommonAncestor(start, end);
      },
      /**
       * 调整边界容器，如果是textNode,就调整到elementNode上
       * @name trimBoundary
       * @grammar range.trimBoundary([ignoreEnd])  => Range //true忽略结束边界
       * @example
       * DOM Element :
       * <b>|xxx</b>
       * startContainer = xxx; startOffset = 0
       * //执行后本方法后
       * startContainer = <b>;  startOffset = 0
       * @example
       * Dom Element :
       * <b>xx|x</b>
       * startContainer = xxx;  startOffset = 2
       * //执行本方法后，xxx被实实在在地切分成两个TextNode
       * startContainer = <b>; startOffset = 1
       */
      trimBoundary: function (ignoreEnd) {
        this.txtToElmBoundary();
        var start = this.startContainer,
          offset = this.startOffset,
          collapsed = this.collapsed,
          end = this.endContainer;
        if (start.nodeType == 3) {
          if (offset == 0) {
            this.setStartBefore(start);
          } else {
            if (offset >= start.nodeValue.length) {
              this.setStartAfter(start);
            } else {
              var textNode = domUtils.split(start, offset);
              //跟新结束边界
              if (start === end) {
                this.setEnd(textNode, this.endOffset - offset);
              } else if (start.parentNode === end) {
                this.endOffset += 1;
              }
              this.setStartBefore(textNode);
            }
          }
          if (collapsed) {
            return this.collapse(true);
          }
        }
        if (!ignoreEnd) {
          offset = this.endOffset;
          end = this.endContainer;
          if (end.nodeType == 3) {
            if (offset == 0) {
              this.setEndBefore(end);
            } else {
              offset < end.nodeValue.length && domUtils.split(end, offset);
              this.setEndAfter(end);
            }
          }
        }
        return this;
      },
      /**
       * 如果选区在文本的边界上，就扩展选区到文本的父节点上
       * @name  txtToElmBoundary
       * @example
       * Dom Element :
       * <b> |xxx</b>
       * startContainer = xxx;  startOffset = 0
       * //本方法执行后
       * startContainer = <b>; startOffset = 0
       * @example
       * Dom Element :
       * <b> xxx| </b>
       * startContainer = xxx; startOffset = 3
       * //本方法执行后
       * startContainer = <b>; startOffset = 1
       */
      txtToElmBoundary: function () {
        function adjust(r, c) {
          var container = r[c + "Container"],
            offset = r[c + "Offset"];
          if (container.nodeType == 3) {
            if (!offset) {
              r[
                "set" +
                  c.replace(/(\w)/, function (a) {
                    return a.toUpperCase();
                  }) +
                  "Before"
              ](container);
            } else if (offset >= container.nodeValue.length) {
              r[
                "set" +
                  c.replace(/(\w)/, function (a) {
                    return a.toUpperCase();
                  }) +
                  "After"
              ](container);
            }
          }
        }

        if (!this.collapsed) {
          adjust(this, "start");
          adjust(this, "end");
        }
        return this;
      },

      /**
       * 在当前选区的开始位置前插入一个节点或者fragment，range的开始位置会在插入节点的前边
       * @name  insertNode
       * @grammar range.insertNode(node)  => Range //node可以是textNode,elementNode,fragment
       * @example
       * Range :
       * xxx[x<p>xxxx</p>xxxx]x<p>sdfsdf</p>
       * 待插入Node :
       * <p>ssss</p>
       * 执行本方法后的Range :
       * xxx[<p>ssss</p>x<p>xxxx</p>xxxx]x<p>sdfsdf</p>
       */
      insertNode: function (node) {
        var first = node,
          length = 1;
        if (node.nodeType == 11) {
          first = node.firstChild;
          length = node.childNodes.length;
        }
        this.trimBoundary(true);
        var start = this.startContainer,
          offset = this.startOffset;
        var nextNode = start.childNodes[offset];
        if (nextNode) {
          start.insertBefore(node, nextNode);
        } else {
          start.appendChild(node);
        }
        if (first.parentNode === this.endContainer) {
          this.endOffset = this.endOffset + length;
        }
        return this.setStartBefore(first);
      },
      /**
       * 设置光标闭合位置,toEnd设置为true时光标将闭合到选区的结尾
       * @name  setCursor
       * @grammar range.setCursor([toEnd])  =>  Range   //toEnd为true时，光标闭合到选区的末尾
       */
      setCursor: function (toEnd, noFillData) {
        return this.collapse(!toEnd).select(noFillData);
      },
      /**
       * 创建当前range的一个书签，记录下当前range的位置，方便当dom树改变时，还能找回原来的选区位置
       * @name createBookmark
       * @grammar range.createBookmark([serialize])  => Object  //{start:开始标记,end:结束标记,id:serialize} serialize为真时，开始结束标记是插入节点的id，否则是插入节点的引用
       */
      createBookmark: function (serialize, same) {
        var endNode,
          startNode = this.document.createElement("span");
        startNode.style.cssText = "display:none;line-height:0px;";
        startNode.appendChild(this.document.createTextNode("\u200D"));
        startNode.id = "_baidu_bookmark_start_" + (same ? "" : guid++);

        if (!this.collapsed) {
          endNode = startNode.cloneNode(true);
          endNode.id = "_baidu_bookmark_end_" + (same ? "" : guid++);
        }
        this.insertNode(startNode);
        if (endNode) {
          this.collapse().insertNode(endNode).setEndBefore(endNode);
        }
        this.setStartAfter(startNode);
        return {
          start: serialize ? startNode.id : startNode,
          end: endNode ? (serialize ? endNode.id : endNode) : null,
          id: serialize
        };
      },
      /**
       *  移动边界到书签位置，并删除插入的书签节点
       *  @name  moveToBookmark
       *  @grammar range.moveToBookmark(bookmark)  => Range //让当前的range选到给定bookmark的位置,bookmark对象是由range.createBookmark创建的
       */
      moveToBookmark: function (bookmark) {
        var start = bookmark.id
            ? this.document.getElementById(bookmark.start)
            : bookmark.start,
          end =
            bookmark.end && bookmark.id
              ? this.document.getElementById(bookmark.end)
              : bookmark.end;
        this.setStartBefore(start);
        domUtils.remove(start);
        if (end) {
          this.setEndBefore(end);
          domUtils.remove(end);
        } else {
          this.collapse(true);
        }
        return this;
      },
      /**
       * 调整range的边界，使其"放大"到最近的父block节点
       * @name  enlarge
       * @grammar range.enlarge()  =>  Range
       * @example
       * <p><span>xxx</span><b>x[x</b>xxxxx]</p><p>xxx</p> ==> [<p><span>xxx</span><b>xx</b>xxxxx</p>]<p>xxx</p>
       */
      enlarge: function (toBlock, stopFn) {
        var isBody = domUtils.isBody,
          pre,
          node,
          tmp = this.document.createTextNode("");
        if (toBlock) {
          node = this.startContainer;
          if (node.nodeType == 1) {
            if (node.childNodes[this.startOffset]) {
              pre = node = node.childNodes[this.startOffset];
            } else {
              node.appendChild(tmp);
              pre = node = tmp;
            }
          } else {
            pre = node;
          }
          while (1) {
            if (domUtils.isBlockElm(node)) {
              node = pre;
              while (
                (pre = node.previousSibling) &&
                !domUtils.isBlockElm(pre)
              ) {
                node = pre;
              }
              this.setStartBefore(node);
              break;
            }
            pre = node;
            node = node.parentNode;
          }
          node = this.endContainer;
          if (node.nodeType == 1) {
            if ((pre = node.childNodes[this.endOffset])) {
              node.insertBefore(tmp, pre);
            } else {
              node.appendChild(tmp);
            }
            pre = node = tmp;
          } else {
            pre = node;
          }
          while (1) {
            if (domUtils.isBlockElm(node)) {
              node = pre;
              while ((pre = node.nextSibling) && !domUtils.isBlockElm(pre)) {
                node = pre;
              }
              this.setEndAfter(node);
              break;
            }
            pre = node;
            node = node.parentNode;
          }
          if (tmp.parentNode === this.endContainer) {
            this.endOffset--;
          }
          domUtils.remove(tmp);
        }

        // 扩展边界到最大
        if (!this.collapsed) {
          while (this.startOffset == 0) {
            if (stopFn && stopFn(this.startContainer)) {
              break;
            }
            if (!editor.container.getAttribute("isFullScreen")) {
              if (isBody(this.startContainer)) {
                break;
              }
            } else {
              if (domUtils.isBreakPage(this.startContainer)) {
                break;
              }
            }
            // if (isBody(this.startContainer)) {
            //     break;
            // }
            this.setStartBefore(this.startContainer);
          }
          while (
            this.endOffset ==
            (this.endContainer.nodeType == 1
              ? this.endContainer.childNodes.length
              : this.endContainer.nodeValue.length)
          ) {
            if (stopFn && stopFn(this.endContainer)) {
              break;
            }
            // if (isBody(this.endContainer)) {
            //     break;
            // }
            if (!editor.container.getAttribute("isFullScreen")) {
              if (isBody(this.endContainer)) {
                break;
              }
            } else {
              if (domUtils.isBreakPage(this.endContainer)) {
                break;
              }
            }
            this.setEndAfter(this.endContainer);
          }
        }
        return this;
      },
      /**
       * 调整Range的边界，使其"缩小"到最合适的位置
       * @name adjustmentBoundary
       * @grammar range.adjustmentBoundary() => Range   //参见<code><a href="#shrinkboundary">shrinkBoundary</a></code>
       * @example
       * <b>xx[</b>xxxxx] ==> <b>xx</b>[xxxxx]
       * <b>x[xx</b><i>]xxx</i> ==> <b>x[xx</b>]<i>xxx</i>
       */
      adjustmentBoundary: function () {
        if (!this.collapsed) {
          while (
            !domUtils.isBody(this.startContainer) &&
            this.startOffset ==
              this.startContainer[
                this.startContainer.nodeType == 3 ? "nodeValue" : "childNodes"
              ].length &&
            this.startContainer[
              this.startContainer.nodeType == 3 ? "nodeValue" : "childNodes"
            ].length
          ) {
            this.setStartAfter(this.startContainer);
          }
          while (
            !domUtils.isBody(this.endContainer) &&
            !this.endOffset &&
            this.endContainer[
              this.endContainer.nodeType == 3 ? "nodeValue" : "childNodes"
            ].length
          ) {
            this.setEndBefore(this.endContainer);
          }
        }
        return this;
      },
      /**
       * 给range选区中的内容添加给定的标签，主要用于inline标签
       * @name applyInlineStyle
       * @grammar range.applyInlineStyle(tagName)        =>  Range    //tagName为需要添加的样式标签名
       * @grammar range.applyInlineStyle(tagName,attrs)  =>  Range    //attrs为属性json对象
       * @desc
       * <code type="html"><p>xxxx[xxxx]x</p>  ==>  range.applyInlineStyle("strong")  ==>  <p>xxxx[<strong>xxxx</strong>]x</p>
       * <p>xx[dd<strong>yyyy</strong>]x</p>  ==>  range.applyInlineStyle("strong")  ==>  <p>xx[<strong>ddyyyy</strong>]x</p>
       * <p>xxxx[xxxx]x</p>  ==>  range.applyInlineStyle("strong",{"style":"font-size:12px"})  ==>  <p>xxxx[<strong style="font-size:12px">xxxx</strong>]x</p></code>
       */
      applyInlineStyle: function (tagName, attrs, list) {
        if (this.collapsed) return this;
        this.trimBoundary()
          .enlarge(false, function (node) {
            return node.nodeType == 1 && domUtils.isBlockElm(node);
          })
          .adjustmentBoundary();
        var bookmark = this.createBookmark(),
          end = bookmark.end,
          filterFn = function (node) {
            return node.nodeType == 1
              ? node.tagName.toLowerCase() != "br"
              : !domUtils.isWhitespace(node);
          },
          current = domUtils.getNextDomNode(bookmark.start, false, filterFn),
          node,
          pre,
          range = this.cloneRange();
        while (
          current &&
          domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING
        ) {
          if (current.nodeType == 3 || dtd[tagName][current.tagName]) {
            range.setStartBefore(current);
            node = current;
            while (
              node &&
              (node.nodeType == 3 || dtd[tagName][node.tagName]) &&
              node !== end
            ) {
              pre = node;
              node = domUtils.getNextDomNode(
                node,
                node.nodeType == 1,
                null,
                function (parent) {
                  return dtd[tagName][parent.tagName];
                }
              );
            }
            var frag = range.setEndAfter(pre).extractContents(),
              elm;
            if (list && list.length > 0) {
              var level, top;
              top = level = list[0].cloneNode(false);
              for (var i = 1, ci; (ci = list[i++]); ) {
                level.appendChild(ci.cloneNode(false));
                level = level.firstChild;
              }
              elm = level;
            } else {
              elm = range.document.createElement(tagName);
            }
            if (attrs) {
              domUtils.setAttributes(elm, attrs);
            }
            elm.appendChild(frag);
            range.insertNode(list ? top : elm);
            //处理下滑线在a上的情况
            var aNode;
            if (
              tagName == "span" &&
              attrs.style &&
              /text\-decoration/.test(attrs.style) &&
              (aNode = domUtils.findParentByTagName(elm, "a", true))
            ) {
              domUtils.setAttributes(aNode, attrs);
              domUtils.remove(elm, true);
              elm = aNode;
            } else {
              domUtils.mergeSibling(elm);
              domUtils.clearEmptySibling(elm);
            }
            //去除子节点相同的
            domUtils.mergeChild(elm, attrs);
            current = domUtils.getNextDomNode(elm, false, filterFn);
            domUtils.mergeToParent(elm);
            if (node === end) {
              break;
            }
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return this.moveToBookmark(bookmark);
      },
      /**
       * 对当前range选中的节点，去掉给定的标签节点，但标签中的内容保留，主要用于处理inline元素
       * @name removeInlineStyle
       * @grammar range.removeInlineStyle(tagNames)  => Range  //tagNames 为需要去掉的样式标签名,支持"b"或者["b","i","u"]
       * @desc
       * <code type="html">xx[x<span>xxx<em>yyy</em>zz]z</span>  => range.removeInlineStyle(["em"])  => xx[x<span>xxxyyyzz]z</span></code>
       */
      removeInlineStyle: function (tagNames) {
        if (this.collapsed) return this;
        tagNames = utils.isArray(tagNames) ? tagNames : [tagNames];
        this.shrinkBoundary().adjustmentBoundary();
        var start = this.startContainer,
          end = this.endContainer;
        while (1) {
          if (start.nodeType == 1) {
            if (utils.indexOf(tagNames, start.tagName.toLowerCase()) > -1) {
              break;
            }
            if (start.tagName.toLowerCase() == "body") {
              start = null;
              break;
            }
          }
          start = start.parentNode;
        }
        while (1) {
          if (end.nodeType == 1) {
            if (utils.indexOf(tagNames, end.tagName.toLowerCase()) > -1) {
              break;
            }
            if (end.tagName.toLowerCase() == "body") {
              end = null;
              break;
            }
          }
          end = end.parentNode;
        }
        var bookmark = this.createBookmark(),
          frag,
          tmpRange;
        if (start) {
          tmpRange = this.cloneRange()
            .setEndBefore(bookmark.start)
            .setStartBefore(start);
          frag = tmpRange.extractContents();
          tmpRange.insertNode(frag);
          domUtils.clearEmptySibling(start, true);
          start.parentNode.insertBefore(bookmark.start, start);
        }
        if (end) {
          tmpRange = this.cloneRange()
            .setStartAfter(bookmark.end)
            .setEndAfter(end);
          frag = tmpRange.extractContents();
          tmpRange.insertNode(frag);
          domUtils.clearEmptySibling(end, false, true);
          end.parentNode.insertBefore(bookmark.end, end.nextSibling);
        }
        var current = domUtils.getNextDomNode(
            bookmark.start,
            false,
            function (node) {
              return node.nodeType == 1;
            }
          ),
          next;
        while (current && current !== bookmark.end) {
          next = domUtils.getNextDomNode(current, true, function (node) {
            return node.nodeType == 1;
          });
          if (utils.indexOf(tagNames, current.tagName.toLowerCase()) > -1) {
            domUtils.remove(current, true);
          }
          current = next;
        }
        return this.moveToBookmark(bookmark);
      },
      /**
       * 得到一个自闭合的节点,常用于获取自闭和的节点，例如图片节点
       * @name  getClosedNode
       * @grammar range.getClosedNode()  => node|null
       * @example
       * <b>xxxx[<img />]xxx</b>
       */
      getClosedNode: function () {
        var node;
        if (!this.collapsed) {
          var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();
          if (selectOneNode(range)) {
            var child = range.startContainer.childNodes[range.startOffset];
            if (
              child &&
              child.nodeType == 1 &&
              (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName])
            ) {
              node = child;
            }
          }
        }
        return node;
      },
      /**
       * 根据当前range选中内容节点（在页面上表现为反白显示）
       * @name select
       * @grammar range.select();  => Range
       */
      select: browser.ie
        ? function (noFillData, textRange) {
            var nativeRange;
            if (!this.collapsed) this.shrinkBoundary();
            var node = this.getClosedNode();
            if (node && !textRange) {
              try {
                nativeRange = this.document.body.createControlRange();
                nativeRange.addElement(node);
                nativeRange.select();
              } catch (e) {}
              return this;
            }
            var bookmark = this.createBookmark(),
              start = bookmark.start,
              end;
            nativeRange = this.document.body.createTextRange();
            nativeRange.moveToElementText(start);
            nativeRange.moveStart("character", 1);
            if (!this.collapsed) {
              var nativeRangeEnd = this.document.body.createTextRange();
              end = bookmark.end;
              nativeRangeEnd.moveToElementText(end);
              nativeRange.setEndPoint("EndToEnd", nativeRangeEnd);
            } else {
              if (!noFillData && this.startContainer.nodeType != 3) {
                //使用<span>|x<span>固定住光标
                var tmpText = this.document.createTextNode(fillChar),
                  tmp = this.document.createElement("span");
                tmp.appendChild(this.document.createTextNode(fillChar));
                start.parentNode.insertBefore(tmp, start);
                start.parentNode.insertBefore(tmpText, start);
                //当点b,i,u时，不能清除i上边的b
                removeFillData(this.document, tmpText);
                fillData = tmpText;
                mergeSibling(tmp, "previousSibling");
                mergeSibling(start, "nextSibling");
                nativeRange.moveStart("character", -1);
                nativeRange.collapse(true);
              }
            }
            this.moveToBookmark(bookmark);
            tmp && domUtils.remove(tmp);

            //IE在隐藏状态下不支持range操作，catch一下
            try {
              nativeRange.select();
            } catch (e) {}
            return this;
          }
        : function (notInsertFillData) {
            function checkOffset(rng) {
              function check(node, offset, dir) {
                if (node.nodeType == 3 && node.nodeValue.length < offset) {
                  rng[dir + "Offset"] = node.nodeValue.length;
                }
              }
              check(rng.startContainer, rng.startOffset, "start");
              check(rng.endContainer, rng.endOffset, "end");
            }
            var win = domUtils.getWindow(this.document),
              sel = win.getSelection(),
              txtNode;
            //FF下关闭自动长高时滚动条在关闭dialog时会跳
            //ff下如果不body.focus将不能定位闭合光标到编辑器内
            // browser.gecko ? this.document.body.focus() : win.focus();
            if (sel) {
              sel.removeAllRanges();
              // trace:870 chrome/safari后边是br对于闭合得range不能定位 所以去掉了判断
              // this.startContainer.nodeType != 3 &&! ((child = this.startContainer.childNodes[this.startOffset]) && child.nodeType == 1 && child.tagName == 'BR'
              if (this.collapsed && !notInsertFillData) {
                ////opear如果没有节点接着，原生的不能够定位,不能在body的第一级插入空白节点
                //if (notInsertFillData && browser.opera && !domUtils.isBody(this.startContainer) && this.startContainer.nodeType == 1) {
                //    var tmp = this.document.createTextNode('');
                //    this.insertNode(tmp).setStart(tmp, 0).collapse(true);
                //}
                //
                //处理光标落在文本节点的情况
                //处理以下的情况
                //<b>|xxxx</b>
                //<b>xxxx</b>|xxxx
                //xxxx<b>|</b>
                var start = this.startContainer,
                  child = start;
                if (start.nodeType == 1) {
                  child = start.childNodes[this.startOffset];
                }
                if (
                  !(start.nodeType == 3 && this.startOffset) &&
                  (child
                    ? !child.previousSibling ||
                      child.previousSibling.nodeType != 3
                    : !start.lastChild || start.lastChild.nodeType != 3)
                ) {
                  txtNode = this.document.createTextNode(fillChar);
                  //跟着前边走
                  this.insertNode(txtNode);
                  removeFillData(this.document, txtNode);
                  mergeSibling(txtNode, "previousSibling");
                  mergeSibling(txtNode, "nextSibling");
                  fillData = txtNode;
                  this.setStart(txtNode, browser.webkit ? 1 : 0).collapse(true);
                }
              }
              var nativeRange = this.document.createRange();
              if (
                this.collapsed &&
                browser.opera &&
                this.startContainer.nodeType == 1
              ) {
                var child = this.startContainer.childNodes[this.startOffset];
                if (!child) {
                  //往前靠拢
                  child = this.startContainer.lastChild;
                  if (child && domUtils.isBr(child)) {
                    this.setStartBefore(child).collapse(true);
                  }
                } else {
                  //向后靠拢
                  while (child && domUtils.isBlockElm(child)) {
                    if (child.nodeType == 1 && child.childNodes[0]) {
                      child = child.childNodes[0];
                    } else {
                      break;
                    }
                  }
                  child && this.setStartBefore(child).collapse(true);
                }
              }
              //是createAddress最后一位算的不准，现在这里进行微调
              checkOffset(this);
              nativeRange.setStart(this.startContainer, this.startOffset);
              nativeRange.setEnd(this.endContainer, this.endOffset);
              // if(this.startOffset == 3 || this.startOffset == 2){
              //     nativeRange.setStart(this.startContainer, 1);
              //     nativeRange.setEnd(this.endContainer, 1);
              // }else{
              // nativeRange.setStart(this.startContainer, this.startOffset);
              // nativeRange.setEnd(this.endContainer, this.endOffset);
              // }

              // 对hover换图做特殊处理，因为当鼠标移开是，选中的元素会隐藏掉，高亮的蓝色选区没选中第一张图片
              if (
                this.startContainer.className == "J_hoverImageParent" &&
                this.endContainer.className == "J_hoverImageParent"
              ) {
                nativeRange.setStart(this.startContainer, 0);
              }

              sel.addRange(nativeRange);
            }
            return this;
          },
      /**
       * 滚动条跳到当然range开始的位置
       * @name scrollToView
       * @grammar range.scrollToView([win,offset]) => Range //针对window对象，若不指定，将以编辑区域的窗口为准,offset偏移量
       */
      scrollToView: function (win, offset) {
        win = win ? window : domUtils.getWindow(this.document);
        var me = this,
          span = me.document.createElement("span");
        //trace:717
        span.innerHTML = "&nbsp;";
        me.cloneRange().insertNode(span);
        domUtils.scrollToView(span, win, offset);
        domUtils.remove(span);
        return me;
      },
      inFillChar: function () {
        var start = this.startContainer;
        if (
          this.collapsed &&
          start.nodeType == 3 &&
          start.nodeValue.replace(new RegExp("^" + domUtils.fillChar), "")
            .length +
            1 ==
            start.nodeValue.length
        ) {
          return true;
        }
        return false;
      },
      createAddress: function (ignoreEnd, ignoreTxt) {
        var addr = {},
          me = this;

        function getAddress(isStart) {
          var node = isStart ? me.startContainer : me.endContainer;
          var parents = domUtils.findParents(node, true, function (node) {
              return !domUtils.isBody(node);
            }),
            addrs = [];
          for (var i = 0, ci; (ci = parents[i++]); ) {
            addrs.push(domUtils.getNodeIndex(ci, ignoreTxt));
          }
          var firstIndex = 0;

          if (ignoreTxt) {
            if (node.nodeType == 3) {
              var tmpNode = node.previousSibling;
              while (tmpNode && tmpNode.nodeType == 3) {
                firstIndex += tmpNode.nodeValue.replace(fillCharReg, "").length;
                tmpNode = tmpNode.previousSibling;
              }
              firstIndex += isStart ? me.startOffset : me.endOffset; // - (fillCharReg.test(node.nodeValue) ? 1 : 0 )
            } else {
              node = node.childNodes[isStart ? me.startOffset : me.endOffset];
              if (node) {
                firstIndex = domUtils.getNodeIndex(node, ignoreTxt);
              } else {
                node = isStart ? me.startContainer : me.endContainer;
                var first = node.firstChild;
                while (first) {
                  if (domUtils.isFillChar(first)) {
                    first = first.nextSibling;
                    continue;
                  }
                  firstIndex++;
                  if (first.nodeType == 3) {
                    while (first && first.nodeType == 3) {
                      first = first.nextSibling;
                    }
                  } else {
                    first = first.nextSibling;
                  }
                }
              }
            }
          } else {
            firstIndex = isStart
              ? domUtils.isFillChar(node)
                ? 0
                : me.startOffset
              : me.endOffset;
          }
          if (firstIndex < 0) {
            firstIndex = 0;
          }
          addrs.push(firstIndex);
          return addrs;
        }
        addr.startAddress = getAddress(true);
        if (!ignoreEnd) {
          addr.endAddress = me.collapsed
            ? [].concat(addr.startAddress)
            : getAddress();
        }
        return addr;
      },
      moveToAddress: function (addr, ignoreEnd) {
        var me = this;
        function getNode(address, isStart) {
          var tmpNode = me.document.body,
            parentNode,
            offset;
          for (var i = 0, ci, l = address.length; i < l; i++) {
            ci = address[i];
            parentNode = tmpNode;
            tmpNode = tmpNode.childNodes[ci];
            if (!tmpNode) {
              offset = ci;
              break;
            }
          }
          if (isStart) {
            if (tmpNode) {
              me.setStartBefore(tmpNode);
            } else {
              me.setStart(parentNode, offset);
            }
          } else {
            if (tmpNode) {
              me.setEndBefore(tmpNode);
            } else {
              me.setEnd(parentNode, offset);
            }
          }
        }
        getNode(addr.startAddress, true);
        !ignoreEnd && addr.endAddress && getNode(addr.endAddress);
        return me;
      },
      equals: function (rng) {
        for (var p in this) {
          if (this.hasOwnProperty(p)) {
            if (this[p] !== rng[p]) return false;
          }
        }
        return true;
      },
      traversal: function (doFn, filterFn) {
        if (this.collapsed) return this;
        var bookmark = this.createBookmark(),
          end = bookmark.end,
          current = domUtils.getNextDomNode(bookmark.start, false, filterFn);
        while (
          current &&
          current !== end &&
          domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING
        ) {
          var tmpNode = domUtils.getNextDomNode(current, false, filterFn);
          doFn(current);
          current = tmpNode;
        }
        return this.moveToBookmark(bookmark);
      }
    };
  })();
  /**Range.js end**/
  /**Selection.js start**/
  /**
   * @name Selection类
   * 选区集合
   * @class baidu.editor.dom.Selection
   */
  (function () {
    function getBoundaryInformation(range, start) {
      var getIndex = domUtils.getNodeIndex;
      range = range.duplicate();
      range.collapse(start);
      var parent = range.parentElement();
      //如果节点里没有子节点，直接退出
      if (!parent.hasChildNodes()) {
        return { container: parent, offset: 0 };
      }
      var siblings = parent.children,
        child,
        testRange = range.duplicate(),
        startIndex = 0,
        endIndex = siblings.length - 1,
        index = -1,
        distance;
      while (startIndex <= endIndex) {
        index = Math.floor((startIndex + endIndex) / 2);
        child = siblings[index];
        testRange.moveToElementText(child);
        var position = testRange.compareEndPoints("StartToStart", range);
        if (position > 0) {
          endIndex = index - 1;
        } else if (position < 0) {
          startIndex = index + 1;
        } else {
          //trace:1043
          return { container: parent, offset: getIndex(child) };
        }
      }
      if (index == -1) {
        testRange.moveToElementText(parent);
        testRange.setEndPoint("StartToStart", range);
        distance = testRange.text.replace(/(\r\n|\r)/g, "\n").length;
        siblings = parent.childNodes;
        if (!distance) {
          child = siblings[siblings.length - 1];
          return { container: child, offset: child.nodeValue.length };
        }

        var i = siblings.length;
        while (distance > 0) {
          distance -= siblings[--i].nodeValue.length;
        }
        return { container: siblings[i], offset: -distance };
      }
      testRange.collapse(position > 0);
      testRange.setEndPoint(
        position > 0 ? "StartToStart" : "EndToStart",
        range
      );
      distance = testRange.text.replace(/(\r\n|\r)/g, "\n").length;
      if (!distance) {
        return dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName]
          ? {
              container: parent,
              offset: getIndex(child) + (position > 0 ? 0 : 1)
            }
          : {
              container: child,
              offset: position > 0 ? 0 : child.childNodes.length
            };
      }
      while (distance > 0) {
        try {
          var pre = child;
          child = child[position > 0 ? "previousSibling" : "nextSibling"];
          distance -= child.nodeValue.length;
        } catch (e) {
          return { container: parent, offset: getIndex(pre) };
        }
      }
      return {
        container: child,
        offset: position > 0 ? -distance : child.nodeValue.length + distance
      };
    }

    /**
     * 将ieRange转换为Range对象
     * @param {Range}   ieRange    ieRange对象
     * @param {Range}   range      Range对象
     * @return  {Range}  range       返回转换后的Range对象
     */
    function transformIERangeToRange(ieRange, range) {
      if (ieRange.item) {
        range.selectNode(ieRange.item(0));
      } else {
        var bi = getBoundaryInformation(ieRange, true);
        range.setStart(bi.container, bi.offset);
        if (ieRange.compareEndPoints("StartToEnd", ieRange) != 0) {
          bi = getBoundaryInformation(ieRange, false);
          range.setEnd(bi.container, bi.offset);
        }
      }
      return range;
    }

    /**
     * 获得ieRange
     * @param {Selection} sel    Selection对象
     * @return {ieRange}    得到ieRange
     */
    function _getIERange(sel) {
      var ieRange;
      //ie下有可能报错
      try {
        ieRange = sel.getNative().createRange();
      } catch (e) {
        return null;
      }
      var el = ieRange.item ? ieRange.item(0) : ieRange.parentElement();
      if ((el.ownerDocument || el) === sel.document) {
        return ieRange;
      }
      return null;
    }

    var Selection = (dom.Selection = function (doc) {
      var me = this,
        iframe;
      me.document = doc;
      if (ie) {
        iframe = domUtils.getWindow(doc).frameElement;
        domUtils.on(iframe, "beforedeactivate", function () {
          me._bakIERange = me.getIERange();
        });
        domUtils.on(iframe, "activate", function () {
          try {
            if (!_getIERange(me) && me._bakIERange) {
              me._bakIERange.select();
            }
          } catch (ex) {}
          me._bakIERange = null;
        });
      }
      iframe = doc = null;
    });

    Selection.prototype = {
      /**
       * 获取原生seleciton对象
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.getNative
       * @return {Selection}    获得selection对象
       */
      getNative: function () {
        var doc = this.document;
        try {
          return !doc
            ? null
            : ie
            ? doc.selection
            : domUtils.getWindow(doc).getSelection();
        } catch (e) {
          return null;
        }
      },
      /**
       * 获得ieRange
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.getIERange
       * @return {ieRange}    返回ie原生的Range
       */
      getIERange: function () {
        var ieRange = _getIERange(this);
        if (!ieRange) {
          if (this._bakIERange) {
            return this._bakIERange;
          }
        }
        return ieRange;
      },

      /**
       * 缓存当前选区的range和选区的开始节点
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.cache
       */
      cache: function () {
        this.clear();
        this._cachedRange = this.getRange();
        this._cachedStartElement = this.getStart();
        this._cachedStartElementPath = this.getStartElementPath();
      },

      getStartElementPath: function () {
        if (this._cachedStartElementPath) {
          return this._cachedStartElementPath;
        }
        var start = this.getStart();
        if (start) {
          return domUtils.findParents(start, true, null, true);
        }
        return [];
      },
      /**
       * 清空缓存
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.clear
       */
      clear: function () {
        this._cachedStartElementPath = this._cachedRange = this._cachedStartElement = null;
      },
      /**
       * 编辑器是否得到了选区
       */
      isFocus: function () {
        try {
          return (browser.ie && _getIERange(this)) ||
            (!browser.ie && this.getNative().rangeCount)
            ? true
            : false;
        } catch (e) {
          return false;
        }
      },
      /**
       * 获取选区对应的Range
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.getRange
       * @returns {baidu.editor.dom.Range}    得到Range对象
       */
      getRange: function () {
        var me = this;
        function optimze(range) {
          var child = me.document.body.firstChild,
            collapsed = range.collapsed;
          while (child && child.firstChild) {
            range.setStart(child, 0);
            child = child.firstChild;
          }
          if (!range.startContainer) {
            range.setStart(me.document.body, 0);
          }
          if (collapsed) {
            range.collapse(true);
          }
        }

        if (me._cachedRange != null) {
          return this._cachedRange;
        }
        var range = new baidu.editor.dom.Range(me.document);
        if (ie) {
          var nativeRange = me.getIERange();
          if (nativeRange) {
            //备份的_bakIERange可能已经实效了，dom树发生了变化比如从源码模式切回来，所以try一下，实效就放到body开始位置
            try {
              transformIERangeToRange(nativeRange, range);
            } catch (e) {
              optimze(range);
            }
          } else {
            optimze(range);
          }
        } else {
          var sel = me.getNative();

          if (sel && sel.rangeCount) {
            var firstRange = sel.getRangeAt(0);
            var lastRange = sel.getRangeAt(sel.rangeCount - 1);
            range
              .setStart(firstRange.startContainer, firstRange.startOffset)
              .setEnd(lastRange.endContainer, lastRange.endOffset);
            if (
              range.collapsed &&
              domUtils.isBody(range.startContainer) &&
              !range.startOffset
            ) {
              optimze(range);
            }
          } else {
            var hasBakInDoc =
              this._bakRange &&
              domUtils.inDoc(this._bakRange.startContainer, this.document);

            //trace:1734 有可能已经不在dom树上了，标识的节点
            if (hasBakInDoc) {
              return this._bakRange;
            }
            optimze(range);
          }
        }

        // 对hover换图元素做特殊处理。hover换图的结构会比较特别是一个span包裹住两个img元素，旧的逻辑中startOffset拿到的是1
        // 这会导致range的起点是从第一个img开始的，从而对range做处理的时候只会作用在第二个img
        if (
          range.startContainer.className == "J_hoverImageParent" &&
          range.endContainer.className == "J_hoverImageParent"
        ) {
          range.setStart(range.startContainer, 0);
        }
        return (this._bakRange = range);
      },

      /**
       * 获取开始元素，用于状态反射
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.getStart
       * @return {Element}     获得开始元素
       */
      getStart: function () {
        if (this._cachedStartElement) {
          return this._cachedStartElement;
        }
        var range = ie ? this.getIERange() : this.getRange(),
          tmpRange,
          start,
          tmp,
          parent;
        if (ie) {
          if (!range) {
            //todo 给第一个值可能会有问题
            return this.document.body.firstChild;
          }
          //control元素
          if (range.item) {
            return range.item(0);
          }
          tmpRange = range.duplicate();
          //修正ie下<b>x</b>[xx] 闭合后 <b>x|</b>xx
          tmpRange.text.length > 0 && tmpRange.moveStart("character", 1);
          tmpRange.collapse(1);
          start = tmpRange.parentElement();
          parent = tmp = range.parentElement();
          while ((tmp = tmp.parentNode)) {
            if (tmp == start) {
              start = parent;
              break;
            }
          }
        } else {
          range.shrinkBoundary();
          start = range.startContainer;
          if (start.nodeType == 1 && start.hasChildNodes()) {
            start =
              start.childNodes[
                Math.min(start.childNodes.length - 1, range.startOffset)
              ];
          }
          if (start.nodeType == 3) {
            return start.parentNode;
          }
        }

        if (start.className == "hoverImage") {
          start = start.parentNode;
        }

        return start;
      },
      /**
       * 得到选区中的文本
       * @public
       * @function
       * @name    baidu.editor.dom.Selection.getText
       * @return  {String}    选区中包含的文本
       */
      getText: function () {
        var nativeSel, nativeRange;
        if (this.isFocus() && (nativeSel = this.getNative())) {
          nativeRange = browser.ie
            ? nativeSel.createRange()
            : nativeSel.getRangeAt(0);
          return browser.ie ? nativeRange.text : nativeRange.toString();
        }
        return "";
      },
      clearRange: function () {
        this.getNative()[browser.ie ? "empty" : "removeAllRanges"]();
      }
    };
  })();
  /**Selection.js end**/
  /****Editor.js start***/
  /**
   * 编辑器主类，包含编辑器提供的大部分公用接口
   * @file
   * @module UE
   * @class Editor
   */
  /**
   * UEditor的核心类，为用户提供与编辑器交互的接口。
   * @unfile
   * @module UE
   * @class Editor
   */
  (function () {
    var uid = 0,
      _selectionChangeTimer;

    function replaceSrc(div) {
      var imgs = div.getElementsByTagName("img"),
        orgSrc;
      for (var i = 0, img; (img = imgs[i++]); ) {
        if ((orgSrc = img.getAttribute("orgSrc"))) {
          img.src = orgSrc;
          img.removeAttribute("orgSrc");
        }
      }
      var as = div.getElementsByTagName("a");
      for (var i = 0, ai; (ai = as[i++]); i++) {
        if (ai.getAttribute("data_ue_src")) {
          ai.setAttribute("href", ai.getAttribute("data_ue_src"));
        }
      }
    }
    function setValue(form, editor) {
      var textarea;
      if (editor.textarea) {
        if (utils.isString(editor.textarea)) {
          for (
            var i = 0,
              ti,
              tis = domUtils.getElementsByTagName(form, "textarea");
            (ti = tis[i++]);

          ) {
            if (ti.id == "ueditor_textarea_" + editor.options.textarea) {
              textarea = ti;
              break;
            }
          }
        } else {
          textarea = editor.textarea;
        }
      }
      if (!textarea) {
        form.appendChild(
          (textarea = domUtils.creElm(document, "textarea", {
            name: editor.options.textarea,
            id: "ueditor_textarea_" + editor.options.textarea,
            style: "display:none"
          }))
        );
      }
      textarea.value = editor.options.allHtmlEnabled
        ? editor.getAllHtml()
        : editor.getContent(null, null, true);
    }

    /**
     * 编辑器类
     * @public
     * @class
     * @extends baidu.editor.EventBase
     * @name baidu.editor.Editor
     * @param {Object} options
     */
    var Editor = (UE.Editor = function (options) {
      var me = this;
      me.uid = uid++;
      EventBase.call(me);
      me.commands = {};
      me.options = utils.extend(options || {}, UEDITOR_CONFIG, true);
      //设置默认的常用属性
      me.shortcutkeys = {};
      me.inputRules = [];
      me.outputRules = [];
      me.setOpt({
        isShow: true,
        initialContent: "",
        autoClearinitialContent: false,
        //iframeCssUrl:me.options.UEDITOR_HOME_URL + '/css/comm/ueditor/iframe.css',
        textarea: "editorValue",
        focus: false,
        minFrameHeight: 320,
        autoClearEmptyNode: true,
        fullscreen: false,
        readonly: false,
        zIndex: 0,
        enterTag: "p",
        pageBreakTag: "_baidu_page_break_tag_",
        customDomain: false,
        lang: "zh-cn",
        // langPath:me.options.UEDITOR_HOME_URL + '/js/comm/ueditor/',
        allHtmlEnabled: false
      });

      /*
            uils.loadFile( document, {
                src:me.options.langPath + me.options.lang + "/" + me.options.lang + ".js",
                tag:"script",
                type:"text/javascript",
                defer:"defer"
            }, function () {
                //初始化插件
                for ( var pi in UE.plugins ) {
                    UE.plugins[pi].call( me )
                }
                me.langIsReady = true;

                me.fireEvent( "langReady" );
            } );
            */
      UE.instants["ueditorInstant" + me.uid] = me;

      //初始化插件
      for (var pi in UE.plugins) {
        UE.plugins[pi].call(me);
      }
      me.langIsReady = true;

      me.fireEvent("langReady");

      UE.editor = me;

      UE.utils.afterInstant && UE.utils.afterInstant.call(me);
    });
    Editor.prototype = /**@lends baidu.editor.Editor.prototype*/ {
      /**
       * 当编辑器ready后执行传入的fn,如果编辑器已经ready好了，就马上执行fn，fn的中的this是编辑器实例
       * @param {function} fn 需要执行的函数
       */
      ready: function (fn) {
        var me = this;
        if (fn) me.isReady ? fn.apply(me) : me.addListener("ready", fn);
      },
      setOpt: function (key, val) {
        var obj = {};
        if (utils.isString(key)) {
          obj[key] = val;
        } else {
          obj = key;
        }
        utils.extend(this.options, obj, true);
      },
      getOpt: function (key) {
        return this.options[key];
      },
      destroy: function () {
        var me = this;
        me.fireEvent("destroy");
        me.container.innerHTML = "";
        domUtils.remove(me.container);
        //trace:2004
        for (var p in me) {
          if (me.hasOwnProperty(p)) {
            delete this[p];
          }
        }
      },
      addshortcutkey: function (cmd, keys) {
        var obj = {};
        if (keys) {
          obj[cmd] = keys;
        } else {
          obj = cmd;
        }
        utils.extend(this.shortcutkeys, obj);
      },
      /**
       * 渲染编辑器的DOM到指定容器，必须且只能调用一次
       * @public
       * @function
       * @param {Element|String} container
       */
      render: function (container) {
        var me = this,
          options = me.options;

        if (container.constructor === String) {
          container = document.getElementById(container);
        }
        if (container) {
          var useBodyAsViewport = ie && browser.version < 9,
            html =
              (ie && browser.version < 9 ? "" : "<!DOCTYPE html>") +
              "<html xmlns='http://www.w3.org/1999/xhtml'" +
              (!useBodyAsViewport ? " class='view'" : "") +
              "><head>" +
              (options.iframeCssUrl
                ? "<link rel='stylesheet' type='text/css' href='" +
                  utils.unhtml(options.iframeCssUrl) +
                  "'/>"
                : "") +
              "<style type='text/css'>" +
              "::selection {background-color: #387ed6;color: #fff;}" +
              //这些默认属性不能够让用户改变
              //选中的td上的样式
              // '.selectTdClass{background-color:#387ed6 !important;}' +
              "table.noBorderTable td{border:1px dashed #ddd !important}" +
              //插入的表格的默认样式
              "table{clear:both;border-collapse:collapse;word-break:break-all;}" +
              //分页符的样式
              ".pagebreak{display:block;clear:both !important;cursor:default !important;width: 100% !important;margin:0;}" +
              //锚点的样式,注意这里背景图的路径
              // '.anchorclass{background: url(\'' + me.options.UEDITOR_HOME_URL + 'themes/default/images/anchor.gif\') no-repeat scroll left center transparent;border: 1px dotted #0000FF;cursor: auto;display: inline-block;height: 16px;width: 15px;}' +
              //设置四周的留边
              ".view{padding:0;word-wrap:break-word;cursor:text;height:100%;}\n" +
              //设置默认字体和字号
              "body{margin:12px 12px 0 12px;font-family:'微软雅黑';font-size:14px;background-color:#fff;color: #444;}" +
              //针对li的处理
              "li{clear:both}" +
              //设置段落间距
              "p{margin:0;padding:0;outline:0;border:0;line-height:1.8;}" +
              "img{vertical-align:top;}" +
              //添加audio播放器的点击覆盖层
              ".music-mask-color{background-color:#387ed6;opacity:0.8;z-index:999;}" +
              ".music-mask, .music-mask_2{pointer-events: all!important;}" +
              ".netVideo_mask{width:100%;height:100%;position:absolute;top:0;left:0;}" +
              "*:focus {outline: none;}" +
              "div.breakPage{width: 100%;box-sizing:border-box;padding:50px 50px 100px 50px;overflow-x:auto;margin:20px 0 15px 0;background-color:#FFF;box-shadow: 0px 2px 10px rgba(0,0,0,.05), 0px 2px 5px rgba(0,0,0,.05);}" +
              "div.breakPageParent{max-width:1200px;width:75%;margin:0 auto;position:relative;}" +
              ".htmlScroll::-webkit-scrollbar {width:8px;}" +
              // 'body.changeBgColor,div.breakPage.changeBgColor{background-color:#969696;}'+
              ".htmlScroll::-webkit-scrollbar-track {background-color:#eee;border-radius:4px;}" +
              ".htmlScroll::-webkit-scrollbar-thumb {border-radius:4px;background:#ccc;}" +
              // '.pageBreakClose:hover{width:90px;right:-107px;font-size:12px;color:#387ed6;background-position:-180px -650px;line-height:33px;text-align:right;padding-right:10px;transition:width 0.1s,right 0.1s;}'
              // '.pageBreakClose{width:100%;height:18px;box-sizing:border-box;position:absolute;top:-19px;border-radius:3px;cursor:pointer;}'+
              // '.pageBreakCloseIcon{width:18px;height:18px;background:url(http:'+options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/UE_qt.png) no-repeat -7px -858px;position:absolute;right:12px;}'+
              // '.pageBreakCloseIcon:hover{background-position:-67px -858px;}'+
              // '.pageBreakClose:hover .pageBreakCloseIcon{background-position:-67px -858px;}'+
              // '.staticBtn{width:118px;position:fixed;}'+
              // '.staticBtn .htmlBtn{width:42px;height:42px;margin-bottom:10px;cursor:pointer;background:url(http:'+options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/UE_qt.png) no-repeat -535px -296px;background-color:#fff;box-shadow: 0px 2px 10px rgba(0,0,0,.05), 0px 2px 5px rgba(0,0,0,.05);}'+
              // '.staticBtn .htmlBtn:hover{background-position:-595px -296px;width:118px;color:#387ED6;line-height: 42px;box-sizing: border-box;font-size: 14px;padding-left: 40px;transition:width 0.1s,right 0.1s}'+
              // '.staticBtn .backgroundBtn{width:42px;height:42px;cursor:pointer;background:url(http:'+options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/UE_qt.png) no-repeat -536px -247px;background-color:#fff;box-shadow: 0px 2px 10px rgba(0,0,0,.05), 0px 2px 5px rgba(0,0,0,.05);}'+
              // '.staticBtn .backgroundBtn:hover{background-position:-596px -247px;width:118px;color:#387ED6;line-height: 42px;box-sizing: border-box;font-size: 14px;padding-left: 40px;transition:width 0.1s,right 0.1s}'+
              (options.initialStyle || "") +
              "</style>" +
              "</head><body" +
              (useBodyAsViewport ? " class='view'" : "") +
              "></body>";

          if (options.customDomain && document.domain != location.hostname) {
            html +=
              "<script id='ueditorInstant'>window.parent.UE.instants['ueditorInstant" +
              me.uid +
              "']._setup(document);</script></html>";
            container.appendChild(
              domUtils.creElm(document, "iframe", {
                id: "baidu_editor_" + me.uid,
                width: "100%",
                height: "100%",
                frameborder: "0",
                src:
                  'javascript:void(function(){document.open();document.domain="' +
                  document.domain +
                  '";' +
                  'document.write("' +
                  html +
                  '");document.close();}())'
              })
            );
          } else {
            container.innerHTML =
              '<iframe id="' +
              "baidu_editor_" +
              this.uid +
              '"' +
              'width="100%" height="100%" scroll="no" frameborder="0" ></iframe>';
            var doc = container.firstChild.contentWindow.document;
            var _contentWin = container.firstChild.contentWindow;

            !browser.webkit && doc.open();
            doc.write(html + "</html>");
            !browser.webkit && doc.close();
            me._setup(doc, _contentWin, container);
          }
          container.style.overflow = "hidden";
          // me.body.setAttribute('isChangeBg','true')
          $(me.body).attr("isChangeBg", "true");

          // jser fix video换行节点引起高度坍塌 2017-3-27
          //判断是否是换行节点
          function isWrapNode($node) {
            return isLineHeightZero($node) && !isVideoLine($node);
          }
          //判断节点是否为空内容
          function isEmptyNode($node) {
            return $.trim($node.text()) === "";
          }
          //是否是视频行
          function isVideoLine($node) {
            return $node.find("video").length !== 0;
          }
          //获取光标所在的元素节点
          function _getCursorElemNode(win) {
            if (win.getSelection().anchorNode) {
              var selection = win.getSelection(),
                startContainer = selection.getRangeAt(0).startContainer,
                node = selection.focusNode;
            }
            // var selection = win.getSelection(),
            //     startContainer = selection.getRangeAt(0).startContainer,
            //     node = selection.focusNode;
            //光标可能处于文本节点中，获取到的可能是文本节点
            try {
              node.nodeType;
            } catch (e) {
              return;
            }

            if (node.nodeType === 3) {
              node = node.parentNode;
            }

            return node;
          }
          //字母键
          function isLetterKey(keyCode) {
            return keyCode >= 65 && keyCode <= 90;
          }
          //回车键
          function isEnterKey(keyCode) {
            return keyCode === 13;
          }
          //数值键
          function isNumberKey(keyCode) {
            return (
              (keyCode > 47 && keyCode < 58) || (keyCode > 95 && keyCode < 106)
            );
          }
          //删除键
          function isBackSpaceKey(keyCode) {
            return keyCode === 8;
          }
          //其他可以输入内容的按键
          function isOtherKey(keyCode) {
            var keyCodeList1 = [
                186,
                187,
                188,
                189,
                219,
                211,
                220,
                222,
                190,
                191
              ],
              keyCodeList2 = [106, 107, 109, 110, 111],
              isInputTool = keyCode === 229; //使用输入法的情况下会一直获取299

            return (
              keyCodeList1.indexOf(keyCode) >= 0 ||
              keyCodeList2.indexOf(keyCode) >= 0 ||
              isInputTool
            );
          }
          //行高是否为0
          function isLineHeightZero($elemNode) {
            return parseFloat($elemNode.css("line-height")) === 0;
          }
          //修正换行元素
          function fixWrapElem($elemNode) {
            $elemNode.clone(true).insertBefore($elemNode); //插入前面
            $elemNode.css("line-height", "normal"); //本节点的高度进行恢复
          }
          //获取文本节点的宽度
          function getTextNodeWidth($textNode) {
            var $span = $("<span></span>"),
              width = 0;

            $textNode.before($span);
            $textNode.appendTo($span);
            //获取elem的宽度
            width += $span.width();
            $textNode.insertBefore($span);
            $span.remove();
            $span = null;

            return width;
          }
          // 内容是否太多
          function isContentTooLong($elemNode, $contentWin) {
            //获取全部的子元素
            var $childs = $($elemNode[0].childNodes),
              width = 0;
            //计算子节点总宽度
            $childs.each(function (index, elem) {
              var $elem = $(elem);
              if (elem.nodeType === 1) {
                width += $elem.outerWidth(true);
              } else if (elem.nodeType === 3) {
                width += getTextNodeWidth($elem);
              }
            });
            return width + 10 > $elemNode.width();
          }
          //判断是否在输入内容
          function isInputContent(keyCode) {
            // 按键、字母、其他键
            return (
              isNumberKey(keyCode) ||
              isLetterKey(keyCode) ||
              isOtherKey(keyCode)
            );
          }
          //事件回调
          function _editUp(keyCode, $elemNode) {
            if (!$elemNode) {
              return;
            }

            if (isBackSpaceKey(keyCode)) {
              //删除键状态
              if (isEmptyNode($elemNode)) {
                //如果内容之前已经被删除过了
                return false;
              }
            } else if (isEnterKey(keyCode)) {
              //回车键 fix line-height = 0
              if (isLineHeightZero($elemNode)) {
                $elemNode.css("line-height", "normal");
              }
            }
          }
          //按下编辑
          function _editDown(keyCode, $elemNode, contentWin) {
            // $elemNode, keyCode
            var $elemNodeClone, $elemNodePrev;

            if (!$elemNode) {
              return;
            }

            if (isEnterKey(keyCode)) {
              //回车键 处理中间换行的问题
              if (isWrapNode($elemNode)) {
                //判断是否是换行节点

                fixWrapElem($elemNode); //修正换行节点的表现
                return false; //阻止事件冒泡，不再换行
              }
            } else if (!isBackSpaceKey(keyCode)) {
              // 按下其他键的时候，退格键除外

              if (isInputContent(keyCode)) {
                //如果是输入内容的按键操作

                if (
                  isVideoLine($elemNode) &&
                  isContentTooLong($elemNode, $(contentWin))
                ) {
                  //如果视频行内容过长，进行换行

                  //克隆节点 插入前面
                  $elemNodeClone = $elemNode.clone(true);
                  $elemNodeClone.insertBefore($elemNode);
                  $elemNode.html("").css({ "line-height": "normal" });

                  return;
                } else if (isWrapNode($elemNode)) {
                  //检测当前是否是换行节点
                  fixWrapElem($elemNode); //修正换行节点的表现
                  $elemNodePrev = $elemNode.prev();
                  if (!isEmptyNode($elemNodePrev)) {
                    // 清除克隆操作残留的字体
                    $elemNodePrev.text("");
                  }
                }
              }
            }
          }
          //初始化编辑用的iframe区域
          function initEditIframe($iframe) {
            //绑定键盘事件
            $($iframe[0].contentWindow.document)
              .off("keydown.edit")
              .on("keydown.edit", function (e) {
                var $elemNode = $(_getCursorElemNode($iframe[0].contentWindow)),
                  keyCode = e.keyCode === undefined ? e.keyCode : e.which;

                _editDown(keyCode, $elemNode, $iframe[0].contentWindow);
              })
              .off("keyup.edit")
              .on("keyup.edit", function (e) {
                var $elemNode = $(_getCursorElemNode($iframe[0].contentWindow)),
                  keyCode = e.keyCode === undefined ? e.keyCode : e.which;

                _editUp(keyCode, $elemNode);
              });
          }

          // // 重新编辑的时候如果表格是用默认宽度则需要修改
          for (var i = 0; i < $(editor.body).find("table").length; i++) {
            // if($(editor.body).find('table')[i].getAttribute('defaultwidth') == 'true'){
            //     $($(editor.body).find('table')[i]).css('width',$(editor.body).css('width') || $(editor.body).find('table')[i].getAttribute('width'))
            // }
            $($(editor.body).find("table")[i])
              .find("td")
              .css("word-break", "break-all");
          }

          var $containerIframe = $(container).find("iframe");
          // 等待iframe加载完再初化iframe
          if ($containerIframe.length > 0) {
            //等加载完全在执行对应的回调,避免获取不到contentWindow
            if (UE.browser.safari) {
              // safari 下要把事件注册到contentWindow.document才可以触发
              $($containerIframe[0].contentWindow.document).ready(function () {
                initEditIframe($containerIframe);
              });
            } else {
              $containerIframe.load(function () {
                initEditIframe($containerIframe);
              });
            }
          }
        }
      },
      _setup: function (doc) {
        var me = this,
          options = me.options;
        if (ie) {
          doc.body.disabled = true;
          doc.body.contentEditable = true;
          doc.body.disabled = false;
        } else {
          doc.body.contentEditable = true;
          doc.body.spellcheck = false;
        }

        if (doc.getElementById("ueditorInstant")) {
          doc.getElementById("ueditorInstant").outerHTML = "";
        }
        me.document = doc;
        me.window = doc.defaultView || doc.parentWindow;
        me.iframe = me.window.frameElement;
        me.body = doc.body;
        //设置编辑器最小高度和字体大小
        me.setHeight(options.minFrameHeight);
        me.selection = new dom.Selection(doc);
        //gecko初始化就能得到range,无法判断isFocus了
        var geckoSel;
        if (browser.gecko && (geckoSel = this.selection.getNative())) {
          geckoSel.removeAllRanges();
        }
        this._initEvents();
        if (options.initialContent) {
          if (options.autoClearinitialContent) {
            var oldExecCommand = me.execCommand;
            me.execCommand = function () {
              me.fireEvent("firstBeforeExecCommand");
              oldExecCommand.apply(me, arguments);
            };
            this.setDefaultContent(options.initialContent);
          } else this.setContent(options.initialContent, false, true);

          // if(typeof options.initComplete == 'function'){
          //     if (options.openHoverImage) {
          //         options.initComplete.call(me);
          //     } else {
          //         options.initComplete();
          //     }
          // }
          me.execCommand("hoverchangeimage");

          // if(typeof options.initHoverStyle == 'function'){
          //     if (options.openSetLinkStyle) {
          //         options.initHoverStyle.call(me);
          //     } else {
          //         options.initHoverStyle();
          //     }
          // }
          options.openSetLinkStyle &&
            options.outerFunction["hoverStyle"] &&
            options.outerFunction["hoverStyle"].call(me);
        }
        //为form提交提供一个隐藏的textarea
        // console.log($(this.container).find('.edui-editor-iframeholder')[0])
        // for ( var form = this.iframe.parentNode; !domUtils.isBody( form ); form = form.parentNode ) {
        //     if ( form.tagName == 'FORM' ) {
        //         domUtils.on( form, 'submit', function () {
        //             setValue( this, me );
        //         } );
        //         break;
        //     }
        // }
        for (
          var form = $(this.container).find(".edui-editor-iframeholder")[0];
          !domUtils.isBody(form);
          form = form.parentNode
        ) {
          if (form.tagName == "FORM") {
            domUtils.on(form, "submit", function () {
              setValue(this, me);
            });
            break;
          }
        }
        //编辑器不能为空内容
        if (domUtils.isEmptyNode(me.body)) {
          me.body.innerHTML =
            '<p style="line-height:1.5em;">' +
            (browser.ie ? "" : "<br/>") +
            "</p>";
        }
        //如果要求focus, 就把光标定位到内容开始
        if (options.focus) {
          setTimeout(function () {
            me.focus();
            //如果自动清除开着，就不需要做selectionchange;
            !me.options.autoClearinitialContent && me._selectionChange();
          });
        }
        if (!me.container) {
          me.container = this.iframe.parentNode;
        }
        if (options.fullscreen && me.ui) {
          me.ui.setFullScreen(true);
        }
        me.isReady = 1;
        me.fireEvent("ready");
        if (!browser.ie) {
          domUtils.on(me.window, ["blur", "focus"], function (e) {
            //chrome下会出现alt+tab切换时，导致选区位置不对
            if (e.type == "blur") {
              me._bakRange = me.selection.getRange();
              try {
                me.selection.getNative().removeAllRanges();
              } catch (e) {}
            } else {
              try {
                me._bakRange && me._bakRange.select();
              } catch (e) {}
            }
          });
        }
        //trace:1518 ff3.6body不够寛，会导致点击空白处无法获得焦点
        if (browser.gecko && browser.version <= 10902) {
          //修复ff3.6初始化进来，不能点击获得焦点
          me.body.contentEditable = false;
          setTimeout(function () {
            me.body.contentEditable = true;
          }, 100);
          setInterval(function () {
            me.body.style.height = me.iframe.offsetHeight - 20 + "px";
          }, 100);
        }
        !options.isShow && me.setHide();
        options.readonly && me.setDisabled();

        //编辑器是否发生改变
        domUtils.on(doc, "keydown", function (evt) {
          me.options.ueditorChangeEvent && me.options.ueditorChangeEvent();
          // if(evt.keyCode == 8){
          //     var backRange = editor.selection.getRange();
          //     if(backRange.endOffset == 0){
          //         return false;
          //     }
          // }
          // me.execCommand('paragraph','p',{style:'line-height:1.5em'});
          // console.log(me.selection.getRange().startContainer)
          // setTimeout(function(){
          //                     if($(editor.body).find('table').length){
          //                         for(var i=0;i<$(editor.body).find('table').length;i++){
          //                             $(editor.body).find('table td').css('padding','0 3px')
          //                         }
          //                     }},500)
        });

        domUtils.on(document, "mousedown", function (evt) {
          // if (evt.target.tagName !== 'SPAN' && imageScale && imageScale.resizer.style.display != 'none'){
          //     imageScale.hide()
          // }

          // if($(evt.target).parents('body').find('#edui1_imagescale_cover').length){
          if (
            $(evt.target).attr("id") == "edui1_imagescale_cover" ||
            $(evt.target).attr("id") == "edui1_imagescale" ||
            evt.target.tagName == "SPAN"
          ) {
            return;
          } else {
            $(evt.target)
              .parents("body")
              .find("#edui1_imagescale_cover")
              .remove();
            $(evt.target).parents("body").find("#edui1_imagescale").remove();
          }
        });

        // 重新编辑的时候如果表格是用默认宽度则需要修改
        for (var i = 0; i < $(editor.body).find("table").length; i++) {
          if (
            $(editor.body).find("table")[i].getAttribute("defaultwidth") ==
            "true"
          ) {
            $($(editor.body).find("table")[i]).css(
              "width",
              $(editor.body).css("width") ||
                $(editor.body).find("table")[i].getAttribute("width")
            );
          }
          //将表格和行自带的高度屏蔽掉，不然无法拖拽
          if ($($(editor.body).find("table")[i]).find("tr").attr("height")) {
            $($(editor.body).find("table")[i]).find("tr").attr("height", null);
          }
          // if($($(editor.body).find('table')[i]).attr('height')){
          //     $($(editor.body).find('table')[i]).attr('height',null)
          // }
          if ($($(editor.body).find("table")[i]).find("tr").css("height")) {
            $($(editor.body).find("table")[i]).find("tr").css("height", "");
          }
        }

        if (
          $(editor.body).find(".staticBtn").length &&
          $(editor.body).find(".breakPageParent").length
        ) {
          $(editor.body).find(".breakPage").children().unwrap().unwrap();
          $(editor.body).find(".staticBtn").remove();
        }

        domUtils.on(doc, "input", function (e) {
          // 用户在全屏下复制内容到非全屏下粘贴时做的处理
          if (me.container.getAttribute("isfullscreen") !== "fullScreen") {
            var breakPageLength = $(me.body).find(".breakPage").length;
            var staticBtnLength = $(me.body).find(".staticBtn").length;
            if (breakPageLength) {
              for (var i = 0; i < breakPageLength; i++) {
                $($(me.body).find(".breakPage")[0])
                  .children()
                  .unwrap()
                  .unwrap();
              }
            }
            if (staticBtnLength) {
              $(me.body).find(".staticBtn").remove();
            }
          }

          // 编辑器输入的文本行距默认为1.5em
          var pNode =
            $(me.selection.getRange().startContainer).prop("nodeName") == "P"
              ? $(me.selection.getRange().startContainer)
              : $(me.selection.getRange().startContainer).parents("p");
          if (!pNode.css("line-height")) {
            pNode.css("line-height", "1.5em");
          }

          // 全屏下复制文本会带上面板breakPage的背景色
          if (
            me.container.getAttribute("isfullscreen") == "fullScreen" &&
            e.inputType == "insertFromPaste"
          ) {
            var bgColor = $(me.body)
              .find(".breakPage_0")
              .css("background-color");
            setTimeout(function () {
              for (var i = 0; i < $(me.body).find("span").length; i++) {
                if (
                  $($(me.body).find("span")[i]).css("background-color") ==
                  bgColor
                ) {
                  $($(me.body).find("span")[i]).css("background-color", "");
                }
              }
            });
          }
          // 从Excel复制的表格需要屏蔽掉table和tr的高度，不然无法拖拽
          setTimeout(function () {
            for (var i = 0; i < $(me.body).find("table").length; i++) {
              if (
                !$(me.body).find("table")[i].getAttribute("_innercreatetable")
              ) {
                // $($(me.body).find('table')[i]).css({
                //     'border-collapse':'collapse',
                //     'border':'SOLID 1px'
                // })
                // $($(me.body).find('table')[i]).attr({
                //     '_innercreatetable':true,
                //     'border':'1',
                //     'bordercolor':'#000000'
                // })
                // if($($(me.body).find('table')[i]).attr('height')){
                //     $($(me.body).find('table')[i]).attr('height',$($(me.body).find('table')[i]).attr('height')+'px')
                // }
                $($(me.body).find("table")[i]).find("tr").attr("height", null);
                $($(me.body).find("table")[i]).find("tr").css("height", "");
              }
            }
          });
        });

        // if(me.options.ueditorEncapsulationEvent){
        //     domUtils.on( doc, me.options.ueditorEncapsulationEvent.operation , function ( evt ) {
        //         if(typeof me.options.ueditorEncapsulationEvent.eventFun == "function"){
        //             me.options.ueditorEncapsulationEvent.eventFun();
        //         }
        //     } );
        // }

        // domUtils.on( doc, 'click', function ( evt ) {
        //     if($('#pasteImageTipsDiv')){
        //         $("#pasteImageTipsDiv").remove();
        //     }
        // } );
        // if(!_contentWin) return;
        //浏览器图片直接粘贴提示
        // if(/chrome\/(\d+\.\d)/ig.test(navigator.appVersion) && me.options.isPasteImage){
        //     var version = /chrome\/(\d+\.\d)/ig.exec(navigator.appVersion)[0];
        //     var versionNum = version.substring(7,version.length);
        //     if( /chrome\/(\d+\.\d)/ig.test(version) && versionNum>=13.0 ){
        //         var browserHint = function(){
        //             if(!$.cookie("_ueditor_closeTip")){
        //                 var top = $(_contentWin.parent.document.body).height() - $(_contentWin.document.body).height();
        //                 var pasteImageDiv = ["<div id='pasteImageTipsDiv'>",
        //                                         "<div class='closeTipsDiv' contentEditable='false'>×</div>",
        //                                         "<div class='closeTipsDiv' contentEditable='false' style='width: 50px;'><a>我知道了</a></div>",
        //                                         "您的浏览器支持在编辑区中直接粘贴并上传本地图片",
        //                                     "</div>"];

        //                 $(container.firstChild.parentNode).prepend(pasteImageDiv.join(''));
        //                 $(".closeTipsDiv").live("click",function(){
        //                     $("#pasteImageTipsDiv").remove();
        //                     $.cookie("_ueditor_closeTip","true",{expires: 365,path:"/"});
        //                 });
        //             }
        //         }();
        //     }
        // }

        //word图片粘贴错误提示
        // _contentWin.localImageDiv = function (img){

        //     src = img.getAttribute("word_img");
        //     //该DIV的样式不能写入到ueditor文件中，因为这弹出框要出入到最顶端
        //     var localDiv = ["<div id='xhe_bigShowImageNote' style='width:100%;height:100%;position: absolute ;border-radius: 5px;background-color:black;z-index:9999;cursor: default;filter: alpha(opacity=50); opacity:0.5;'>",
        //                    "</div><div id='xhe_showImageNote' style='font-size: 12px;margin:0 auto;display: block;border-radius: 8px;position: absolute; width: 440px;top: 35%;left:35%;z-index:10000;background-color:#eee;padding-top: 15px;padding-left:15px; color:#000;-webkit-box-shadow:5px 5px 20px #000;-moz-box-shadow:5px 5px 20px #000;-ms-box-shadow:5px 5px 20px #000;-o-box-shadow:5px 5px 20px #000;box-shadow:5px 5px 20px #000;'>",
        //                         "<div>  <div style='margin-top:5px' onselectstart='return false;'>目前无法直接从文档（如word）中粘贴图片，请通过以下方法上传图片：<br /></div>",
        //                                 "<div style='margin-top:10px' onselectstart='return false;'>方法一：在文档中将该图片另存为本地图片，再点击上传按钮<span class='xhe_showImageNoteTag' style='background:url("+me.options.BUS_UEDITOR_HOME_URL_IMAGE+"/image/menu/icons.gif) no-repeat 20px 20px; display: inline-block;vertical-align: middle;width: 20px;height: 20px;background-position: -420px 0 !important;'></span>把图片上传。<br /></div>",
        //                                 "<div style='margin-top:5px' onselectstart='return false;'>方法二：直接点击上传按钮<span class='xhe_showImageNoteTag' style='background:url("+me.options.BUS_UEDITOR_HOME_URL_IMAGE+"/image/menu/icons.gif) no-repeat 20px 20px; display: inline-block;vertical-align: middle;width: 20px;height: 20px;background-position: -420px 0 !important;' ></span>，在选择文件框的“文件名”中，粘贴以下路径：</div>",
        //                                 "<div class='xhe_srcStyle' style='color:red; font-size:13px;margin-top: 5px;margin-bottom: 10px;word-wrap: break-word; margin-right: 10px;word-break: normal;'><p>"+src+"</p></div>",
        //                                 "<div style='margin-bottom:15px;'  onselectstart='return false;'>如下图所示：<br /></div>",
        //                                 "<div><span class='xhe_showImageExample' style='background:url("+me.options.BUS_UEDITOR_HOME_URL_IMAGE+"/image/menu/showImageExam1.png) no-repeat;margin-left: 20px;width:370px;height:70px; display:block'></span></div>",
        //                         "</div>",
        //                         "<div id='xhe_cancelImageDiv' style=' width:100%; height:10%'>",
        //                             "<input type='button' class='xhe_spanCancel' value='关闭' style='margin-right: 45% ;margin-right: 45%;margin-bottom: 15px;margin-top: 30px;*margin-bottom: 10px;text-decoration: none;cursor: pointer;float: right;width: 45px;height: 25px;text-align: center;' />",
        //                         "</div>",
        //                    "</div>"];
        //     //设置编辑器的属性为绝对
        //     container.parentNode.parentNode.style.position = "absolute";

        //     $(_contentWin.parent.parent.document.body).append(localDiv.join(""));
        //     $("#xhe_bigShowImageNote").css("height",_contentWin.parent.document.body.scrollHeight+"px");
        //     for(var i=0;i<_contentWin.parent.document.getElementsByTagName("iframe").length;i++){
        //         if(_contentWin.parent.document.getElementsByTagName("iframe")[i].contentWindow === _contentWin){
        //             $("#xhe_showImageNote").css("top",$(_contentWin.parent.document.getElementsByTagName("iframe")[i]).offset().top+"px");
        //         }
        //     }
        //     //$("#_xhe_xhe_showImageNote").css("top",$(_contentWin.parent.document.getElementsByTagName("iframe")[0]).position().top+30+"px");
        // };
        // $(_contentWin.parent.parent.document.body).find(".xhe_spanCancel").live("click",function(){
        //     $(_contentWin.parent.parent.document.body).find("#xhe_bigShowImageNote").remove();
        //     $(_contentWin.parent.parent.document.body).find("#xhe_showImageNote").remove();

        // })
      },
      /**
       * 创建textarea,同步编辑的内容到textarea,为后台获取内容做准备
       * @param formId 制定在那个form下添加
       * @public
       * @function
       */
      sync: function (formId) {
        var me = this,
          form = formId
            ? document.getElementById(formId)
            : domUtils.findParent(
                me.iframe.parentNode,
                function (node) {
                  return node.tagName == "FORM";
                },
                true
              );
        form && setValue(form, me);
      },
      /**
       * 设置编辑器高度
       * @public
       * @function
       * @param {Number} height    高度
       */
      setHeight: function (height) {
        // if ( height !== parseInt( this.iframe.parentNode.style.height ) ) {
        //     this.iframe.parentNode.style.height = height + 'px';
        // }
        if (
          height !==
          parseInt(
            $(this.container).find(".edui-editor-iframeholder").css("height")
          )
        ) {
          $(this.container)
            .find(".edui-editor-iframeholder")
            .css("height", height + "px");
        }
        // this.document.body.style.height = height - 20 + 'px';
        this.document.body.style.height = height - 30 + "px";
      },

      /**
       * 获取编辑器内容
       * @name getContent
       * @grammar editor.getContent()  => String //若编辑器中只包含字符"&lt;p&gt;&lt;br /&gt;&lt;/p/&gt;"会返回空。
       * @grammar editor.getContent(fn)  => String
       * @example
       * getContent默认是会现调用hasContents来判断编辑器是否为空，如果是，就直接返回空字符串
       * 你也可以传入一个fn来接替hasContents的工作，定制判断的规则
       * editor.getContent(function(){
       *     return false //编辑器没有内容 ，getContent直接返回空
       * })
       */
      getContent: function (cmd, fn, isPreview) {
        var me = this;

        if (cmd && utils.isFunction(cmd)) {
          fn = cmd;
          cmd = "";
        }
        //过滤一些空标签
        /*if ( fn ? !fn() : !this.hasContents() ) {
                    return '';
                }*/

        //me.fireEvent( 'beforegetcontent', cmd );
        var reg, html;
        if (
          $(me.body).find(".staticBtn").length &&
          $(me.body).find(".breakPageParent").length
        ) {
          (reg = new RegExp(domUtils.fillChar, "g")),
            //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
            (html = $(me.body)
              .find(".breakPage")[0]
              .innerHTML.replace(reg, "")
              .replace(/>[\t\r\n]*?</g, "><"));
        } else {
          (reg = new RegExp(domUtils.fillChar, "g")),
            //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
            (html = me.body.innerHTML
              .replace(reg, "")
              .replace(/>[\t\r\n]*?</g, "><"));
        }
        // console.log(html)
        // var reg = new RegExp( domUtils.fillChar, 'g' ),
        // //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
        //         html = me.body.innerHTML.replace( reg, '' ).replace( />[\t\r\n]*?</g, '><' );
        me.fireEvent("aftergetcontent", cmd);
        // html = html + '&iexcl;'
        if (me.serialize) {
          var node = me.serialize.parseHTML(html);
          node = me.serialize.transformOutput(node);
          html = me.serialize.toHTML(node);
        }
        if (ie && isPreview) {
          //trace:2471
          //两个br会导致空行，所以这里先注视掉
          html = html //.replace(/<\s*br\s*\/?\s*>/gi,'<br/><br/>')
            .replace(/<p>\s*?<\/p>/g, "<p>&nbsp;</p>");
        } else {
          //多个&nbsp;要转换成&nbsp;+空格的形式，要不预览时会所成一个
          html = html.replace(/(&nbsp;){2,}/g, function (s) {
            //当标签内只有一个&nbsp;的时候不改变
            //if(s.split( ';' ).length === 2) return '&nbsp;';

            // for ( var i = 0, str = [], l = s.split( ';' ).length - 1; i < l; i++ ) {
            //     //str.push( i % 2 == 0 ? '&nbsp;' : ' ' );
            //     str.push( i % 2 == 0 ? ' ' : '&nbsp;' );

            // }
            var sLength = s.split(";").length - 1;
            for (var i = 0, str = [], l = sLength; i < l; i++) {
              if (sLength == 2) {
                str.push(i % 2 == 0 ? " &nbsp;" : "&nbsp;");
              } else {
                str.push(i % 2 != 0 ? " " : "&nbsp;");
              }
            }
            return str.join("");
          });
          html = html //.replace(/<\s*br\s*\/?\s*>/gi,'<br/><br/>')
            .replace(/<p>\s*?<\/p>/g, "<p>&nbsp;</p>");
        }

        // html = html === "<p><br /></p>" ? "" : html;
        html = html === '<p style="line-height:1.5em;"><br /></p>' ? "" : html;

        //ie10 bug 空字符串时，源码其实是：<p>&nbsp;</p>
        html = html === "<p>&nbsp;</p>" ? "" : html;

        return html;
      },

      getAllHtml: function () {
        var me = this,
          headHtml = { html: "" },
          html = "";
        me.fireEvent("getAllHtml", headHtml);
        return (
          "<html><head>" +
          (me.options.charset
            ? '<meta http-equiv="Content-Type" content="text/html; charset=' +
              me.options.charset +
              '"/>'
            : "") +
          me.document.getElementsByTagName("head")[0].innerHTML +
          headHtml.html +
          "</head>" +
          "<body " +
          (ie && browser.version < 9 ? 'class="view"' : "") +
          ">" +
          me.getContent(null, null, true) +
          "</body></html>"
        );
      },

      /**
       * 得到编辑器的纯文本内容，但会保留段落格式
       * @public
       * @function
       * @returns {String}
       */
      getPlainTxt: function () {
        var reg = new RegExp(domUtils.fillChar, "g"),
          html = this.body.innerHTML.replace(/[\n\r]/g, ""); //ie要先去了\n在处理
        html = html
          .replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, "\n")
          .replace(/<br\/?>/gi, "\n")
          .replace(/<[^>/]+>/g, "")
          .replace(/(\n)?<\/([^>]+)>/g, function (a, b, c) {
            return dtd.$block[c] ? "\n" : b ? b : "";
          });
        //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
        return html
          .replace(reg, "")
          .replace(/\u00a0/g, " ")
          .replace(/&nbsp;/g, " ");
      },

      /**
       * 获取编辑器中的文本内容
       * @public
       * @function
       * @returns {String}
       */
      getContentTxt: function () {
        var reg = new RegExp(domUtils.fillChar, "g"),
          bodyHtml;
        if (
          UE.plugins["source"].sourceMode &&
          UE.plugins["source"].getContent
        ) {
          bodyHtml = UE.plugins["source"].getContent();
          bodyHtml = bodyHtml
            .replace(/(<([^>]+)>)/gi, "")
            .replace(/&nbsp;/g, "");
        } else {
          bodyHtml = this.body[browser.ie ? "innerText" : "textContent"];
        }

        //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
        return bodyHtml.replace(reg, "").replace(/\u00a0/g, " ");
      },

      /**
       * 设置编辑器内容
       * @public
       * @function
       * @param {String} html
       */
      /*setContent:function ( html, notFireSelectionchange ) {
                var me = this,
                        inline = utils.extend( {a:1, A:1}, dtd.$inline, true ),
                        lastTagName;

                html = html
                        .replace( /^[ \t\r\n]*?</, '<' )
                        .replace( />[ \t\r\n]*?$/, '>' )
                        .replace( />[\t\r\n]*?</g, '><' )//代码高量的\n不能去除
                        .replace( /[\s\/]?(\w+)?>[ \t\r\n]*?<\/?(\w+)/gi, function ( a, b, c ) {
                            if ( b ) {
                                lastTagName = c;
                            } else {
                                b = lastTagName;
                            }
                            return !inline[b] && !inline[c] ? a.replace( />[ \t\r\n]*?</, '><' ) : a;
                        } );
                me.fireEvent( 'beforesetcontent' );
                var serialize = this.serialize;
                if ( serialize ) {
                    var node = serialize.parseHTML( html );
                    node = serialize.transformInput( node );
                    node = serialize.filter( node );
                    html = serialize.toHTML( node );
                }
                //html.replace(new RegExp('[\t\n\r' + domUtils.fillChar + ']*','g'),'');
                //去掉了\t\n\r 如果有插入的代码，在源码切换所见即所得模式时，换行都丢掉了
                //\r在ie下的不可见字符，在源码切换时会变成多个&nbsp;
                //trace:1559
                this.body.innerHTML = html.replace( new RegExp( '[\r' + domUtils.fillChar + ']*', 'g' ), '' );
                //处理ie6下innerHTML自动将相对路径转化成绝对路径的问题
                if ( browser.ie && browser.version < 7 ) {
                    replaceSrc( this.document.body );
                }
                //给文本或者inline节点套p标签
                if ( me.options.enterTag == 'p' ) {

                    var child = this.body.firstChild, tmpNode;
                    if ( !child || child.nodeType == 1 &&
                            (dtd.$cdata[child.tagName] ||
                                    domUtils.isCustomeNode( child )
                                    )
                            && child === this.body.lastChild ) {
                        this.body.innerHTML = '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>' + this.body.innerHTML;

                    } else {
                        var p = me.document.createElement( 'p' );
                        while ( child ) {
                            while ( child && (child.nodeType == 3 || child.nodeType == 1 && dtd.p[child.tagName] && !dtd.$cdata[child.tagName]) ) {
                                tmpNode = child.nextSibling;
                                p.appendChild( child );
                                child = tmpNode;
                            }
                            if ( p.firstChild ) {
                                if ( !child ) {
                                    me.body.appendChild( p );
                                    break;
                                } else {
                                    me.body.insertBefore( p, child );
                                    p = me.document.createElement( 'p' );
                                }
                            }
                            child = child.nextSibling;
                        }
                    }
                }
                //me.adjustTable && me.adjustTable( me.body );
                me.fireEvent( 'aftersetcontent' );
                me.fireEvent( 'contentchange' );
                !notFireSelectionchange && me._selectionChange();
                //清除保存的选区
                me._bakRange = me._bakIERange = null;
                //trace:1742 setContent后gecko能得到焦点问题
                var geckoSel;
                if ( browser.gecko && (geckoSel = this.selection.getNative()) ) {
                    geckoSel.removeAllRanges();
                }
            },*/
      setContent: function (html, isAppendTo, notFireSelectionchange) {
        var me = this;

        me.fireEvent("beforesetcontent", html);
        var root = UE.htmlparser(html);
        me.filterInputRule(root);
        html = root.toHtml();
        /*var serialize = this.serialize;
                if ( serialize ) {
                    var node = serialize.parseHTML( html );
                    node = serialize.transformInput( node );
                    node = serialize.filter( node );
                    html = serialize.toHTML( node );
                }
                */
        me.body.innerHTML = (isAppendTo ? me.body.innerHTML : "") + html;

        function isCdataDiv(node) {
          return node.tagName == "DIV" && node.getAttribute("cdata_tag");
        }
        //给文本或者inline节点套p标签
        if (me.options.enterTag == "p") {
          var child = this.body.firstChild,
            tmpNode;
          if (
            !child ||
            (child.nodeType == 1 &&
              (dtd.$cdata[child.tagName] ||
                isCdataDiv(child) ||
                domUtils.isCustomeNode(child)) &&
              child === this.body.lastChild)
          ) {
            this.body.innerHTML =
              "<p>" +
              (browser.ie ? "&nbsp;" : "<br/>") +
              "</p>" +
              this.body.innerHTML;
          } else {
            var p = me.document.createElement("p");
            while (child) {
              while (
                child &&
                (child.nodeType == 3 ||
                  (child.nodeType == 1 &&
                    dtd.p[child.tagName] &&
                    !dtd.$cdata[child.tagName]))
              ) {
                tmpNode = child.nextSibling;
                p.appendChild(child);
                child = tmpNode;
              }
              if (p.firstChild) {
                if (!child) {
                  me.body.appendChild(p);
                  break;
                } else {
                  child.parentNode.insertBefore(p, child);
                  p = me.document.createElement("p");
                }
              }
              child = child.nextSibling;
            }
          }
        }
        me.fireEvent("aftersetcontent");
        me.fireEvent("contentchange");

        !notFireSelectionchange && me._selectionChange();
        //清除保存的选区
        me._bakRange = me._bakIERange = me._bakNativeRange = null;
        //trace:1742 setContent后gecko能得到焦点问题
        var geckoSel;
        if (browser.gecko && (geckoSel = this.selection.getNative())) {
          geckoSel.removeAllRanges();
        }
        if (me.options.autoSyncData) {
          me.form && setValue(me.form, me);
        }
      },

      /**
       * 让编辑器获得焦点
       * @public
       * @function
       * @param{boolean}toEnd 默认是到头部,true到尾部
       */
      focus: function (toEnd) {
        try {
          var me = this,
            rng = me.selection.getRange();
          if (toEnd) {
            rng.setStartAtLast(me.body.lastChild).setCursor(false, true);
          } else {
            rng.select(true);
          }
        } catch (e) {}
      },

      /**
       * 初始化事件，绑定selectionchange
       * @private
       * @function
       */
      _initEvents: function () {
        var me = this,
          doc = me.document,
          win = me.window;
        me._proxyDomEvent = utils.bind(me._proxyDomEvent, me);
        domUtils.on(
          doc,
          [
            "click",
            "contextmenu",
            "mousedown",
            "keydown",
            "keyup",
            "keypress",
            "mouseup",
            "mouseenter",
            "mouseover",
            "mouseout",
            "selectstart"
          ],
          me._proxyDomEvent
        );
        domUtils.on(win, ["focus", "blur"], me._proxyDomEvent);
        domUtils.on(doc, ["mouseup", "keydown"], function (evt) {
          //特殊键不触发selectionchange
          if (
            evt.type == "keydown" &&
            (evt.ctrlKey || evt.metaKey || evt.shiftKey || evt.altKey)
          ) {
            return;
          }
          if (evt.button == 2) return;
          me._selectionChange(250, evt);
        });

        //处理拖拽
        //ie ff不能从外边拖入
        //chrome只针对从外边拖入的内容过滤
        var innerDrag = 0,
          source = browser.ie ? me.body : me.document,
          dragoverHandler;
        domUtils.on(source, "dragstart", function () {
          innerDrag = 1;
        });
        domUtils.on(
          source,
          browser.webkit ? "dragover" : "drop",
          (function () {
            return browser.webkit
              ? function () {
                  clearTimeout(dragoverHandler);
                  dragoverHandler = setTimeout(function () {
                    if (!innerDrag) {
                      var sel = me.selection,
                        range = sel.getRange();
                      if (range) {
                        var common = range.getCommonAncestor();
                        if (common && me.serialize) {
                          var f = me.serialize,
                            node = f.filter(
                              f.transformInput(
                                f.parseHTML(f.word(common.innerHTML))
                              )
                            );
                          common.innerHTML = f.toHTML(node);
                        }
                      }
                    }
                    innerDrag = 0;
                  }, 200);
                }
              : function (e) {
                  if (!innerDrag) {
                    e.preventDefault
                      ? e.preventDefault()
                      : (e.returnValue = false);
                  }
                  innerDrag = 0;
                };
          })()
        );
      },
      _proxyDomEvent: function (evt) {
        return this.fireEvent(evt.type.replace(/^on/, ""), evt);
      },
      _selectionChange: function (delay, evt) {
        var me = this;
        //有光标才做selectionchange 为了解决未focus时点击source不能触发更改工具栏状态的问题（source命令notNeedUndo=1）
        //if ( !me.selection.isFocus() ){
        //    return;
        //}
        var hackForMouseUp = false;
        var mouseX, mouseY;
        if (browser.ie && browser.version < 9 && evt && evt.type == "mouseup") {
          var range = this.selection.getRange();
          if (!range.collapsed) {
            hackForMouseUp = true;
            mouseX = evt.clientX;
            mouseY = evt.clientY;
          }
        }
        clearTimeout(_selectionChangeTimer);
        _selectionChangeTimer = setTimeout(function () {
          if (!me.selection.getNative()) {
            return;
          }
          //修复一个IE下的bug: 鼠标点击一段已选择的文本中间时，可能在mouseup后的一段时间内取到的range是在selection的type为None下的错误值.
          //IE下如果用户是拖拽一段已选择文本，则不会触发mouseup事件，所以这里的特殊处理不会对其有影响
          var ieRange;
          if (hackForMouseUp && me.selection.getNative().type == "None") {
            ieRange = me.document.body.createTextRange();
            try {
              ieRange.moveToPoint(mouseX, mouseY);
            } catch (ex) {
              ieRange = null;
            }
          }
          var bakGetIERange;
          if (ieRange) {
            bakGetIERange = me.selection.getIERange;
            me.selection.getIERange = function () {
              return ieRange;
            };
          }

          me.selection.cache();
          if (bakGetIERange) {
            me.selection.getIERange = bakGetIERange;
          }

          if (me.selection._cachedRange && me.selection._cachedStartElement) {
            me.fireEvent("beforeselectionchange");
            // 第二个参数causeByUi为true代表由用户交互造成的selectionchange.
            me.fireEvent("selectionchange", !!evt);
            me.fireEvent("afterselectionchange");
            me.selection.clear();
          }
        }, delay || 50);
      },
      _callCmdFn: function (fnName, args) {
        var cmdName = args[0].toLowerCase(),
          cmd,
          cmdFn;
        cmd = this.commands[cmdName] || UE.commands[cmdName];
        cmdFn = cmd && cmd[fnName];
        //没有querycommandstate或者没有command的都默认返回0
        if ((!cmd || !cmdFn) && fnName == "queryCommandState") {
          return 0;
        } else if (cmdFn) {
          return cmdFn.apply(this, args);
        }
      },

      /**
       * 执行命令
       * @public
       * @function
       * @param {String} cmdName 执行的命令名
       *
       */
      execCommand: function (cmdName) {
        cmdName = cmdName.toLowerCase();
        var me = this,
          result,
          cmd = me.commands[cmdName] || UE.commands[cmdName];

        if (!cmd || !cmd.execCommand) {
          return;
        }

        if (!cmd.notNeedUndo && !me.__hasEnterExecCommand) {
          me.__hasEnterExecCommand = true;

          if (me.queryCommandState(cmdName) != -1) {
            me.fireEvent("beforeexeccommand", cmdName);
            result = this._callCmdFn("execCommand", arguments);
            me.fireEvent("afterexeccommand", cmdName);
          }
          me.__hasEnterExecCommand = false;
        } else {
          result = this._callCmdFn("execCommand", arguments);
        }
        me._selectionChange();
        return result;
      },
      /**
       * 查询命令的状态
       * @public
       * @function
       * @param {String} cmdName 执行的命令名
       * @returns {Number|*} -1 : disabled, false : normal, true : enabled.
       *
       */
      queryCommandState: function (cmdName) {
        return this._callCmdFn("queryCommandState", arguments);
      },

      //图片上传插入manage.js --> other.js
      pasteChoiceImage: function (result) {
        this.options.ueditorChangeEvent && this.options.ueditorChangeEvent();
        //禁止在视频上方插入图片，否则图片会插入视频的覆盖层里面，导致视频被覆盖
        if (
          !$(editor.selection.getRange().startContainer).hasClass(
            "netVideo_mask"
          )
        ) {
          this.execCommand("inserthtml", result, true);
        }

        /*
                var results = result.split('/>');
                for(var i=0; i<results.length-1; i++){
                    results[i] = results[i] + " />"
                    var width = parseInt($(results[i]).attr('width')),
                        height = parseInt($(results[i]).attr('height'));

                    var resultDOM = baidu.editor.ui.uiUtils.createElementByHtml(results[i]);
                    resultDOM.style.width = width + 'px';
                    resultDOM.style.height = height + 'px';
                    resultDOM.removeAttribute('height');
                    resultDOM.removeAttribute('width');
                    this.execCommand('inserthtml' , resultDOM.outerHTML, true);
                }*/
        this.focus();
      },
      //图片上传插入manage.js --> other.js
      pasteChoiceMp4: function (result) {
        this.options.ueditorChangeEvent && this.options.ueditorChangeEvent();
        this.execCommand("inserthtml", result, true);

        this.focus();
      },
      //Flash上传插入manage.js --> other.js
      pasteChoiceFlash: function (result) {
        this.options.ueditorChangeEvent && this.options.ueditorChangeEvent();
        var arrResult = result.split(" ");
        arrResult.splice(0, 1, '<embed wmode="transparent"');
        result = arrResult.join(" ");
        // 禁止在网络视频上面插入flash
        if (
          !$(editor.selection.getRange().startContainer).hasClass(
            "netVideo_mask"
          )
        ) {
          this.execCommand("inserthtml", result, true);
        }
        this.focus();
      },
      /**
       * 查询命令的值
       * @public
       * @function
       * @param {String} cmdName 执行的命令名
       * @returns {*}
       */
      queryCommandValue: function (cmdName) {
        return this._callCmdFn("queryCommandValue", arguments);
      },
      /**
       * 检查编辑区域中是否有内容
       * @public
       * @params{Array} 自定义的标签
       * @function
       * @returns {Boolean} true 有,false 没有
       */
      hasContents: function (tags) {
        if (tags) {
          for (var i = 0, ci; (ci = tags[i++]); ) {
            if (this.document.getElementsByTagName(ci).length > 0) {
              return true;
            }
          }
        }
        if (!domUtils.isEmptyBlock(this.body)) {
          return true;
        }
        //随时添加,定义的特殊标签如果存在，不能认为是空
        tags = ["div"];
        for (i = 0; (ci = tags[i++]); ) {
          var nodes = domUtils.getElementsByTagName(this.document, ci);
          for (var n = 0, cn; (cn = nodes[n++]); ) {
            if (domUtils.isCustomeNode(cn)) {
              return true;
            }
          }
        }
        return false;
      },
      /**
       * 从新设置
       * @public
       * @function
       */
      reset: function () {
        this.fireEvent("reset");
      },
      /**
       * 设置编辑区域可以编辑
       */
      setEnabled: function () {
        var me = this,
          range;

        if (me.body.contentEditable == "false") {
          me.body.contentEditable = true;
          range = me.selection.getRange();
          //有可能内容丢失了
          try {
            range.moveToBookmark(me.lastBk);
            delete me.lastBk;
          } catch (e) {
            range.setStartAtFirst(me.body).collapse(true);
          }
          range.select(true);
          if (me.bkqueryCommandState) {
            me.queryCommandState = me.bkqueryCommandState;
            delete me.bkqueryCommandState;
          }
          me.fireEvent("selectionchange");
        }
      },
      /**
       * 设置编辑区域不可以编辑
       */
      setDisabled: function (exclude) {
        var me = this;
        exclude = exclude ? (utils.isArray(exclude) ? exclude : [exclude]) : [];
        if (me.body.contentEditable == "true") {
          if (!me.lastBk) {
            me.lastBk = me.selection.getRange().createBookmark(true);
          }
          me.body.contentEditable = false;
          me.bkqueryCommandState = me.queryCommandState;
          me.queryCommandState = function (type) {
            if (utils.indexOf(exclude, type) != -1) {
              return me.bkqueryCommandState.apply(me, arguments);
            }
            return -1;
          };
          me.fireEvent("selectionchange");
        }
      },
      /**
       * 设置默认内容
       * @function
       * @param    {String}    cont     要存入的内容
       */
      setDefaultContent: (function () {
        function clear() {
          var me = this;
          if (me.document.getElementById("initContent")) {
            me.document.body.innerHTML = "<p>" + (ie ? "" : "<br/>") + "</p>";
            var range = me.selection.getRange();
            me.removeListener("firstBeforeExecCommand", clear);
            me.removeListener("focus", clear);
            setTimeout(function () {
              range
                .setStart(me.document.body.firstChild, 0)
                .collapse(true)
                .select(true);
              me._selectionChange();
            });
          }
        }

        return function (cont) {
          var me = this;
          me.document.body.innerHTML = '<p id="initContent">' + cont + "</p>";
          if (browser.ie && browser.version < 7) {
            replaceSrc(me.document.body);
          }
          me.addListener("firstBeforeExecCommand", clear);
          me.addListener("focus", clear);
        };
      })(),
      /**
       * 设置编辑器显示
       * @function
       */
      setShow: function () {
        var me = this,
          range = me.selection.getRange();
        if (me.container.style.display == "none") {
          //有可能内容丢失了
          try {
            range.moveToBookmark(me.lastBk);
            delete me.lastBk;
          } catch (e) {
            range.setStartAtFirst(me.body).collapse(true);
          }
          range.select(true);
          me.container.style.display = "";
        }
      },
      /**
       * 设置编辑器隐藏
       * @function
       */
      setHide: function () {
        var me = this;
        if (!me.lastBk) {
          me.lastBk = me.selection.getRange().createBookmark(true);
        }
        me.container.style.display = "none";
      },
      blur: function () {
        var sel = this.selection.getNative();
        if (sel.empty && browser.ie) {
          var nativeRng = document.body.createTextRange();
          nativeRng.moveToElementText(document.body);
          nativeRng.collapse(true);
          nativeRng.select();
          sel.empty();
        } else {
          sel.removeAllRanges();
        }
      },
      getLang: function (path) {
        var lang = UE.I18N[this.options.lang];
        path = (path || "").split(".");
        for (var i = 0, ci; (ci = path[i++]); ) {
          lang = lang[ci];
          if (!lang) break;
        }
        return lang;
      },
      addInputRule: function (rule) {
        this.inputRules.push(rule);
      },
      filterInputRule: function (root) {
        for (var i = 0, ci; (ci = this.inputRules[i++]); ) {
          ci.call(this, root);
        }
      },
      addOutputRule: function (rule) {
        this.outputRules.push(rule);
      },
      filterOutputRule: function (root) {
        for (var i = 0, ci; (ci = this.outputRules[i++]); ) {
          ci.call(this, root);
        }
      }
    };
    utils.inherits(Editor, EventBase);
  })();
  /****Editor.js end***/
  /***ajax.js start****/
  /**
   * 提供对ajax请求的支持
   * @module UE.ajax
   */
  /**
   * ajax工具类
   */
  UE.ajax = (function () {
    return {
      /**
       * 向url发送ajax请求
       * @param url
       * @param ajaxOptions
       */
      request: function (url, ajaxOptions) {
        var ajaxRequest = creatAjaxRequest(),
          //是否超时
          timeIsOut = false,
          //默认参数
          defaultAjaxOptions = {
            method: "POST",
            timeout: 5000,
            async: true,
            data: {}, //需要传递对象的话只能覆盖
            onsuccess: function () {},
            onerror: function () {}
          };

        if (typeof url === "object") {
          ajaxOptions = url;
          url = ajaxOptions.url;
        }
        if (!ajaxRequest || !url) return;
        var ajaxOpts = ajaxOptions
          ? utils.extend(defaultAjaxOptions, ajaxOptions)
          : defaultAjaxOptions;

        var submitStr = json2str(ajaxOpts); // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
        if (!utils.isEmptyObject(ajaxOpts.data)) {
          submitStr += (submitStr ? "&" : "") + json2str(ajaxOpts.data);
        }
        //超时检测
        var timerID = setTimeout(function () {
          if (ajaxRequest.readyState != 4) {
            timeIsOut = true;
            ajaxRequest.abort();
            clearTimeout(timerID);
          }
        }, ajaxOpts.timeout);

        var method = ajaxOpts.method.toUpperCase();
        var str =
          url +
          (url.indexOf("?") == -1 ? "?" : "&") +
          (method == "POST" ? "" : submitStr + "&noCache=" + +new Date());
        ajaxRequest.open(method, str, ajaxOpts.async);
        ajaxRequest.onreadystatechange = function () {
          if (ajaxRequest.readyState == 4) {
            if (!timeIsOut && ajaxRequest.status == 200) {
              ajaxOpts.onsuccess(ajaxRequest);
            } else {
              ajaxOpts.onerror(ajaxRequest);
            }
          }
        };
        if (method == "POST") {
          ajaxRequest.setRequestHeader(
            "Content-Type",
            "application/x-www-form-urlencoded"
          );
          ajaxRequest.send(submitStr);
        } else {
          ajaxRequest.send(null);
        }
      }
    };

    /**
     * 将json参数转化成适合ajax提交的参数列表
     * @param json
     */
    function json2str(json) {
      var strArr = [];
      for (var i in json) {
        //忽略默认的几个参数
        if (i == "method" || i == "timeout" || i == "async") continue;
        //传递过来的对象和函数不在提交之列
        if (
          !(
            (typeof json[i]).toLowerCase() == "function" ||
            (typeof json[i]).toLowerCase() == "object"
          )
        ) {
          strArr.push(
            encodeURIComponent(i) + "=" + encodeURIComponent(json[i])
          );
        }
      }
      return strArr.join("&");
    }

    /**
     * 创建一个ajaxRequest对象
     */
    function creatAjaxRequest() {
      var xmlHttp = null;
      if (window.XMLHttpRequest) {
        xmlHttp = new XMLHttpRequest();
      } else {
        try {
          xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
          try {
            xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
          } catch (e) {}
        }
      }
      return xmlHttp;
    }
  })();
  /***ajax.js end****/
  /*************************************************************************** UE commands start ***************************************************************************/
  /**inserthtml.js start**/
  /**
   * @description 插入内容
   * @name baidu.editor.execCommand
   * @param   {String}   cmdName     inserthtml插入内容的命令
   * @param   {String}   html                要插入的内容
   * @remaind 插入的标签内容是在当前的选区位置上插入，如果当前是闭合状态，那直接插入内容， 如果当前是选中状态，将先清除当前选中内容后，再做插入
   * @warning 注意:该命令会对当前选区的位置，对插入的内容进行过滤转换处理。 过滤的规则遵循html语意化的原则。
   */
  UE.commands["inserthtml"] = {
    execCommand: function (command, html, notSerialize) {
      var me = this,
        range,
        start,
        limitSelectTmp,
        div;
      if (!html) {
        return;
      }
      range = me.selection.getRange();
      var UEfullscreen = $(me.container).attr("isfullscreen") == "fullScreen",
        selectStart = $(range.startContainer).parents(".breakPageParent")[0];
      selectEnd = $(range.endContainer).parents(".breakPageParent")[0];
      if (
        UEfullscreen &&
        (selectStart !== selectEnd ||
          $(range.startContainer).hasClass("htmlBtn"))
      ) {
        var deleteOptions = {
          tips: "跨页无法删除"
        };
        domUtils.ing(deleteOptions);
        return false;
      }
      start = range.startContainer;
      //hoverimg选中时要选中它的父亲。
      if (
        range.startContainer.className == "J_hoverImageParent" &&
        range.endContainer.className == "J_hoverImageParent"
      ) {
        range.setStart(range.startContainer.parentNode, 0);
        range.setEnd(range.startContainer.parentNode, 0);
      }
      limitSelectTmp = true;
      div = range.document.createElement("div");
      div.style.display = "inline";
      var serialize = me.serialize;
      if (!notSerialize && serialize) {
        var node = serialize.parseHTML(html);
        node = serialize.transformInput(node);
        node = serialize.filter(node);
        html = serialize.toHTML(node);
      }
      div.innerHTML = utils.trim(html);

      if (!range.collapsed) {
        range.deleteContents();
        if (range.startContainer.nodeType == 1) {
          var child = range.startContainer.childNodes[range.startOffset],
            pre;
          if (
            child &&
            domUtils.isBlockElm(child) &&
            (pre = child.previousSibling) &&
            domUtils.isBlockElm(pre)
          ) {
            range.setEnd(pre, pre.childNodes.length).collapse();
            while (child.firstChild) {
              pre.appendChild(child.firstChild);
            }
            domUtils.remove(child);
          }
        }
      } else {
        var $linkDom = start.nodeName == "A" ? $(start) : $(start).parents("a"); //ie9 ie10获取的start为a标签
        //插入图片的操作要检查它的父节点是否是a标签，是的话要移出光标到a标签的后面
        if (limitSelectTmp && typeof $linkDom.attr("astyle_h") != "undefined") {
          if (
            range.endOffset == 1 &&
            ($.browser.version == 9.0 || $.browser.version == 10.0)
          ) {
            $linkDom.after("\u200D");
            range
              .setStartAtLast($linkDom[0].nextSibling)
              .setCursor(false, true);
            limitSelectTmp = false;
          }
          if (range.endOffset == 0) {
            $linkDom.before("\u200D");
            range
              .setStartAtFirst($linkDom[0].previousSibling)
              .setCursor(false, true);
            limitSelectTmp = false;
          } else if (range.endOffset == range.endContainer.length) {
            $linkDom.after("\u200D");
            range
              .setStartAtLast($linkDom[0].nextSibling)
              .setCursor(false, true);
            limitSelectTmp = false;
          }
        }
      }
      var child,
        parent,
        pre,
        tmp,
        hadBreak = 0,
        nextNode;
      //如果当前位置选中了fillchar要干掉，要不会产生空行
      if (range.inFillChar()) {
        child = range.startContainer;
        range.setStartBefore(child).collapse(true);
        domUtils.remove(child);
      }
      while ((child = div.firstChild)) {
        //修复当选区是闭合时，startContainer是a标签，且div.firstChild是img标签时，range范围要扩大到a标签的父节点,防止多个img标签共用一个a标签父节点
        var isAncestorA = false,
          tmpStartDom = range.startContainer;
        if (range.collapsed && div.firstChild.nodeName == "IMG") {
          for (
            ;
            tmpStartDom.nodeName != "BODY";
            tmpStartDom = tmpStartDom.parentNode
          ) {
            if (tmpStartDom.nodeName == "A") {
              isAncestorA = true;
              break;
            }
          }
          if (isAncestorA) {
            //判断是向前闭合还是向后闭合
            range.trimBoundary(true);
            if (range.startContainer.childNodes[range.startOffset]) {
              range.selectNode(tmpStartDom).collapse(true);
            } else {
              range.selectNode(tmpStartDom).collapse(false);
            }
          }
        }

        range.insertNode(child);
        nextNode = child.nextSibling;
        if (
          !hadBreak &&
          child.nodeType == domUtils.NODE_ELEMENT &&
          domUtils.isBlockElm(child)
        ) {
          parent = domUtils.findParent(child, function (node) {
            return domUtils.isBlockElm(node);
          });
          if (
            parent &&
            parent.tagName.toLowerCase() != "body" &&
            !(
              dtd[parent.tagName][child.nodeName] && child.parentNode === parent
            )
          ) {
            // console.log(!dtd[parent.tagName][child.nodeName])
            if (!dtd[parent.tagName][child.nodeName]) {
              pre = parent;
            } else {
              tmp = child.parentNode;
              while (tmp !== parent) {
                pre = tmp;
                tmp = tmp.parentNode;
              }
            }
            domUtils.breakParent(child, pre || tmp);
            //去掉break后前一个多余的节点  <p>|<[p> ==> <p></p><div></div><p>|</p>
            var pre = child.previousSibling;
            domUtils.trimWhiteTextNode(pre);
            if (!pre.childNodes.length) {
              domUtils.remove(pre);
            }
            //trace:2012,在非ie的情况，切开后剩下的节点有可能不能点入光标添加br占位

            if (
              !browser.ie &&
              (next = child.nextSibling) &&
              domUtils.isBlockElm(next) &&
              next.lastChild &&
              !domUtils.isBr(next.lastChild)
            ) {
              next.appendChild(me.document.createElement("br"));
            }
            hadBreak = 1;
          }
        }
        var next = child.nextSibling;
        if (!div.firstChild && next && domUtils.isBlockElm(next)) {
          range.setStart(next, 0).collapse(true);
          break;
        }
        range.setEndAfter(child).collapse();
      }

      child = range.startContainer;

      if (nextNode && domUtils.isBr(nextNode)) {
        domUtils.remove(nextNode);
      }

      // 判断child包含span时是否有内容
      var spanHasContent;
      $(child)
        .find("span")
        .each(function () {
          var me = $(this);
          if (
            me.html().replace(/^[\r\n\f\t\x20]+|[\r\n\f\t\x20]+$/g, "") == ""
          ) {
            spanHasContent = true;
          }
        });
      // 插入标签时，如果child是块元素并且为空，那么要清除。由于复制粘贴文字的时候，在文字后面插入的时候元素不为空，所以会多出一行，用spanHasContent做处理
      //用chrome可能有空白展位符
      // if(domUtils.isBlockElm(child) && (domUtils.isEmptyNode(child) || (child && $(child).find('span').length && spanHasContent))){
      // if(domUtils.isBlockElm(child) && (domUtils.isEmptyNode(child) || (child && $(child).find('span').length && spanHasContent))){
      //     if(nextNode = child.nextSibling){
      //         domUtils.remove(child);
      //         if(nextNode.nodeType == 1 && dtd.$block[nextNode.tagName]){

      //             range.setStart(nextNode,0).collapse(true).shrinkBoundary()
      //         }
      //     }else{
      //         child.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
      //     }

      // }
      //加上true因为在删除表情等时会删两次，第一次是删的fillData
      range.select(true);

      setTimeout(function () {
        range = me.selection.getRange();
        range.scrollToView(
          me.autoHeightEnabled,
          me.autoHeightEnabled ? domUtils.getXY(me.iframe).y : 0
        );
        me.fireEvent("afterinserthtml");
      }, 200);
    }
  };
  /**inserthtml.js end**/
  /**autosubmit.js start**/
  /**
   * 提交表单
   * @command autosubmit
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'autosubmit' );
   * ```
   */
  UE.commands["autosubmit"] = {
    execCommand: function () {
      var me = this,
        form = domUtils.findParentByTagName(me.iframe, "form", false);

      if (form) {
        if (me.fireEvent("beforesubmit") === false) {
          return;
        }
        me.sync();
        form.submit();
      }
    }
  };
  /**autosubmit.js end**/
  /**horizontal.js start**/
  /**
   * @name 分割线 Horizontal
   */
  UE.commands["horizontal"] = {
    execCommand: function (cmdName) {
      var me = this;
      if (me.queryCommandState(cmdName) !== -1) {
        me.execCommand("inserthtml", "<hr>");
        var range = me.selection.getRange(),
          start = range.startContainer;
        if (start.nodeType == 1 && start.childNodes[range.startOffset]) {
          var tmp;
          if ((tmp = start.childNodes[range.startOffset - 1])) {
            if (tmp.nodeType == 1 && tmp.tagName == "HR") {
              if (me.options.enterTag == "p") {
                tmp = me.document.createElement("p");
                range.insertNode(tmp);
                range.setStart(tmp, 0).setCursor();
              } else {
                tmp = me.document.createElement("br");
                range.insertNode(tmp);
                range.setStartBefore(tmp).setCursor();
              }
            }
          }
        }
        return true;
      }
    },
    queryCommandState: function () {
      return this.highlight ||
        utils.findNode(this.selection.getStartElementPath(), "table")
        ? -1
        : 0;
    }
  };
  /**horizontal.js end**/
  /**zhspace.js start**/
  /**中文空格**/
  UE.commands["zhspace"] = {
    execCommand: function (cmdName) {
      var me = this;
      if (me.queryCommandState(cmdName) !== -1) {
        me.execCommand("inserthtml", "　");
        return true;
      }
    }
  };
  /**zhspace.js end**/
  /**imagefloat.js start**/
  /**
   * 图片对齐方式
   * @command imagefloat
   * @method execCommand
   * @remind 值center为独占一行居中
   * @param { String } cmd 命令字符串
   * @param { String } align 对齐方式
   * @remaind center表示图片独占一行
   * @example
   * ```javascript
   * editor.execCommand( 'imagefloat', 'center' );
   * ```
   */

  /**
   * 如果选区所在位置是图片区域
   * @command imagefloat
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回图片对齐方式
   * @example
   * ```javascript
   * editor.queryCommandValue( 'imagefloat' );
   * ```
   */
  UE.commands["imagefloat"] = {
    execCommand: function (cmd, align, isOpend) {
      var me = this,
        range = me.selection.getRange();
      if (!range.collapsed) {
        var img = isOpend
          ? range.startContainer.firstChild
          : range.getClosedNode();
        if (!img) {
          img = range.cloneRange().adjustmentBoundary().shrinkBoundary();
          img = img.startContainer;
        }
        //MP3选择位置后要去掉覆盖层
        if (isOpend) {
          $(img).find(".music-mask_2").removeClass("music-mask-color");
        }

        if (
          img &&
          (img.tagName == "IMG" ||
            img.tagName == "EMBED" ||
            img.tagName == "VIDEO" ||
            img.getAttribute("key") === "audio" ||
            "netVideo")
        ) {
          var isHovImage =
            img.className === "hoverImage" || img.className === "J_hoverImage";
          switch (align) {
            // left right none 居左环绕  居右环绕
            case "left":
            case "right":
            case "none":
              var pN = img.parentNode,
                tmpNode,
                pre,
                next;
              // var pN, tmpNode, pre, next;
              // pN = (img.getAttribute('key') === 'local' || img.getAttribute('key') === 'netVideo')?img:img.parentNode;console.log(pN.parentNode)
              // var isHovImage = img.className.toLowerCase() === 'hoverimage';
              while (dtd.$inline[pN.tagName] || pN.tagName == "A") {
                pN = pN.parentNode;
              }
              tmpNode = pN;
              // console.log(img.parentNode)
              img.parentNode.removeAttribute("contenteditable");
              if ($(img).parents("td").length) {
                $(img).parents("td")[0].removeAttribute("contenteditable");
              }
              if (
                (tmpNode.tagName == "P" ||
                  img.getAttribute("key") === "audio" ||
                  img.getAttribute("key") === "netVideo") &&
                domUtils.getStyle(tmpNode, "text-align") == "center"
              ) {
                if (
                  !domUtils.isBody(tmpNode) &&
                  domUtils.getChildCount(tmpNode, function (node) {
                    return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
                  }) == 1
                ) {
                  pre = tmpNode.previousSibling;
                  next = tmpNode.nextSibling;
                  if (
                    pre &&
                    next &&
                    pre.nodeType == 1 &&
                    next.nodeType == 1 &&
                    pre.tagName == next.tagName &&
                    domUtils.isBlockElm(pre) &&
                    !(
                      img.getAttribute("key") === "local" ||
                      img.getAttribute("key") === "netVideo"
                    ) &&
                    !img.getAttribute("id") === "netVideoTran"
                  ) {
                    pre.appendChild(tmpNode.firstChild);
                    while (next.firstChild) {
                      pre.appendChild(next.firstChild);
                    }
                    domUtils.remove(tmpNode);
                    domUtils.remove(next);
                  } else {
                    domUtils.setStyle(tmpNode, "text-align", "");
                  }
                }

                range.selectNode(img).select();
              }
              if (isHovImage) {
                domUtils.setStyle(img.parentNode, "float", align);
              } else {
                domUtils.setStyle(img, "float", align);

                // 图片的边距设置
                if (img.tagName === "IMG") {
                  if (align === "left") {
                    domUtils.setStyle(
                      img,
                      "margin-right",
                      $(img).attr("lr") || "20px"
                    );
                    domUtils.setStyle(
                      img,
                      "margin-left",
                      $(img).attr("ll") || "0px"
                    );
                  } else if (align === "right") {
                    domUtils.setStyle(
                      img,
                      "margin-left",
                      $(img).attr("rl") || "20px"
                    );
                    domUtils.setStyle(
                      img,
                      "margin-right",
                      $(img).attr("rr") || "0px"
                    );
                  } else {
                    domUtils.setStyle(
                      img,
                      "margin-left",
                      $(img).attr("nl") || "0px"
                    );
                    domUtils.setStyle(
                      img,
                      "margin-right",
                      $(img).attr("nr") || "0px"
                    );
                  }
                }
              }
              break;
            case "imageLeft":
              if (me.queryCommandValue("imagefloat") != "imageLeft") {
                operationImagePosition("left");
                //UE.commands['justify'].execCommand('justify','left');
              }
              break;
            case "center":
              // img.parentNode.setAttribute('contenteditable','true')
              if (
                img.parentNode.tagName == "TD" ||
                img.parentNode.tagName == "A"
              ) {
                img.parentNode.removeAttribute("contenteditable");
                if ($(img).parents("td").length) {
                  $(img).parents("td")[0].removeAttribute("contenteditable");
                }
              } else {
                if ($(img).parents("td").length) {
                  $(img).parents("td")[0].removeAttribute("contenteditable");
                }
                img.parentNode.setAttribute("contenteditable", "true");
              }
              if (me.queryCommandValue("imagefloat") != "center") {
                operationImagePosition("center");
                if (isHovImage) {
                  // me.editor && me.editor.options.outerFunction.hoverChangeImage && me.editor.options.outerFunction.hoverChangeImage(me.body);
                  me.execCommand("hoverchangeimage");
                }
                //UE.commands['justify'].execCommand('justify','center');
              }

              break;
            case "imageRight":
              if (me.queryCommandValue("imagefloat") != "imageRight") {
                operationImagePosition("right");
                //UE.commands['justify'].execCommand('justify','right');
              }
              break;
          }
          range.setStartAfter(img).setCursor(true);
        }
      }

      function operationImagePosition(pos) {
        var isHovImage =
          img.className === "hoverImage" || img.className === "J_hoverImage";
        pN = img.parentNode;
        domUtils.setStyle(img, "float", "none");
        tmpNode = img;
        while (
          pN &&
          domUtils.getChildCount(pN, function (node) {
            return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
          }) == 1 &&
          (dtd.$inline[pN.tagName] || pN.tagName == "A")
        ) {
          tmpNode = pN;
          pN = pN.parentNode;
        }
        if (isHovImage) {
          img.parentNode.setAttribute("id", "hoverImageParentSpan");
        }

        if (!isOpend) {
          range.setStartBefore(tmpNode).setCursor(false);
        }

        pN = me.document.createElement("div");
        pN.appendChild(tmpNode);
        domUtils.setStyle(tmpNode, "float", "");

        // 将audio与其他元素区分开
        if (!isOpend) {
          // 图片边距设置的居中处理
          if (pN.childNodes[0].tagName === "IMG") {
            $(pN.childNodes[0]).css("margin-left", $(img).attr("cl") || "0px");
            $(pN.childNodes[0]).css("margin-right", $(img).attr("cr") || "0px");
          }

          me.execCommand(
            "insertHtml",
            '<p id="_img_parent_tmp" style="text-align:' +
              pos +
              '">' +
              pN.innerHTML +
              "</p>"
          );

          tmpNode = me.document.getElementById("_img_parent_tmp");
          tmpNode.removeAttribute("id");
          tmpNode = tmpNode.firstChild;
          range.selectNode(tmpNode).select();
          //去掉后边多余的元素
          next = tmpNode.parentNode.nextSibling;
        } else {
          me.execCommand("insertHtml", pN.innerHTML);
          var netVideo = me.document.getElementById("netVideo");
          // 视频通用代码上传所做的处理
          if (img.getAttribute("key") === "netVideo") {
            tmpNode = $(range.startContainer.firstChild).parents(
              ".netVideoCon"
            );
            $(tmpNode).css("text-align", pos);
          } else {
            tmpNode = me.document.getElementById("audio_parents");
            $(tmpNode).css("text-align", pos);
            tmpNode = tmpNode.firstChild;
            range.selectNode(tmpNode).select();
            //去掉后边多余的元素
            // next = tmpNode.parentNode.nextSibling;
          }
        }

        if (next && domUtils.isEmptyNode(next)) {
          domUtils.remove(next);
        }

        if (isHovImage) {
          var nextChildrenSpans = next.getElementsByTagName("span");
          for (var i = 0; i < nextChildrenSpans.length; i++) {
            var spanElem = nextChildrenSpans[i];
            var hasHoverImage =
              spanElem.getElementsByClassName("J_hoverImage").length == 1;

            if (hasHoverImage) {
              domUtils.remove(spanElem);
            }
          }
          var tmpParentNode = me.document.getElementById(
            "hoverImageParentSpan"
          );
          domUtils.remove(tmpParentNode);
        }
      }
    },
    queryCommandValue: function () {
      var range = this.selection.getRange(),
        startNode,
        floatStyle;
      if (range.collapsed) {
        return "none";
      }

      startNode = range.getClosedNode();
      if (!startNode) {
        startNode = range.cloneRange().adjustmentBoundary().shrinkBoundary();
        startNode = startNode.startContainer;
      }

      if (
        startNode &&
        startNode.nodeType == 1 &&
        (startNode.tagName == "IMG" ||
          startNode.tagName == "EMBED" ||
          startNode.tagName == "VIDEO")
      ) {
        floatStyle = domUtils.getComputedStyle(startNode, "float");
        if (floatStyle == "none") {
          floatStyle = domUtils.getComputedStyle(
            startNode.parentNode,
            "text-align"
          );
          // 居中  居左  居右
          if (floatStyle == "center") {
            floatStyle = "center";
          } else if (floatStyle == "left") {
            floatStyle = "imageLeft";
          } else if (floatStyle == "right") {
            floatStyle = "imageRight";
          }
        }
        return {
          left: 1,
          right: 1,
          center: 1,
          imageLeft: 1,
          imageRight: 1
        }[floatStyle]
          ? floatStyle
          : "none";
      }
      return "none";
    },
    queryCommandState: function () {
      if (this.highlight) {
        return -1;
      }
      var range = this.selection.getRange(),
        startNode;
      if (range.collapsed) {
        return -1;
      }
      // MP3做的处理；当图片在文字后面插入的时候也要做处理
      if (
        (range.startContainer &&
          !$(range.startContainer).find("img").length &&
          range.startContainer.firstChild &&
          range.startContainer.firstChild.getAttribute("key") === "audio") ||
        "netVideo"
      ) {
        return 0;
      }
      startNode = range.getClosedNode();
      if (!startNode) {
        startNode = range.cloneRange().adjustmentBoundary().shrinkBoundary();
        startNode = startNode.startContainer;
      }

      //img embed vedio
      if (
        startNode &&
        startNode.nodeType == 1 &&
        (startNode.tagName == "IMG" ||
          startNode.tagName == "EMBED" ||
          startNode.tagName == "VIDEO")
      ) {
        return 0;
      }
      return -1;
    }
  };
  /**imagefloat.js end**/
  /**indent.js start**/
  /**
   * 缩进
   * @command indent
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'indent' );
   * ```
   */
  UE.commands["indent"] = {
    execCommand: function () {
      //加上先获取该行字体大小来定缩进
      var me = this,
        startNode = me.selection.getStart(),
        fontSize = parseInt(domUtils.getComputedStyle(startNode, "font-size")),
        textIndent = "2em";
      if (fontSize && fontSize != 12) {
        textIndent = fontSize * 2 + "px";
      }
      var value = me.queryCommandState("indent")
        ? "0em"
        : me.options.indentValue || textIndent;
      me.execCommand("Paragraph", "p", { style: "text-indent:" + value });
    },
    queryCommandState: function () {
      if (this.highlight) {
        return -1;
      }
      var pN = utils.findNode(this.selection.getStartElementPath(), [
        "p",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6"
      ]);
      return pN && pN.style.textIndent && parseInt(pN.style.textIndent) ? 1 : 0;
    }
  };
  /**indent.js end**/
  /**phoneservice.js start**/
  //输入手机号码点确定的处理
  UE.commands["phoneservice"] = {
    execCommand: function (cmd, phoneNumber) {
      var isPhone = function (phoneNumber) {
        //var pattern = /((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)/;

        var pattern = /((\d{20})|^((\d{5,20})|(\d{4}|\d{3})-(\d{4,14})|(\d{4}|\d{3})-(\d{4,14})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{4,14})-(\d{4}|\d{3}|\d{2}|\d{1}))$)/;
        return pattern.test(phoneNumber);
      };

      var editor = this,
        range = editor.selection.getRange(),
        phoneservice = range.collapsed
          ? editor.queryCommandValue("link")
          : editor.selection.getStart(),
        phoneservice = domUtils.findParentByTagName(phoneservice, "a", true);

      //var sHtml = "<img _hidetool='true' src='" + editor.options.BUS_UEDITOR_HOME_URL_IMAGE + "/image/comm/msn.gif' border='0'/>" + (msnName == '' ? msnNumber : msnName) + "";
      if (phoneNumber) {
        if (isPhone(phoneNumber)) {
          var allHtml =
            "<a phonenumber='" +
            phoneNumber +
            "' href='tel:" +
            phoneNumber +
            "'>" +
            phoneNumber +
            "</a>";
          if (phoneservice != null) {
            UE.dom.domUtils.resetRange();
            phoneservice.outerHTML = allHtml;
          } else {
            editor.execCommand("inserthtml", allHtml, true);
          }
          UE.ui.Popup.postHide();
        } else {
          alert("您输入的电话号码格式不正确，请重新输入。");
        }
      } else {
        alert("请输入电话号码");
      }
    }
  };
  /**phoneservice.js end**/
  //uploadinit.js start
  // 文件上传
  (function () {
    var Html4Upload = (baidu.editor.Html4Upload = function (
      fromfile,
      tourl,
      callback
    ) {
      tourl += "&forIframe=1";
      var uid = new Date().getTime(),
        idIO = "jUploadFrame" + uid,
        _this = this;
      var jIO = $(
        '<iframe name="' +
          idIO +
          '" class="xheHideArea" style="display:none" />'
      ).appendTo("body");
      var jForm = $(
        '<form action="' +
          tourl +
          '" target="' +
          idIO +
          '" method="post" enctype="multipart/form-data" class="xheHideArea"></form>'
      ).appendTo("body");
      var jOldFile = $(fromfile),
        jNewFile = jOldFile.clone().attr("disabled", true);
      jOldFile.before(jNewFile).appendTo(jForm);
      this.remove = function () {
        //jForm.css('display', 'none');
        jForm.remove();
      };
      this.onLoad = function () {
        callback($(jIO[0].contentWindow.document.body).text(), true);
      };
      this.start = function () {
        jForm.submit();
        jIO.load(this.onLoad);
      };
      return this;
    });
  })();
  // 显示模式
  (function () {
    var ShowModal = (baidu.editor.ShowModal = function (
      title,
      content,
      w,
      h,
      onRemove
    ) {
      if ($(".xheModal").length == 1) return false; //只能弹出一个模式窗口
      var jModal, jModalShadow, jOverlay, layerShadow, jHideSelect;
      //w=w?w:_this.settings.modalWidth;h=h?h:_this.settings.modalHeight;
      layerShadow = 3;

      jModal = $(
        '<div class="xheModal" style="width:' +
          (w - 1) +
          "px;height:" +
          h +
          "px;margin-left:-" +
          Math.ceil(w / 2) +
          "px;" +
          ($.browser.msie && $.browser.version <= 7.0
            ? ""
            : "margin-top:-" + Math.ceil(h / 2) + "px") +
          '">' +
          (true
            ? '<div class="xheModalTitle"><span class="xheModalClose" title="关闭 (Esc)"></span>' +
              title +
              "</div>"
            : "") +
          '<div class="xheModalContent"></div></div>'
      ).appendTo("body");
      jOverlay = $('<div class="xheModalOverlay"></div>').appendTo("body");
      if (layerShadow > 0)
        jModalShadow = $(
          '<div class="xheModalShadow" style="width:' +
            jModal.outerWidth() +
            "px;height:" +
            jModal.outerHeight() +
            "px;margin-left:-" +
            (Math.ceil(w / 2) - layerShadow - 2) +
            "px;" +
            ($.browser.msie && $.browser.version <= 7.0
              ? ""
              : "margin-top:-" + (Math.ceil(h / 2) - layerShadow - 2) + "px") +
            '"></div>'
        ).appendTo("body");

      $(".xheModalContent", jModal)
        .css("height", h - $(".xheModalTitle").outerHeight())
        .html(content);

      if ($.browser.msie && $.browser.version == 6.0)
        jHideSelect = $("select:visible").css("visibility", "hidden"); //隐藏覆盖的select

      var removeModal = function () {
        if (jHideSelect) jHideSelect.css("visibility", "visible");
        $(document).unbind("keydown", modalEscCheck);
        jModal.remove();
        if (layerShadow > 0) jModalShadow.remove();
        jOverlay.remove();
        if (onRemove) onRemove();
      };
      var modalEscCheck = function (ev) {
        if (ev.which == 27) {
          removeModal();
          return false;
        }
      };
      $(document).keydown(modalEscCheck);

      $(".xheModalClose", jModal).click(removeModal);

      jOverlay.show();
      if (layerShadow > 0) jModalShadow.show();
      jModal.show();
    });
  })();
  // 初始化文件上传
  (function () {
    UE.commands["uploadinit"] = {
      execCommand: function (cmd, me, jText, tourl, uptext, xheDivSrcPanel) {
        var inputname = "filedata",
          jUpload = $(
            '<span class="xheUpload" style="position: relative;  display: inline-block;  width: 164px;">' +
              '<input type="text" style="visibility:hidden;" tabindex="-1" />' +
              '<input type="button" value="浏览" class="xheBtn" tabindex="-1" style="position: absolute;  top: 0px;  left: 114px;  width: 50px; height: 22px; z-index: 1000001;  padding: 0;margin-left: 3px"/>' +
              '<input type="file" class="xheFile" size="13" name="filedata" tabindex="-1" style="cursor: pointer;  position: absolute;  top: 0px;  left: 0px;  width: 164px;  opacity: 0;  -ms-filter: alpha(opacity=0);  filter: alpha(opacity=0);  z-index: 1000002;">' +
              "</span>"
          ),
          jUpBtn = $(".xheBtn", jUpload);

        if (xheDivSrcPanel.find(".xheUpload").size() == 0) {
          jText.after(jUpload);
          jUpBtn.before(jText);
        }

        var jFile = $(".xheFile", jUpload),
          arrMsg = [];
        jFile.change(function () {
          startUplaod(jFile[0], me, tourl, uptext);
        });
      }
    };

    function startUplaod(fromfiles, me, tourl, uptext) {
      var arrMsg = [];
      var url = window.UEDITOR_CONFIG.UEDITOR_HOME_URL + "/";

      if (url.substring(url.length - 1, url.length) == "/") {
        url = url.substring(0, url.length - 1);
      }
      var upload,
        fileList,
        filename,
        jUploadTip = $(
          '<div style="margin:22px 0;text-align:center;line-height:30px;">文件上传中，请稍候……<br /></div>'
        );
      // if(fromfiles.nodeType&&!((fileList=fromfiles.files)&&fileList[0]))
      // {
      //     if(!checkFileExt(fromfiles.value, uptext)) return;
      //     jUploadTip.append(sLoading);
      //     upload = new baidu.editor.Html4Upload(fromfiles,tourl,onUploadCallback);
      // }
      // else
      // {
      //     if(!checkFileExt(fromfiles.value, uptext)) return;
      //     jUploadTip.append(sLoading);
      //     upload = new baidu.editor.Html4Upload(fromfiles,tourl,onUploadCallback);
      // }
      if (!checkFileExt(fromfiles.value, uptext)) return;
      // jUploadTip.append(sLoading);
      upload = new baidu.editor.Html4Upload(fromfiles, tourl, onUploadCallback);

      bShowPanel = false; //防止按钮面板被关闭
      new baidu.editor.ShowModal(
        "文件上传中(Esc取消上传)",
        jUploadTip,
        320,
        150,
        function () {
          bShowPanel = true;
          upload.remove();
        }
      );
      upload.start();
      upload.remove();
    }

    function removeModal() {
      $(".xheModal").remove();
      $(".xheModalOverlay").remove();
      $(".xheModalShadow").remove();
    }

    function onUploadCallback(sText, bFinish) {
      var data = Object,
        onUpload = "";
      var result;
      try {
        result = jQuery.parseJSON(sText);
      } catch (ex) {}
      if (!result || !result.success) {
        var msg;
        if (result && result.msg) {
          msg = result.msg;
        } else {
          msg = "上传失败";
        }
        alert(msg);
        removeModal();
        return false;
      }
      removeModal();
      setUploadMsg(result);
      if (onUpload) onUpload(result); //用户上传回调
      return true;
    }

    function checkFileExt(filename, uptext) {
      if (
        uptext == "*" ||
        filename.match(new RegExp(".(" + uptext.replace(/,/g, "|") + ")$", "i"))
      )
        return true;
      else {
        alert("上传文件扩展名必需为: " + uptext);
        return false;
      }
    }

    function setUploadMsg(result) {
      var arrMsg = result.url;
      if (typeof arrMsg === "string") {
        arrMsg = [arrMsg]; //允许单URL传递
      }

      var i,
        msg,
        url,
        bImmediate = false,
        count = arrMsg.length,
        arrUrl = [];

      for (i = 0; i < count; i++) {
        msg = arrMsg[i];
        if (typeof msg === "string") {
          url = msg;
        } else {
          url = msg.url;
        }

        if (url.substr(0, 1) === "!") {
          bImmediate = true;
          url = url.substr(1);
        }

        arrUrl.push(url);
      }

      var width = result.width,
        height = result.height,
        ratio = result.ratio;

      try {
        if (width && width != "") {
          $("#xheImgWidth").val(width);
        }
        if (height && height != "") {
          $("#xheImgHeight").val(height);
        }
        if (ratio && ratio != "") {
          $("#xheImgRatio").val(ratio);
        }
      } catch (e) {
        console.log(e);
      }

      $(".xheDialogDiv").find("button")[0].onclick(arrUrl.join(" "));
    }
  })();
  //uploadinit.js end
  //QQ号码
  UE.commands["qqservice"] = {
    execCommand: function (cmd, me, cont) {
      var isNumber = function (num) {
        if (/[^\d]/.test(num)) {
          return false;
        } else {
          return true;
        }
      };
      var qqNumber = document.getElementById("xheQQ").value;
      var qqName = document.getElementById("xheName").value;
      var qqState = document.getElementsByName("showQQstate"),
        qqStateValue;
      var qqStyle = document.getElementsByName("displayStyle"),
        qqStyleVlaue;

      var editor = me.editor,
        range = editor.selection.getRange(),
        xheQQ = document.getElementById("xheQQ"),
        xheName = document.getElementById("xheName"),
        qqservice = range.collapsed
          ? editor.queryCommandValue("link")
          : editor.selection.getStart(),
        qqservice = domUtils.findParentByTagName(qqservice, "a", true);

      for (var i = 0; i < qqStyle.length; i++) {
        if (qqStyle[i].checked) {
          qqStyleVlaue = qqStyle[i].value;
        }
      }

      for (var i = 0; i < qqState.length; i++) {
        if (qqState[i].checked) {
          qqStateValue = qqState[i].value;
        }
      }

      if ((qqStyleVlaue == 4 || qqStyleVlaue == 45) && qqName == "") {
        //qqName = qqNumber;
      }

      if (qqNumber) {
        if (isNumber(qqNumber) && qqNumber.length > 4 && qqNumber.length < 11) {
          qqName = UE.utils.encodeHtml(qqName);
          var stillOnline =
              editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
              "/image/menu/pa" +
              qqStyleVlaue +
              ".gif",
            RTOnline =
              "http://wpa.qq.com/pa?p=1:" + qqNumber + ":" + qqStyleVlaue;
          var qqImg =
            '<img _hidetool="true" class="fk-xhe" style="text-decoration:none;CURSOR: pointer;vertical-align: middle;" qqName="' +
            qqName +
            '" qqNumber="' +
            qqNumber +
            '"  border="0" SRC="' +
            (qqStateValue == 1 ? RTOnline : stillOnline) +
            '" alt="' +
            qqName +
            '">&nbsp;';
          var qqLink =
            "<a _onlineSerivceMark='true' qqStyleVlaue='" +
            qqStyleVlaue +
            "' qqStateValue='" +
            qqStateValue +
            "' qqName='" +
            qqName +
            "' qqNumber='" +
            qqNumber +
            "' href='http://wpa.qq.com/msgrd?v=3&uin=" +
            qqNumber +
            "&site=qq&menu=yes' target='_blank' style='text-decoration:none;'>";
          qqName = qqName ? qqName : qqNumber;
          var qqHtml = qqLink + qqImg + qqName + "</a>&nbsp;";

          if (qqservice != null) {
            UE.editor.selection.getRange().setCursor(true);
            qqservice.outerHTML = qqHtml;
          } else {
            me.editor.execCommand("insertHtml", qqHtml, true);
          }

          me.popup.hide();
        } else {
          alert("您输入的QQ号码格式不正确，请重新输入。");
        }
      } else {
        alert("请输入QQ号码");
      }
    }
  };

  //MSN帐号
  UE.commands["msnservice"] = {
    execCommand: function (cmd, me, cont) {
      var isMail = function (msnNumber) {
        var pattern = /^[a-zA-Z0-9_\-\.\+]+@[a-zA-Z0-9][a-zA-Z0-9_\-]*\.[a-zA-Z0-9\-][a-zA-Z0-9_\-\.]*[a-zA-Z0-9 ]$/;
        return pattern.test(msnNumber);
      };

      var msnNumber = document.getElementById("xheMSN").value;
      var msnName = document.getElementById("xheNameMSN").value;

      var editor = me.editor,
        range = editor.selection.getRange(),
        msnservice = range.collapsed
          ? editor.queryCommandValue("link")
          : editor.selection.getStart(),
        msnservice = domUtils.findParentByTagName(msnservice, "a", true);

      if (msnName) {
        msnName = UE.utils.encodeHtml(msnName);
      }

      var sHtml =
        "<img _hidetool='true' class='fk-xhe' style='vertical-align: middle;' src='" +
        me.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
        "/image/menu/msn.gif' border='0'/>" +
        (msnName == "" ? msnNumber : msnName) +
        "";
      if (msnNumber) {
        if (isMail(msnNumber)) {
          var allHtml =
            "<a _onlineSerivceMark='true' msnNumber='" +
            msnNumber +
            "' msnName='" +
            msnName +
            "' href='msnim:chat?contact=" +
            msnNumber +
            "'>" +
            sHtml +
            "</a>&nbsp;";
          if (msnservice != null) {
            UE.editor.selection.getRange().setCursor(true);
            msnservice.outerHTML = allHtml;
          } else {
            me.editor.execCommand("inserthtml", allHtml, true);
          }
          me.popup.hide();
        } else {
          alert("您输入的MSN帐号格式不正确，请重新输入。");
        }
      } else {
        alert("请输入MSN帐号");
      }
    }
  };

  //Skype
  UE.commands["skypeservice"] = {
    execCommand: function (cmd, me, cont) {
      var isSkype = function (skyNumber) {
          //var pattern = /^[a-zA-Z0-9_.-=@$^&*()!#?:]+$/;
          //return pattern.test(skyNumber);
          return true;
        },
        header = function (str) {
          var reg = /^[a-zA-Z]/;
          if (!reg.test(str)) {
            return false;
          }
          return true;
        };

      var skyNumber = document.getElementById("xheSkype").value;
      var skyName = document.getElementById("xheNameSkype").value;

      var editor = me.editor,
        range = editor.selection.getRange(),
        skypeservice = range.collapsed
          ? editor.queryCommandValue("link")
          : editor.selection.getStart(),
        skypeservice = domUtils.findParentByTagName(skypeservice, "a", true);

      if (skyName) {
        skyName = UE.utils.encodeHtml(skyName);
      }

      var sHtml =
        "<a skyNumber='" +
        skyNumber +
        "' skyName='" +
        skyName +
        "' href='skype:" +
        skyNumber +
        "?call'>" +
        "<img _hidetool='true' class='fk-xhe' src='" +
        me.editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
        "/image/menu/skype2.png' style='border:none;vertical-align: middle;' width='22' height='21' />" +
        (skyName == "" || skyName == null ? skyNumber : skyName) +
        "</a>&nbsp;";
      if (skyNumber) {
        if (
          isSkype(skyNumber) &&
          header(skyNumber) &&
          skyNumber.length > 5 &&
          skyNumber.length < 33
        ) {
          if (skypeservice != null) {
            UE.editor.selection.getRange().setCursor(true);
            skypeservice.outerHTML = sHtml;
          } else {
            me.editor.execCommand("inserthtml", sHtml, true);
          }
          me.popup.hide();
        } else {
          alert("您输入的Skype帐号格式不正确，请重新输入。");
        }
      } else {
        alert("请输入Skype帐号");
      }
    }
  };

  //阿里旺旺
  UE.commands["aliwangwangservice"] = {
    execCommand: function (cmd, me, cont) {
      var isAliWangWang = function (aliWangWang) {
          if (!isNaN(aliWangWang)) {
            return false;
          }
          var pattern = /^(\w|[\u4E00-\u9FA5])*$/;
          return pattern.test(aliWangWang);
        },
        getlengthB = function (str) {
          return str.replace(/[^\x00-\xff]/g, "**").length;
        };

      var xhexheAliWangWang = document.getElementById("xheAliWangWang").value;
      var xheNameAliWangWang = document.getElementById("xheNameAliWangWang")
        .value;
      var aliwangwangState = document.getElementsByName("showAliWangWangstate"),
        aliwangwangStateValue;

      var editor = me.editor,
        range = editor.selection.getRange(),
        aliwangwangservice = range.collapsed
          ? editor.queryCommandValue("link")
          : editor.selection.getStart(),
        aliwangwangservice = domUtils.findParentByTagName(
          aliwangwangservice,
          "a",
          true
        );

      if (xheNameAliWangWang) {
        xheNameAliWangWang = UE.utils.encodeHtml(xheNameAliWangWang);
      }

      for (var i = 0; i < aliwangwangState.length; i++) {
        if (aliwangwangState[i].checked) {
          aliwangwangStateValue = aliwangwangState[i].value;
        }
      }

      if (xhexheAliWangWang) {
        if (
          isAliWangWang(xhexheAliWangWang) &&
          getlengthB(xhexheAliWangWang) > 4 &&
          getlengthB(xhexheAliWangWang) < 26
        ) {
          var onlineImg =
              "http://amos.alicdn.com/online.aw?v=2&uid=" +
              encodeURIComponent(xhexheAliWangWang) +
              "&site=cnalichn&s=11&charset=UTF-8",
            nativeImg =
              editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
              "/image/menu/online.gif";
          var sHtml =
            '<a _onlineSerivceMark="true" target="_blank" aliwangwangStateValue="' +
            aliwangwangStateValue +
            '" aliWangWang="' +
            xhexheAliWangWang +
            '" aliWangWangName="' +
            xheNameAliWangWang +
            '" href="http://amos.alicdn.com/msg.aw?v=2&uid=' +
            encodeURIComponent(xhexheAliWangWang) +
            '&site=cnalichn&s=10&charset=UTF-8" >' +
            '<img _hidetool="true" class="fk-xhe" style="vertical-align: middle;" border="0" src="' +
            (aliwangwangStateValue == 1 ? onlineImg : nativeImg) +
            '" alt="' +
            xheNameAliWangWang +
            '" />' +
            "<span>" +
            xheNameAliWangWang +
            "</span></a>&nbsp;";
          //var sHtml = '<a target="_blank" aliwangwangStateValue="'+aliwangwangStateValue+'" aliWangWang="'+xhexheAliWangWang+'" aliWangWangName="'+xheNameAliWangWang+'" href="http://www.taobao.com/webww/ww.php?ver=3&touid='+encodeURIComponent(xhexheAliWangWang)+'&siteid=cntaobao&status=2&charset=utf-8" >'+
          // '<img _hidetool="true" style="vertical-align: middle;" border="0" src="'+(aliwangwangStateValue == 1 ? onlineImg : nativeImg)+'" alt="'+xheNameAliWangWang+'" />'+
          //'<span>'+xheNameAliWangWang+'</span></a>&nbsp;';

          if (aliwangwangservice != null) {
            UE.editor.selection.getRange().setCursor(true);
            aliwangwangservice.outerHTML = sHtml;
          } else {
            me.editor.execCommand("inserthtml", sHtml, true);
          }
          me.popup.hide();
        } else {
          alert("您输入的阿里旺旺用户名格式不正确，请重新输入。");
        }
      } else {
        alert("请输入阿里旺旺用户名");
      }
    }
  };

  //淘宝旺旺
  UE.commands["taobaowangwangservice"] = {
    execCommand: function (cmd, me, cont) {
      var isTaoBaoWangWang = function (taobaoWangWang) {
          if (!isNaN(taobaoWangWang)) {
            return false;
          }
          var pattern = /^(\w|[\u4E00-\u9FA5])*$/;
          return pattern.test(taobaoWangWang);
        },
        getlengthB = function (str) {
          return str.replace(/[^\x00-\xff]/g, "**").length;
        };

      var xhexheTaoBaoWangWang = document.getElementById("xheTaoBaoWangWang")
        .value;
      var xheNameTaoBaoWangWang = document.getElementById(
        "xheNameTaoBaoWangWang"
      ).value;
      var taobaowangwangState = document.getElementsByName(
          "showTaoBaoWangWangstate"
        ),
        taobaowangwangStateValue;

      var editor = me.editor,
        range = editor.selection.getRange(),
        taobaowangwangservice = range.collapsed
          ? editor.queryCommandValue("link")
          : editor.selection.getStart(),
        taobaowangwangservice = domUtils.findParentByTagName(
          taobaowangwangservice,
          "a",
          true
        );

      if (xheNameTaoBaoWangWang) {
        xheNameTaoBaoWangWang = UE.utils.encodeHtml(xheNameTaoBaoWangWang);
      }

      for (var i = 0; i < taobaowangwangState.length; i++) {
        if (taobaowangwangState[i].checked) {
          taobaowangwangStateValue = taobaowangwangState[i].value;
        }
      }

      if (xhexheTaoBaoWangWang) {
        if (
          isTaoBaoWangWang(xhexheTaoBaoWangWang) &&
          getlengthB(xhexheTaoBaoWangWang) > 4 &&
          getlengthB(xhexheTaoBaoWangWang) < 26
        ) {
          var onlineImg =
              "http://amos.alicdn.com/online.aw?v=2&uid=" +
              xhexheTaoBaoWangWang +
              "&site=cntaobao&s=2&charset=UTF-8",
            nativeImg =
              editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
              "/image/menu/online.gif";
          var sHtml =
            '<a _onlineSerivceMark="true" target="_blank" taobaowangwangStateValue="' +
            taobaowangwangStateValue +
            '" taobaoWangWang="' +
            xhexheTaoBaoWangWang +
            '" taobaoWangWangName="' +
            xheNameTaoBaoWangWang +
            '" href="http://www.taobao.com/webww/ww.php?ver=3&touid=' +
            encodeURIComponent(xhexheTaoBaoWangWang) +
            '&siteid=cntaobao&status=2&charset=utf-8" >' +
            '<img _hidetool="true" class="fk-xhe" style="vertical-align: middle;" border="0" src="' +
            (taobaowangwangStateValue == 1 ? onlineImg : nativeImg) +
            '" alt="' +
            xheNameTaoBaoWangWang +
            '" />' +
            "<span>" +
            xheNameTaoBaoWangWang +
            "</span></a>&nbsp;";

          if (taobaowangwangservice != null) {
            UE.editor.selection.getRange().setCursor(true);
            taobaowangwangservice.outerHTML = sHtml;
          } else {
            me.editor.execCommand("inserthtml", sHtml, true);
          }
          me.popup.hide();
        } else {
          alert("您输入的淘宝旺旺用户名格式不正确，请重新输入。");
        }
      } else {
        alert("请输入淘宝旺旺用户名");
      }
    }
  };
  //contextmenu.js start
  /**
   * 右键菜单
   * @function
   * @name baidu.editor.plugins.contextmenu
   * @author zhanyi
   * @import core
   * @commands 右键菜单
   * @commandsName  ContextMenu
   * @commandsTitle  右键菜单
   */

  // UE.plugins['contextmenu'] = function () {
  //     this.setOpt('enableContextMenu',true);
  //     if(this.options.enableContextMenu === false){
  //         return;
  //     }
  //     var me = this,
  //             lang = me.getLang( "contextMenu" ),
  //             menu,
  //             items = me.options.contextMenu || [
  //                 {label:lang['delete'], cmdName:'delete'},
  //                 {label:lang['selectall'], cmdName:'selectall'},
  //                 {
  //                     label:lang.deletecode,
  //                     cmdName:'highlightcode',
  //                     icon:'deletehighlightcode'
  //                 },
  //                 {
  //                     label:lang.cleardoc,
  //                     cmdName:'cleardoc',
  //                     exec:function () {
  //                         if ( confirm( lang.confirmclear ) ) {
  //                             this.execCommand( 'cleardoc' );
  //                         }
  //                     }
  //                 },
  //                 '-',
  //                 {
  //                     label:lang.unlink,
  //                     cmdName:'unlink'
  //                 },
  //                 '-',
  //                 {
  //                     group:lang.paragraph,
  //                     icon:'justifyjustify',
  //                     subMenu:[
  //                         {
  //                             label:me.getLang( "justifyleft" ),
  //                             cmdName:'justify',
  //                             value:'left'
  //                         },
  //                         {
  //                             label:me.getLang( "justifyrenter" ),
  //                             cmdName:'justify',
  //                             value:'center'
  //                         },
  //                         {
  //                             label:me.getLang( "justifyright" ),
  //                             cmdName:'justify',
  //                             value:'right'
  //                         },
  //                         {
  //                             label:me.getLang( "justify" ),
  //                             cmdName:'justify',
  //                             value:'justify'
  //                         }
  //                     ]
  //                 },
  //                 '-',
  //                 {
  //                     label:lang.edittable,
  //                     cmdName:'edittable',
  //                     exec:function () {
  //                         this.ui._dialogs['inserttableDialog'].alterTableOpen();
  //                     }
  //                 },
  //                 {
  //                     label:lang.edittd,
  //                     cmdName:'edittd',
  //                     exec:function () {
  //                         //如果没有创建，创建一下先
  //                         if ( UE.ui['edittd'] ) {
  //                             new UE.ui['edittd']( this );
  //                         }
  //                         this.ui._dialogs['edittdDialog'].open();
  //                     }
  //                 },
  //                 {
  //                     group:lang.table,
  //                     icon:'table',
  //                     subMenu:[
  //                         {
  //                             label:lang.deletetable,
  //                             cmdName:'deletetable'
  //                         },
  //                         {
  //                             label:lang.insertparagraphbeforetable,
  //                             cmdName:'insertparagraphbeforetable'
  //                         },
  //                         '-',
  //                         {
  //                             label:lang.deleterow,
  //                             cmdName:'deleterow'
  //                         },
  //                         {
  //                             label:lang.deletecol,
  //                             cmdName:'deletecol'
  //                         },
  //                         '-',
  //                         {
  //                             label:lang.insertrow,
  //                             cmdName:'insertrow'
  //                         },
  //                         {
  //                             label:lang.insertcol,
  //                             cmdName:'insertcol'
  //                         },
  //                         '-',
  //                         {
  //                             label:lang.mergeright,
  //                             cmdName:'mergeright'
  //                         },
  //                         {
  //                             label:lang.mergedown,
  //                             cmdName:'mergedown'
  //                         },
  //                         '-',
  //                         {
  //                             label:lang.splittorows,
  //                             cmdName:'splittorows'
  //                         },
  //                         {
  //                             label:lang.splittocols,
  //                             cmdName:'splittocols'
  //                         },
  //                         {
  //                             label:lang.mergecells,
  //                             cmdName:'mergecells'
  //                         },
  //                         {
  //                             label:lang.splittocells,
  //                             cmdName:'splittocells'
  //                         }
  //                     ]
  //                 },
  //                 {
  //                     label:lang['copy'],
  //                     cmdName:'copy'
  //                     // exec:function () {
  //                     //     alert( lang.copymsg );
  //                     // },
  //                     // query:function () {
  //                     //     return 0;
  //                     // }
  //                 },
  //                 {
  //                     label:lang['paste'],
  //                     cmdName:'pasteplain'
  //                     // exec:function () {
  //                     //     alert( lang.pastemsg );
  //                     // },
  //                     // query:function () {
  //                     //     return 0;
  //                     // }
  //                 }
  //             ];
  //     if ( !items.length ) {
  //         return;
  //     }
  //     var uiUtils = UE.ui.uiUtils;
  //     me.addListener( 'contextmenu', function ( type, evt ) {
  //         var offset = uiUtils.getViewportOffsetByEvent( evt );
  //         me.fireEvent( 'beforeselectionchange' );
  //         if ( menu ) {
  //             menu.destroy();
  //         }
  //         for ( var i = 0, ti, contextItems = []; ti = items[i]; i++ ) {
  //             var last;
  //             (function ( item ) {
  //                 if ( item == '-' ) {
  //                     if ( (last = contextItems[contextItems.length - 1 ] ) && last !== '-' ) {
  //                         contextItems.push( '-' );
  //                     }
  //                 } else if ( item.hasOwnProperty( "group" ) ) {
  //                     for ( var j = 0, cj, subMenu = []; cj = item.subMenu[j]; j++ ) {
  //                         (function ( subItem ) {
  //                             if ( subItem == '-' ) {
  //                                 if ( (last = subMenu[subMenu.length - 1 ] ) && last !== '-' ) {
  //                                     subMenu.push( '-' );
  //                                 }
  //                             } else {
  //                                 if ( (me.commands[subItem.cmdName] || UE.commands[subItem.cmdName] || subItem.query) &&
  //                                         (subItem.query ? subItem.query() : me.queryCommandState( subItem.cmdName )) > -1 ) {
  //                                     subMenu.push( {
  //                                         'label':subItem.label || me.getLang( "contextMenu." + subItem.cmdName + (subItem.value || '') ),
  //                                         'className':'edui-for-' + subItem.cmdName + (subItem.value || ''),
  //                                         onclick:subItem.exec ? function () {
  //                                             subItem.exec.call( me );
  //                                         } : function () {
  //                                             me.execCommand( subItem.cmdName, subItem.value );
  //                                         }
  //                                     } );
  //                                 }
  //                             }
  //                         })( cj );
  //                     }
  //                     if ( subMenu.length ) {
  //                         contextItems.push( {
  //                             //todo 修正成自动获取方式
  //                             'label':item.icon == "table" ? me.getLang( "contextMenu.table" ) : me.getLang( "contextMenu.paragraph" ),
  //                             className:'edui-for-' + item.icon,
  //                             'subMenu':{
  //                                 items:subMenu,
  //                                 editor:me
  //                             }
  //                         } );
  //                     }

  //                 } else {
  //                     //有可能commmand没有加载右键不能出来，或者没有command也想能展示出来添加query方法
  //                     if ( (me.commands[item.cmdName] || UE.commands[item.cmdName] || item.query) &&
  //                             (item.query ? item.query() : me.queryCommandState( item.cmdName )) > -1 ) {
  //                         //highlight todo
  //                         if ( item.cmdName == 'highlightcode' && me.queryCommandState( item.cmdName ) == 0 ) {
  //                             return;
  //                         }
  //                         contextItems.push( {
  //                             'label':item.label || me.getLang( "contextMenu." + item.cmdName ),
  //                             className:'edui-for-' + (item.icon ? item.icon : item.cmdName + (item.value || '')),
  //                             onclick:item.exec ? function () {
  //                                 item.exec.call( me );
  //                             } : function () {
  //                                 me.execCommand( item.cmdName, item.value );
  //                             }
  //                         } );
  //                     }

  //                 }

  //             })( ti );
  //         }
  //         if ( contextItems[contextItems.length - 1] == '-' ) {
  //             contextItems.pop();
  //         }
  //         menu = new UE.ui.Menu( {
  //             items:contextItems,
  //             className:"edui-contextmenu",
  //             editor:me
  //         } );
  //         menu.render();
  //         menu.showAt( offset );
  //         domUtils.preventDefault( evt );
  //         if ( browser.ie ) {
  //             var ieRange;
  //             try {
  //                 ieRange = me.selection.getNative().createRange();
  //             } catch ( e ) {
  //                 return;
  //             }
  //             if ( ieRange.item ) {
  //                 var range = new dom.Range( me.document );
  //                 range.selectNode( ieRange.item( 0 ) ).select( true, true );

  //             }
  //         }
  //     } );
  // };

  //contextmenu.js end
  //selectall.js start
  /**
   * 选中所有内容
   * @command selectall
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'selectall' );
   * ```
   */
  UE.plugins["selectall"] = function () {
    var me = this;
    me.commands["selectall"] = {
      execCommand: function () {
        //去掉了原生的selectAll,因为会出现报错和当内容为空时，不能出现闭合状态的光标
        var me = this,
          body = me.body,
          range = me.selection.getRange();
        range.selectNodeContents(body);
        if (domUtils.isEmptyBlock(body)) {
          //opera不能自动合并到元素的里边，要手动处理一下
          if (
            browser.opera &&
            body.firstChild &&
            body.firstChild.nodeType == 1
          ) {
            range.setStartAtFirst(body.firstChild);
          }
          range.collapse(true);
        }

        range.select(true);
        this.selectAll = true;

        if (
          $(me.container).find(".edui-toolbar").attr("isfullscreen") ==
          "fullScreen"
        ) {
          $(me.body).attr("selectAll", "true"); //添加全选的标志，全屏的时候需要使用到
        }
        // me.body.onkeydown = function(e){
        //     if(e.keyCode == 8){
        //         setTimeout(function(){
        //             $(me.body).append('<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_0" contenteditable="true"><p><br/></p></div></div>');
        //             $(me.body).children('p').remove();
        //             var breakPageHeight = $(me.body).css('height');
        //             $(me.body).find('.breakPage').css('min-height',breakPageHeight);
        //             $(me.body).find('.breakPageParent').css('height','100%');
        //         },100)
        //     }
        // }
      },
      notNeedUndo: 1
    };

    me.addListener("ready", function () {
      domUtils.on(me.document, "click", function (evt) {
        me.selectAll = false;
      });
    });
  };
  //selectall.js end
  //wordcount.js start
  /**
   * @commands 字数统计
   * @commandsName  WordCount,wordCount
   * @commandsTitle  字数统计
   */

  UE.plugins["wordcount"] = function () {
    var me = this;
    me.setOpt({
      wordCount: true,
      maximumWords: me.options.maximumWords,
      wordCountMsg: me.options.wordCountMsg || me.getLang("wordCountMsg"),
      wordOverFlowMsg:
        me.options.wordOverFlowMsg || me.getLang("wordOverFlowMsg")
    });
    var opt = me.options,
      max = opt.maximumWords,
      msg = opt.wordCountMsg,
      errMsg = opt.wordOverFlowMsg;
    if (!opt.wordCount) {
      return;
    }
    me.commands["wordcount"] = {
      queryCommandValue: function (cmd, onlyCount) {
        var length, contentText, reg;
        if (onlyCount) {
          reg = new RegExp("[\r\t\n]", "g");
          contentText = this.getContentTxt().replace(reg, "");
          return contentText.length;
        }
        reg = new RegExp("[\r\t\n]", "g");
        contentText = this.getContentTxt().replace(reg, "");
        length = contentText.length;
        if (max - length < 0) {
          me.fireEvent("wordcountoverflow");
          return errMsg
            .replace("{#pass}", length - max)
            .replace("{#count}", length);
        }

        return msg
          .replace("{#leave}", max - length >= 0 ? max - length : 0)
          .replace("{#count}", length);
      }
    };
  };
  //wordcount.js end
  //undo.js start
  /**
   * 撤销上一次执行的命令
   * @command undo
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'undo' );
   * ```
   */

  /**
   * 重做上一次执行的命令
   * @command redo
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'redo' );
   * ```
   */
  UE.plugins["undo"] = function () {
    var saveSceneTimer;
    var me = this,
      maxUndoCount = me.options.maxUndoCount || 20,
      maxInputCount = me.options.maxInputCount || 20,
      fillchar = new RegExp(domUtils.fillChar + "|</hr>", "gi"); // ie会产生多余的</hr>
    var noNeedFillCharTags = {
      ol: 1,
      ul: 1,
      table: 1,
      tbody: 1,
      tr: 1,
      body: 1
    };
    var orgState = me.options.autoClearEmptyNode;
    function compareAddr(indexA, indexB) {
      if (indexA.length != indexB.length) return 0;
      for (var i = 0, l = indexA.length; i < l; i++) {
        if (indexA[i] != indexB[i]) return 0;
      }
      return 1;
    }

    function compareRangeAddress(rngAddrA, rngAddrB) {
      if (rngAddrA.collapsed != rngAddrB.collapsed) {
        return 0;
      }
      if (
        !compareAddr(rngAddrA.startAddress, rngAddrB.startAddress) ||
        !compareAddr(rngAddrA.endAddress, rngAddrB.endAddress)
      ) {
        return 0;
      }
      return 1;
    }

    function UndoManager() {
      this.list = [];
      this.index = 0;
      this.hasUndo = false;
      this.hasRedo = false;
      this.undo = function () {
        var hasBgColor = $(me.body)
          .find(".breakPage_0")
          .hasClass("changeBgColor");
        var undoRnage = me.selection.getRange();
        if (this.hasUndo) {
          if (!this.list[this.index - 1] && this.list.length == 1) {
            this.reset();
            return;
          }
          while (
            this.list[this.index].content == this.list[this.index - 1].content
          ) {
            this.index--;
            // if (this.index == 0) {
            if (
              this.index == 0 &&
              $(me.container).find(".edui-toolbar").attr("isfullscreen") !==
                "fullScreen"
            ) {
              return this.restore(0);
            }
          }
          this.restore(--this.index);
        }
        if (
          $(me.container).find(".edui-toolbar").attr("isfullscreen") !==
          "fullScreen"
        ) {
          var breakPageLength = $(editor.body).find(".breakPageParent").length;
          if (breakPageLength) {
            for (var j = 0; j < breakPageLength; j++) {
              $($(editor.body).find(".breakPageParent")[0])
                .find(".breakPage")
                .children()
                .appendTo($(editor.body));
              if (j < breakPageLength - 1) {
                $(editor.body).append(
                  '<hr class="pagebreak" noshade="noshade" size="5" style="user-select: none;">'
                );
              }
              $($(editor.body).find(".breakPageParent")[0]).remove();
            }
          }
        } else {
          var breakPageLength = $(editor.body).find(".breakPageParent").length;
          if (breakPageLength == 0) {
            $(
              '<hr class="pagebreak" noshade="noshade" size="5" style="user-select: none;">'
            ).insertBefore($(me.body).children().first());
            if ($(me.body).find("hr.pagebreak").length) {
              for (var j = 0; j < $(me.body).find("hr.pagebreak").length; j++) {
                var hrContent;
                if (j === 0) {
                  hrContent = $($(me.body).find("hr.pagebreak")[j]).nextUntil(
                    $($(me.body).find("hr.pagebreak")[j + 1])
                  );
                  $(me.body).find("hr.pagebreak")[j].style.display = "none";
                  $(me.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div></div>'
                  );
                } else if (j === $(me.body).find("hr.pagebreak").length - 1) {
                  hrContent = $($(me.body).find("hr.pagebreak")[j]).nextUntil(
                    $(me.body).find(".breakPageParent")
                  );
                  $(me.body).find("hr.pagebreak")[j].style.display = "none";
                  $(me.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div><div title="关闭分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div class="pageBreakCloseIcon"></div></div></div>'
                  ); // $($(me.body).find('hr')[j]).remove()
                } else {
                  hrContent = $($(me.body).find("hr.pagebreak")[j]).nextUntil(
                    $($(me.body).find("hr.pagebreak")[j + 1])
                  );
                  $(me.body).find("hr.pagebreak")[j].style.display = "none";
                  $(me.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div><div title="关闭分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div class="pageBreakCloseIcon"></div></div></div>'
                  );
                }
                // $(me.body).append('<div class="breakPageParent" contenteditable="false"><div class="breakPage breakPage_'+j+'" contenteditable="true"></div><div class="pageBreakClose"></div></div>');
                hrContent.appendTo($(me.body).find(".breakPage_" + j));
              }
              $(me.body).children("p").remove();
            }
          }
          if ($(this.editor.body).find(".breakPageParent").length === 1) {
            var breakPageHeight = $(editor.body).css("height");
            $(this.editor.body)
              .find(".breakPage")
              .css("min-height", breakPageHeight);
            $(this.editor.body).find(".breakPageParent").css("height", "100%");
          }

          // "删除分页"绑定事件
          for (var j = 0; j < $(me.body).find(".pageBreakClose").length; j++) {
            $(editor.body).find(".pageBreakCloseIcon")[
              j
            ].onclick = function () {
              var closeStart = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              var closeEnd = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              $(this)
                .parent()
                .prev()
                .children()
                .appendTo(
                  $(this).parents(".breakPageParent").prev().find(".breakPage")
                );
              $(this).parents(".breakPageParent").remove();
              if ($(editor.body).find(".pageBreakClose").length === 0) {
                var breakPageHeight = $(editor.body).css("height");
                $(editor.body)
                  .find(".breakPage")
                  .css("min-height", breakPageHeight);
                $(editor.body).find(".breakPageParent").css("height", "100%");
              }
              // 改变光标的位置
              var closeRange = editor.selection.getRange();
              closeRange.setStart(closeStart, 0);
              closeRange.setEnd(closeEnd, 0);
              closeRange.select(true);
            };
            $(me.body).find(".pageBreakClose")[j].ondblclick = function () {
              var closeStart = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              var closeEnd = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              $(this)
                .prev()
                .children()
                .appendTo(
                  $(this).parents(".breakPageParent").prev().find(".breakPage")
                );
              $(this).parents(".breakPageParent").remove();
              if ($(me.body).find(".pageBreakClose").length === 0) {
                var breakPageHeight = $(me.body).css("height");
                $(me.body)
                  .find(".breakPage")
                  .css("min-height", breakPageHeight);
                $(me.body).find(".breakPageParent").css("height", "100%");
              }
              // 改变光标的位置
              var closeRange = editor.selection.getRange();
              closeRange.setStart(closeStart, 0);
              closeRange.setEnd(closeEnd, 0);
              closeRange.select(true);
            };
          }

          for (var i = 0; i < $(editor.body).find("hr.pagebreak").length; i++) {
            $(editor.body).find("hr.pagebreak").remove();
          }

          // 修改光标的位置
          var el = $(me.body).find(".breakPage_0")[0];
          undoRnage.setStart(el, 0);
          undoRnage.setEnd(el, 0);
          undoRnage.select(true);

          // 添加侧边按钮“html视图”和“背景色”
          $(editor.body).find(".staticBtn").remove();
          var staticBtn =
            '<div contenteditable="false" class="staticBtn">' +
            '<div contenteditable="false" class="htmlBtn"></div>' +
            '<div contenteditable="false" class="backgroundBtn"></div>' +
            "</div>";
          $(staticBtn).prependTo(editor.body);
          var staticBtnRight =
            (parseInt($(this.editor.container).width()) -
              parseInt($(this.editor.body).find(".breakPageParent").width())) *
              0.5 -
            131;
          $(editor.body).find(".staticBtn").css("right", staticBtnRight);
          var bgHandle, htmlHandle, setHandle;
          $(editor.body).find(".backgroundBtn")[0].onmouseover = function (e) {
            setHandle = setTimeout(function () {
              $(e.target, this).text("黑色背景");
            }, 50);
          };
          $(editor.body).find(".backgroundBtn")[0].onmouseout = function (e) {
            clearTimeout(setHandle);
            $(e.target).text("");
          };
          $(editor.body).find(".htmlBtn")[0].onmouseover = function (e) {
            htmlHandle = setTimeout(function () {
              $(e.target).text("html视图");
            }, 50);
          };
          $(editor.body).find(".htmlBtn")[0].onmouseout = function (e) {
            clearTimeout(htmlHandle);
            $(e.target).text("");
          };
          $(editor.body).find(".htmlBtn")[0].onclick = function (e) {
            $(this).css("background-position", "-595px -296px");
            $(editor.container)
              .find(".edui-for-source .edui-button-body")
              .click();
          };
          $(editor.body).find(".backgroundBtn")[0].onclick = function () {
            if (
              !$(editor.body).find(".breakPage_0").hasClass("changeBgColor")
            ) {
              var deleteOptions = {
                tips: "仅用于预览编辑，不改变页面实际背景"
              };
              domUtils.ing(deleteOptions);
              $(this).css("background-position", "-596px -247px");
              var breakPageLength = $(editor.body).find(".breakPage").length;
              for (var i = 0; i < breakPageLength; i++) {
                $($(editor.body).find(".breakPage")[i]).addClass(
                  "changeBgColor"
                );
              }
              $(editor.body).attr("isChangeBg", "");
            } else {
              $(this).css("background-position", "");
              var breakPageLength = $(editor.body).find(".breakPage").length;
              for (var i = 0; i < breakPageLength; i++) {
                $($(editor.body).find(".breakPage")[i]).removeClass(
                  "changeBgColor"
                );
              }
              $(editor.body).attr("isChangeBg", "true");
            }
          };
        }
      };
      this.redo = function () {
        var redoRnage = me.selection.getRange();
        if (this.hasRedo) {
          while (
            this.list[this.index].content == this.list[this.index + 1].content
          ) {
            this.index++;
            if (this.index == this.list.length - 1) {
              return this.restore(this.index);
            }
          }
          this.restore(++this.index);
        }
        if (
          $(me.container).find(".edui-toolbar").attr("isfullscreen") !==
          "fullScreen"
        ) {
          var breakPageLength = $(editor.body).find(".breakPageParent").length;
          if (breakPageLength) {
            for (var j = 0; j < breakPageLength; j++) {
              $($(editor.body).find(".breakPageParent")[0])
                .find(".breakPage")
                .children()
                .appendTo($(editor.body));
              if (j < breakPageLength - 1) {
                $(editor.body).append(
                  '<hr class="pagebreak" noshade="noshade" size="5" style="user-select: none;">'
                );
              }
              $($(editor.body).find(".breakPageParent")[0]).remove();
            }
          }
        } else {
          var breakPageLength = $(editor.body).find(".breakPageParent").length;
          if (breakPageLength == 0) {
            $(
              '<hr class="pagebreak" noshade="noshade" size="5" style="user-select: none;">'
            ).insertBefore($(me.body).children().first());
            if ($(me.body).find("hr.pagebreak").length) {
              for (var j = 0; j < $(me.body).find("hr.pagebreak").length; j++) {
                var hrContent;
                if (j === 0) {
                  hrContent = $($(me.body).find("hr.pagebreak")[j]).nextUntil(
                    $($(me.body).find("hr.pagebreak")[j + 1])
                  );
                  $(me.body).find("hr.pagebreak")[j].style.display = "none";
                  $(me.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div></div>'
                  );
                } else if (j === $(me.body).find("hr.pagebreak").length - 1) {
                  hrContent = $($(me.body).find("hr.pagebreak")[j]).nextUntil(
                    $(me.body).find(".breakPageParent")
                  );
                  $(me.body).find("hr.pagebreak")[j].style.display = "none";
                  $(me.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div><div title="关闭分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
                  ); // $($(me.body).find('hr')[j]).remove()
                } else {
                  hrContent = $($(me.body).find("hr.pagebreak")[j]).nextUntil(
                    $($(me.body).find("hr.pagebreak")[j + 1])
                  );
                  $(me.body).find("hr.pagebreak")[j].style.display = "none";
                  $(me.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div><div title="关闭分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
                  );
                }
                // $(me.body).append('<div class="breakPageParent" contenteditable="false"><div class="breakPage breakPage_'+j+'" contenteditable="true"></div><div class="pageBreakClose"></div></div>');
                hrContent.appendTo($(me.body).find(".breakPage_" + j));
              }
              $(me.body).children("p").remove();
            }
          }
          if ($(this.editor.body).find(".breakPageParent").length === 1) {
            var breakPageHeight = $(editor.body).css("height");
            $(this.editor.body)
              .find(".breakPage")
              .css("min-height", breakPageHeight);
            $(this.editor.body).find(".breakPageParent").css("height", "100%");
          }

          // "删除分页"绑定事件
          for (var j = 0; j < $(me.body).find(".pageBreakClose").length; j++) {
            // $(me.body).find('.pageBreakClose')[j].onmouseover = function(e){
            //     $(e.target).css({
            //         'background-position':'-67px -858px',
            //     })
            // }
            // $(me.body).find('.pageBreakClose')[j].onmouseout = function(e){
            //     $(e.target).css({
            //         'background-position':'-7px -858px',
            //     })
            // }
            $(editor.body).find(".pageBreakCloseIcon")[
              j
            ].onclick = function () {
              var closeStart = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              var closeEnd = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              $(this)
                .parent()
                .prev()
                .children()
                .appendTo(
                  $(this).parents(".breakPageParent").prev().find(".breakPage")
                );
              $(this).parents(".breakPageParent").remove();
              if ($(editor.body).find(".pageBreakClose").length === 0) {
                var breakPageHeight = $(editor.body).css("height");
                $(editor.body)
                  .find(".breakPage")
                  .css("min-height", breakPageHeight);
                $(editor.body).find(".breakPageParent").css("height", "100%");
              }
              // 改变光标的位置
              var closeRange = editor.selection.getRange();
              closeRange.setStart(closeStart, 0);
              closeRange.setEnd(closeEnd, 0);
              closeRange.select(true);
            };
            $(me.body).find(".pageBreakClose")[j].ondblclick = function () {
              var closeStart = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              var closeEnd = $(this)
                .parents(".breakPageParent")
                .prev()
                .find("p")[0];
              $(this)
                .prev()
                .children()
                .appendTo(
                  $(this).parents(".breakPageParent").prev().find(".breakPage")
                );
              $(this).parents(".breakPageParent").remove();
              if ($(me.body).find(".pageBreakClose").length === 0) {
                var breakPageHeight = $(me.body).css("height");
                $(me.body)
                  .find(".breakPage")
                  .css("min-height", breakPageHeight);
                $(me.body).find(".breakPageParent").css("height", "100%");
              }
              // 改变光标的位置
              var closeRange = editor.selection.getRange();
              closeRange.setStart(closeStart, 0);
              closeRange.setEnd(closeEnd, 0);
              closeRange.select(true);
            };
          }

          for (var i = 0; i < $(editor.body).find("hr.pagebreak").length; i++) {
            $(editor.body).find("hr.pagebreak").remove();
          }

          // 修改光标的位置
          var el = $(me.body).find(".breakPage_0")[0];
          redoRnage.setStart(el, 0);
          redoRnage.setEnd(el, 0);
          redoRnage.select(true);

          // 添加侧边按钮“html视图”和“背景色”
          $(editor.body).find(".staticBtn").remove();
          var staticBtn =
            '<div contenteditable="false" class="staticBtn">' +
            '<div contenteditable="false" class="htmlBtn"></div>' +
            '<div contenteditable="false" class="backgroundBtn"></div>' +
            "</div>";
          $(staticBtn).prependTo(editor.body);
          var staticBtnRight =
            (parseInt($(this.editor.container).width()) -
              parseInt($(this.editor.body).find(".breakPageParent").width())) *
              0.5 -
            131;
          $(editor.body).find(".staticBtn").css("right", staticBtnRight);
          var bgHandle, htmlHandle, setHandle;
          $(editor.body).find(".backgroundBtn")[0].onmouseover = function (e) {
            setHandle = setTimeout(function () {
              $(e.target, this).text("黑色背景");
            }, 50);
          };
          $(editor.body).find(".backgroundBtn")[0].onmouseout = function (e) {
            clearTimeout(setHandle);
            $(e.target).text("");
          };
          $(editor.body).find(".htmlBtn")[0].onmouseover = function (e) {
            htmlHandle = setTimeout(function () {
              $(e.target).text("html视图");
            }, 50);
          };
          $(editor.body).find(".htmlBtn")[0].onmouseout = function (e) {
            clearTimeout(htmlHandle);
            $(e.target).text("");
          };
          $(editor.body).find(".htmlBtn")[0].onclick = function (e) {
            $(this).css("background-position", "-595px -296px");
            $(editor.container)
              .find(".edui-for-source .edui-button-body")
              .click();
          };
          $(editor.body).find(".backgroundBtn")[0].onclick = function () {
            if (
              !$(editor.body).find(".breakPage_0").hasClass("changeBgColor")
            ) {
              var deleteOptions = {
                tips: "仅用于预览编辑，不改变页面实际背景"
              };
              domUtils.ing(deleteOptions);
              $(this).css("background-position", "-596px -247px");
              var breakPageLength = $(editor.body).find(".breakPage").length;
              for (var i = 0; i < breakPageLength; i++) {
                $($(editor.body).find(".breakPage")[i]).addClass(
                  "changeBgColor"
                );
              }
              $(editor.body).attr("isChangeBg", "");
            } else {
              $(this).css("background-position", "");
              var breakPageLength = $(editor.body).find(".breakPage").length;
              for (var i = 0; i < breakPageLength; i++) {
                $($(editor.body).find(".breakPage")[i]).removeClass(
                  "changeBgColor"
                );
              }
              $(editor.body).attr("isChangeBg", "true");
            }
          };
        }
      };

      this.restore = function () {
        var me = this.editor;
        var scene = this.list[this.index];
        var root = UE.htmlparser(scene.content.replace(fillchar, ""));
        me.options.autoClearEmptyNode = false;
        me.filterInputRule(root);
        me.options.autoClearEmptyNode = orgState;
        //trace:873
        //去掉展位符
        me.document.body.innerHTML = root.toHtml();
        me.fireEvent("afterscencerestore");
        //处理undo后空格不展位的问题
        if (browser.ie) {
          utils.each(
            domUtils.getElementsByTagName(me.document, "td th caption p"),
            function (node) {
              if (domUtils.isEmptyNode(node)) {
                domUtils.fillNode(me.document, node);
              }
            }
          );
        }

        try {
          var rng = new dom.Range(me.document).moveToAddress(scene.address);
          rng.select(
            noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]
          );
        } catch (e) {}

        this.update();
        this.clearKey();
        //不能把自己reset了
        me.fireEvent("reset", true);
      };

      this.getScene = function (notSetCursor) {
        var me = this.editor;
        var rng = me.selection.getRange(),
          //restoreAddress = rng.createAddress(),
          rngAddress = rng.createAddress(false, true);
        me.fireEvent("beforegetscene");
        var root = UE.htmlparser(me.body.innerHTML, true);
        me.options.autoClearEmptyNode = false;
        me.filterOutputRule(root);
        me.options.autoClearEmptyNode = orgState;
        var cont = root.toHtml();
        browser.ie &&
          (cont = cont
            .replace(/>&nbsp;</g, "><")
            .replace(/\s*</g, "<")
            .replace(/>\s*/g, ">"));
        me.fireEvent("aftergetscene");
        try {
          //!notSetCursor && rng.moveToAddress(restoreAddress).select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);
        } catch (e) {}
        return {
          address: rngAddress,
          content: cont
        };
      };
      this.save = function (notCompareRange, notSetCursor) {
        clearTimeout(saveSceneTimer);
        var currentScene = this.getScene(notSetCursor),
          lastScene = this.list[this.index];
        //内容相同位置相同不存
        if (
          lastScene &&
          lastScene.content == currentScene.content &&
          (notCompareRange
            ? 1
            : compareRangeAddress(lastScene.address, currentScene.address))
        ) {
          return;
        }
        this.list = this.list.slice(0, this.index + 1);
        this.list.push(currentScene);
        //如果大于最大数量了，就把最前的剔除
        if (this.list.length > maxUndoCount) {
          this.list.shift();
        }
        this.index = this.list.length - 1;
        this.clearKey();
        //跟新undo/redo状态
        this.update();
      };
      this.update = function () {
        this.hasRedo = !!this.list[this.index + 1];
        this.hasUndo = !!this.list[this.index - 1];
      };
      this.reset = function () {
        this.list = [];
        this.index = 0;
        this.hasUndo = false;
        this.hasRedo = false;
        this.clearKey();
      };
      this.clearKey = function () {
        keycont = 0;
        lastKeyCode = null;
      };
    }

    me.undoManger = new UndoManager();
    me.undoManger.editor = me;
    function saveScene() {
      this.undoManger.save();
    }

    me.addListener("saveScene", function () {
      var args = Array.prototype.splice.call(arguments, 1);
      this.undoManger.save.apply(this.undoManger, args);
    });

    me.addListener("beforeexeccommand", saveScene);
    me.addListener("afterexeccommand", saveScene);

    me.addListener("reset", function (type, exclude) {
      if (!exclude) {
        this.undoManger.reset();
      }
    });
    me.commands["redo"] = me.commands["undo"] = {
      execCommand: function (cmdName) {
        this.undoManger[cmdName]();
      },
      queryCommandState: function (cmdName) {
        return this.undoManger[
          "has" + (cmdName.toLowerCase() == "undo" ? "Undo" : "Redo")
        ]
          ? 0
          : -1;
      },
      notNeedUndo: 1
    };

    var keys = {
        //  /*Backspace*/ 8:1, /*Delete*/ 46:1,
        /*Shift*/ 16: 1,
        /*Ctrl*/ 17: 1,
        /*Alt*/ 18: 1,
        37: 1,
        38: 1,
        39: 1,
        40: 1
      },
      keycont = 0,
      lastKeyCode;
    //输入法状态下不计算字符数
    var inputType = false;
    me.addListener("ready", function () {
      domUtils.on(this.body, "compositionstart", function () {
        inputType = true;
      });
      domUtils.on(this.body, "compositionend", function () {
        inputType = false;
      });
    });
    //快捷键
    me.addshortcutkey({
      Undo: "ctrl+90", //undo
      Redo: "ctrl+89" //redo
    });
    var isCollapsed = true;
    me.addListener("keydown", function (type, evt) {
      var me = this;
      var keyCode = evt.keyCode || evt.which;
      if (
        !keys[keyCode] &&
        !evt.ctrlKey &&
        !evt.metaKey &&
        !evt.shiftKey &&
        !evt.altKey
      ) {
        if (inputType) return;

        me.options.outerFunction.undoKeydownEvent &&
          me.options.outerFunction.undoKeydownEvent(keyCode);

        if (!me.selection.getRange().collapsed) {
          me.undoManger.save(false, true);
          isCollapsed = false;
          return;
        }

        if (me.undoManger.list.length == 0) {
          me.undoManger.save(true);
        }
        clearTimeout(saveSceneTimer);
        function save(cont) {
          if (cont.selection.getRange().collapsed)
            cont.fireEvent("contentchange");
          cont.undoManger.save(false, true);
          cont.fireEvent("selectionchange");
        }
        saveSceneTimer = setTimeout(function () {
          if (inputType) {
            var interalTimer = setInterval(function () {
              if (!inputType) {
                save(me);
                clearInterval(interalTimer);
              }
            }, 300);
            return;
          }
          save(me);
        }, 200);

        lastKeyCode = keyCode;
        keycont++;
        if (keycont >= maxInputCount) {
          save(me);
        }
      }
    });
    me.addListener("keyup", function (type, evt) {
      var keyCode = evt.keyCode || evt.which;
      if (
        !keys[keyCode] &&
        !evt.ctrlKey &&
        !evt.metaKey &&
        !evt.shiftKey &&
        !evt.altKey
      ) {
        if (inputType) return;
        if (!isCollapsed) {
          this.undoManger.save(false, true);
          isCollapsed = true;
        }
      }
    });
  };
  //undo.js end
  //justify.js start
  /**
   * @description 居左右中
   * @name baidu.editor.execCommand
   * @param   {String}   cmdName     justify执行对齐方式的命令
   * @param   {String}   align               对齐方式：left居左，right居右，center居中，justify两端对齐
   * @commands 段落格式,居左,居右,居中,两端对齐
   * @commandsName  JustifyLeft,JustifyCenter,JustifyRight,JustifyJustify
   * @commandsTitle  居左对齐,居中对齐,居右对齐,两端对齐
   */
  UE.plugins["justify"] = function () {
    //this.setOpt({'justify':[{'left':'居左对齐'},{'right':'居右对齐'},{'center':'居中对齐'},{'justify':'两端对齐'}]});
    this.setOpt({
      wordagejustify: {
        left: "居左对齐",
        center: "居中对齐",
        right: "居右对齐",
        justify: "两端对齐"
      }
    });
    var block = domUtils.isBlockElm,
      defaultValue = {
        left: 1,
        right: 1,
        center: 1,
        justify: 1
      },
      doJustify = function (range, style) {
        var bookmark = range.createBookmark(),
          filterFn = function (node) {
            return node.nodeType == 1
              ? node.tagName.toLowerCase() != "br" &&
                  !domUtils.isBookmarkNode(node)
              : !domUtils.isWhitespace(node);
          };

        range.enlarge(true);
        var bookmark2 = range.createBookmark(),
          current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
          tmpRange = range.cloneRange(),
          tmpNode;
        while (
          current &&
          !(
            domUtils.getPosition(current, bookmark2.end) &
            domUtils.POSITION_FOLLOWING
          )
        ) {
          if (current.nodeType == 3 || !block(current)) {
            tmpRange.setStartBefore(current);
            while (current && current !== bookmark2.end && !block(current)) {
              tmpNode = current;
              current = domUtils.getNextDomNode(
                current,
                false,
                null,
                function (node) {
                  return !block(node);
                }
              );
            }
            tmpRange.setEndAfter(tmpNode);
            var common = tmpRange.getCommonAncestor();

            // 视频和音频分开处理他的range
            if (
              (common && $(common).hasClass("audioDiv")) ||
              (common.tagName && common.tagName.toLowerCase() === "video") ||
              $(common).hasClass("netVideo")
            ) {
              common = $(common).parent()[0];
            }

            if (!domUtils.isBody(common) && block(common)) {
              domUtils.setStyles(
                common,
                utils.isString(style) ? { "text-align": style } : style
              );
              current = common;
            } else {
              var p = range.document.createElement("p");
              domUtils.setStyles(
                p,
                utils.isString(style) ? { "text-align": style } : style
              );
              var frag = tmpRange.extractContents();
              p.appendChild(frag);
              tmpRange.insertNode(p);
              current = p;
            }
            current = domUtils.getNextDomNode(current, false, filterFn);
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
      };
    UE.commands["justify"] = {
      execCommand: function (cmdName, align) {
        var range = this.selection.getRange(),
          txt;

        // 处理音频的range
        if (
          range &&
          range.startContainer &&
          $(range.startContainer).hasClass("music-mask")
        ) {
          var $ele = $(this.body).find(".audioDiv");
          range = range.selectNode($ele[0]).select();
        }
        // 处理视频通用代码上传的range
        // if(range && range.startContainer && $(range.startContainer).hasClass('netVideo_mask')){
        //     var $ele = $(this.body).find('.netVideo');
        //     range = range.selectNode($ele[0]).select();
        // }

        if (this.currentSelectedArr && this.currentSelectedArr.length > 0) {
          for (var i = 0, ti; (ti = this.currentSelectedArr[i++]); ) {
            if (domUtils.isEmptyNode(ti)) {
              txt = this.document.createTextNode("p");
              range
                .setStart(ti, 0)
                .collapse(true)
                .insertNode(txt)
                .selectNode(txt);
            } else {
              range.selectNodeContents(ti);
            }

            doJustify(range, align.toLowerCase());
            txt && domUtils.remove(txt);
          }
          range.selectNode(this.currentSelectedArr[0]).select();
        } else {
          //闭合时单独处理
          if (range.collapsed) {
            txt = this.document.createTextNode("p");
            range.insertNode(txt);
          }
          doJustify(range, align);
          if (txt) {
            range.setStartBefore(txt).collapse(true);
            domUtils.remove(txt);
          }

          range.select();
        }
        return true;
      },
      queryCommandValue: function () {
        var startNode = this.selection.getStart(),
          value = domUtils.getComputedStyle(startNode, "text-align");
        return defaultValue[value] ? value : "left";
      },
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      }
    };
  };
  //justify.js end
  //keystrokes.js start
  /*
   *   处理特殊键的兼容性问题
   */
  UE.plugins["keystrokes"] = function () {
    var me = this,
      flag = 0,
      keys = domUtils.keys,
      trans = {
        B: "strong",
        I: "em",
        FONT: "span"
      },
      sizeMap = [0, 10, 12, 16, 18, 24, 32, 48],
      listStyle = {
        OL: [
          "decimal",
          "lower-alpha",
          "lower-roman",
          "upper-alpha",
          "upper-roman"
        ],

        UL: ["circle", "disc", "square"]
      };
    me.addListener("keydown", function (type, evt) {
      var keyCode = evt.keyCode || evt.which;

      if (this.selectAll) {
        this.selectAll = false;
        if (keyCode == 8 || keyCode == 46) {
          me.undoManger && me.undoManger.save();
          //trace:1633
          me.body.innerHTML = "<p>" + (browser.ie ? "" : "<br/>") + "</p>";

          new dom.Range(me.document)
            .setStart(me.body.firstChild, 0)
            .setCursor(false, true);
          me.undoManger && me.undoManger.save();
          //todo 对性能会有影响
          browser.ie && me._selectionChange();
          domUtils.preventDefault(evt);
          return;
        }
      }

      //处理backspace/del
      if (keyCode == 8) {
        //|| keyCode == 46
        // debugger
        var range = me.selection.getRange(),
          tmpRange,
          start,
          end;

        start = range.startContainer;
        if (
          start.tagName == "SPAN" &&
          start.className == "J_hoverImageParent"
        ) {
          me.undoManger && me.undoManger.save();
          domUtils.remove(start);
          domUtils.preventDefault(evt);
          return;
        }
        // 第一行设置文字样式之后，换行，上一行即使回退也依然保留文本样式
        if (
          $(start).parent()[0].tagName == "P" &&
          $(start).parent().context.nodeName == "SPAN"
        ) {
          $(start).parent()[0].innerHTML = $(start).parent().context.outerHTML;
        }
        //当删除到body最开始的位置时，会删除到body,阻止这个动作
        if (range.collapsed) {
          start = range.startContainer;
          //有可能是展位符号
          if (domUtils.isWhitespace(start)) {
            start = start.parentNode;
          }
          if (domUtils.isEmptyNode(start) && start === me.body.firstChild) {
            if (start.tagName != "P") {
              p = me.document.createElement("p");
              me.body.insertBefore(p, start);
              domUtils.fillNode(me.document, p);
              range.setStart(p, 0).setCursor(false, true);
              //trace:1645
              domUtils.remove(start);
            }
            domUtils.preventDefault(evt);
            return;
          }
        }

        if (
          range.collapsed &&
          range.startContainer.nodeType == 3 &&
          range.startContainer.nodeValue.replace(
            new RegExp(domUtils.fillChar, "g"),
            ""
          ).length == 0
        ) {
          range.setStartBefore(range.startContainer).collapse(true);
        }
        //解决选中control元素不能删除的问题
        if ((start = range.getClosedNode())) {
          me.undoManger && me.undoManger.save();
          range.setStartBefore(start);
          domUtils.remove(start);
          range.setCursor();
          me.undoManger && me.undoManger.save();
          domUtils.preventDefault(evt);
          return;
        }
        //阻止在table上的删除
        if (!browser.ie) {
          start = domUtils.findParentByTagName(
            range.startContainer,
            "table",
            true
          );
          end = domUtils.findParentByTagName(range.endContainer, "table", true);
          if ((start && !end) || (!start && end) || start !== end) {
            evt.preventDefault();
            return;
          }
          //表格里回车，删除时，光标被定位到了p外边，导致多次删除才能到上一行，这里的处理忘记是为什么，暂时注视掉
          //解决trace:1966的问题
          //if (browser.webkit && range.collapsed && start) {
          //    tmpRange = range.cloneRange().txtToElmBoundary();
          //    start = tmpRange.startContainer;
          //           debugger
          //    if (domUtils.isBlockElm(start) && !dtd.$tableContent[start.tagName] && !domUtils.getChildCount(start, function(node) {
          //        return node.nodeType == 1 ? node.tagName !== 'BR' : 1;
          //    })) {
          //
          //        tmpRange.setStartBefore(start).setCursor();
          //        domUtils.remove(start, true);
          //        evt.preventDefault();
          //        return;
          //    }
          //}
        }

        if (me.undoManger) {
          if (!range.collapsed) {
            me.undoManger.save();
            flag = 1;
          }
        }
      }
      //处理tab键的逻辑
      if (keyCode == 9) {
        range = me.selection.getRange();
        me.undoManger && me.undoManger.save();

        for (
          var i = 0,
            txt = "",
            tabSize = me.options.tabSize || 4,
            tabNode = me.options.tabNode || "&nbsp;";
          i < tabSize;
          i++
        ) {
          txt += tabNode;
        }
        var span = me.document.createElement("span");
        span.innerHTML = txt;
        if (range.collapsed) {
          var li = domUtils.findParentByTagName(
            range.startContainer,
            "li",
            true
          );

          if (li && domUtils.isStartInblock(range)) {
            bk = range.createBookmark();
            var parentLi = li.parentNode,
              list = me.document.createElement(parentLi.tagName);
            var index = utils.indexOf(
              listStyle[list.tagName],
              domUtils.getComputedStyle(parentLi, "list-style-type")
            );
            index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
            domUtils.setStyle(
              list,
              "list-style-type",
              listStyle[list.tagName][index]
            );

            parentLi.insertBefore(list, li);
            list.appendChild(li);
            range.moveToBookmark(bk).select();
          } else {
            range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
          }
        } else {
          //处理table
          start = domUtils.findParentByTagName(
            range.startContainer,
            "table",
            true
          );
          end = domUtils.findParentByTagName(range.endContainer, "table", true);
          if (start || end) {
            evt.preventDefault
              ? evt.preventDefault()
              : (evt.returnValue = false);
            return;
          }
          //处理列表 再一个list里处理
          start = domUtils.findParentByTagName(
            range.startContainer,
            ["ol", "ul"],
            true
          );
          end = domUtils.findParentByTagName(
            range.endContainer,
            ["ol", "ul"],
            true
          );
          if (start && end && start === end) {
            var bk = range.createBookmark();
            start = domUtils.findParentByTagName(
              range.startContainer,
              "li",
              true
            );
            end = domUtils.findParentByTagName(range.endContainer, "li", true);
            //在开始单独处理
            if (start === start.parentNode.firstChild) {
              var parentList = me.document.createElement(
                start.parentNode.tagName
              );

              start.parentNode.parentNode.insertBefore(
                parentList,
                start.parentNode
              );
              parentList.appendChild(start.parentNode);
            } else {
              parentLi = start.parentNode;
              list = me.document.createElement(parentLi.tagName);

              index = utils.indexOf(
                listStyle[list.tagName],
                domUtils.getComputedStyle(parentLi, "list-style-type")
              );
              index =
                index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
              domUtils.setStyle(
                list,
                "list-style-type",
                listStyle[list.tagName][index]
              );
              start.parentNode.insertBefore(list, start);
              var nextLi;
              while (start !== end) {
                nextLi = start.nextSibling;
                list.appendChild(start);
                start = nextLi;
              }
              list.appendChild(end);
            }
            range.moveToBookmark(bk).select();
          } else {
            if (start || end) {
              evt.preventDefault
                ? evt.preventDefault()
                : (evt.returnValue = false);
              return;
            }
            //普通的情况
            start = domUtils.findParent(range.startContainer, filterFn);
            end = domUtils.findParent(range.endContainer, filterFn);
            if (start && end && start === end) {
              range.deleteContents();
              range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
            } else {
              var bookmark = range.createBookmark(),
                filterFn = function (node) {
                  return domUtils.isBlockElm(node);
                };

              range.enlarge(true);
              var bookmark2 = range.createBookmark(),
                current = domUtils.getNextDomNode(
                  bookmark2.start,
                  false,
                  filterFn
                );

              while (
                current &&
                !(
                  domUtils.getPosition(current, bookmark2.end) &
                  domUtils.POSITION_FOLLOWING
                )
              ) {
                current.insertBefore(
                  span.cloneNode(true).firstChild,
                  current.firstChild
                );

                current = domUtils.getNextDomNode(current, false, filterFn);
              }

              range.moveToBookmark(bookmark2).moveToBookmark(bookmark).select();
            }
          }
        }
        me.undoManger && me.undoManger.save();
        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
      }
      //trace:1634
      //ff的del键在容器空的时候，也会删除
      if (browser.gecko && keyCode == 46) {
        range = me.selection.getRange();
        if (range.collapsed) {
          start = range.startContainer;
          if (domUtils.isEmptyBlock(start)) {
            var parent = start.parentNode;
            while (
              domUtils.getChildCount(parent) == 1 &&
              !domUtils.isBody(parent)
            ) {
              start = parent;
              parent = parent.parentNode;
            }
            if (start === parent.lastChild) evt.preventDefault();
            return;
          }
        }
      }

      //中文空格
      //console.log(keyCode);
      //问题：微软自带的输入法有点问题，按下键盘的时候内容已经变化了，但range还是原来的那个，记下来显
      if (keyCode == 32) {
        var range = this.selection.getRange(),
          startContainer = range.startContainer,
          startContainerNode =
            startContainer.parentNode &&
            startContainer.parentNode.nodeName == "BODY"
              ? startContainer
              : startContainer.parentNode,
          startContainerNodeValue = browser.ie
            ? startContainerNode.innerText
              ? startContainerNode.innerText.replace(/\n\r/g, "")
              : startContainerNode.nodeValue
            : startContainerNode.textContent,
          reg_zh = /[\u4E00-\u9FA5]/g,
          startOffset = range.startOffset;
        if (startContainerNodeValue != null && startContainerNodeValue != "") {
          var subNextStr = startContainerNodeValue.substring(
            startOffset,
            startOffset + 1
          );
          var subPreStr = startContainerNodeValue.substring(
            startOffset - 1,
            startOffset
          );

          if (reg_zh.test(subNextStr) || reg_zh.test(subPreStr)) {
            me.execCommand("inserthtml", "　");
            if (evt.preventDefault) {
              evt.preventDefault();
            } else {
              evt.returnValue = false;
            }
          }
        } else if (startContainerNode && startContainerNode.previousSibling) {
          var previousNodeText =
            startContainerNode.previousSibling[
              browser.ie ? "innerText" : "textContent"
            ];
          if (previousNodeText) {
            var previousNextStr = previousNodeText.substring(
              previousNodeText.length - 1,
              previousNodeText.length
            );
            if (reg_zh.test(previousNextStr)) {
              me.execCommand("inserthtml", "　");
              if (evt.preventDefault) {
                evt.preventDefault();
              } else {
                evt.returnValue = false;
              }
            }
          }
        }
      }
    });
    me.addListener("keyup", function (type, evt) {
      var keyCode = evt.keyCode || evt.which;

      //修复ie/chrome <strong><em>x|</em></strong> 当点退格后在输入文字后会出现  <b><i>x</i></b>
      if (
        !browser.gecko &&
        !keys[keyCode] &&
        !evt.ctrlKey &&
        !evt.metaKey &&
        !evt.shiftKey &&
        !evt.altKey
      ) {
        range = me.selection.getRange();
        if (range.collapsed) {
          var start = range.startContainer,
            isFixed = 0;

          while (!domUtils.isBlockElm(start)) {
            if (
              start.nodeType == 1 &&
              utils.indexOf(["FONT", "B", "I"], start.tagName) != -1
            ) {
              var tmpNode = me.document.createElement(trans[start.tagName]);
              if (start.tagName == "FONT") {
                //chrome only remember color property
                tmpNode.style.cssText =
                  (start.getAttribute("size")
                    ? "font-size:" +
                      (sizeMap[start.getAttribute("size")] || 12) +
                      "px"
                    : "") +
                  ";" +
                  (start.getAttribute("color")
                    ? "color:" + start.getAttribute("color")
                    : "") +
                  ";" +
                  (start.getAttribute("face")
                    ? "font-family:" + start.getAttribute("face")
                    : "") +
                  ";" +
                  start.style.cssText;
              }
              while (start.firstChild) {
                tmpNode.appendChild(start.firstChild);
              }
              start.parentNode.insertBefore(tmpNode, start);
              domUtils.remove(start);
              if (!isFixed) {
                range.setEnd(tmpNode, tmpNode.childNodes.length).collapse(true);
              }
              start = tmpNode;
              isFixed = 1;
            }
            start = start.parentNode;
          }

          isFixed && range.select();
        }
      }

      if (keyCode == 8) {
        //|| keyCode == 46
        //针对ff下在列表首行退格，不能删除空格行的问题
        if (browser.gecko) {
          for (
            var i = 0, li, lis = domUtils.getElementsByTagName(this.body, "li");
            (li = lis[i++]);

          ) {
            if (domUtils.isEmptyNode(li) && !li.previousSibling) {
              var liOfPn = li.parentNode;
              domUtils.remove(li);
              if (domUtils.isEmptyNode(liOfPn)) {
                domUtils.remove(liOfPn);
              }
            }
          }
        }

        var range,
          start,
          parent,
          tds = this.currentSelectedArr;
        if (tds && tds.length > 0) {
          for (var i = 0, ti; (ti = tds[i++]); ) {
            ti.innerHTML = browser.ie
              ? browser.version < 9
                ? "&#65279"
                : ""
              : "<br/>";
          }
          range = new dom.Range(this.document);
          range.setStart(tds[0], 0).setCursor();
          if (flag) {
            me.undoManger.save();
            flag = 0;
          }
          //阻止chrome执行默认的动作
          if (browser.webkit) {
            evt.preventDefault();
          }
          return;
        }

        range = me.selection.getRange();

        //ctrl+a 后全部删除做处理
        //
        //if (domUtils.isEmptyBlock(me.body) && !range.startOffset) {
        //    //trace:1633
        //    me.body.innerHTML = '<p>'+(browser.ie ? '&nbsp;' : '<br/>')+'</p>';
        //    range.setStart(me.body.firstChild,0).setCursor(false,true);
        //    me.undoManger && me.undoManger.save();
        //    //todo 对性能会有影响
        //    browser.ie && me._selectionChange();
        //    return;
        //}

        //处理删除不干净的问题

        start = range.startContainer;
        if (domUtils.isWhitespace(start)) {
          start = start.parentNode;
        }
        //标志位防止空的p无法删除
        var removeFlag = 0;
        while (
          start.nodeType == 1 &&
          domUtils.isEmptyNode(start) &&
          dtd.$removeEmpty[start.tagName]
        ) {
          removeFlag = 1;
          parent = start.parentNode;
          domUtils.remove(start);
          start = parent;
        }

        if (removeFlag && start.nodeType == 1 && domUtils.isEmptyNode(start)) {
          //ie下的问题，虽然没有了相应的节点但一旦你输入文字还是会自动把删除的节点加上，
          if (browser.ie) {
            var span = range.document.createElement("span");
            start.appendChild(span);
            range.setStart(start, 0).setCursor();
            //for ie
            li = domUtils.findParentByTagName(start, "li", true);
            if (li) {
              var next = li.nextSibling;
              while (next) {
                if (domUtils.isEmptyBlock(next)) {
                  li = next;
                  next = next.nextSibling;
                  domUtils.remove(li);
                  continue;
                }
                break;
              }
            }
          } else {
            start.innerHTML = "<br/>";
            range.setStart(start, 0).setCursor(false, true);
          }

          setTimeout(function () {
            if (browser.ie) {
              domUtils.remove(span);
            }

            if (flag) {
              me.undoManger.save();
              flag = 0;
            }
          }, 0);
        } else {
          if (flag) {
            me.undoManger.save();
            flag = 0;
          }
        }
      }

      // 处理使用方向键移动光标时直接跳过整个hover换图元素
      //暂时不加处理这部分。因为会导致按住shift + 方向键进行选中的其他问题，先注释。
      /* if (keyCode == 37 || keyCode == 39) {
                var range = me.selection.getRange();
                if ( range.startContainer.className == "J_hoverImageParent" ) {
                    switch ( keyCode ) {
                        case 37:
                            range.setCursor(false, false);
                            break;
                        case 39:
                            range.setCursor(false, f);
                            break;
                        default:
                            break;
                    }
                }
            }*/
    });
  };
  //keystrokes.js end
  //font.js start
  /**
     * @description 字体
     * @name baidu.editor.execCommand
     * @param {String}     cmdName    执行的功能名称
     * @param {String}    value             传入的值
     * @commands 字体颜色,背景色,字号,字体,下划线,删除线
     * @commandsName  ForeColor,BackColor,FontSize,FontFamily,Underline,StrikeThrough
     * @commandsTitle  字体颜色,背景色,字号,字体,下划线,删除线
     * @example
     * ```javascript
     * editor.execCommand( 'forecolor', '#000' );
       editor.queryCommandValue( 'forecolor' );
     * ```
     */
  //,{n:'Arial'},{n:'Arial Narrow'},{n:'Arial Black'},{n:'Comic Sans MS'},{n:'Courier New'},{n:'System'},{n:'Times New Roman'},{n:'Tahoma'},{n:'Verdana'}
  UE.plugins["font"] = function () {
    var me = this,
      fonts = {
        forecolor: "color",
        backcolor: "background-color",
        fontsize: "font-size",
        fontfamily: "font-family",
        underline: "text-decoration",
        strikethrough: "text-decoration"
      };

    me.options.fontfamily = me.options.fontfamily || me.getLang("fontfamily");

    me.setOpt({ fontsize: [12, 14, 16, 18, 20, 22, 24, 30, 36, 48, 60, 72] });

    for (var p in fonts) {
      (function (cmd, style) {
        UE.commands[cmd] = {
          execCommand: function (cmdName, value) {
            value =
              value ||
              (this.queryCommandState(cmdName)
                ? "none"
                : cmdName == "underline"
                ? "underline"
                : "line-through");
            var me = this,
              range = this.selection.getRange(),
              text;

            if (value == "default") {
              if (range.collapsed) {
                text = me.document.createTextNode("font");
                range.insertNode(text).select();
              }
              me.execCommand("removeFormat", "span,a", style);
              if (text) {
                range.setStartBefore(text).setCursor();
                domUtils.remove(text);
              }
            } else {
              if (me.currentSelectedArr && me.currentSelectedArr.length > 0) {
                for (var i = 0, ci; (ci = me.currentSelectedArr[i++]); ) {
                  range.selectNodeContents(ci);
                  range.applyInlineStyle("span", {
                    style: style + ":" + value
                  });
                }
                range.selectNodeContents(this.currentSelectedArr[0]).select();
              } else {
                if (!range.collapsed) {
                  if (
                    (cmd == "underline" || cmd == "strikethrough") &&
                    me.queryCommandValue(cmd)
                  ) {
                    me.execCommand("removeFormat", "span,a", style);
                  }
                  range = me.selection.getRange();
                  // $(range.startContainer).css(style,value)
                  range
                    .applyInlineStyle("span", { style: style + ":" + value })
                    .select();
                  // 同步文本所在行的行高
                  var emValue = 1.5 + (parseInt(value) - 12) / 10 + "em";
                  range.startContainer.tagName == "P" &&
                    $(range.startContainer).css("line-height", emValue);
                  range.endContainer.tagName == "P" &&
                    $(range.endContainer).css("line-height", emValue);
                  if (
                    range.endContainer != range.startContainer &&
                    $(range.startContainer).nextUntil($(range.endContainer))
                      .length
                  ) {
                    for (
                      var i = 0;
                      i <
                      $(range.startContainer).nextUntil($(range.endContainer))
                        .length;
                      i++
                    ) {
                      $(
                        $(range.startContainer).nextUntil(
                          $(range.endContainer)
                        )[i]
                      ).css("line-height", emValue);
                    }
                  }
                  // console.log(range.endContainer)

                  // 列表存在时，改变第一个文本的字体大小时列表也要改变
                  if (
                    range.startOffset == 0 &&
                    $(range.startContainer).parents("li").length
                  ) {
                    $(range.startContainer)
                      .parents("li")
                      .css("font-size", value);
                    $(range.startContainer).parents("ul").length &&
                      $(range.startContainer)
                        .parents("ul")
                        .css("padding-left", parseInt(value) * 1.5 + "px");
                    $(range.startContainer).parents("ol").length &&
                      $(range.startContainer)
                        .parents("ol")
                        .css("padding-left", parseInt(value) * 1.5 + "px");
                  }
                } else {
                  var span = domUtils.findParentByTagName(
                    range.startContainer,
                    "span",
                    true
                  );
                  text = me.document.createTextNode("font");
                  if (
                    span &&
                    !span.children.length &&
                    !span[browser.ie ? "innerText" : "textContent"].replace(
                      fillCharReg,
                      ""
                    ).length
                  ) {
                    //for ie hack when enter
                    range.insertNode(text);
                    if (cmd == "underline" || cmd == "strikethrough") {
                      range.selectNode(text).select();
                      me.execCommand("removeFormat", "span,a", style, null);

                      span = domUtils.findParentByTagName(text, "span", true);
                      range.setStartBefore(text);
                    }
                    span.style.cssText += ";" + style + ":" + value;
                    range.collapse(true).select();
                  } else {
                    range.insertNode(text);
                    range.selectNode(text).select();
                    span = range.document.createElement("span");

                    if (cmd == "underline" || cmd == "strikethrough") {
                      //a标签内的不处理跳过
                      if (domUtils.findParentByTagName(text, "a", true)) {
                        range.setStartBefore(text).setCursor();
                        domUtils.remove(text);
                        return;
                      }
                      me.execCommand("removeFormat", "span,a", style);
                    }

                    span.style.cssText = style + ":" + value;

                    text.parentNode.insertBefore(span, text);
                    //修复，span套span 但样式不继承的问题
                    if (!browser.ie || (browser.ie && browser.version == 9)) {
                      var spanParent = span.parentNode;
                      while (!domUtils.isBlockElm(spanParent)) {
                        if (spanParent.tagName == "SPAN") {
                          //opera合并style不会加入";"
                          span.style.cssText =
                            spanParent.style.cssText + ";" + span.style.cssText;
                        }
                        spanParent = spanParent.parentNode;
                      }
                    }

                    if (opera) {
                      setTimeout(function () {
                        range.setStart(span, 0).setCursor();
                      });
                    } else {
                      range.setStart(span, 0).setCursor();
                    }

                    //trace:981
                    //domUtils.mergToParent(span)
                  }
                  domUtils.remove(text);
                }
              }
            }
            return true;
          },
          queryCommandValue: function (cmdName) {
            var startNode = this.selection.getStart();

            //trace:946
            if (cmdName == "underline" || cmdName == "strikethrough") {
              var tmpNode = startNode,
                value;
              while (
                tmpNode &&
                !domUtils.isBlockElm(tmpNode) &&
                !domUtils.isBody(tmpNode)
              ) {
                if (tmpNode.nodeType == 1) {
                  value = domUtils.getComputedStyle(tmpNode, style);

                  //if(value != 'none'){        //谷歌:"none solid rgb(0, 0, 238)"
                  //    return value;
                  //}
                  if (!/none/.test(value)) {
                    return value;
                  }
                }

                tmpNode = tmpNode.parentNode;
              }
              return "none";
            }
            return domUtils.getComputedStyle(startNode, style);
          },
          queryCommandState: function (cmdName) {
            if (this.highlight) {
              return -1;
            }
            if (!(cmdName == "underline" || cmdName == "strikethrough")) {
              return 0;
            }
            var val = this.queryCommandValue(cmdName);
            return cmdName == "underline"
              ? /underline/.test(val)
              : /line\-through/.test(val); //a标签的返回值不是 underline，所以用匹配
            //return this.queryCommandValue(cmdName) == (cmdName == 'underline' ? 'underline' : 'line-through');
          }
        };
      })(p, fonts[p]);
    }
  };
  //font.js end
  //link.js start
  ///commands 超链接,取消链接
  ///commandsName  Link,Unlink
  ///commandsTitle  超链接,取消链接
  ///commandsDialog  dialogs\link\link.html
  /**
   * 超链接
   * @function
   * @name baidu.editor.execCommand
   * @param   {String}   cmdName     link插入超链接
   * @param   {Object}  options         url地址，title标题，target是否打开新页
   * @author zhanyi
   */
  /**
   * 返回当前选中的第一个超链接节点
   * @command link
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { Element } 超链接节点
   * @example
   * ```javascript
   * editor.queryCommandValue( 'link' );
   * ```
   */
  /**
   * 取消链接
   * @function
   * @name baidu.editor.execCommand
   * @param   {String}   cmdName     unlink取消链接
   * @author zhanyi
   */
  UE.plugins["link"] = function () {
    function optimize(range) {
      var start = range.startContainer,
        end = range.endContainer;

      if ((start = domUtils.findParentByTagName(start, "a", true))) {
        range.setStartBefore(start);
      }
      if ((end = domUtils.findParentByTagName(end, "a", true))) {
        range.setEndAfter(end);
      }
    }

    UE.commands["unlink"] = {
      execCommand: function () {
        var as,
          range = new dom.Range(this.document),
          tds = this.currentSelectedArr,
          bookmark;
        if (tds && tds.length > 0) {
          for (var i = 0, ti; (ti = tds[i++]); ) {
            as = domUtils.getElementsByTagName(ti, "a");
            for (var j = 0, aj; (aj = as[j++]); ) {
              domUtils.remove(aj, true);
            }
          }
          if (domUtils.isEmptyNode(tds[0])) {
            range.setStart(tds[0], 0).setCursor();
          } else {
            range.selectNodeContents(tds[0]).select();
          }
        } else {
          range = this.selection.getRange();

          if (
            range.collapsed &&
            !domUtils.findParentByTagName(range.startContainer, "a", true)
          ) {
            return;
          }

          bookmark = range.createBookmark();
          optimize(range);
          range.removeInlineStyle("a").moveToBookmark(bookmark).select();

          optimize((range = range.adjustmentBoundary()));
          // var start = range.startContainer;
          // start = start.childNodes[range.startOffset];

          /*if($(start).parent().parent().is('strong')){
                        if($(start).parent().is('span')){
                            var inlineHtml = $(start).parent().html();
                            $(start).parent().parent().replaceWith(inlineHtml);
                        }
                    }else if($(start).parent().is('span')){
                        var inlineHtml = $(start).parent().html();
                        $(start).parent().replaceWith(inlineHtml);
                    }*/
        }
      },
      queryCommandState: function () {
        return !this.highlight && this.queryCommandValue("link") ? 0 : -1;
      }
    };

    function doLink(range, opt) {
      optimize((range = range.adjustmentBoundary()));
      var start = range.startContainer;
      if (start.nodeType == 1) {
        start = start.childNodes[range.startOffset];
        if (
          start &&
          start.nodeType == 1 &&
          start.tagName == "A" &&
          /^(?:https?|ftp|file)\s*:\s*\/\//.test(
            start[browser.ie ? "innerText" : "textContent"]
          )
        ) {
          start[browser.ie ? "innerText" : "textContent"] = utils.html(
            opt.textValue || opt.href
          );
        }
      }
      range.removeInlineStyle("a");
      if (range.collapsed) {
        var a = range.document.createElement("a"),
          text = "";
        if (opt.textValue) {
          text = utils.html(opt.textValue);
          delete opt.textValue;
        } else {
          text = utils.html(opt.href);
        }
        domUtils.setAttributes(a, opt);
        range.insertNode(a);
        a[browser.ie ? "innerText" : "textContent"] = text;
        range.selectNode(a);
      } else {
        range.applyInlineStyle("a", opt);
      }

      this.execCommand("hoverchangeimage");
    }

    UE.commands["link"] = {
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      },
      execCommand: function (cmdName, opt) {
        var range = new dom.Range(this.document),
          tds = this.currentSelectedArr;

        opt.data_ue_src &&
          (opt.data_ue_src = utils.unhtml(opt.data_ue_src, /[<">]/g)); //"
        opt.href && (opt.href = utils.unhtml(opt.href, /[<">]/g)); //"
        opt.textValue &&
          (opt.textValue = utils.unhtml(opt.textValue, /[<">]/g)); //"
        if (tds && tds.length) {
          for (var i = 0, ti; (ti = tds[i++]); ) {
            if (domUtils.isEmptyNode(ti)) {
              ti[browser.ie ? "innerText" : "textContent"] = utils.html(
                opt.textValue || opt.href
              );
            }
            doLink.call(this, range.selectNodeContents(ti), opt);
          }
          range.selectNodeContents(tds[0]).select();
        } else {
          doLink.call(this, (range = this.selection.getRange()), opt);
          //闭合都不加占位符，如果加了会在a后边多个占位符节点，导致a是图片背景组成的列表，出现空白问题
          range.collapse().select(true);
        }
      },
      queryCommandValue: function () {
        var range = new dom.Range(this.document),
          tds = this.currentSelectedArr,
          as,
          node;
        if (tds && tds.length) {
          for (var i = 0, ti; (ti = tds[i++]); ) {
            as = ti.getElementsByTagName("a");
            if (as[0]) {
              return as[0];
            }
          }
        } else {
          range = this.selection.getRange();

          if (range.collapsed) {
            node = this.selection.getStart();
            if (
              node &&
              (node = domUtils.findParentByTagName(node, "a", true))
            ) {
              return node;
            }
          } else {
            //trace:1111  如果是<p><a>xx</a></p> startContainer是p就会找不到a
            range.shrinkBoundary();
            var start =
                range.startContainer.nodeType == 3 ||
                !range.startContainer.childNodes[range.startOffset]
                  ? range.startContainer
                  : range.startContainer.childNodes[range.startOffset],
              end =
                range.endContainer.nodeType == 3 || range.endOffset == 0
                  ? range.endContainer
                  : range.endContainer.childNodes[range.endOffset - 1],
              common = range.getCommonAncestor();

            node = domUtils.findParentByTagName(common, "a", true);
            if (!node && common.nodeType == 1) {
              var as = common.getElementsByTagName("a"),
                ps,
                pe;

              for (var i = 0, ci; (ci = as[i++]); ) {
                (ps = domUtils.getPosition(ci, start)),
                  (pe = domUtils.getPosition(ci, end));
                if (
                  (ps & domUtils.POSITION_FOLLOWING ||
                    ps & domUtils.POSITION_CONTAINS) &&
                  (pe & domUtils.POSITION_PRECEDING ||
                    pe & domUtils.POSITION_CONTAINS)
                ) {
                  node = ci;
                  break;
                }
              }
            }

            return node;
          }
        }
      }
    };
  };
  //link.js end
  //removeformat.js start
  ///commands 清除格式
  ///commandsName  RemoveFormat
  ///commandsTitle  清除格式
  /**
   * @description 清除格式
   * @name baidu.editor.execCommand
   * @param   {String}   cmdName     removeformat清除格式命令
   * @param   {String}   tags                以逗号隔开的标签。如：span,a
   * @param   {String}   style               样式
   * @param   {String}   attrs               属性
   * @param   {String}   notIncluedA    是否把a标签切开
   */
  UE.plugins["removeformat"] = function () {
    var me = this;

    me.setOpt({
      removeFormatTags:
        "b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var",
      removeFormatAttributes:
        "class,style,lang,width,height,align,hspace,valign",
      removeformatSelect: ["清除选中样式", "清除全部样式", "清除全部链接"]
    });

    me.commands["removeformat"] = {
      execCommand: function (
        cmdName,
        tags,
        style,
        attrs,
        notIncludeA,
        removeType
      ) {
        var tagReg = new RegExp(
            "^(?:" +
              (tags || this.options.removeFormatTags).replace(/,/g, "|") +
              ")$",
            "i"
          ),
          removeFormatAttributes = style
            ? []
            : (attrs || this.options.removeFormatAttributes).split(","),
          range = new dom.Range(this.document),
          bookmark,
          node,
          parent,
          filter = function (node) {
            return node.nodeType == 1;
          };

        function isRedundantSpan(node) {
          if (node.nodeType == 3 || node.tagName.toLowerCase() != "span") {
            return 0;
          }
          if (browser.ie) {
            //ie 下判断实效，所以只能简单用style来判断
            //return node.style.cssText == '' ? 1 : 0;
            var attrs = node.attributes;
            if (attrs.length) {
              for (var i = 0, l = attrs.length; i < l; i++) {
                if (attrs[i].specified) {
                  return 0;
                }
              }
              return 1;
            }
          }
          return !node.attributes.length;
        }
        function doRemove(range) {
          var bookmark1 = range.createBookmark();
          if (range.collapsed) {
            range.enlarge(true);
          }

          //不能把a标签切了
          if (!notIncludeA) {
            var aNode = domUtils.findParentByTagName(
              range.startContainer,
              "a",
              true
            );
            if (aNode) {
              range.setStartBefore(aNode);
            }

            aNode = domUtils.findParentByTagName(range.endContainer, "a", true);
            if (aNode) {
              range.setEndAfter(aNode);
            }
          }

          bookmark = range.createBookmark();

          node = bookmark.start;

          //切开始
          while ((parent = node.parentNode) && !domUtils.isBlockElm(parent)) {
            domUtils.breakParent(node, parent);

            domUtils.clearEmptySibling(node);
          }
          if (bookmark.end) {
            //切结束
            node = bookmark.end;
            while ((parent = node.parentNode) && !domUtils.isBlockElm(parent)) {
              domUtils.breakParent(node, parent);
              domUtils.clearEmptySibling(node);
            }

            //开始去除样式
            var current = domUtils.getNextDomNode(
                bookmark.start,
                false,
                filter
              ),
              next;
            while (current) {
              if (current == bookmark.end) {
                break;
              }

              next = domUtils.getNextDomNode(current, true, filter);

              if (
                !dtd.$empty[current.tagName.toLowerCase()] &&
                !domUtils.isBookmarkNode(current)
              ) {
                if (tagReg.test(current.tagName)) {
                  if (style) {
                    domUtils.removeStyle(current, style);
                    if (
                      isRedundantSpan(current) &&
                      style != "text-decoration"
                    ) {
                      domUtils.remove(current, true);
                    }
                  } else {
                    domUtils.remove(current, true);
                  }
                } else {
                  //trace:939  不能把list上的样式去掉
                  if (
                    !dtd.$tableContent[current.tagName] &&
                    !dtd.$list[current.tagName]
                  ) {
                    domUtils.removeAttributes(current, removeFormatAttributes);
                    if (isRedundantSpan(current)) {
                      domUtils.remove(current, true);
                    }
                  }
                }
              }
              current = next;
            }
          }
          if (
            me.container.getAttribute("isfullscreen") !== "fullScreen" ||
            removeType !== "清除全部样式"
          ) {
            //trace:1035
            //trace:1096 不能把td上的样式去掉，比如边框
            var pN = bookmark.start.parentNode;
            if (
              domUtils.isBlockElm(pN) &&
              !dtd.$tableContent[pN.tagName] &&
              !dtd.$list[pN.tagName]
            ) {
              domUtils.removeAttributes(pN, removeFormatAttributes);
            }
            pN = bookmark.end.parentNode;
            if (
              bookmark.end &&
              domUtils.isBlockElm(pN) &&
              !dtd.$tableContent[pN.tagName] &&
              !dtd.$list[pN.tagName]
            ) {
              domUtils.removeAttributes(pN, removeFormatAttributes);
            }
            range.moveToBookmark(bookmark).moveToBookmark(bookmark1);
            //清除冗余的代码 <b><bookmark></b>
            var node = range.startContainer,
              tmp,
              collapsed = range.collapsed;
            while (
              node.nodeType == 1 &&
              domUtils.isEmptyNode(node) &&
              dtd.$removeEmpty[node.tagName]
            ) {
              tmp = node.parentNode;
              range.setStartBefore(node);
              //trace:937
              //更新结束边界
              if (range.startContainer === range.endContainer) {
                range.endOffset--;
              }
              domUtils.remove(node);
              node = tmp;
            }

            if (!collapsed) {
              node = range.endContainer;
              while (
                node.nodeType == 1 &&
                domUtils.isEmptyNode(node) &&
                dtd.$removeEmpty[node.tagName]
              ) {
                tmp = node.parentNode;
                range.setEndBefore(node);
                domUtils.remove(node);

                node = tmp;
              }
            }
          } else {
            range.moveToBookmark(bookmark).moveToBookmark(bookmark1);
          }
        }

        if (this.currentSelectedArr && this.currentSelectedArr.length) {
          for (var i = 0, ci; (ci = this.currentSelectedArr[i++]); ) {
            range.selectNodeContents(ci);
            doRemove(range);
          }
          range.selectNodeContents(this.currentSelectedArr[0]).select();
        } else {
          /*range = this.selection.getRange();
                    doRemove( range );
                    range.select();*/

          if (removeType == "清除全部样式") {
            if (this.container.getAttribute("isfullscreen") == "fullScreen") {
              var body = $(this.body).find(".breakPage")[0],
                range = this.selection.getRange();
            } else {
              var body = this.body,
                range = this.selection.getRange();
            }
            range.selectNodeContents(body);
            if (domUtils.isEmptyBlock(body)) {
              //opera不能自动合并到元素的里边，要手动处理一下
              if (
                browser.opera &&
                body.firstChild &&
                body.firstChild.nodeType == 1
              ) {
                range.setStartAtFirst(body.firstChild);
              }
              range.collapse(true);
            }
            range.select(true);
            doRemove(range);
            range.startOffset = 0;
            range.endOffset = 0;
            range.select();
          } else if (removeType == "清除选中样式") {
            range = this.selection.getRange();
            range.select(true);
            //IE678
            if (browser.version < 9) {
              if (this.document.selection.createRange().text != "") {
                doRemove(range);
                range.select();
              }
            } else {
              if (this.selection.getText().trim() != "") {
                doRemove(range);
                range.select();
              }
            }
          } else if (removeType == "清除全部链接") {
            var doc = this.document,
              aTags = doc.getElementsByTagName("a"),
              aTagsLength = aTags.length;
            if (!aTags) return;

            for (var i = aTagsLength - 1; i >= 0; i--) {
              var spanTag = doc.createElement("span"),
                atagStyle = aTags[i].style;
              //alert(aTags[i].getAttribute('style'));
              spanTag.innerHTML = aTags[i].innerHTML;
              /*if(!(browser.ie && browser.version < 9)){
                                if(doc.defaultView){
                                    spanTag.style = doc.defaultView.getComputedStyle(aTags[i], "").cssText;
                                }

                           }*/

              aTags[i].parentNode.insertBefore(spanTag, aTags[i]);
              aTags[i].parentNode.removeChild(aTags[i]);
              //spanTag.style = atagStyle;
            }
          } else {
            range = this.selection.getRange();
            doRemove(range);
            range.select();
          }
        }
      },
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      }
    };
  };
  //removeformat.js end
  //formatmatch.js start
  ///import core
  ///import plugins\removeformat.js
  ///commands 格式刷
  ///commandsName  FormatMatch
  ///commandsTitle  格式刷
  /**
   * 格式刷，只格式inline的
   * @function
   * @name baidu.editor.execCommand
   * @param {String}     cmdName    formatmatch执行格式刷
   */
  UE.plugins["formatmatch"] = function () {
    var me = this,
      list = [],
      img,
      flag = 0;

    me.addListener("reset", function () {
      list = [];
      flag = 0;
    });

    function addList(type, evt) {
      if (browser.webkit) {
        var target = evt.target.tagName == "IMG" ? evt.target : null;
      }

      function addFormat(range) {
        if (text && (!me.currentSelectedArr || !me.currentSelectedArr.length)) {
          range.selectNode(text);
        }
        return range.applyInlineStyle(
          list[list.length - 1].tagName,
          null,
          list
        );
      }

      me.undoManger && me.undoManger.save();

      var range = me.selection.getRange(),
        imgT = target || range.getClosedNode();
      if (img && imgT && imgT.tagName == "IMG") {
        //trace:964

        imgT.style.cssText +=
          ";float:" +
          (img.style.cssFloat || img.style.styleFloat || "none") +
          ";display:" +
          (img.style.display || "inline");
        img = null;
      } else {
        if (!img) {
          var collapsed = range.collapsed;
          if (collapsed) {
            var text = me.document.createTextNode("match");
            range.insertNode(text).select();
          }
          me.__hasEnterExecCommand = true;
          //不能把block上的属性干掉
          //trace:1553
          var removeFormatAttributes = me.options.removeFormatAttributes;
          me.options.removeFormatAttributes = "";
          me.execCommand("removeformat");
          me.options.removeFormatAttributes = removeFormatAttributes;
          me.__hasEnterExecCommand = false;
          //trace:969
          range = me.selection.getRange();
          if (list.length == 0) {
            if (me.currentSelectedArr && me.currentSelectedArr.length > 0) {
              range.selectNodeContents(me.currentSelectedArr[0]).select();
            }
          } else {
            if (me.currentSelectedArr && me.currentSelectedArr.length > 0) {
              for (var i = 0, ci; (ci = me.currentSelectedArr[i++]); ) {
                range.selectNodeContents(ci);
                addFormat(range);
              }
              range.selectNodeContents(me.currentSelectedArr[0]).select();
            } else {
              addFormat(range);
            }
          }
          if (!me.currentSelectedArr || !me.currentSelectedArr.length) {
            if (text) {
              range.setStartBefore(text).collapse(true);
            }

            range.select();
          }
          text && domUtils.remove(text);
        }
      }

      me.undoManger && me.undoManger.save();
      me.removeListener("mouseup", addList);
      flag = 0;
    }

    me.commands["formatmatch"] = {
      execCommand: function (cmdName) {
        if (flag) {
          flag = 0;
          list = [];
          me.removeListener("mouseup", addList);
          return;
        }

        var range = me.selection.getRange();
        img = range.getClosedNode();
        if (!img || img.tagName != "IMG") {
          range.collapse(true).shrinkBoundary();
          var start = range.startContainer;
          list = domUtils.findParents(start, true, function (node) {
            return !domUtils.isBlockElm(node) && node.nodeType == 1;
          });
          //a不能加入格式刷, 并且克隆节点
          for (var i = 0, ci; (ci = list[i]); i++) {
            if (ci.tagName == "A") {
              list.splice(i, 1);
              break;
            }
          }
        }

        me.addListener("mouseup", addList);
        flag = 1;
      },
      queryCommandState: function () {
        if (this.highlight) {
          return -1;
        }
        return flag;
      },
      notNeedUndo: 1
    };
  };
  //formatmatch.js end
  //paragraph.js start
  //与 取消缩进,首行缩进 有关
  ///commands 格式
  ///commandsName  Paragraph
  ///commandsTitle  段落格式
  /**
   * 段落格式
   * @command paragraph
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @param {String}   style               标签值为：'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
   * @param {Object}   attrs               标签的属性
   * @example
   * ```javascript
   * editor.execCommand( 'Paragraph','h1','{
   *     class:'test'
   * }' );
   * ```
   */

  /**
   * 返回选区内节点标签名
   * @command paragraph
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 节点标签名
   * @example
   * ```javascript
   * editor.queryCommandValue( 'Paragraph' );
   * ```
   */
  UE.plugins["paragraph"] = function () {
    var me = this,
      block = domUtils.isBlockElm,
      notExchange = ["TD", "LI", "PRE"],
      doParagraph = function (range, style, attrs, sourceCmdName) {
        var bookmark = range.createBookmark(),
          filterFn = function (node) {
            return node.nodeType == 1
              ? node.tagName.toLowerCase() != "br" &&
                  !domUtils.isBookmarkNode(node)
              : !domUtils.isWhitespace(node);
          },
          para;

        range.enlarge(true);
        var bookmark2 = range.createBookmark(),
          current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
          tmpRange = range.cloneRange(),
          tmpNode;
        while (
          current &&
          !(
            domUtils.getPosition(current, bookmark2.end) &
            domUtils.POSITION_FOLLOWING
          )
        ) {
          if (current.nodeType == 3 || !block(current)) {
            tmpRange.setStartBefore(current);
            while (current && current !== bookmark2.end && !block(current)) {
              tmpNode = current;
              current = domUtils.getNextDomNode(
                current,
                false,
                null,
                function (node) {
                  return !block(node);
                }
              );
            }
            tmpRange.setEndAfter(tmpNode);

            para = range.document.createElement(style);
            if (attrs) {
              domUtils.setAttributes(para, attrs);
              if (
                sourceCmdName &&
                sourceCmdName == "customstyle" &&
                attrs.style
              ) {
                para.style.cssText = attrs.style;
              }
            }
            para.appendChild(tmpRange.extractContents());
            //需要内容占位
            if (domUtils.isEmptyNode(para)) {
              domUtils.fillChar(range.document, para);
            }

            tmpRange.insertNode(para);

            var parent = para.parentNode;
            //如果para上一级是一个block元素且不是body,td就删除它
            if (
              block(parent) &&
              !domUtils.isBody(para.parentNode) &&
              utils.indexOf(notExchange, parent.tagName) == -1
            ) {
              //存储dir,style
              if (!(sourceCmdName && sourceCmdName == "customstyle")) {
                parent.getAttribute("dir") &&
                  para.setAttribute("dir", parent.getAttribute("dir"));
                //trace:1070
                parent.style.cssText &&
                  (para.style.cssText =
                    parent.style.cssText + ";" + para.style.cssText);
                //trace:1030
                parent.style.textAlign &&
                  !para.style.textAlign &&
                  (para.style.textAlign = parent.style.textAlign);
                parent.style.textIndent &&
                  !para.style.textIndent &&
                  (para.style.textIndent = parent.style.textIndent);
                parent.style.padding &&
                  !para.style.padding &&
                  (para.style.padding = parent.style.padding);
              }

              //trace:1706 选择的就是h1-6要删除
              if (
                attrs &&
                /h\d/i.test(parent.tagName) &&
                !/h\d/i.test(para.tagName)
              ) {
                domUtils.setAttributes(parent, attrs);
                if (
                  sourceCmdName &&
                  sourceCmdName == "customstyle" &&
                  attrs.style
                ) {
                  parent.style.cssText = attrs.style;
                }
                domUtils.remove(para, true);
                para = parent;
              } else {
                domUtils.remove(para.parentNode, true);
              }
            }
            if (utils.indexOf(notExchange, parent.tagName) != -1) {
              current = parent;
            } else {
              current = para;
            }

            current = domUtils.getNextDomNode(current, false, filterFn);
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
      };
    me.setOpt("paragraph", {
      p: "",
      h1: "",
      h2: "",
      h3: "",
      h4: "",
      h5: "",
      h6: ""
    });
    me.commands["paragraph"] = {
      execCommand: function (cmdName, style, attrs, sourceCmdName) {
        var range = new dom.Range(this.document);
        if (this.currentSelectedArr && this.currentSelectedArr.length > 0) {
          for (var i = 0, ti; (ti = this.currentSelectedArr[i++]); ) {
            //trace:1079 不显示的不处理，插入文本，空的td也能加上相应的标签
            if (ti.style.display == "none") {
              continue;
            }
            if (domUtils.isEmptyNode(ti)) {
              var tmpTxt = this.document.createTextNode("paragraph");
              ti.innerHTML = "";
              ti.appendChild(tmpTxt);
            }
            doParagraph(
              range.selectNodeContents(ti),
              style,
              attrs,
              sourceCmdName
            );
            if (tmpTxt) {
              var pN = tmpTxt.parentNode;
              domUtils.remove(tmpTxt);
              if (domUtils.isEmptyNode(pN)) {
                domUtils.fillNode(this.document, pN);
              }
            }
          }
          var td = this.currentSelectedArr[0];

          if (domUtils.isEmptyBlock(td)) {
            range.setStart(td, 0).setCursor(false, true);
          } else {
            range.selectNode(td).select();
          }
        } else {
          range = this.selection.getRange();
          //闭合时单独处理
          if (range.collapsed) {
            var txt = this.document.createTextNode("p");
            range.insertNode(txt);
            //去掉冗余的fillchar
            if (browser.ie) {
              var node = txt.previousSibling;
              if (node && domUtils.isWhitespace(node)) {
                domUtils.remove(node);
              }
              node = txt.nextSibling;
              if (node && domUtils.isWhitespace(node)) {
                domUtils.remove(node);
              }
            }
          }
          range = doParagraph(range, style, attrs, sourceCmdName);
          if (txt) {
            range.setStartBefore(txt).collapse(true);
            pN = txt.parentNode;

            domUtils.remove(txt);

            if (domUtils.isBlockElm(pN) && domUtils.isEmptyNode(pN)) {
              domUtils.fillNode(this.document, pN);
            }
          }

          if (
            browser.gecko &&
            range.collapsed &&
            range.startContainer.nodeType == 1
          ) {
            var child = range.startContainer.childNodes[range.startOffset];
            if (
              child &&
              child.nodeType == 1 &&
              child.tagName.toLowerCase() == style
            ) {
              range.setStart(child, 0).collapse(true);
            }
          }
          //trace:1097 原来有true，原因忘了，但去了就不能清除多余的占位符了
          range.select();
        }
        return true;
      },
      queryCommandValue: function () {
        var node = utils.findNode(this.selection.getStartElementPath(), [
          "p",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ]);
        return node ? node.tagName.toLowerCase() : "";
      },
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      }
    };
  };
  //paragraph.js end
  //lineheight.js start
  ///import plugins\paragraph.js
  ///commands 行间距
  ///commandsName  LineHeight
  ///commandsTitle  行间距
  /**
   * 行距
   * @command lineheight
   * @method execCommand
   * @param { String } cmdName 命令字符串
   * @param { String } value 传入的行高值， 该值是当前字体的倍数， 例如： 1.5, 1.75
   * @example
   * ```javascript
   * editor.execCommand( 'lineheight', 1.5);
   * ```
   */
  /**
   * 查询当前选区内容的行高大小
   * @command lineheight
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回当前行高大小
   * @example
   * ```javascript
   * editor.queryCommandValue( 'lineheight' );
   * ```
   */
  UE.plugins["lineheight"] = function () {
    var me = this;
    me.setOpt({ lineheight: ["1", "1.5", "1.75", "2", "2.5", "3", "4", "5"] });
    me.commands["lineheight"] = {
      execCommand: function (cmdName, value) {
        this.execCommand("paragraph", "p", {
          style: "line-height:" + (value == "1" ? "normal" : value + "em")
        });
        // this.execCommand('paragraph','p',{style:'line-height:'+value+'em'})
        return true;
      },
      queryCommandValue: function () {
        var pN = utils.findNode(
          this.selection.getStartElementPath(),
          null,
          function (node) {
            return domUtils.isBlockElm(node);
          }
        );
        if (pN) {
          var value = domUtils.getComputedStyle(pN, "line-height");
          return value == "normal" ? 1 : value.replace(/[^\d.]*/gi, "");
        }
      },
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      }
    };
  };
  //lineheight.js end
  //pagebreak.js start
  ///commands 添加分页功能
  ///commandsName  PageBreak
  ///commandsTitle  分页
  /**
   * 插入分页符
   * @command pagebreak
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @remind 在表格中插入分页符会把表格切分成两部分
   * @remind 获取编辑器内的数据时， 编辑器会把分页符转换成“_ueditor_page_break_tag_”字符串，
   *          以便于提交数据到服务器端后处理分页。
   * @example
   * ```javascript
   * editor.execCommand( 'pagebreak'); //插入一个hr标签，带有样式类名pagebreak
   * ```
   */
  UE.plugins["pagebreak"] = function () {
    var me = this,
      notBreakTags = ["td"];

    function fillNode(node) {
      if (domUtils.isEmptyBlock(node)) {
        var firstChild = node.firstChild,
          tmpNode;

        while (
          firstChild &&
          firstChild.nodeType == 1 &&
          domUtils.isEmptyBlock(firstChild)
        ) {
          tmpNode = firstChild;
          firstChild = firstChild.firstChild;
        }
        !tmpNode && (tmpNode = node);
        domUtils.fillNode(me.document, tmpNode);
      }
    }
    function isHr(node) {
      return (
        node &&
        node.nodeType == 1 &&
        node.tagName == "HR" &&
        node.className == "pagebreak"
      );
    }
    me.setOpt("pageBreakTag", "_baidu_page_break_tag_");
    me.addInputRule(function (root) {
      root.traversal(function (node) {
        if (node.type == "text" && node.data == me.options.pageBreakTag) {
          var hr = UE.uNode.createElement(
            '<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">'
          );
          node.parentNode.insertBefore(hr, node);
          node.parentNode.removeChild(node);
        }
      });
    });
    me.addOutputRule(function (node) {
      utils.each(node.getNodesByTagName("hr"), function (n) {
        if (n.getAttr("class") == "pagebreak") {
          var txt = UE.uNode.createText(me.options.pageBreakTag);
          n.parentNode.insertBefore(txt, n);
          n.parentNode.removeChild(n);
        }
      });
    });

    me.commands["pagebreak"] = {
      execCommand: function () {
        var range = me.selection.getRange(),
          hr = me.document.createElement("hr");

        domUtils.setAttributes(hr, {
          class: "pagebreak",
          noshade: "noshade",
          size: "5"
        });
        domUtils.unselectable(hr);
        //table单独处理
        var node = domUtils.findParentByTagName(
            range.startContainer,
            notBreakTags,
            true
          ),
          parents = [],
          pN;
        if (node) {
          switch (node.tagName) {
            case "TD":
              if (me.container.getAttribute("isfullscreen") !== "fullScreen") {
                pN = node.parentNode;
                if (!pN.previousSibling) {
                  var table = domUtils.findParentByTagName(pN, "table");
                  //var tableWrapDiv = table.parentNode;
                  //if(tableWrapDiv && tableWrapDiv.nodeType == 1
                  //    && tableWrapDiv.tagName == 'DIV'
                  //    && tableWrapDiv.getAttribute('dropdrag')
                  //    ){
                  //    domUtils.remove(tableWrapDiv,true);
                  //}
                  table.parentNode.insertBefore(hr, table);
                  parents = domUtils.findParents(hr, true);
                } else {
                  pN.parentNode.insertBefore(hr, pN);
                  parents = domUtils.findParents(hr);
                }
                pN = parents[1];
                if (hr !== pN) {
                  domUtils.breakParent(hr, pN);
                }
                domUtils.clearSelectedArr(me.currentSelectedArr);
                //table要重写绑定一下拖拽
                me.fireEvent("afteradjusttable", me.document);
              } else {
                pN = node.parentNode;
                if (!pN.previousSibling) {
                  var table = domUtils.findParentByTagName(pN, "table");
                  table.parentNode.insertBefore(hr, table);
                  parents = domUtils.findParents(hr, true);
                } else {
                  pN.parentNode.insertBefore(hr, pN);
                  parents = domUtils.findParents(hr);
                }

                pN = parents[1];
                if (hr !== pN) {
                  domUtils.breakParent(hr, pN);
                }
                var hrNext = $(hr).next();
                var hrPrev = $(hr).prev();
                var addPageClose =
                  '<div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div>';
                hrNext.append(addPageClose);
                hrPrev
                  .find(".breakPage")
                  .append(
                    '<div style="height:0px;clear:both;"></div><p style="line-height:1.5em;"></br></p>'
                  );
                hr.remove();
                $($(editor.body).find(".breakPageParent")[0]).css("height", "");
                $($(editor.body).find(".breakPage")[0]).css("min-height", "");
                $(hrNext.find(".breakPage")[0]).css("min-height", "");
                // "删除分页"绑定事件
                for (
                  var j = 0;
                  j < $(editor.body).find(".pageBreakClose").length;
                  j++
                ) {
                  $(editor.body).find(".pageBreakCloseIcon")[
                    j
                  ].onclick = function () {
                    var closeStart = $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find("p")[0];
                    var closeEnd = $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find("p")[0];
                    if (
                      !$(this).parent().prev().find("p").length &&
                      !$(this).parent().prev().find("div").length
                    ) {
                      $(this).parent().prev().children().appendTo($("<p></p>"));
                      var con = $("<p></p>").append(
                        $(this).parent().prev().html()
                      );
                      con.appendTo(
                        $(this)
                          .parents(".breakPageParent")
                          .prev()
                          .find(".breakPage")
                      );
                    } else {
                      $($(this).parent().prev().html()).appendTo(
                        $(this)
                          .parents(".breakPageParent")
                          .prev()
                          .find(".breakPage")
                      );
                    }
                    $(this).parents(".breakPageParent").remove();

                    if ($(editor.body).find(".pageBreakClose").length === 0) {
                      var breakPageHeight = $(editor.body).css("height");
                      $(editor.body)
                        .find(".breakPage")
                        .css("min-height", breakPageHeight);
                      $(editor.body)
                        .find(".breakPageParent")
                        .css("height", "100%");
                    }

                    // 改变光标的位置
                    var closeRange = editor.selection.getRange();
                    closeRange.setStart(closeStart, 0);
                    closeRange.setEnd(closeEnd, 0);
                    closeRange.select(true);
                  };
                  $(editor.body).find(".pageBreakClose")[
                    j
                  ].ondblclick = function () {
                    var closeStart = $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find("p")[0];
                    var closeEnd = $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find("p")[0];
                    if (
                      !$(this).prev().find("p").length &&
                      !$(this).prev().find("div").length
                    ) {
                      $(this).prev().children().appendTo($("<p></p>"));
                      var con = $("<p></p>").append($(this).prev().html());
                      con.appendTo(
                        $(this)
                          .parents(".breakPageParent")
                          .prev()
                          .find(".breakPage")
                      );
                    } else {
                      $($(this).prev().html()).appendTo(
                        $(this)
                          .parents(".breakPageParent")
                          .prev()
                          .find(".breakPage")
                      );
                    }
                    $(this).parents(".breakPageParent").remove();

                    if ($(editor.body).find(".pageBreakClose").length === 0) {
                      var breakPageHeight = $(editor.body).css("height");
                      $(editor.body)
                        .find(".breakPage")
                        .css("min-height", breakPageHeight);
                      $(editor.body)
                        .find(".breakPageParent")
                        .css("height", "100%");
                    }

                    // 改变光标的位置
                    var closeRange = editor.selection.getRange();
                    closeRange.setStart(closeStart, 0);
                    closeRange.setEnd(closeEnd, 0);
                    closeRange.select(true);
                  };
                }

                domUtils.clearSelectedArr(me.currentSelectedArr);
                //table要重写绑定一下拖拽
                me.fireEvent("afteradjusttable", me.document);
              }
          }
        } else {
          // 区别全屏和非全屏时的分页操作
          if (me.container.getAttribute("isfullscreen") !== "fullScreen") {
            if (!range.collapsed) {
              range.deleteContents();
              var start = range.startContainer;
              while (
                !domUtils.isBody(start) &&
                domUtils.isBlockElm(start) &&
                domUtils.isEmptyNode(start)
              ) {
                range.setStartBefore(start).collapse(true);
                domUtils.remove(start);
                start = range.startContainer;
              }
            }
            range.insertNode(hr);

            var pN = hr.parentNode,
              nextNode;
            while (!domUtils.isBody(pN)) {
              domUtils.breakParent(hr, pN);
              nextNode = hr.nextSibling;
              if (nextNode && domUtils.isEmptyBlock(nextNode)) {
                domUtils.remove(nextNode);
              }
              pN = hr.parentNode;
            }
            nextNode = hr.nextSibling;
            var pre = hr.previousSibling;
            if (isHr(pre)) {
              domUtils.remove(pre);
            } else {
              pre && fillNode(pre);
            }

            if (!nextNode) {
              var p = me.document.createElement("p");

              hr.parentNode.appendChild(p);
              domUtils.fillNode(me.document, p);
              range.setStart(p, 0).collapse(true);
            } else {
              if (isHr(nextNode)) {
                domUtils.remove(nextNode);
              } else {
                fillNode(nextNode);
              }
              range.setEndAfter(hr).collapse(false);
            }
            range.select(true);
          } else {
            // 焦点在哪里便在那里插入分页。先用hr做标识，然后再将hr替换成<p><br/></p>
            $(editor.body).find("hr.pagebreak").remove();
            // var changeBgColor = !$(editor.body).attr("isChangeBg")?"changeBgColor":"";
            var changeBgColor = $(editor.body)
              .find(".breakPage_0")
              .hasClass("changeBgColor")
              ? "changeBgColor"
              : "";

            if (
              range.startContainer.nodeName === "P" ||
              range.startContainer.nodeName === "#text"
            ) {
              range.insertNode(hr);
              var pN = hr.parentNode,
                nextNode;
              // domUtils.breakParent(hr, hr.parentNode);
              while (!domUtils.isBreakPage(pN)) {
                domUtils.breakParent(hr, pN);
                nextNode = hr.nextSibling;
                if (nextNode && domUtils.isEmptyBlock(nextNode)) {
                  domUtils.remove(nextNode);
                }
                pN = hr.parentNode;
              }
              var breakPageString = "";

              for (var i = 0; i < $(hr).nextAll().length; i++) {
                if (!$($(hr).nextAll()[i]).length) {
                  $(hr).nextAll()[i].innerHTML = "<br/>";
                }
                breakPageString += $(hr).nextAll()[i].outerHTML;
              }
              $(hr).nextAll().remove();
              if (breakPageString == "<p></p>") {
                $(
                  '<div class="breakPageParent" contenteditable="true"><div class="breakPage ' +
                    changeBgColor +
                    '" contenteditable="true"><p><br/></p></div><div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
                ).insertAfter($(hr).parents(".breakPageParent"));
              } else {
                $(
                  '<div class="breakPageParent" contenteditable="true"><div class="breakPage ' +
                    changeBgColor +
                    '" contenteditable="true">' +
                    breakPageString +
                    '<p><br/></p></div><div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
                ).insertAfter($(hr).parents(".breakPageParent"));
              }
              $(hr).replaceWith("<p><br/></p>");
            } else {
              $(editor.body).append(
                '<div class="breakPageParent" contenteditable="true"><div class="breakPage ' +
                  changeBgColor +
                  '" contenteditable="true"><p><br></p></div><div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
              );
            }

            $($(editor.body).find(".breakPageParent")[0]).css("height", "");
            $($(editor.body).find(".breakPage")[0]).css("min-height", "");

            // "删除分页"绑定事件
            for (
              var j = 0;
              j < $(editor.body).find(".pageBreakClose").length;
              j++
            ) {
              $(editor.body).find(".pageBreakCloseIcon")[
                j
              ].onclick = function () {
                var closeStart = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                var closeEnd = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                if (
                  !$(this).parent().prev().find("p").length &&
                  !$(this).parent().prev().find("div").length
                ) {
                  $(this).parent().prev().children().appendTo($("<p></p>"));
                  var con = $("<p></p>").append($(this).parent().prev().html());
                  con.appendTo(
                    $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find(".breakPage")
                  );
                } else {
                  $($(this).parent().prev().html()).appendTo(
                    $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find(".breakPage")
                  );
                }
                $(this).parents(".breakPageParent").remove();

                if ($(editor.body).find(".pageBreakClose").length === 0) {
                  var breakPageHeight = $(editor.body).css("height");
                  $(editor.body)
                    .find(".breakPage")
                    .css("min-height", breakPageHeight);
                  $(editor.body).find(".breakPageParent").css("height", "100%");
                }

                // 改变光标的位置
                var closeRange = editor.selection.getRange();
                closeRange.setStart(closeStart, 0);
                closeRange.setEnd(closeEnd, 0);
                closeRange.select(true);
              };
              $(editor.body).find(".pageBreakClose")[
                j
              ].ondblclick = function () {
                var closeStart = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                var closeEnd = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                if (
                  !$(this).prev().find("p").length &&
                  !$(this).prev().find("div").length
                ) {
                  $(this).prev().children().appendTo($("<p></p>"));
                  var con = $("<p></p>").append($(this).prev().html());
                  con.appendTo(
                    $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find(".breakPage")
                  );
                } else {
                  $($(this).prev().html()).appendTo(
                    $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find(".breakPage")
                  );
                }
                $(this).parents(".breakPageParent").remove();

                if ($(editor.body).find(".pageBreakClose").length === 0) {
                  var breakPageHeight = $(editor.body).css("height");
                  $(editor.body)
                    .find(".breakPage")
                    .css("min-height", breakPageHeight);
                  $(editor.body).find(".breakPageParent").css("height", "100%");
                }

                // 改变光标的位置
                var closeRange = editor.selection.getRange();
                closeRange.setStart(closeStart, 0);
                closeRange.setEnd(closeEnd, 0);
                closeRange.select(true);
              };
            }
          }
          // range.select(true);
        }
      },
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      }
    };

    //webkit浏览器中hr下有个傻X区域光标可以选中，在这里输入会导致文本游离在body下，可以会扰乱布局，所以需要调整光标，让光标始终在block元素内。
    if (UE.browser.webkit) {
      me.addListener("selectionchange", function () {
        var range = me.selection.getRange();
        var start = range.startContainer;
        var end = range.endContainer;
        if (domUtils.isBody(start) && domUtils.isBody(end)) {
          var startNode = start.childNodes[range.startOffset];
          var isHr =
            startNode &&
            startNode.nodeName == "HR" &&
            startNode.className.indexOf("pagebreak") > -1
              ? true
              : false;
          if (isHr) {
            var idx = range.startOffset + 1;
            while (idx <= start.childNodes.length) {
              if (domUtils.isBlockElm(start.childNodes[idx])) {
                range.setStartAtFirst(start.childNodes[idx]).setCursor();
                break;
              }
              idx++;
            }
          }
        }
      });
    }
  };
  //pagebreak.js end
  //paste.js start
  ///import core
  ///import plugins/inserthtml.js
  ///import plugins/undo.js
  ///import plugins/serialize.js
  ///commands 粘贴
  ///commandsName  PastePlain
  ///commandsTitle  纯文本粘贴模式
  /*
   ** @description 粘贴
   */
  UE.plugins["paste"] = function () {
    function getClipboardData(callback) {
      var doc = this.document;

      if (doc.getElementById("baidu_pastebin")) {
        return;
      }

      var range = this.selection.getRange(),
        bk = range.createBookmark(),
        //创建剪贴的容器div
        pastebin = doc.createElement("div");

      pastebin.id = "baidu_pastebin";

      // Safari 要求div必须有内容，才能粘贴内容进来
      browser.webkit &&
        pastebin.appendChild(
          doc.createTextNode(domUtils.fillChar + domUtils.fillChar)
        );
      doc.body.appendChild(pastebin);
      //trace:717 隐藏的span不能得到top
      //bk.start.innerHTML = '&nbsp;';
      bk.start.style.display = "";
      pastebin.style.cssText =
        "position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:" +
        //要在现在光标平行的位置加入，否则会出现跳动的问题
        domUtils.getXY(bk.start).y +
        "px";

      range.selectNodeContents(pastebin).select(true);

      setTimeout(function () {
        if (browser.webkit) {
          for (
            var i = 0, pastebins = doc.querySelectorAll("#baidu_pastebin"), pi;
            (pi = pastebins[i++]);

          ) {
            if (domUtils.isEmptyNode(pi)) {
              domUtils.remove(pi);
            } else {
              pastebin = pi;
              break;
            }
          }
        }

        try {
          pastebin.parentNode.removeChild(pastebin);
        } catch (e) {}

        range.moveToBookmark(bk).select(true);
        callback(pastebin);
      }, 0);
    }
    var me = this;
    var word_img_flag = { flag: "" };

    var pasteplain = me.options.pasteplain === true;
    var modify_num = { flag: "" };
    me.commands["pasteplain"] = {
      queryCommandState: function () {
        return pasteplain;
      },
      execCommand: function () {
        pasteplain = !pasteplain | 0;
      },
      notNeedUndo: 1
    };

    function filter(div) {
      var html;
      if (div.firstChild) {
        //去掉cut中添加的边界值
        var nodes = domUtils.getElementsByTagName(div, "span");
        for (var i = 0, ni; (ni = nodes[i++]); ) {
          if (ni.id == "_baidu_cut_start" || ni.id == "_baidu_cut_end") {
            domUtils.remove(ni);
          }
        }

        if (browser.webkit) {
          var brs = div.querySelectorAll("div br");
          for (var i = 0, bi; (bi = brs[i++]); ) {
            var pN = bi.parentNode;
            if (pN.tagName == "DIV" && pN.childNodes.length == 1) {
              pN.innerHTML = "<p><br/></p>";

              domUtils.remove(pN);
            }
          }
          var divs = div.querySelectorAll("#baidu_pastebin");
          for (var i = 0, di; (di = divs[i++]); ) {
            var tmpP = me.document.createElement("p");
            di.parentNode.insertBefore(tmpP, di);
            while (di.firstChild) {
              tmpP.appendChild(di.firstChild);
            }
            domUtils.remove(di);
          }

          var metas = div.querySelectorAll("meta");
          for (var i = 0, ci; (ci = metas[i++]); ) {
            domUtils.remove(ci);
          }

          var brs = div.querySelectorAll("br");
          for (i = 0; (ci = brs[i++]); ) {
            if (/^apple-/.test(ci)) {
              domUtils.remove(ci);
            }
          }
        }
        if (browser.gecko) {
          var dirtyNodes = div.querySelectorAll("[_moz_dirty]");
          for (i = 0; (ci = dirtyNodes[i++]); ) {
            ci.removeAttribute("_moz_dirty");
          }
          if (/<img data\:image\/*\/>/.test(div.innerHTML)) {
            div.innerHTML = "";
          }
        }
        if (!browser.ie) {
          var spans = div.querySelectorAll("span.apple-style-span");
          for (var i = 0, ci; (ci = spans[i++]); ) {
            domUtils.remove(ci, true);
          }
        }

        html = div.innerHTML;

        //过滤word粘贴过来的冗余属性
        html = UE.filterWord(html);

        //$(html).attr('');
        var f = me.serialize;
        if (f) {
          //如果过滤出现问题，捕获它，直接插入内容，避免出现错误导致粘贴整个失败
          try {
            var node = f.transformInput(
              f.parseHTML(
                //todo: 暂时不走dtd的过滤
                f.word(html) //, true
              ),
              word_img_flag
            );

            //粘贴过滤不需要的样式
            node = f.transformFliterStyle(node);

            //trace:924
            //纯文本模式也要保留段落
            node = f.filter(
              node,
              pasteplain
                ? {
                    whiteList: {
                      p: { br: 1, BR: 1, $: {} },
                      br: { $: {} },
                      div: { br: 1, BR: 1, $: {} },
                      li: { $: {} },
                      tr: { td: 1, $: {} },
                      td: { $: {} }
                    },
                    blackList: {
                      style: 1,
                      script: 1,
                      object: 1
                    }
                  }
                : null,
              !pasteplain ? modify_num : null
            );

            if (browser.webkit) {
              var length = node.children.length,
                child;
              while ((child = node.children[length - 1]) && child.tag == "br") {
                node.children.splice(length - 1, 1);
                length = node.children.length;
              }
            }
            //delIdClass 是否删除ID CLASS
            var delIdClass = true;
            html = f.toHTML(node, pasteplain, delIdClass);

            txtContent = f.filter(node, {
              whiteList: {
                p: { br: 1, BR: 1, $: {} },
                br: { $: {} },
                div: { br: 1, BR: 1, $: {}, table: 1, ul: 1, ol: 1 },
                li: { $: {} },
                ul: { li: 1, $: {} },
                ol: { li: 1, $: {} },
                tr: { td: 1, $: {} },
                td: { $: {} },
                table: { tr: 1, tbody: 1, td: 1, $: {} },
                tbody: { tr: 1, td: 1, $: {} },
                h1: { $: {} },
                h2: { $: {} },
                h3: { $: {} },
                h4: { $: {} },
                h5: { $: {} },
                h6: { $: {} }
              },
              blackList: {
                style: 1,
                script: 1,
                object: 1
              }
            });

            txtContent = f.toHTML(txtContent, true);
          } catch (e) {}
        }

        //自定义的处理
        html = { html: html };

        me.fireEvent("beforepaste", html);
        //不用在走过滤了
        me.execCommand("insertHtml", html.html, true);

        me.fireEvent("afterpaste");
      }
    }

    me.addListener("ready", function () {
      domUtils.on(me.body, "cut", function () {
        var range = me.selection.getRange();
        if (!range.collapsed && me.undoManger) {
          me.undoManger.save();
        }
      });
      //ie下beforepaste在点击右键时也会触发，所以用监控键盘才处理
      domUtils.on(
        me.body,
        browser.ie || browser.opera ? "keydown" : "paste",
        function (ev) {
          if (
            (browser.ie || browser.opera) &&
            (!ev.ctrlKey || ev.keyCode != "86")
          ) {
            return;
          }
          if (baidu.editor.PasteImgUpload(ev, me)) {
            return;
          }

          getClipboardData.call(me, function (div) {
            filter(div);
            //粘贴纯文本
            if (me.options.setContentTxt) {
              var reg = new RegExp(domUtils.fillChar, "g");
              div.innerHTML = div[browser.ie ? "innerText" : "textContent"]
                .replace(reg, "")
                .replace(/\u00a0/g, " ");
            }
          });
        }
      );
    });
  };
  //paste.js end
  //list.js start
  ///commands 有序列表,无序列表
  ///commandsName  insertOrderedList,insertUnorderedList
  ///commandsTitle  有序列表,无序列表
  /**
   * 有序列表，与“insertunorderedlist”命令互斥
   * @command insertorderedlist
   * @method execCommand
   * @param { String } command 命令字符串
   * @param { String } style 插入的有序列表类型，值为：decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
   * @example
   * ```javascript
   * editor.execCommand( 'insertorderedlist','decimal');
   * ```
   */
  /**
   * 查询当前选区内容是否有序列表
   * @command insertorderedlist
   * @method queryCommandState
   * @param { String } cmd 命令字符串
   * @return { int } 如果当前选区是有序列表返回1，否则返回0
   * @example
   * ```javascript
   * editor.queryCommandState( 'insertorderedlist' );
   * ```
   */
  /**
   * 查询当前选区内容是否有序列表
   * @command insertorderedlist
   * @method queryCommandValue
   * @param { String } cmd 命令字符串
   * @return { String } 返回当前有序列表的类型，值为null或decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
   * @example
   * ```javascript
   * editor.queryCommandValue( 'insertorderedlist' );
   * ```
   */

  /**
   * 无序列表，与“insertorderedlist”命令互斥
   * @command insertunorderedlist
   * @method execCommand
   * @param { String } command 命令字符串
   * @param { String } style 插入的无序列表类型，值为：circle,disc,square,dash,dot
   * @example
   * ```javascript
   * editor.execCommand( 'insertunorderedlist','circle');
   * ```
   */
  /**
   * 查询当前是否有word文档粘贴进来的图片
   * @command insertunorderedlist
   * @method insertunorderedlist
   * @param { String } command 命令字符串
   * @return { int } 如果当前选区是无序列表返回1，否则返回0
   * @example
   * ```javascript
   * editor.queryCommandState( 'insertunorderedlist' );
   * ```
   */
  /**
   * 查询当前选区内容是否有序列表
   * @command insertunorderedlist
   * @method queryCommandValue
   * @param { String } command 命令字符串
   * @return { String } 返回当前无序列表的类型，值为null或circle,disc,square,dash,dot
   * @example
   * ```javascript
   * editor.queryCommandValue( 'insertunorderedlist' );
   * ```
   */

  UE.plugins["list"] = function () {
    var me = this,
      notExchange = {
        TD: 1,
        PRE: 1,
        BLOCKQUOTE: 1
      };
    me.setOpt({
      insertorderedlist: {
        decimal: "", //'1,2,3...'
        "lower-alpha": "", // 'a,b,c...'
        "lower-roman": "", //'i,ii,iii...'
        "upper-alpha": "", //'A,B,C'
        "upper-roman": "" //'I,II,III...'
      },
      insertunorderedlist: {
        circle: "",
        disc: "",
        square: ""
      }
    });
    function adjustList(list, tag, style) {
      var nextList = list.nextSibling;
      if (
        nextList &&
        nextList.nodeType == 1 &&
        nextList.tagName.toLowerCase() == tag &&
        (domUtils.getStyle(nextList, "list-style-type") ||
          (tag == "ol" ? "decimal" : "disc")) == style
      ) {
        domUtils.moveChild(nextList, list);
        if (nextList.childNodes.length == 0) {
          domUtils.remove(nextList);
        }
      }
      var preList = list.previousSibling;
      if (
        preList &&
        preList.nodeType == 1 &&
        preList.tagName.toLowerCase() == tag &&
        (domUtils.getStyle(preList, "list-style-type") ||
          (tag == "ol" ? "decimal" : "disc")) == style
      ) {
        domUtils.moveChild(list, preList);
      }

      if (list.childNodes.length == 0) {
        domUtils.remove(list);
      }
    }

    me.addListener("keydown", function (type, evt) {
      function preventAndSave() {
        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
        me.undoManger && me.undoManger.save();
      }

      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 13) {
        //回车

        var range = me.selection.getRange(),
          start = domUtils.findParentByTagName(
            range.startContainer,
            ["ol", "ul"],
            true,
            function (node) {
              return node.tagName == "TABLE";
            }
          ),
          end = domUtils.findParentByTagName(
            range.endContainer,
            ["ol", "ul"],
            true,
            function (node) {
              return node.tagName == "TABLE";
            }
          );
        if (start && end && start === end) {
          if (!range.collapsed) {
            start = domUtils.findParentByTagName(
              range.startContainer,
              "li",
              true
            );
            end = domUtils.findParentByTagName(range.endContainer, "li", true);
            if (start && end && start === end) {
              range.deleteContents();
              li = domUtils.findParentByTagName(
                range.startContainer,
                "li",
                true
              );
              if (li && domUtils.isEmptyBlock(li)) {
                pre = li.previousSibling;
                next = li.nextSibling;
                p = me.document.createElement("p");

                domUtils.fillNode(me.document, p);
                parentList = li.parentNode;
                if (pre && next) {
                  range.setStart(next, 0).collapse(true).select(true);
                  domUtils.remove(li);
                } else {
                  if ((!pre && !next) || !pre) {
                    parentList.parentNode.insertBefore(p, parentList);
                  } else {
                    li.parentNode.parentNode.insertBefore(
                      p,
                      parentList.nextSibling
                    );
                  }
                  domUtils.remove(li);
                  if (!parentList.firstChild) {
                    domUtils.remove(parentList);
                  }
                  range.setStart(p, 0).setCursor();
                }
                preventAndSave();
                return;
              }
            } else {
              var tmpRange = range.cloneRange(),
                bk = tmpRange.collapse(false).createBookmark();

              range.deleteContents();
              tmpRange.moveToBookmark(bk);
              var li = domUtils.findParentByTagName(
                  tmpRange.startContainer,
                  "li",
                  true
                ),
                pre = li.previousSibling,
                next = li.nextSibling;

              if (pre) {
                li = pre;
                if (pre.firstChild && domUtils.isBlockElm(pre.firstChild)) {
                  pre = pre.firstChild;
                }
                if (domUtils.isEmptyNode(pre)) {
                  domUtils.remove(li);
                }
              }
              if (next) {
                li = next;
                if (next.firstChild && domUtils.isBlockElm(next.firstChild)) {
                  next = next.firstChild;
                }
                if (domUtils.isEmptyNode(next)) {
                  domUtils.remove(li);
                }
              }
              tmpRange.select();
              preventAndSave();
              return;
            }
          }

          li = domUtils.findParentByTagName(range.startContainer, "li", true);

          if (li) {
            if (domUtils.isEmptyBlock(li)) {
              bk = range.createBookmark();
              var parentList = li.parentNode;
              if (li !== parentList.lastChild) {
                domUtils.breakParent(li, parentList);
              } else {
                parentList.parentNode.insertBefore(li, parentList.nextSibling);
                if (domUtils.isEmptyNode(parentList)) {
                  domUtils.remove(parentList);
                }
              }
              //嵌套不处理
              if (!dtd.$list[li.parentNode.tagName]) {
                if (!domUtils.isBlockElm(li.firstChild)) {
                  p = me.document.createElement("p");
                  li.parentNode.insertBefore(p, li);
                  while (li.firstChild) {
                    p.appendChild(li.firstChild);
                  }
                  domUtils.remove(li);
                } else {
                  domUtils.remove(li, true);
                }
              }
              range.moveToBookmark(bk).select();
            } else {
              var first = li.firstChild;
              if (!first || !domUtils.isBlockElm(first)) {
                var p = me.document.createElement("p");

                !li.firstChild && domUtils.fillNode(me.document, p);
                while (li.firstChild) {
                  p.appendChild(li.firstChild);
                }
                li.appendChild(p);
                first = p;
              }

              var span = me.document.createElement("span");

              range.insertNode(span);
              domUtils.breakParent(span, li);

              var nextLi = span.nextSibling;
              first = nextLi.firstChild;

              if (!first) {
                p = me.document.createElement("p");

                domUtils.fillNode(me.document, p);
                nextLi.appendChild(p);
                first = p;
              }
              if (domUtils.isEmptyNode(first)) {
                first.innerHTML = "";
                domUtils.fillNode(me.document, first);
              }

              range.setStart(first, 0).collapse(true).shrinkBoundary().select();
              domUtils.remove(span);
              pre = nextLi.previousSibling;
              if (pre && domUtils.isEmptyBlock(pre)) {
                pre.innerHTML = "<p></p>";
                domUtils.fillNode(me.document, pre.firstChild);
              }
            }
            //}
            preventAndSave();
          }
        }
      }
      if (keyCode == 8) {
        //修中ie中li下的问题
        range = me.selection.getRange();
        if (range.collapsed && domUtils.isStartInblock(range)) {
          tmpRange = range.cloneRange().trimBoundary();
          li = domUtils.findParentByTagName(range.startContainer, "li", true);

          //要在li的最左边，才能处理
          if (li && domUtils.isStartInblock(tmpRange)) {
            if (li && (pre = li.previousSibling)) {
              if (keyCode == 46 && li.childNodes.length) {
                return;
              }
              //有可能上边的兄弟节点是个2级菜单，要追加到2级菜单的最后的li
              if (dtd.$list[pre.tagName]) {
                pre = pre.lastChild;
              }
              me.undoManger && me.undoManger.save();
              first = li.firstChild;
              if (domUtils.isBlockElm(first)) {
                if (domUtils.isEmptyNode(first)) {
                  //range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
                  pre.appendChild(first);
                  range.setStart(first, 0).setCursor(false, true);
                  //first不是唯一的节点
                  while (li.firstChild) {
                    pre.appendChild(li.firstChild);
                  }
                } else {
                  start = domUtils.findParentByTagName(
                    range.startContainer,
                    "p",
                    true
                  );
                  if (start && start !== first) {
                    return;
                  }
                  span = me.document.createElement("span");
                  range.insertNode(span);
                  //判断pre是否是空的节点,如果是<p><br/></p>类型的空节点，干掉p标签防止它占位
                  if (domUtils.isEmptyBlock(pre)) {
                    pre.innerHTML = "";
                  }
                  domUtils.moveChild(li, pre);
                  range.setStartBefore(span).collapse(true).select(true);

                  domUtils.remove(span);
                }
              } else {
                if (domUtils.isEmptyNode(li)) {
                  var p = me.document.createElement("p");
                  pre.appendChild(p);
                  range.setStart(p, 0).setCursor();
                  //range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
                } else {
                  range
                    .setEnd(pre, pre.childNodes.length)
                    .collapse()
                    .select(true);
                  while (li.firstChild) {
                    pre.appendChild(li.firstChild);
                  }
                }
              }

              domUtils.remove(li);

              me.undoManger && me.undoManger.save();
              domUtils.preventDefault(evt);
              return;
            }
            //trace:980

            if (li && !li.previousSibling) {
              first = li.firstChild;
              //trace:1648 要判断li下只有一个节点
              if (
                !first ||
                (li.lastChild === first &&
                  domUtils.isEmptyNode(domUtils.isBlockElm(first) ? first : li))
              ) {
                var p = me.document.createElement("p");

                li.parentNode.parentNode.insertBefore(p, li.parentNode);
                domUtils.fillNode(me.document, p);
                range.setStart(p, 0).setCursor();
                domUtils.remove(!li.nextSibling ? li.parentNode : li);
                me.undoManger && me.undoManger.save();
                domUtils.preventDefault(evt);
                return;
              }
            }
          }
        }
      }
    });

    me.commands["insertorderedlist"] = me.commands["insertunorderedlist"] = {
      execCommand: function (command, style) {
        if (!style) {
          style =
            command.toLowerCase() == "insertorderedlist" ? "decimal" : "disc";
        }
        var me = this,
          range = this.selection.getRange(),
          filterFn = function (node) {
            return node.nodeType == 1
              ? node.tagName.toLowerCase() != "br"
              : !domUtils.isWhitespace(node);
          },
          tag = command.toLowerCase() == "insertorderedlist" ? "ol" : "ul",
          frag = me.document.createDocumentFragment();

        //去掉是因为会出现选到末尾，导致adjustmentBoundary缩到ol/ul的位置
        //range.shrinkBoundary();//.adjustmentBoundary();
        range.adjustmentBoundary().shrinkBoundary();
        var bko = range.createBookmark(true),
          start = domUtils.findParentByTagName(
            me.document.getElementById(bko.start),
            "li"
          ),
          modifyStart = 0,
          end = domUtils.findParentByTagName(
            me.document.getElementById(bko.end),
            "li"
          ),
          modifyEnd = 0,
          startParent,
          endParent,
          list,
          tmp;

        if (start || end) {
          var startPadding = parseInt($(start).css("font-size")) * 1.5;
          start && (startParent = start.parentNode);
          if (!bko.end) {
            end = start;
          }
          end && (endParent = end.parentNode);

          if (startParent === endParent) {
            while (start !== end) {
              tmp = start;
              start = start.nextSibling;
              if (!domUtils.isBlockElm(tmp.firstChild)) {
                var p = me.document.createElement("p");
                while (tmp.firstChild) {
                  p.appendChild(tmp.firstChild);
                }
                tmp.appendChild(p);
              }
              frag.appendChild(tmp);
            }
            tmp = me.document.createElement("span");
            startParent.insertBefore(tmp, end);
            if (!domUtils.isBlockElm(end.firstChild)) {
              p = me.document.createElement("p");
              while (end.firstChild) {
                p.appendChild(end.firstChild);
              }
              end.appendChild(p);
            }
            frag.appendChild(end);
            domUtils.breakParent(tmp, startParent);
            if (domUtils.isEmptyNode(tmp.previousSibling)) {
              domUtils.remove(tmp.previousSibling);
            }
            if (domUtils.isEmptyNode(tmp.nextSibling)) {
              domUtils.remove(tmp.nextSibling);
            }
            var nodeStyle =
              domUtils.getComputedStyle(startParent, "list-style-type") ||
              (command.toLowerCase() == "insertorderedlist"
                ? "decimal"
                : "disc");
            if (
              startParent.tagName.toLowerCase() == tag &&
              nodeStyle == style
            ) {
              for (
                var i = 0, ci, tmpFrag = me.document.createDocumentFragment();
                (ci = frag.childNodes[i++]);

              ) {
                while (ci.firstChild) {
                  tmpFrag.appendChild(ci.firstChild);
                }
              }
              tmp.parentNode.insertBefore(tmpFrag, tmp);
            } else {
              list = me.document.createElement(tag);
              // domUtils.setStyle( list, 'list-style-type', style );
              domUtils.setStyles(list, {
                "list-style-type": style,
                "padding-left": startPadding ? startPadding : "12px"
              });
              list.appendChild(frag);
              tmp.parentNode.insertBefore(list, tmp);
            }

            domUtils.remove(tmp);
            list && adjustList(list, tag, style);
            range.moveToBookmark(bko).select();
            return;
          }
          //开始
          if (start) {
            while (start) {
              tmp = start.nextSibling;
              var tmpfrag = me.document.createDocumentFragment(),
                hasBlock = 0;
              while (start.firstChild) {
                if (domUtils.isBlockElm(start.firstChild)) {
                  hasBlock = 1;
                }
                tmpfrag.appendChild(start.firstChild);
              }
              if (!hasBlock) {
                var tmpP = me.document.createElement("p");
                tmpP.appendChild(tmpfrag);
                frag.appendChild(tmpP);
              } else {
                frag.appendChild(tmpfrag);
              }
              domUtils.remove(start);
              start = tmp;
            }
            startParent.parentNode.insertBefore(frag, startParent.nextSibling);
            if (domUtils.isEmptyNode(startParent)) {
              range.setStartBefore(startParent);
              domUtils.remove(startParent);
            } else {
              range.setStartAfter(startParent);
            }

            modifyStart = 1;
          }

          if (end) {
            //结束
            start = endParent.firstChild;
            while (start !== end) {
              tmp = start.nextSibling;

              tmpfrag = me.document.createDocumentFragment();
              hasBlock = 0;
              while (start.firstChild) {
                if (domUtils.isBlockElm(start.firstChild)) {
                  hasBlock = 1;
                }
                tmpfrag.appendChild(start.firstChild);
              }
              if (!hasBlock) {
                tmpP = me.document.createElement("p");
                tmpP.appendChild(tmpfrag);
                frag.appendChild(tmpP);
              } else {
                frag.appendChild(tmpfrag);
              }
              domUtils.remove(start);
              start = tmp;
            }
            frag.appendChild(end.firstChild);
            domUtils.remove(end);
            endParent.parentNode.insertBefore(frag, endParent);
            range.setEndBefore(endParent);
            if (domUtils.isEmptyNode(endParent)) {
              domUtils.remove(endParent);
            }

            modifyEnd = 1;
          }
        }

        if (!modifyStart) {
          range.setStartBefore(me.document.getElementById(bko.start));
        }
        if (bko.end && !modifyEnd) {
          range.setEndAfter(me.document.getElementById(bko.end));
        }
        // if(!me.container.getAttribute('isFullScreen')){
        // range.enlarge( true, function ( node ) {
        //     return notExchange[node.tagName];
        // } );
        // }else{
        //     range.enlarge(true);
        //     // range.setStartAfter(range.startContainer);
        //     // range.setEndAfter(range.endContainer);
        //     var offset
        //     if(range.startContainer == range.endContainer){
        //         offset = 1;
        //     }else{
        //         if($(range.startContainer).nextUntil($(range.endContainer)).length){
        //             $(range.startContainer).nextUntil($(range.endContainer)).length + 2
        //         }else{
        //             offset = 2
        //         }
        //     }
        //     // debugger
        //     var listStart = range.startOffset;
        //     var listEnd = range.endOffset;
        //     range.setStart($(range.startContainer).parents('.breakPage_0')[0],listStart);
        //     range.setEnd($(range.endContainer).parents('.breakPage_0')[0],offset);
        //     range.collapsed = false
        // }
        range.enlarge(true, function (node) {
          return notExchange[node.tagName];
        });

        frag = me.document.createDocumentFragment();

        var bk = range.createBookmark(),
          current = domUtils.getNextDomNode(bk.start, false, filterFn),
          tmpRange = range.cloneRange(),
          tmpNode,
          block = domUtils.isBlockElm;

        while (
          current &&
          current !== bk.end &&
          domUtils.getPosition(current, bk.end) & domUtils.POSITION_PRECEDING
        ) {
          var listPadding =
            parseInt($(current).find("span").css("font-size")) * 1.5;
          //添加列表时，取消自动缩进
          if (parseInt($(current).css("text-indent")) > 0) {
            $(current).css("text-indent", "");
          }
          // 列表的序号大小跟第一个文本的大小一样
          var liFontsize;
          if (
            $(current).text().indexOf($(current).children().first().text()) == 0
          ) {
            liFontsize = $(current).children().first().css("font-size");
          }
          // if($(current).children().first()[0].tagName == 'SPAN' && $(current).children().first().css('font-size')){
          //     liFontsize = $(current).children().first().css('font-size');
          // };
          if (current.nodeType == 3 || dtd.li[current.tagName]) {
            if (current.nodeType == 1 && dtd.$list[current.tagName]) {
              while (current.firstChild) {
                frag.appendChild(current.firstChild);
              }
              tmpNode = domUtils.getNextDomNode(current, false, filterFn);
              domUtils.remove(current);
              current = tmpNode;
              continue;
            }
            tmpNode = current;
            tmpRange.setStartBefore(current);

            while (
              current &&
              current !== bk.end &&
              (!block(current) || domUtils.isBookmarkNode(current))
            ) {
              tmpNode = current;
              current = domUtils.getNextDomNode(
                current,
                false,
                null,
                function (node) {
                  return !notExchange[node.tagName];
                }
              );
            }

            if (current && block(current)) {
              tmp = domUtils.getNextDomNode(tmpNode, false, filterFn);
              if (tmp && domUtils.isBookmarkNode(tmp)) {
                current = domUtils.getNextDomNode(tmp, false, filterFn);
                tmpNode = tmp;
              }
            }
            tmpRange.setEndAfter(tmpNode);

            current = domUtils.getNextDomNode(tmpNode, false, filterFn);
            // console.log(current && current !== bk.end && (domUtils.getPosition( current, bk.end ) & domUtils.POSITION_PRECEDING))
            var li = range.document.createElement("li");
            // if(editor.container.getAttribute('isfullscreen') == 'fullScreen'){
            //     tmpRange.setStart($(tmpRange.startContainer).parents('.breakPage_0')[0],1);
            //     tmpRange.setEnd($(tmpRange.endContainer).parents('.breakPage_0')[0],1);
            // li.appendChild(tmpRange.startContainer)
            // }else{
            //     li.appendChild( tmpRange.extractContents() );
            // }

            li.appendChild(tmpRange.extractContents());
            frag.appendChild(li);

            // 列表的序号大小跟第一个文本的大小一样
            if (liFontsize) {
              $(li).find("p").css("font-size", "12px");
              li.style.fontSize = liFontsize;
            }
          } else {
            current = domUtils.getNextDomNode(current, true, filterFn);
          }
        }
        range.moveToBookmark(bk).collapse(true);
        list = me.document.createElement(tag);
        // domUtils.setStyle( list, 'list-style-type', style );

        domUtils.setStyles(list, {
          "list-style-type": style,
          "padding-left": listPadding + "px"
        });
        list.appendChild(frag);

        // if(!me.container.getAttribute('isFullScreen')){console.log(me.container.getAttribute('isFullScreen'))
        range.insertNode(list);
        // }else{
        //     console.log(range.startContainer)
        //     range.insertNode( list );
        // }

        //当前list上下看能否合并
        adjustList(list, tag, style);
        range.moveToBookmark(bko).select();
      },
      queryCommandState: function (command) {
        return this.highlight
          ? -1
          : utils.findNode(this.selection.getStartElementPath(), [
              command.toLowerCase() == "insertorderedlist" ? "ol" : "ul"
            ])
          ? 1
          : 0;
      },
      queryCommandValue: function (command) {
        var node = utils.findNode(this.selection.getStartElementPath(), [
          command.toLowerCase() == "insertorderedlist" ? "ol" : "ul"
        ]);
        return node ? domUtils.getComputedStyle(node, "list-style-type") : null;
      }
    };
  };
  //list.js end
  //source.js start
  ///import plugins/serialize.js
  ///import plugins/undo.js
  ///commands 查看源码
  ///commandsName  Source
  ///commandsTitle  查看源码
  /**
   * 切换源码模式和编辑模式
   * @command source
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * editor.execCommand( 'source');
   * ```
   */

  /**
   * 查询当前编辑区域的状态是源码模式还是可视化模式
   * @command source
   * @method queryCommandState
   * @param { String } cmd 命令字符串
   * @return { int } 如果当前是源码编辑模式，返回1，否则返回0
   * @example
   * ```javascript
   * editor.queryCommandState( 'source' );
   * ```
   */
  (function () {
    function SourceFormater(config) {
      config = config || {};
      this.indentChar = config.indentChar || "    ";
      this.breakChar = config.breakChar || "\n";
      this.selfClosingEnd = config.selfClosingEnd || " />";
    }
    var unhtml1 = (function () {
      var map = { "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" };
      function rep(m) {
        return map[m];
      }
      return function (str) {
        str = str + "";
        return str ? str.replace(/[<>"']/g, rep) : "";
      };
    })();
    var inline = utils.extend({ a: 1, A: 1 }, dtd.$inline, true);

    function printAttrs(attrs) {
      var buff = [];
      for (var k in attrs) {
        buff.push(k + '="' + unhtml1(attrs[k]) + '"');
      }
      return buff.join(" ");
    }
    SourceFormater.prototype = {
      format: function (html) {
        var node = UE.serialize.parseHTML(html);
        this.buff = [];
        this.indents = "";
        this.indenting = 1;
        this.visitNode(node);
        return this.buff.join("");
      },
      visitNode: function (node) {
        if (node.type == "fragment") {
          this.visitChildren(node.children);
        } else if (node.type == "element") {
          var selfClosing = dtd.$empty[node.tag];
          this.visitTag(node.tag, node.attributes, selfClosing);

          this.visitChildren(node.children);

          if (!selfClosing) {
            this.visitEndTag(node.tag);
          }
        } else if (node.type == "comment") {
          this.visitComment(node.data);
        } else {
          this.visitText(node.data, dtd.$notTransContent[node.parent.tag]);
        }
      },
      visitChildren: function (children) {
        for (var i = 0; i < children.length; i++) {
          this.visitNode(children[i]);
        }
      },
      visitTag: function (tag, attrs, selfClosing) {
        if (this.indenting) {
          this.indent();
        } else if (!inline[tag]) {
          // todo: 去掉a, 因为dtd的inline里面没有a
          this.newline();
          this.indent();
        }
        this.buff.push("<", tag);
        var attrPart = printAttrs(attrs);
        if (attrPart) {
          this.buff.push(" ", attrPart);
        }
        if (selfClosing) {
          this.buff.push(this.selfClosingEnd);
          if (tag == "br") {
            this.newline();
          }
        } else {
          this.buff.push(">");
          this.indents += this.indentChar;
        }
        if (!inline[tag]) {
          this.newline();
        }
      },
      indent: function () {
        this.buff.push(this.indents);
        this.indenting = 0;
      },
      newline: function () {
        this.buff.push(this.breakChar);
        this.indenting = 1;
      },
      visitEndTag: function (tag) {
        this.indents = this.indents.slice(0, -this.indentChar.length);
        if (this.indenting) {
          this.indent();
        } else if (!inline[tag]) {
          this.newline();
          this.indent();
        }
        this.buff.push("</", tag, ">");
      },
      visitText: function (text, notTrans) {
        if (this.indenting) {
          this.indent();
        }

        //if(!notTrans){
        //     text = text.replace(/&nbsp;/g, ' ').replace(/[ ][ ]+/g, function (m){
        //        return new Array(m.length + 1).join('&nbsp;');
        //    }).replace(/(?:^ )|(?: $)/g, '&nbsp;');
        //}
        //text = text.replace(/&nbsp;/g, ' ');
        this.buff.push(text);
      },
      visitComment: function (text) {
        if (this.indenting) {
          this.indent();
        }
        this.buff.push("<!--", text, "-->");
      }
    };

    var sourceEditors = {
      textarea: function (editor, holder) {
        var textarea = holder.ownerDocument.createElement("textarea");
        if (editor.container.getAttribute("isfullscreen") == "fullScreen") {
          textarea.style.cssText =
            "position:absolute;resize:none;width:75%;max-width:1200px;height:100%;border:0;padding:0;margin:auto;left:0px;right:0;overflow-y:auto;padding: 50px 50px 100px 50px;box-sizing:border-box;";
        } else {
          textarea.style.cssText =
            "position:absolute;resize:none;width:100%;height:100%;border:0;padding:0;margin:0;overflow-y:auto;";
        }
        // todo: IE下只有onresize属性可用... 很纠结
        if (browser.ie && browser.version < 8) {
          textarea.style.width = holder.offsetWidth + "px";
          textarea.style.height = holder.offsetHeight + "px";
          holder.onresize = function () {
            textarea.style.width = holder.offsetWidth + "px";
            textarea.style.height = holder.offsetHeight + "px";
          };
        }
        holder.appendChild(textarea);
        return {
          setContent: function (content) {
            textarea.value = content;
          },
          getContent: function () {
            return textarea.value;
          },
          select: function () {
            var range;
            if (browser.ie) {
              range = textarea.createTextRange();
              range.collapse(true);
              range.select();
            } else {
              //todo: chrome下无法设置焦点
              textarea.setSelectionRange(0, 0);
              textarea.focus();
            }
          },
          dispose: function () {
            holder.removeChild(textarea);
            // todo
            holder.onresize = null;
            textarea = null;
            holder = null;
          }
        };
      },
      codemirror: function (editor, holder) {
        var codeEditor = window.CodeMirror(holder, {
          mode: "text/html",
          tabMode: "indent",
          lineNumbers: true,
          lineWrapping: true
        });
        var dom = codeEditor.getWrapperElement();
        dom.style.cssText =
          'position:absolute;left:0;top:0;width:100%;height:100%;font-family:consolas,"Courier new",monospace;font-size:13px;';
        codeEditor.getScrollerElement().style.cssText =
          "position:absolute;left:0;top:0;width:100%;height:100%;";
        codeEditor.refresh();
        return {
          getCodeMirror: function () {
            return codeEditor;
          },
          setContent: function (content) {
            codeEditor.setValue(content);
          },
          getContent: function () {
            return codeEditor.getValue();
          },
          select: function () {
            codeEditor.focus();
          },
          dispose: function () {
            holder.removeChild(dom);
            dom = null;
            codeEditor = null;
          }
        };
      }
    };

    UE.plugins["source"] = function () {
      var me = this;
      var opt = this.options;
      var formatter = new SourceFormater(opt.source);
      var sourceMode = false;
      var sourceEditor;

      opt.sourceEditor = browser.ie
        ? "textarea"
        : opt.sourceEditor || "codemirror";

      me.setOpt({
        sourceEditorFirst: false
      });
      function createSourceEditor(holder) {
        return sourceEditors[
          opt.sourceEditor == "codemirror" && window.CodeMirror
            ? "codemirror"
            : "textarea"
        ](me, holder);
      }

      var bakCssText;
      //解决在源码模式下getContent不能得到最新的内容问题
      var oldGetContent = me.getContent,
        bakAddress;

      me.commands["source"] = {
        execCommand: function () {
          sourceMode = !sourceMode;

          if (me.container.getAttribute("isfullscreen") !== "fullScreen") {
            if (sourceMode) {
              $(me.container).find(".edui-editor-iframeholder").css({
                position: "relative",
                "z-index": "-1"
              });

              //图文展示对于免费用户的提示
              me.options.htmlModuleRichTip && me.options.htmlModuleRichTip();
              // console.log(me.options)
              bakAddress = me.selection.getRange().createAddress(false, true);
              me.undoManger && me.undoManger.save(true);
              if (browser.gecko) {
                me.body.contentEditable = false;
              }

              // bakCssText = me.iframe.style.cssText;
              // me.iframe.style.cssText += 'position:absolute;left:-32768px;top:-32768px;';
              bakCssText = $(me.container).find(
                ".edui-editor-iframeholder iframe"
              )[0].style.cssText;
              $(me.container).find(
                ".edui-editor-iframeholder iframe"
              )[0].style.cssText +=
                "position:absolute;left:-32768px;top:-32768px;";
              //过滤一些空标签
              //var content = formatter.format(me.hasContents() ? me.getContent() : '');
              var content = formatter.format(
                me.getContent() == "<p><br /></p>" ? "" : me.getContent()
              );
              // sourceEditor = createSourceEditor(me.iframe.parentNode);
              sourceEditor = createSourceEditor(
                $(me.container).find(".edui-editor-iframeholder iframe")[0]
                  .parentNode
              );

              sourceEditor.setContent(content);
              setTimeout(function () {
                sourceEditor.select();
                me.addListener("fullscreenchanged", function () {
                  try {
                    sourceEditor.getCodeMirror().refresh();
                  } catch (e) {}
                });
              });

              //重置getContent，源码模式下取值也能是最新的数据
              UE.plugins["source"].getContent = me.getContent = function () {
                var cont =
                  sourceEditor.getContent() ||
                  "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
                return cont
                  .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                  .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                  .replace(/>[\n\r\t]+</g, "><");
              };

              //图文展示对于免费用户的提示
              var tuwenTip =
                me.options.htmlModuleRichTip &&
                $(me.container).parents("body").find("#faisco_rich_tip").length;
              var responsiveTip =
                me.options.isResponsive &&
                window.top.document.getElementsByClassName("c_message").length;
              // if(me.options.htmlModuleRichTip && $(me.container).parents('body').find('#faisco_rich_tip').length){
              if (tuwenTip || responsiveTip) {
                $(me.container).find("textarea").attr("readonly", "readonly");
                $(me.container)
                  .find("textarea")
                  .css("background-color", "#fff");
              }
              // 源码状态下同步更新内容，保存时才是最新数据
              $(me.container)
                .find("textarea")
                .on("input", function () {
                  var cont =
                    sourceEditor.getContent() ||
                    "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
                  cont = cont
                    .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                    .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                    .replace(/>[\n\r\t]+</g, "><");
                  me.setContent(cont);
                });
            } else {
              $(me.container).find(".edui-editor-iframeholder").css({
                position: "",
                "z-index": ""
              });
              // me.iframe.style.cssText = bakCssText;
              $(me.container).find(
                ".edui-editor-iframeholder iframe"
              )[0].style.cssText = bakCssText;
              var cont =
                sourceEditor.getContent() ||
                "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
              cont = cont
                .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                .replace(/>[\n\r\t]+</g, "><");

              me.setContent(cont);
              sourceEditor.dispose();
              sourceEditor = null;
              //还原getContent方法
              me.getContent = oldGetContent;
              var first = me.body.firstChild;
              //trace:1106 都删除空了，下边会报错，所以补充一个p占位
              if (!first) {
                me.body.innerHTML =
                  "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
                first = me.body.firstChild;
              }
              //要在ifm为显示时ff才能取到selection,否则报错
              //这里不能比较位置了
              me.undoManger && me.undoManger.save(true);

              if (browser.gecko) {
                var input = document.createElement("input");
                input.style.cssText = "position:absolute;left:0;top:-32768px";

                document.body.appendChild(input);

                me.body.contentEditable = false;
                setTimeout(function () {
                  domUtils.setViewportOffset(input, { left: -32768, top: 0 });
                  input.focus();
                  setTimeout(function () {
                    me.body.contentEditable = true;
                    me.selection.getRange().moveToAddress(bakAddress).select();
                    domUtils.remove(input);
                  });
                });
              } else {
                //ie下有可能报错，比如在代码顶头的情况
                try {
                  me.selection.getRange().moveToAddress(bakAddress).select();
                } catch (e) {}
              }
            }
          } else {
            if (sourceMode) {
              $(me.container).find(".edui-editor-iframeholder").css({
                position: "relative",
                "z-index": "-1"
              });
              //图文展示对于免费用户的提示
              me.options.htmlModuleRichTip && me.options.htmlModuleRichTip();

              bakAddress = me.selection.getRange().createAddress(false, true);
              me.undoManger && me.undoManger.save(true);
              if (browser.gecko) {
                me.body.contentEditable = false;
              }
              // 保留滚动条
              $(me.body).css("height", "802px");

              // bakCssText = me.iframe.style.cssText;
              bakCssText = $(me.container).find(
                ".edui-editor-iframeholder iframe"
              )[0].style.cssText;
              // me.iframe.style.cssText += 'position:absolute;left:-32768px;top:-32768px;';
              for (
                var i = 0;
                i < $(me.body).find(".breakPageParent").length;
                i++
              ) {
                // $(me.body).find('.breakPageParent')[i].style.left = '-23343px';
                $($(me.body).find(".breakPageParent")[i]).css({
                  left: "-23343px",
                  top: "-23343px"
                });
              }
              //过滤一些空标签
              //var content = formatter.format(me.hasContents() ? me.getContent() : '');
              var content;
              if ($(me.body).find(".breakPage").length === 1) {
                content = formatter.format(
                  $(me.body).find(".breakPage").html() == "<p><br></p>"
                    ? ""
                    : $(me.body).find(".breakPage").html()
                );
              } else {
                var sourceString = "";
                for (var i = 0; i < $(me.body).find(".breakPage").length; i++) {
                  if (i < $(me.body).find(".breakPage").length - 1) {
                    sourceString =
                      sourceString +
                      $($(me.body).find(".breakPage")[i]).html() +
                      "_baidu_page_break_tag_";
                  } else {
                    sourceString =
                      sourceString + $($(me.body).find(".breakPage")[i]).html();
                  }
                }
                content = formatter.format(sourceString);
              }
              // var content = formatter.format(me.getContent().slice(111,-12) == '<p><br /></p>' ? '' : me.getContent().slice(111,-12));
              // var content = formatter.format(me.getContent() == '<p><br /></p>' ? '' : me.getContent());
              // sourceEditor = createSourceEditor(me.iframe.parentNode);
              sourceEditor = createSourceEditor(
                $(me.container).find(".edui-editor-iframeholder iframe")[0]
                  .parentNode
              );

              sourceEditor.setContent(content);
              setTimeout(function () {
                sourceEditor.select();
                me.addListener("fullscreenchanged", function () {
                  try {
                    sourceEditor.getCodeMirror().refresh();
                  } catch (e) {}
                });
              });
              // 设置源码框textarea的样式
              var textareaWidth =
                $(me.container).find("#edui1_iframeholder").width() -
                $(me.container).find("textarea").offset().left;
              $(me.container).find("textarea").css({
                "margin-top": "20px"
                // 'width':textareaWidth
              });

              $(editor.body).find(".backgroundBtn")[0].onclick = function () {
                if ($(editor.body).attr("isChangeBg") == "true") {
                  $(this).css("background-position", "-596px -247px");
                  $(me.container).find("textarea").addClass("changeBgColor");
                  $(editor.body).attr("isChangeBg", "");
                } else {
                  $(this).css("background-position", "");
                  $(me.container).find("textarea").removeClass("changeBgColor");
                  $(editor.body).attr("isChangeBg", "true");
                }
              };
              $(editor.body)
                .find(".backgroundBtn")
                .addClass("backgroundBtnMask");
              $(editor.body).find(".backgroundBtnMask")[0].onclick = function (
                e
              ) {
                e.preventDefault();
                e.stopPropagation();
                return false;
              };
              $(editor.body).find(
                ".backgroundBtnMask"
              )[0].onmouseover = function (e) {
                $(editor.body).find(".backgroundBtn").css("width", "42px");
                e.preventDefault();
                e.stopPropagation();
                return false;
              };

              //重置getContent，源码模式下取值也能是最新的数据
              UE.plugins["source"].getContent = me.getContent = function () {
                var cont =
                  sourceEditor.getContent() ||
                  "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
                return cont
                  .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                  .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                  .replace(/>[\n\r\t]+</g, "><");
              };

              //图文展示对于免费用户的提示
              if (
                me.options.htmlModuleRichTip &&
                $(me.container).parents("body").find("#faisco_rich_tip").length
              ) {
                // if(me.options.htmlModuleRichTip){
                $(me.container).find("textarea").attr("readonly", "readonly");
                $(me.container)
                  .find("textarea")
                  .css("background-color", "#fff");
                var tipLeft = (parseInt($(me.body).width()) - 430) * 0.5;
                $(me.container)
                  .parents("#app")
                  .find("#faisco_rich_tip")
                  .css({ "z-index": "999", left: tipLeft });
              }
            } else {
              $(me.container).find(".edui-editor-iframeholder").css({
                position: "",
                "z-index": ""
              });
              // $(me.body).css('height','791px')
              // me.iframe.style.cssText = bakCssText;
              $(me.container).find(
                ".edui-editor-iframeholder iframe"
              )[0].style.cssText = bakCssText;
              var cont =
                sourceEditor.getContent() ||
                "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
              cont = cont
                .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                .replace(/>[\n\r\t]+</g, "><");
              var contString = "";
              var changeBgColor = me.body.getAttribute("isChangeBg")
                ? ""
                : "changeBgColor";
              if (cont.indexOf("_baidu_page_break_tag_") > 0) {
                for (
                  var i = 0;
                  i <= cont.split("_baidu_page_break_tag_").length - 1;
                  i++
                ) {
                  if (i === 0) {
                    contString =
                      contString +
                      '<div contenteditable="false" class="staticBtn">' +
                      '<div contenteditable="false" class="htmlBtn"></div>' +
                      '<div contenteditable="false" class="backgroundBtn"></div>' +
                      "</div>" +
                      '<div class="breakPageParent" contenteditable="false">' +
                      '<div class="breakPage breakPage_0 ' +
                      changeBgColor +
                      '" contenteditable="true">' +
                      cont.split("_baidu_page_break_tag_")[i] +
                      "</div>" +
                      "</div>";
                  } else {
                    contString =
                      contString +
                      '<div class="breakPageParent" contenteditable="false">' +
                      '<div class="breakPage breakPage_0  ' +
                      changeBgColor +
                      '" contenteditable="true">' +
                      cont.split("_baidu_page_break_tag_")[i] +
                      "</div>" +
                      '<div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击击取消分页" class="pageBreakCloseIcon"></div></div>' +
                      "</div>";
                  }
                }
                cont = contString;
              } else {
                cont =
                  '<div contenteditable="false" class="staticBtn">' +
                  '<div contenteditable="false" class="htmlBtn"></div>' +
                  '<div contenteditable="false" class="backgroundBtn"></div>' +
                  "</div>" +
                  '<div class="breakPageParent" contenteditable="false">' +
                  '<div class="breakPage breakPage_0 ' +
                  changeBgColor +
                  '" contenteditable="true">' +
                  cont +
                  "</div>" +
                  "</div>";
              }

              cont = cont
                .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                .replace(/>[\n\r\t]+</g, "><");
              me.setContent(cont);
              sourceEditor.dispose();
              sourceEditor = null;
              //还原getContent方法
              me.getContent = oldGetContent;
              var first = me.body.firstChild;
              //trace:1106 都删除空了，下边会报错，所以补充一个p占位
              if (!first) {
                me.body.innerHTML =
                  "<p>" + (browser.ie ? "" : "<br/>") + "</p>";
                first = me.body.firstChild;
              }
              //要在ifm为显示时ff才能取到selection,否则报错
              //这里不能比较位置了
              me.undoManger && me.undoManger.save(true);

              if ($(me.body).find(".pageBreakClose").length === 0) {
                var breakPageHeight = $(me.body).css("height");
                $(me.body)
                  .find(".breakPage")
                  .css("min-height", breakPageHeight);
                $(me.body).find(".breakPageParent").css("height", "100%");
              }
              //
              if (changeBgColor) {
                $(editor.body)
                  .find(".backgroundBtn")
                  .css("background-position", "-596px -247px");
              }

              for (
                var j = 0;
                j < $(me.body).find(".pageBreakClose").length;
                j++
              ) {
                $(me.body).find(".pageBreakCloseIcon")[
                  j
                ].onclick = function () {
                  var closeStart = $(this)
                    .parents(".breakPageParent")
                    .prev()
                    .find("p")[0];
                  var closeEnd = $(this)
                    .parents(".breakPageParent")
                    .prev()
                    .find("p")[0];
                  if (
                    !$(this).parent().prev().find("p").length &&
                    !$(this).parent().prev().find("div").length
                  ) {
                    $(this).parent().prev().children().appendTo($("<p></p>"));
                    var con = $("<p></p>").append(
                      $(this).parent().prev().html()
                    );
                    con.appendTo(
                      $(this)
                        .parents(".breakPageParent")
                        .prev()
                        .find(".breakPage")
                    );
                  } else {
                    $($(this).parent().prev().html()).appendTo(
                      $(this)
                        .parents(".breakPageParent")
                        .prev()
                        .find(".breakPage")
                    );
                  }
                  $(this).parents(".breakPageParent").remove();

                  if ($(me.body).find(".pageBreakClose").length === 0) {
                    var breakPageHeight = $(me.body).css("height");
                    $(me.body)
                      .find(".breakPage")
                      .css("min-height", breakPageHeight);
                    $(me.body).find(".breakPageParent").css("height", "100%");
                  }

                  // 改变光标的位置
                  var closeRange = editor.selection.getRange();
                  closeRange.setStart(closeStart, 0);
                  closeRange.setEnd(closeEnd, 0);
                  closeRange.select(true);
                };
                $(me.body).find(".pageBreakClose")[j].ondblclick = function () {
                  var closeStart = $(this)
                    .parents(".breakPageParent")
                    .prev()
                    .find("p")[0];
                  var closeEnd = $(this)
                    .parents(".breakPageParent")
                    .prev()
                    .find("p")[0];
                  if (
                    !$(this).prev().find("p").length &&
                    !$(this).prev().find("div").length
                  ) {
                    $(this).prev().children().appendTo($("<p></p>"));
                    var con = $("<p></p>").append($(this).prev().html());
                    con.appendTo(
                      $(this)
                        .parents(".breakPageParent")
                        .prev()
                        .find(".breakPage")
                    );
                  } else {
                    $($(this).prev().html()).appendTo(
                      $(this)
                        .parents(".breakPageParent")
                        .prev()
                        .find(".breakPage")
                    );
                  }
                  $(this).parents(".breakPageParent").remove();

                  if ($(me.body).find(".pageBreakClose").length === 0) {
                    var breakPageHeight = $(me.body).css("height");
                    $(me.body)
                      .find(".breakPage")
                      .css("min-height", breakPageHeight);
                    $(me.body).find(".breakPageParent").css("height", "100%");
                  }

                  // 改变光标的位置
                  var closeRange = editor.selection.getRange();
                  closeRange.setStart(closeStart, 0);
                  closeRange.setEnd(closeEnd, 0);
                  closeRange.select(true);
                };
              }
              var staticBtnRight =
                (parseInt($(me.container).width()) -
                  parseInt($(me.body).find(".breakPageParent").width())) *
                  0.5 -
                131;
              $(editor.body).find(".staticBtn").css("right", staticBtnRight);
              var bgHandle, htmlHandle, setHandle;
              $(editor.body).find(".backgroundBtn")[0].onmouseover = function (
                e
              ) {
                setHandle = setTimeout(function () {
                  $(e.target, this).text("黑色背景");
                }, 50);
              };
              $(editor.body).find(".backgroundBtn")[0].onmouseout = function (
                e
              ) {
                clearTimeout(setHandle);
                $(e.target).text("");
              };
              $(editor.body).find(".htmlBtn")[0].onmouseover = function (e) {
                htmlHandle = setTimeout(function () {
                  $(e.target).text("html视图");
                }, 50);
              };
              $(editor.body).find(".htmlBtn")[0].onmouseout = function (e) {
                clearTimeout(htmlHandle);
                $(e.target).text("");
              };
              $(editor.body).find(".htmlBtn")[0].onclick = function () {
                $(this).css("background-position", "-595px -296px");
                $(editor.container)
                  .find(".edui-for-source .edui-button-body")
                  .click();
              };
              $(editor.body).find(".backgroundBtn")[0].onclick = function () {
                if ($(editor.body).attr("isChangeBg") == "true") {
                  var deleteOptions = {
                    tips: "仅用于预览编辑，不改变页面实际背景"
                  };
                  domUtils.ing(deleteOptions);
                  $(this).css("background-position", "-596px -247px");
                  var breakPageLength = $(editor.body).find(".breakPage")
                    .length;
                  for (var i = 0; i < breakPageLength; i++) {
                    $($(editor.body).find(".breakPage")[i]).addClass(
                      "changeBgColor"
                    );
                  }
                  $(editor.body).attr("isChangeBg", "");
                } else {
                  $(this).css("background-position", "");
                  var breakPageLength = $(editor.body).find(".breakPage")
                    .length;
                  for (var i = 0; i < breakPageLength; i++) {
                    $($(editor.body).find(".breakPage")[i]).removeClass(
                      "changeBgColor"
                    );
                  }
                  $(editor.body).attr("isChangeBg", "true");
                }
              };
              $(editor.body)
                .find(".backgroundBtn")
                .removeClass("backgroundBtnMask");
            }
          }
          // if(me.body.getAttribute('isChangeBg') == 'true'){
          //     $(me.container).find('textarea').removeClass('changeBgColor')
          // }else{
          //     $(me.container).find('textarea').addClass('changeBgColor')
          // }
          this.fireEvent("sourcemodechanged", sourceMode);
          UE.plugins["source"].sourceMode = sourceMode;
        },
        queryCommandState: function () {
          return sourceMode | 0;
        },
        notNeedUndo: 1
      };
      var oldQueryCommandState = me.queryCommandState;

      me.queryCommandState = function (cmdName) {
        cmdName = cmdName.toLowerCase();
        if (sourceMode) {
          //源码模式下可以开启的命令
          return cmdName in
            {
              source: 1,
              fullscreen: 1
            }
            ? 1
            : -1;
        }
        return oldQueryCommandState.apply(this, arguments);
      };
    };
  })();
  //source.js end
  //fiximgclick.js start
  ///commands 修复chrome下图片不能点击的问题
  ///commandsName  FixImgClick
  ///commandsTitle  修复chrome下图片不能点击的问题
  //修复chrome下图片不能点击的问题
  //todo 可以改大小
  UE.plugins["fiximgclick"] = function () {
    var me = this;
    if (browser.webkit) {
      me.addListener("click", function (type, e) {
        if (e.target.tagName == "IMG") {
          var range = new dom.Range(me.document);
          range.selectNode(e.target).select();
        }
      });
    }
  };
  //fiximgclick.js end
  //rowspacing.js start
  ///import plugins\paragraph.js
  ///commands 段间距
  ///commandsName  RowSpacingBottom,RowSpacingTop
  ///commandsTitle  段间距
  /**
   * @description 设置段前距,段后距
   * @name baidu.editor.execCommand
   * @param   {String}   cmdName     rowspacing设置段间距
   * @param   {String}   value              值，以px为单位
   * @param   {String}   dir          top或bottom段前后段后
   * @example
   * ```javascript
   * editor.execCommand( 'rowspacing', '10', 'top' );
   * ```
   */
  UE.plugins["rowspacing"] = function () {
    var me = this;
    me.setOpt({
      rowspacingtop: ["5", "10", "15", "20", "25"],
      rowspacingbottom: ["5", "10", "15", "20", "25"]
    });
    me.commands["rowspacing"] = {
      execCommand: function (cmdName, value, dir) {
        this.execCommand("paragraph", "p", {
          style: "margin-" + dir + ":" + value + "px"
        });
        return true;
      },
      queryCommandValue: function (cmdName, dir) {
        var pN = utils.findNode(
            this.selection.getStartElementPath(),
            null,
            function (node) {
              return domUtils.isBlockElm(node);
            }
          ),
          value;
        //trace:1026
        if (pN) {
          value = domUtils
            .getComputedStyle(pN, "margin-" + dir)
            .replace(/[^\d]/g, "");
          return !value ? 0 : value;
        }
        return 0;
      },
      queryCommandState: function () {
        return this.highlight ? -1 : 0;
      }
    };
  };
  //rowspacing.js end
  //autoheight.js start
  ///import core
  ///commands 当输入内容超过编辑器高度时，编辑器自动增高
  ///commandsName  AutoHeight,autoHeightEnabled
  ///commandsTitle  自动增高
  /**
   * @description 自动伸展
   */
  UE.plugins["autoheight"] = function () {
    var me = this;
    //提供开关，就算加载也可以关闭
    me.autoHeightEnabled = me.options.autoHeightEnabled;
    if (!me.autoHeightEnabled) {
      return;
    }

    var bakOverflow,
      span,
      tmpNode,
      lastHeight = 0,
      currentHeight,
      timer;
    function adjustHeight() {
      clearTimeout(timer);
      timer = setTimeout(function () {
        if (me.queryCommandState("source") != 1) {
          if (!span) {
            span = me.document.createElement("span");
            //trace:1764
            span.style.cssText =
              "display:block;width:0;margin:0;padding:0;border:0;clear:both;";
            span.innerHTML = ".";
          }
          tmpNode = span.cloneNode(true);
          me.body.appendChild(tmpNode);

          currentHeight = Math.max(
            domUtils.getXY(tmpNode).y + tmpNode.offsetHeight,
            me.options.minFrameHeight
          );

          if (currentHeight != lastHeight) {
            me.setHeight(currentHeight);

            lastHeight = currentHeight;
          }

          domUtils.remove(tmpNode);
        }
      }, 50);
    }
    me.addListener("destroy", function () {
      me.removeListener("contentchange", adjustHeight);
      me.removeListener("keyup", adjustHeight);
      me.removeListener("mouseup", adjustHeight);
    });
    me.enableAutoHeight = function () {
      if (!me.autoHeightEnabled) {
        return;
      }
      var doc = me.document;
      me.autoHeightEnabled = true;
      bakOverflow = doc.body.style.overflowY;
      doc.body.style.overflowY = "hidden";
      me.addListener("contentchange", adjustHeight);
      me.addListener("keyup", adjustHeight);
      me.addListener("mouseup", adjustHeight);
      //ff不给事件算得不对
      setTimeout(
        function () {
          adjustHeight();
        },
        browser.gecko ? 100 : 0
      );
      me.fireEvent("autoheightchanged", me.autoHeightEnabled);
    };
    me.disableAutoHeight = function () {
      me.body.style.overflowY = bakOverflow || "";

      me.removeListener("contentchange", adjustHeight);
      me.removeListener("keyup", adjustHeight);
      me.removeListener("mouseup", adjustHeight);
      me.autoHeightEnabled = false;
      me.fireEvent("autoheightchanged", me.autoHeightEnabled);
    };
    me.addListener("ready", function () {
      me.enableAutoHeight();
      //trace:1764
      var timer;
      domUtils.on(
        browser.ie ? me.body : me.document,
        browser.webkit ? "dragover" : "drop",
        function () {
          clearTimeout(timer);
          timer = setTimeout(function () {
            adjustHeight();
          }, 100);
        }
      );
    });
  };
  //autoheight.js end
  //serialize.js start
  ///import core
  ///commands 定制过滤规则
  ///commandsName  Serialize
  ///commandsTitle  定制过滤规则
  UE.plugins["serialize"] = function () {
    var ie = browser.ie,
      version = browser.version;

    function ptToPx(value) {
      return /pt/.test(value)
        ? value.replace(/([\d.]+)pt/g, function (str) {
            return Math.round((parseFloat(str) * 96) / 72) + "px";
          })
        : value;
    }
    var me = this,
      autoClearEmptyNode = me.options.autoClearEmptyNode,
      EMPTY_TAG = dtd.$empty,
      parseHTML = (function () {
        //干掉<a> 后便变得空格，保留</a>  这样的空格
        var RE_PART = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g,
          RE_ATTR = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g,
          EMPTY_ATTR = {
            checked: 1,
            compact: 1,
            declare: 1,
            defer: 1,
            disabled: 1,
            ismap: 1,
            multiple: 1,
            nohref: 1,
            noresize: 1,
            noshade: 1,
            nowrap: 1,
            readonly: 1,
            selected: 1
          },
          CDATA_TAG = { script: 1, style: 1 },
          NEED_PARENT_TAG = {
            li: { $: "ul", ul: 1, ol: 1 },
            dd: { $: "dl", dl: 1 },
            dt: { $: "dl", dl: 1 },
            option: { $: "select", select: 1 },
            td: { $: "tr", tr: 1 },
            th: { $: "tr", tr: 1 },
            tr: { $: "tbody", tbody: 1, thead: 1, tfoot: 1, table: 1 },
            tbody: { $: "table", table: 1, colgroup: 1 },
            thead: { $: "table", table: 1 },
            tfoot: { $: "table", table: 1 },
            col: { $: "colgroup", colgroup: 1 }
          };
        var NEED_CHILD_TAG = {
          table: "td",
          tbody: "td",
          thead: "td",
          tfoot: "td",
          // "tr": "td",
          colgroup: "col",
          ul: "li",
          ol: "li",
          dl: "dd",
          select: "option"
        };

        function parse(html, callbacks) {
          var match,
            nextIndex = 0,
            tagName,
            cdata;
          RE_PART.exec("");
          while ((match = RE_PART.exec(html))) {
            var tagIndex = match.index;
            if (tagIndex > nextIndex) {
              var text = html.slice(nextIndex, tagIndex);
              if (cdata) {
                cdata.push(text);
              } else {
                callbacks.onText(text);
              }
            }
            nextIndex = RE_PART.lastIndex;
            if ((tagName = match[1])) {
              tagName = tagName.toLowerCase();
              if (cdata && tagName == cdata._tag_name) {
                callbacks.onCDATA(cdata.join(""));
                cdata = null;
              }
              if (!cdata) {
                callbacks.onTagClose(tagName);
                continue;
              }
            }
            if (cdata) {
              cdata.push(match[0]);
              continue;
            }
            if ((tagName = match[3])) {
              if (/="/.test(tagName)) {
                continue;
              }
              tagName = tagName.toLowerCase();
              var attrPart = match[4],
                attrMatch,
                attrMap = {},
                selfClosing = attrPart && attrPart.slice(-1) == "/";
              if (attrPart) {
                RE_ATTR.exec("");
                while ((attrMatch = RE_ATTR.exec(attrPart))) {
                  var attrName = attrMatch[1].toLowerCase(),
                    attrValue =
                      attrMatch[2] || attrMatch[3] || attrMatch[4] || "";
                  if (!attrValue && EMPTY_ATTR[attrName]) {
                    attrValue = attrName;
                  }
                  if (attrName == "style") {
                    if (ie && version <= 6) {
                      attrValue = attrValue.replace(
                        /(?!;)\s*([\w-]+):/g,
                        function (m, p1) {
                          return p1.toLowerCase() + ":";
                        }
                      );
                    }
                  }
                  //没有值的属性不添加
                  if (attrValue) {
                    attrMap[attrName] = attrValue.replace(/:\s*/g, ":");
                  }
                }
              }
              callbacks.onTagOpen(tagName, attrMap, selfClosing);
              if (!cdata && CDATA_TAG[tagName]) {
                cdata = [];
                cdata._tag_name = tagName;
              }
              continue;
            }
            if ((tagName = match[2])) {
              callbacks.onComment(tagName);
            }
          }
          if (html.length > nextIndex) {
            callbacks.onText(html.slice(nextIndex, html.length));
          }
        }

        return function (html, forceDtd) {
          var fragment = {
            type: "fragment",
            parent: null,
            children: []
          };
          var currentNode = fragment;

          function addChild(node) {
            node.parent = currentNode;
            currentNode.children.push(node);
          }

          function addElement(element, open) {
            var node = element;

            // 遇到结构化标签的时候
            if (NEED_PARENT_TAG[node.tag]) {
              // 考虑这种情况的时候, 结束之前的标签
              // e.g. <table><tr><td>12312`<tr>`4566
              while (
                NEED_PARENT_TAG[currentNode.tag] &&
                NEED_PARENT_TAG[currentNode.tag][node.tag]
              ) {
                currentNode = currentNode.parent;
              }
              // 如果前一个标签和这个标签是同一级, 结束之前的标签
              // e.g. <ul><li>123<li>
              if (currentNode.tag == node.tag) {
                currentNode = currentNode.parent;
              }
              // 向上补齐父标签
              while (NEED_PARENT_TAG[node.tag]) {
                if (NEED_PARENT_TAG[node.tag][currentNode.tag]) break;
                node = node.parent = {
                  type: "element",
                  tag: NEED_PARENT_TAG[node.tag]["$"],
                  attributes: {},
                  children: [node]
                };
              }
            }

            //公司自己的需求
            /*if(node.attributes && node.attributes.class)
                                delete node.attributes.class;
                            if(node.attributes && node.attributes.id)
                                delete node.attributes.id;
                            */
            if (forceDtd) {
              // 如果遇到这个标签不能放在前一个标签内部，则结束前一个标签,span单独处理
              while (
                dtd[node.tag] &&
                !(currentNode.tag == "span"
                  ? utils.extend(dtd["strong"], { a: 1, A: 1 })
                  : dtd[currentNode.tag] || dtd["div"])[node.tag]
              ) {
                if (tagEnd(currentNode)) continue;
                if (!currentNode.parent) break;
                currentNode = currentNode.parent;
              }
            }
            node.parent = currentNode;
            currentNode.children.push(node);
            if (open) {
              currentNode = element;
            }
            if (element.attributes.style) {
              //去掉全部的style变小写，2014/8/21
              //element.attributes.style = element.attributes.style.toLowerCase();
            }
            return element;
          }

          // 结束一个标签的时候，需要判断一下它是否缺少子标签
          // e.g. <table></table>
          function tagEnd(node) {
            var needTag;
            if (!node.children.length && (needTag = NEED_CHILD_TAG[node.tag])) {
              addElement(
                {
                  type: "element",
                  tag: needTag,
                  attributes: {},
                  children: []
                },
                true
              );
              return true;
            }
            return false;
          }

          parse(html, {
            onText: function (text) {
              while (!(dtd[currentNode.tag] || dtd["div"])["#"]) {
                //节点之间的空白不能当作节点处理
                //if(/^[ \t\r\n]+$/.test( text )){
                //    return;
                //}
                if (tagEnd(currentNode)) continue;
                currentNode = currentNode.parent;
              }
              //if(/^[ \t\n\r]*/.test(text))
              addChild({
                type: "text",
                data: text
              });
            },
            onComment: function (text) {
              addChild({
                type: "comment",
                data: text
              });
            },
            onCDATA: function (text) {
              while (!(dtd[currentNode.tag] || dtd["div"])["#"]) {
                if (tagEnd(currentNode)) continue;
                currentNode = currentNode.parent;
              }
              addChild({
                type: "cdata",
                data: text
              });
            },
            onTagOpen: function (tag, attrs, closed) {
              closed = closed || EMPTY_TAG[tag];
              addElement(
                {
                  type: "element",
                  tag: tag,
                  attributes: attrs,
                  closed: closed,
                  children: []
                },
                !closed
              );
            },
            onTagClose: function (tag) {
              var node = currentNode;
              // 向上找匹配的标签, 这里不考虑dtd的情况是因为tagOpen的时候已经处理过了, 这里不会遇到
              while (node && tag != node.tag) {
                node = node.parent;
              }
              if (node) {
                // 关闭中间的标签
                for (
                  var tnode = currentNode;
                  tnode !== node.parent;
                  tnode = tnode.parent
                ) {
                  tagEnd(tnode);
                }
                //去掉空白的inline节点
                //分页，锚点保留
                //|| dtd.$removeEmptyBlock[node.tag])
                //if ( !node.children.length && dtd.$removeEmpty[node.tag] && !node.attributes.anchorname && node.attributes['class'] != 'pagebreak' && node.tag != 'a') {
                //    node.parent.children.pop();
                //}
                currentNode = node.parent;
              } else {
                // 如果没有找到开始标签, 则创建新标签
                // eg. </div> => <div></div>
                //针对视屏网站embed会给结束符，这里特殊处理一下
                if (
                  !(
                    dtd.$removeEmpty[tag] ||
                    dtd.$removeEmptyBlock[tag] ||
                    tag == "embed"
                  )
                ) {
                  node = {
                    type: "element",
                    tag: tag,
                    attributes: {},
                    children: []
                  };
                  addElement(node, true);
                  tagEnd(node);
                  currentNode = node.parent;
                }
              }
            }
          });
          // 处理这种情况, 只有开始标签没有结束标签的情况, 需要关闭开始标签
          // eg. <table>
          while (currentNode !== fragment) {
            tagEnd(currentNode);
            currentNode = currentNode.parent;
          }
          return fragment;
        };
      })();
    var unhtml1 = (function () {
      var map = { "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" };

      function rep(m) {
        return map[m];
      }

      return function (str) {
        str = str + "";
        return str ? str.replace(/[<>"']/g, rep) : "";
      };
    })();
    var toHTML = (function () {
      function printChildren(node, pasteplain, delIdClass) {
        var children = node.children;

        var buff = [];
        for (var i = 0, ci; (ci = children[i]); i++) {
          buff.push(toHTML(ci, pasteplain, delIdClass));
        }
        return buff.join("");
      }

      function printAttrs(attrs) {
        var buff = [];
        for (var k in attrs) {
          var value = attrs[k];

          if (k == "style") {
            //pt==>px
            value = ptToPx(value);
            //color rgb ==> hex
            if (/rgba?\s*\([^)]*\)/.test(value)) {
              value = value.replace(/rgba?\s*\(([^)]*)\)/g, function (str) {
                return utils.fixColor("color", str);
              });
            }
            // 过滤掉所有的white-space,在纯文本编辑器里粘贴过来的内容，到chrome中会带有span和white-space属性，导致出现不能折行的情况
            // 所以在这里去掉这个属性
            // attrs[k] = utils.optCss(value.replace(/windowtext/g,'#000'))
            //             .replace(/white-space[^;]+;/g,'');

            // 去掉 white-space 会导致微信的右滑图片效果被去掉。所以注释掉旧逻辑。如果有出现上面注释中的场景，再考虑方案。
            attrs[k] = utils.optCss(value.replace(/windowtext/g, "#000"));
          }

          buff.push(k + '="' + unhtml1(attrs[k]) + '"');
        }
        return buff.join(" ");
      }

      function printData(node, notTrans) {
        //trace:1399 输入html代码时空格转换成为&nbsp;
        //node.data.replace(/&nbsp;/g,' ') 针对pre中的空格和出现的&nbsp;把他们在得到的html代码中都转换成为空格，为了在源码模式下显示为空格而不是&nbsp;
        return notTrans
          ? node.data.replace(/&nbsp;/g, " ")
          : unhtml1(node.data).replace(/ /g, "&nbsp;");
      }

      //纯文本模式下标签转换
      var transHtml = {
        div: "p",
        li: "p",
        tr: "p",
        br: "br",
        p: "p" //trace:1398 碰到p标签自己要加上p,否则transHtml[tag]是undefined
      };

      function printElement(node, pasteplain, delIdClass) {
        if (
          node.type == "element" &&
          !node.children.length &&
          dtd.$removeEmpty[node.tag] &&
          node.tag != "a" &&
          utils.isEmptyObject(node.attributes) &&
          autoClearEmptyNode
        ) {
          // 锚点保留
          return html;
        }

        //公司自己的需求
        if (delIdClass) {
          //if(node.attributes && node.attributes['class'])
          //delete node.attributes['class'];
          if (node.attributes && node.attributes["id"])
            delete node.attributes["id"];
        }

        var tag = node.tag;
        if (pasteplain && tag == "td") {
          if (!html) html = "";
          html +=
            printChildren(node, pasteplain, delIdClass) + "&nbsp;&nbsp;&nbsp;";
        } else if (tag == "colgroup") {
          // colgroup不输出，输出会影响表格列宽度拖动结束后发生变化
        } else {
          var attrs = printAttrs(node.attributes);
          var html =
            "<" +
            (pasteplain && transHtml[tag] ? transHtml[tag] : tag) +
            (attrs ? " " + attrs : "") +
            (EMPTY_TAG[tag] ? " />" : ">");
          if (!EMPTY_TAG[tag]) {
            //trace:1627 ,2070
            //p标签为空，将不占位这里占位符不起作用，用&nbsp;或者br
            if (tag == "p" && !node.children.length) {
              html += browser.ie ? "&nbsp;" : "<br/>";
            }
            html += printChildren(node, pasteplain, delIdClass);
            html +=
              "</" +
              (pasteplain && transHtml[tag] ? transHtml[tag] : tag) +
              ">";
          }
        }

        return html;
      }

      return function (node, pasteplain, delIdClass) {
        if (node.type == "fragment") {
          return printChildren(node, pasteplain, delIdClass);
        } else if (node.type == "element") {
          return printElement(node, pasteplain, delIdClass);
        } else if (node.type == "text" || node.type == "cdata") {
          return printData(node, dtd.$notTransContent[node.parent.tag]);
        } else if (node.type == "comment") {
          return "<!--" + node.data + "-->";
        }
        return "";
      };
    })();

    //过滤word
    var transformWordHtml = (function () {
      function isWordDocument(strValue) {
        var re = new RegExp(
          /(class="?Mso|style="[^"]*\bmso\-|w:WordDocument|<v:)/gi
        );
        return re.test(strValue);
      }

      function ensureUnits(v) {
        v = v.replace(/([\d.]+)([\w]+)?/g, function (m, p1, p2) {
          return (Math.round(parseFloat(p1)) || 1) + (p2 || "px");
        });
        return v;
      }

      function filterPasteWord(str) {
        str = str
          .replace(/<!--\s*EndFragment\s*-->[\s\S]*$/, "")
          //remove link break
          .replace(/^(\r\n|\n|\r)|(\r\n|\n|\r)$/gi, "")
          //remove &nbsp; entities at the start of contents
          .replace(/^\s*(&nbsp;)+/gi, "")
          //remove &nbsp; entities at the end of contents
          .replace(/(&nbsp;|<br[^>]*>)+\s*$/gi, "")
          // Word comments like conditional comments etc
          .replace(/<!--[\s\S]*?-->/gi, "")
          //转换图片
          .replace(/<v:shape [^>]*>[\s\S]*?.<\/v:shape>/gi, function (str) {
            //opera能自己解析出image所这里直接返回空
            if (browser.opera) {
              return "";
            }

            try {
              var width = str.match(/width:([ \d.]*p[tx])/i)[1],
                height = str.match(/height:([ \d.]*p[tx])/i)[1],
                src = str.match(/src=\s*"([^"]*)"/i)[1];
              return (
                '<img width="' +
                ptToPx(width) +
                '" height="' +
                ptToPx(height) +
                '" src="' +
                src +
                '" />'
              );
            } catch (e) {
              return "";
            }
          })
          //去掉多余的属性
          .replace(/v:\w+=["']?[^'"]+["']?/g, "")
          // Remove comments, scripts (e.g., msoShowComment), XML tag, VML content, MS Office namespaced tags, and a few other tags
          .replace(
            /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|xml|meta|link|style|\w+:\w+)(?=[\s\/>]))[^>]*>/gi,
            ""
          )
          //convert word headers to strong
          .replace(
            /<p [^>]*class="?MsoHeading"?[^>]*>(.*?)<\/p>/gi,
            "<p><strong>$1</strong></p>"
          )
          //remove lang attribute
          .replace(/(lang)\s*=\s*([\'\"]?)[\w-]+\2/gi, "")
          //清除多余的font不能匹配&nbsp;有可能是空格
          .replace(/<font[^>]*>\s*<\/font>/gi, "")
          //清除多余的class
          .replace(
            /class\s*=\s*["']?(?:(?:MsoTableGrid)|(?:MsoListParagraph)|(?:MsoNormal(Table)?))\s*["']?/gi,
            ""
          );

        //修复了原有的问题, 比如style='fontsize:"宋体"'原来的匹配失效了
        str = str.replace(
          /(<[a-z][^>]*)\sstyle=(["'])([^\2]*?)\2/gi,
          function (str, tag, tmp, style) {
            var n = [],
              i = 0,
              s = style
                .replace(/^\s+|\s+$/, "")
                .replace(/&quot;/gi, "'")
                .split(/;\s*/g);

            // Examine each style definition within the tag's style attribute
            for (var i = 0; i < s.length; i++) {
              var v = s[i];
              var name,
                value,
                parts = v.split(":");

              if (parts.length == 2) {
                name = parts[0].toLowerCase();
                value = parts[1].toLowerCase();

                // Translate certain MS Office styles into their CSS equivalents
                switch (name) {
                  case "mso-padding-alt":
                  case "mso-padding-top-alt":
                  case "mso-padding-right-alt":
                  case "mso-padding-bottom-alt":
                  case "mso-padding-left-alt":
                  case "mso-margin-alt":
                  case "mso-margin-top-alt":
                  case "mso-margin-right-alt":
                  case "mso-margin-bottom-alt":
                  case "mso-margin-left-alt":
                  //ie下会出现挤到一起的情况
                  //case "mso-table-layout-alt":
                  case "mso-height":
                  case "mso-width":
                  case "mso-vertical-align-alt":
                    //trace:1819 ff下会解析出padding在table上
                    if (!/<table/.test(tag))
                      n[i] =
                        name.replace(/^mso-|-alt$/g, "") +
                        ":" +
                        ensureUnits(value);
                    continue;
                  case "horiz-align":
                    n[i] = "text-align:" + value;
                    continue;

                  case "vert-align":
                    n[i] = "vertical-align:" + value;
                    continue;

                  case "font-color":
                  case "mso-foreground":
                    n[i] = "color:" + value;
                    continue;

                  case "mso-background":
                  case "mso-highlight":
                    n[i] = "background:" + value;
                    continue;

                  case "mso-default-height":
                    n[i] = "min-height:" + ensureUnits(value);
                    continue;

                  case "mso-default-width":
                    n[i] = "min-width:" + ensureUnits(value);
                    continue;

                  case "mso-padding-between-alt":
                    n[i] =
                      "border-collapse:separate;border-spacing:" +
                      ensureUnits(value);
                    continue;

                  case "text-line-through":
                    if (value == "single" || value == "double") {
                      n[i] = "text-decoration:line-through";
                    }
                    continue;

                  //trace:1870
                  ////word里边的字体统一干掉
                  //case 'font-family':
                  //    continue;
                  case "mso-zero-height":
                    if (value == "yes") {
                      n[i] = "display:none";
                    }
                    continue;
                  case "margin":
                    if (!/[1-9]/.test(parts[1])) {
                      continue;
                    }
                }

                if (
                  /^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test(
                    name
                  )
                ) {
                  //if ( !/mso\-list/.test( name ) )
                  continue;
                }

                if (
                  /text\-indent|padding|margin/.test(name) &&
                  /\-[\d.]+/.test(value)
                ) {
                  continue;
                }
                n[i] = name + ":" + parts[1];
              }
            }
            // If style attribute contained any valid styles the re-write it; otherwise delete style attribute.
            if (i > 0) {
              return tag + ' style="' + n.join(";") + '"';
            } else {
              return tag;
            }
          }
        );
        str = str.replace(/([ ]+)<\/span>/gi, function (m, p) {
          return new Array(p.length + 1).join("&nbsp;") + "</span>";
        });
        return str;
      }

      return function (html) {
        //过了word,才能转p->li
        first = null;
        (parentTag = ""), (liStyle = ""), (firstTag = "");
        if (isWordDocument(html)) {
          html = filterPasteWord(html);
        }
        return html.replace(/>[ \t\r\n]*</g, "><");
      };
    })();
    var NODE_NAME_MAP = {
      text: "#text",
      comment: "#comment",
      cdata: "#cdata-section",
      fragment: "#document-fragment"
    };

    //function _likeLi( node ) {
    //    var a;
    //    if ( node && node.tag == 'p' ) {
    //        //office 2011下有效
    //        if ( node.attributes['class'] == 'MsoListParagraph' || /mso-list/.test( node.attributes.style ) ) {
    //            a = 1;
    //        } else {
    //            var firstChild = node.children[0];
    //            if ( firstChild && firstChild.tag == 'span' && /Wingdings/i.test( firstChild.attributes.style ) ) {
    //                a = 1;
    //            }
    //        }
    //    }
    //    return a;
    //}

    //为p==>li 做个标志
    var first,
      //orderStyle = {
      //    'decimal' : /\d+/,
      //    'lower-roman': /^m{0,4}(cm|cd|d?c{0,3})(xc|xl|l?x{0,3})(ix|iv|v?i{0,3})$/,
      //    'upper-roman': /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/,
      //    'lower-alpha' : /^\(?[a-z]+\)?$/,
      //    'upper-alpha': /^\(?[A-Z]+\)?$/
      //},
      //unorderStyle = { 'disc' : /^[l\u00B7\u2002]/, 'circle' : /^[\u006F\u00D8]/,'square' : /^[\u006E\u25C6]/},
      parentTag = "",
      liStyle = "",
      firstTag;

    //写入编辑器时，调用，进行转换操作
    function transNode(node, word_img_flag) {
      var sizeMap = [0, 10, 12, 16, 18, 24, 32, 48],
        attr,
        indexOf = utils.indexOf;
      switch (node.tag) {
        /*case 'script':
                    node.tag = 'div';
                    node.attributes._ue_div_script = 1;
                    node.attributes._ue_script_data = node.children[0] ? encodeURIComponent(node.children[0].data)  : '';
                    node.attributes._ue_custom_node_ = 1;
                    node.children = [];
                    break;
                case 'style':
                    node.tag = 'div';
                    node.attributes._ue_div_style = 1;
                    node.attributes._ue_style_data = node.children[0] ? encodeURIComponent(node.children[0].data)  : '';
                    node.attributes._ue_custom_node_ = 1;
                    node.children = [];
                    break;*/
        case "img":
          //todo base64暂时去掉，后边做远程图片上传后，干掉这个
          if (browser.gecko) {
            if (node.attributes.src && /^data:/.test(node.attributes.src)) {
              return {
                type: "fragment",
                children: []
              };
            }
          }
          if (node.attributes.src && /^(?:file)/.test(node.attributes.src)) {
            if (!/(gif|bmp|png|jpg|jpeg)$/.test(node.attributes.src)) {
              return {
                type: "fragment",
                children: []
              };
            }
            /* node.attributes.word_img = node.attributes.src;
                        node.attributes.src = me.options.BUS_UEDITOR_HOME_URL_IMAGE + 'themes/default/images/spacer.gif';
                        var flag = parseInt(node.attributes.width)<128||parseInt(node.attributes.height)<43;
                        node.attributes.style="background:url(" + (flag? me.options.BUS_UEDITOR_HOME_URL_IMAGE +"themes/default/images/word.gif":me.options.langPath+me.options.lang + "/images/localimage.png")+") no-repeat center center;border:1px solid #ddd";
                        //node.attributes.style = 'width:395px;height:173px;';
                        word_img_flag && (word_img_flag.flag = 1);*/
            node.attributes.word_img = node.attributes.src;
            node.attributes._hideTool = true;
            node.attributes.iswordimgtips = true;
            node.attributes.src =
              me.options.BUS_UEDITOR_HOME_URL_IMAGE +
              "/image/menu/wordimg3.gif";
            // var flag = parseInt(node.attributes.width)<128||parseInt(node.attributes.height)<43;
            // node.attributes.style="background:url(" + me.options.BUS_UEDITOR_HOME_URL_IMAGE +"/image/menu/wordimg3.gif) no-repeat center center;border:1px solid #ddd";
            node.attributes.style = "width:181px;height:66px;";
            word_img_flag && (word_img_flag.flag = 1);
          }
          if (browser.ie && browser.version < 7)
            node.attributes.orgSrc = node.attributes.src;
          node.attributes.data_ue_src =
            node.attributes.data_ue_src || node.attributes.src;
          break;
        case "li":
          var child = node.children[0];

          if (
            !child ||
            child.type != "element" ||
            (child.tag != "p" && dtd.p[child.tag])
          ) {
            var tmpPNode = {
              type: "element",
              tag: "p",
              attributes: {},

              parent: node
            };
            tmpPNode.children = child
              ? node.children
              : [
                  browser.ie
                    ? {
                        type: "text",
                        data: domUtils.fillChar,
                        parent: tmpPNode
                      }
                    : {
                        type: "element",
                        tag: "br",
                        attributes: {},
                        closed: true,
                        children: [],
                        parent: tmpPNode
                      }
                ];
            node.children = [tmpPNode];
          }
          break;
        case "table":
        case "td":
          optStyle(node);
          break;
        case "a": //锚点，a==>img
          if (node.attributes["anchorname"]) {
            node.tag = "img";
            node.attributes = {
              class: "anchorclass",
              anchorname: node.attributes["name"]
            };
            node.closed = 1;
          }

          me.options.outerFunction.aTagTransform &&
            me.options.outerFunction.aTagTransform(node);

          node.attributes.href &&
            (node.attributes.data_ue_src = node.attributes.href);

          break;
        case "b":
          node.tag = node.name = "strong";
          break;
        case "i":
          node.tag = node.name = "em";
          break;
        case "u":
          node.tag = node.name = "span";
          node.attributes.style =
            (node.attributes.style || "") + ";text-decoration:underline;";
          break;
        case "s":
        case "del":
          node.tag = node.name = "span";
          node.attributes.style =
            (node.attributes.style || "") + ";text-decoration:line-through;";
          if (node.children.length == 1) {
            child = node.children[0];
            if (child.tag == node.tag) {
              node.attributes.style += ";" + child.attributes.style;
              node.children = child.children;
            }
          }
          break;
        case "span":
          var style = node.attributes.style;
          if (style) {
            if (
              !node.attributes.style ||
              (browser.webkit && style == "white-space:nowrap;")
            ) {
              delete node.attributes.style;
            }
          }

          //针对ff3.6span的样式不能正确继承的修复

          if (browser.gecko && browser.version <= 10902 && node.parent) {
            var parent = node.parent;
            if (
              parent.tag == "span" &&
              parent.attributes &&
              parent.attributes.style
            ) {
              node.attributes.style =
                parent.attributes.style + ";" + node.attributes.style;
            }
          }
          if (utils.isEmptyObject(node.attributes) && autoClearEmptyNode) {
            node.type = "fragment";
          }

          //解决网站模板下面直接在a设置颜色，保持word文档颜色一致
          if (node.parent && node.parent.tag === "a" && node.attributes.style) {
            node.parent.attributes.style += node.attributes.style;
          }

          break;
        case "font":
          node.tag = node.name = "span";
          attr = node.attributes;
          node.attributes = {
            style:
              (attr.size
                ? "font-size:" + (sizeMap[attr.size] || 12) + "px"
                : "") +
              ";" +
              (attr.color ? "color:" + attr.color : "") +
              ";" +
              (attr.face ? "font-family:" + attr.face : "") +
              ";" +
              (attr.style || "")
          };

          while (
            node.parent.tag == node.tag &&
            node.parent.children.length == 1
          ) {
            node.attributes.style &&
              (node.parent.attributes.style
                ? (node.parent.attributes.style += ";" + node.attributes.style)
                : (node.parent.attributes.style = node.attributes.style));
            node.parent.children = node.children;
            node = node.parent;
          }
          break;
        case "p":
          if (node.attributes.align) {
            node.attributes.style =
              (node.attributes.style || "") +
              ";text-align:" +
              node.attributes.align +
              ";";
            delete node.attributes.align;
          }
      }
      //处理IE67下background-repeat：no-repeat no-repeat;属性
      if (node && node.attributes) {
        var style = node.attributes.style;
        if (style) {
          //去除背景background-repaet
          if (node.attributes.style) {
            var styleArray = node.attributes.style.split(";");
            for (var i = styleArray.length - 1; i >= 0; i--) {
              if (styleArray[i].indexOf("background-repeat") !== -1) {
                var stylePropertyArray = styleArray[i].split(":");
                if (
                  stylePropertyArray[1].toLowerCase() == "no-repeat no-repeat"
                ) {
                  stylePropertyArray[1] = "no-repeat";
                }
                styleArray[i] = stylePropertyArray.join(":");
              }
            }
            if (styleArray.length > 0) {
              node.attributes.style = styleArray.join(";");
            }
          }
        }
      }

      return node;
    }
    function filterNodeStyle(node) {
      switch (node.tag) {
        case "span":
        case "p":
          var style = node.attributes.style;
          if (style) {
            //去除span的背景颜色
            if (node.attributes.style) {
              var removeStyle = ["background", "color"],
                styleArray = node.attributes.style.split(";");
              for (var i = styleArray.length - 1; i >= 0; i--) {
                //for(var j in removeStyle){
                if (styleArray[i].indexOf("background") !== -1) {
                  //if(styleArray[i].indexOf(removeStyle[j]) !== -1){
                  var stylePropertyArray = styleArray[i].split(":")[1];
                  if (
                    stylePropertyArray.toLowerCase() === "white" ||
                    stylePropertyArray.toLowerCase() === "#fff" ||
                    stylePropertyArray.toLowerCase() === "#ffffff"
                  ) {
                    styleArray.splice(i, 1);
                  }
                } else if (styleArray[i].indexOf("color") !== -1) {
                  var stylePropertyArray = styleArray[i].split(":")[1];
                  if (
                    stylePropertyArray.toLowerCase() === "black" ||
                    stylePropertyArray.toLowerCase() === "#000" ||
                    stylePropertyArray.toLowerCase() === "#000"
                  ) {
                    styleArray.splice(i, 1);
                  }
                }
                //}
              }
              if (styleArray.length > 0) {
                node.attributes.style = styleArray.join(";");
              } else {
                //空的就 不要了
                delete node.attributes.style;
              }
            }
          }

          break;
      }
      return node;
    }
    function optStyle(node) {
      if (ie && node.attributes.style) {
        var style = node.attributes.style;
        node.attributes.style = style.replace(/;\s*/g, ";");
        node.attributes.style = node.attributes.style.replace(/^\s*|\s*$/, "");
      }
    }
    //getContent调用转换
    function transOutNode(node) {
      switch (node.tag) {
        case "div":
          if (node.attributes._ue_div_script) {
            node.tag = "script";
            node.children = [
              {
                type: "cdata",
                data: node.attributes._ue_script_data
                  ? decodeURIComponent(node.attributes._ue_script_data)
                  : "",
                parent: node
              }
            ];
            delete node.attributes._ue_div_script;
            delete node.attributes._ue_script_data;
            delete node.attributes._ue_custom_node_;
          }
          if (node.attributes._ue_div_style) {
            node.tag = "style";
            node.children = [
              {
                type: "cdata",
                data: node.attributes._ue_style_data
                  ? decodeURIComponent(node.attributes._ue_style_data)
                  : "",
                parent: node
              }
            ];
            delete node.attributes._ue_div_style;
            delete node.attributes._ue_style_data;
            delete node.attributes._ue_custom_node_;
          }
          break;
        case "table":
          !node.attributes.style && delete node.attributes.style;
          if (ie && node.attributes.style) {
            optStyle(node);
          }
          if (node.attributes["class"] == "noBorderTable") {
            delete node.attributes["class"];
          }
          break;
        case "td":
        case "th":
          if (/display\s*:\s*none/i.test(node.attributes.style)) {
            return {
              type: "fragment",
              children: []
            };
          }
          if (ie && !node.children.length) {
            var txtNode = {
              type: "text",
              data: domUtils.fillChar,
              parent: node
            };
            node.children[0] = txtNode;
          }
          if (ie && node.attributes.style) {
            optStyle(node);
          }
          if (node.attributes["class"] == "selectTdClass") {
            delete node.attributes["class"];
          }
          break;
        case "img": //锚点，img==>a
          if (node.attributes.anchorname) {
            node.tag = "a";
            node.attributes = {
              name: node.attributes.anchorname,
              anchorname: 1
            };
            node.closed = null;
          } else {
            if (node.attributes.data_ue_src) {
              node.attributes.src = node.attributes.data_ue_src;
              delete node.attributes.data_ue_src;
            }
          }
          break;

        case "a":
          if (node.attributes.data_ue_src) {
            node.attributes.href = node.attributes.data_ue_src;
            delete node.attributes.data_ue_src;
          }
      }

      return node;
    }

    function childrenAccept(node, visit, ctx) {
      if (!node.children || !node.children.length) {
        return node;
      }
      var children = node.children;
      for (var i = 0; i < children.length; i++) {
        var newNode = visit(children[i], ctx);
        if (newNode.type == "fragment") {
          var args = [i, 1];
          args.push.apply(args, newNode.children);
          children.splice.apply(children, args);
          //节点为空的就干掉，不然后边的补全操作会添加多余的节点
          if (!children.length) {
            node = {
              type: "fragment",
              children: []
            };
          }
          i--;
        } else {
          children[i] = newNode;
        }
      }
      return node;
    }

    function Serialize(rules) {
      this.rules = rules;
    }

    Serialize.prototype = {
      // NOTE: selector目前只支持tagName
      rules: null,
      // NOTE: node必须是fragment
      filter: function (node, rules, modify) {
        rules = rules || this.rules;
        var whiteList = rules && rules.whiteList;
        var blackList = rules && rules.blackList;

        function visitNode(node, parent) {
          node.name =
            node.type == "element" ? node.tag : NODE_NAME_MAP[node.type];
          if (parent == null) {
            return childrenAccept(node, visitNode, node);
          }

          if (blackList && blackList[node.name]) {
            modify && (modify.flag = 1);
            return {
              type: "fragment",
              children: []
            };
          }
          if (whiteList) {
            if (node.type == "element") {
              if (
                parent.type == "fragment"
                  ? whiteList[node.name]
                  : whiteList[node.name] && whiteList[parent.name][node.name]
              ) {
                var props;
                if ((props = whiteList[node.name].$)) {
                  var oldAttrs = node.attributes;
                  var newAttrs = {};
                  for (var k in props) {
                    if (oldAttrs[k]) {
                      newAttrs[k] = oldAttrs[k];
                    }
                  }
                  node.attributes = newAttrs;
                }
              } else {
                modify && (modify.flag = 1);
                node.type = "fragment";
                // NOTE: 这里算是一个hack
                node.name = parent.name;
              }
            } else {
              // NOTE: 文本默认允许
            }
          }
          if (blackList || whiteList) {
            childrenAccept(node, visitNode, node);
          }
          return node;
        }

        return visitNode(node, null);
      },
      transformFliterStyle: function (node) {
        function visitNode(node) {
          node = filterNodeStyle(node);

          node = childrenAccept(node, visitNode, node);

          return node;
        }

        return visitNode(node);
      },
      transformInput: function (node, word_img_flag) {
        function visitNode(node) {
          node = transNode(node, word_img_flag);
          //if ( node.tag == 'ol' || node.tag == 'ul' ) {
          //    first = 1;
          //}
          node = childrenAccept(node, visitNode, node);
          //if ( node.tag == 'ol' || node.tag == 'ul' ) {
          //    first = 0;
          //    parentTag = '',liStyle = '',firstTag = '';
          //}
          if (
            me.options.pageBreakTag &&
            node.type == "text" &&
            node.data.replace(/\s/g, "") == me.options.pageBreakTag
          ) {
            node.type = "element";
            node.name = node.tag = "hr";

            delete node.data;
            node.attributes = {
              class: "pagebreak",
              noshade: "noshade",
              size: "5",
              unselectable: "on",
              style: "moz-user-select:none;-khtml-user-select: none;"
            };

            node.children = [];
          }
          //去掉多余的空格和换行
          if (node.type == "text" && !dtd.$notTransContent[node.parent.tag]) {
            node.data = node.data.replace(/[\r\t\n]*/g, ""); //.replace(/[ ]*$/g,'')
          }
          return node;
        }

        return visitNode(node);
      },
      transformOutput: function (node) {
        function visitNode(node) {
          if (node.tag == "hr" && node.attributes["class"] == "pagebreak") {
            delete node.tag;
            node.type = "text";
            node.data = me.options.pageBreakTag;
            delete node.children;
          }

          node = transOutNode(node);
          if (node.tag == "ol" || node.tag == "ul") {
            first = 1;
          }
          node = childrenAccept(node, visitNode, node);
          if (node.tag == "ol" || node.tag == "ul") {
            first = 0;
          }
          return node;
        }

        return visitNode(node);
      },
      toHTML: toHTML,
      parseHTML: parseHTML,
      word: transformWordHtml
    };
    me.serialize = new Serialize(me.options.serialize || {});
    UE.serialize = new Serialize({});
  };
  //serialize.js end
  //table.js start
  ///import core
  ///commands 表格
  ///commandsName  InsertTable,DeleteTable,InsertParagraphBeforeTable,InsertRow,DeleteRow,InsertCol,DeleteCol,MergeCells,MergeRight,MergeDown,SplittoCells,SplittoRows,SplittoCols
  ///commandsTitle  表格,删除表格,表格前插行,前插入行,删除行,前插入列,删除列,合并多个单元格,右合并单元格,下合并单元格,完全拆分单元格,拆分成行,拆分成列
  ///commandsDialog  dialogs\table\table.html
  /**
   * Created by .
   * User: taoqili
   * Date: 11-5-5
   * Time: 下午2:06
   * To change this template use File | Settings | File Templates.
   */
  /**
   * table操作插件
   */
  UE.plugins["table"] = function () {
    var me = this,
      keys = domUtils.keys,
      clearSelectedTd = domUtils.clearSelectedArr,
      debug = true;

    function showError(e) {
      if (debug) throw e;
    }
    //框选时用到的几个全局变量
    var anchorTd,
      tableOpt,
      _isEmpty = domUtils.isEmptyNode;

    //处理拖动及框选相关的方法
    var startTd = null, //鼠标按下时的锚点td
      currentId = null, //当前鼠标经过时的td
      onDrag = "", //指示当前拖动状态
      onBorder = false,
      dragLine = null,
      dragTd = null,
      dragEndY,
      dragStartY,
      dragLength;

    var mousedown = false,
      needIEHack = true;

    me.setOpt({
      maxColNum: 100,
      maxRowNum: 200,
      defaultCols: 5,
      defaultRows: 5,
      tdvalign: "top",
      cursorpath: me.options.BUS_UEDITOR_HOME_URL_IMAGE + "/image/cursor_"
    });

    function getIndex(cell) {
      var cells = cell.parentNode.cells;
      for (var i = 0, ci; (ci = cells[i]); i++) {
        if (ci === cell) {
          return i;
        }
      }
    }

    function deleteTable(table, range) {
      var p = table.ownerDocument.createElement("p");
      domUtils.fillNode(me.document, p);
      var pN = table.parentNode;
      if (pN && pN.getAttribute("dropdrag")) {
        table = pN;
      }
      table.parentNode.insertBefore(p, table);
      domUtils.remove(table);
      range.setStart(p, 0).setCursor();
    }

    /**
     * 判断当前单元格是否处于隐藏状态
     * @param cell 待判断的单元格
     * @return {Boolean} 隐藏时返回true，否则返回false
     */
    function _isHide(cell) {
      return cell.style.display == "none";
    }

    function getCount(arr) {
      var count = 0;
      for (var i = 0, ti; (ti = arr[i++]); ) {
        if (!_isHide(ti)) {
          count++;
        }
      }
      return count;
    }
    var commands = {
      deletetable: 1,
      inserttable: 1,
      cellvalign: 1,
      insertcaption: 1,
      deletecaption: 1,
      inserttitle: 1,
      deletetitle: 1,
      mergeright: 1,
      mergedown: 1,
      mergecells: 1,
      insertrow: 1,
      insertrownext: 1,
      deleterow: 1,
      insertcol: 1,
      insertcolnext: 1,
      deletecol: 1,
      splittocells: 1,
      splittorows: 1,
      splittocols: 1,
      adaptbytext: 1,
      adaptbywindow: 1,
      adaptbycustomer: 1,
      insertparagraph: 1
    };
    me.currentSelectedArr = [];
    me.ready(function () {
      /*
            2020-10-15 16:17 这里的样式和公众号的表格样式不一致，先注释处理
            utils.cssRule('table',
                //选中的td上的样式
                    '.selectTdClass{background-color:#387ed6 !important}' +
                    'table.noBorderTable td{border:1px dashed #ddd !important}' +
                    //插入的表格的默认样式
                    'table{line-height:22px;border-collapse:collapse;display:table;}' +
                    //'td,th{ border: 1px solid #000;padding: 0 10px;}' +
                    'td,th{ padding: 0 10px;line-height: 22px;}' +
                    'caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}' +
                    'th{border-top:2px solid #BBB;background:#F7F7F7;}' +
                    'td p{margin:0;padding:0;}', me.document);
            */
      // 这串是目前公众号的样式，引这串是没有问题的
      utils.cssRule(
        "table",
        `
                .selectTdClass{background-color:#edf5fa !important}table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}table{margin-bottom:10px;border-collapse:collapse;display:table;}td,th{padding: 5px 10px;border: 1px solid #DDD;}caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}th{border-top:2px solid #BBB;background:#F7F7F7;}.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }td p{margin:0;padding:0;}
            `,
        me.document
      );
      utils.cssRule(
        "fullscreen",
        "body.changeBgColor,div.breakPage.changeBgColor{background-color:#2d2d2d;}" +
          ".pageBreakClose{width:100%;height:18px;box-sizing:border-box;position:absolute;top:-19px;border-radius:3px;cursor:pointer;}" +
          ".pageBreakCloseIcon{width:18px;height:18px;background:url(http:" +
          me.options.BUS_UEDITOR_HOME_URL_IMAGE +
          "/image/UE_qt.png) no-repeat -7px -858px;position:absolute;right:12px;}" +
          ".pageBreakCloseIcon:hover{background-position:-67px -858px;}" +
          ".pageBreakClose:hover .pageBreakCloseIcon{background-position:-67px -858px;}" +
          ".staticBtn{width:118px;position:fixed;top:20px}" +
          ".staticBtn .htmlBtn{width:42px;height:42px;margin-bottom:10px;cursor:pointer;background:url(http:" +
          me.options.BUS_UEDITOR_HOME_URL_IMAGE +
          "/image/UE_qt.png?v=201806061515) no-repeat -535px -296px;background-color:#fff;box-shadow: 0px 2px 10px rgba(0,0,0,.05), 0px 2px 5px rgba(0,0,0,.05);}" +
          ".staticBtn .htmlBtn:hover{background-position:-595px -296px;width:118px;color:#387ED6;line-height: 42px;box-sizing: border-box;font-size: 14px;padding-left: 40px;transition:width 0.1s,right 0.1s;user-select:none;}" +
          ".staticBtn .backgroundBtn{width:42px;height:42px;cursor:pointer;background:url(http:" +
          me.options.BUS_UEDITOR_HOME_URL_IMAGE +
          "/image/UE_qt.png?v=201806061515) no-repeat -536px -247px;background-color:#fff;box-shadow: 0px 2px 10px rgba(0,0,0,.05), 0px 2px 5px rgba(0,0,0,.05);}" +
          ".staticBtn .backgroundBtn:hover{background-position:-596px -247px;width:118px;color:#387ED6;line-height: 42px;box-sizing: border-box;font-size: 14px;padding-left: 40px;transition:width 0.1s,right 0.1s;user-select:none;}" +
          '.backgroundBtnMask:after{content:"";display:inline-block;width:42px;height:42px;background-color:#fff;position:absolute;left:0;cursor:default;opacity:0.5;}',
        me.document
      );

      var tableCopyList, isFullCol, isFullRow;
      //注册del/backspace事件
      me.addListener("keydown", function (cmd, evt) {
        var me = this;
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 8) {
          /*var ut = getUETableBySelected(me);
                    if (ut && ut.selectedTds.length) {
                        me.fireEvent('saveScene');
                        if (ut.isFullCol()) {
                            me.execCommand('deletecol')
                        } else if (ut.isFullRow()) {
                            me.execCommand('deleterow')
                        } else {
                            me.fireEvent('delcells');
                        }
                        domUtils.preventDefault(evt);
                    }

                    var caption = domUtils.findParentByTagName(me.selection.getStart(), 'caption', true),
                        range =  me.selection.getRange();
                    if (range.collapsed && caption && isEmptyBlock(caption)) {
                        me.fireEvent('saveScene');
                        var table = caption.parentNode;
                        domUtils.remove(caption);
                        if (table) {
                            range.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
                        }
                    }
                    me.fireEvent('saveScene');*/
        }

        if (keyCode == 46) {
          ut = getUETableBySelected(me);
          if (ut) {
            me.fireEvent("saveScene");
            for (var i = 0, ci; (ci = ut.selectedTds[i++]); ) {
              domUtils.fillNode(me.document, ci);
            }
            me.fireEvent("saveScene");
            domUtils.preventDefault(evt);
          }
        }
        if (keyCode == 13) {
          var rng = me.selection.getRange(),
            caption = domUtils.findParentByTagName(
              rng.startContainer,
              "caption"
            );
          if (caption) {
            var table = domUtils.findParentByTagName(caption, "table");
            if (!rng.collapsed) {
              rng.deleteContents();
              me.fireEvent("saveScene");
            } else {
              if (caption) {
                rng.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
              }
            }
            domUtils.preventDefault(evt);
            return;
          }
          if (rng.collapsed) {
            var table = domUtils.findParentByTagName(
              rng.startContainer,
              "table"
            );
            if (table) {
              var cell = table.rows[0].cells[0],
                start = domUtils.findParentByTagName(
                  me.selection.getStart(),
                  ["td", "th"],
                  true
                ),
                preNode = table.previousSibling;
              if (
                cell === start &&
                (!preNode ||
                  (preNode.nodeType == 1 && preNode.tagName == "TABLE")) &&
                domUtils.isStartInblock(rng)
              ) {
                me.execCommand("insertparagraphbeforetable");
                domUtils.preventDefault(evt);
              }
            }
          }
        }

        if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == "67") {
          tableCopyList = null;
          table = getUETableBySelected(me);
          if (table) {
            var tds = table.selectedTds;
            isFullCol = table.isFullCol();
            isFullRow = table.isFullRow();
            tableCopyList = [[cloneCell(tds[0])]];
            for (var i = 1, ci; (ci = tds[i]); i++) {
              if (ci.parentNode !== tds[i - 1].parentNode) {
                tableCopyList.push([cloneCell(ci)]);
              } else {
                tableCopyList[tableCopyList.length - 1].push(cloneCell(ci));
              }
            }
          }
        }
      });

      me.addListener("beforepaste", function (cmd, html) {
        var me = this;
        var rng = me.selection.getRange();
        if (domUtils.findParentByTagName(rng.startContainer, "caption", true)) {
          var div = me.document.createElement("div");
          div.innerHTML = html.html;
          html.html = div[browser.ie ? "innerText" : "textContent"];
          return;
        }
        var table = getUETableBySelected(me);

        if (tableCopyList) {
          me.fireEvent("saveScene");
          var rng = me.selection.getRange();
          var td = domUtils.findParentByTagName(
              rng.startContainer,
              ["td", "th"],
              true
            ),
            tmpNode,
            preNode;
          if (td) {
            var ut = getUETable(td);
            if (isFullRow) {
              var rowIndex = ut.getCellInfo(td).rowIndex;
              if (td.tagName == "TH") {
                rowIndex++;
              }
              for (var i = 0, ci; (ci = tableCopyList[i++]); ) {
                var tr = ut.insertRow(rowIndex++);
                for (var j = 0, cj; (cj = ci[j]); j++) {
                  var cell = tr.cells[j];
                  if (!cell) {
                    cell = tr.insertCell(j);
                  }
                  cell.innerHTML = cj.innerHTML;
                  cj.getAttribute("width") &&
                    cell.setAttribute("width", cj.getAttribute("width"));
                  cj.getAttribute("valign") &&
                    cell.setAttribute("valign", cj.getAttribute("valign"));
                  cj.getAttribute("align") &&
                    cell.setAttribute("align", cj.getAttribute("align"));
                  cj.style.cssText && (cell.style.cssText = cj.style.cssText);
                }
                for (var j = 0, cj; (cj = tr.cells[j]); j++) {
                  if (!ci[j]) break;
                  cj.innerHTML = ci[j].innerHTML;
                  ci[j].getAttribute("width") &&
                    cj.setAttribute("width", ci[j].getAttribute("width"));
                  ci[j].getAttribute("valign") &&
                    cj.setAttribute("valign", ci[j].getAttribute("valign"));
                  ci[j].getAttribute("align") &&
                    cj.setAttribute("align", ci[j].getAttribute("align"));
                  ci[j].style.cssText &&
                    (cj.style.cssText = ci[j].style.cssText);
                }
              }
            } else {
              if (isFullCol) {
                cellInfo = ut.getCellInfo(td);
                var maxColNum = 0;
                for (var j = 0, ci = tableCopyList[0], cj; (cj = ci[j++]); ) {
                  maxColNum += cj.colSpan || 1;
                }
                me.__hasEnterExecCommand = true;
                for (i = 0; i < maxColNum; i++) {
                  me.execCommand("insertcol");
                }
                me.__hasEnterExecCommand = false;
                td = ut.table.rows[0].cells[cellInfo.cellIndex];
                if (td.tagName == "TH") {
                  td = ut.table.rows[1].cells[cellInfo.cellIndex];
                }
              }
              for (var i = 0, ci; (ci = tableCopyList[i++]); ) {
                tmpNode = td;
                for (var j = 0, cj; (cj = ci[j++]); ) {
                  if (td) {
                    td.innerHTML = cj.innerHTML;
                    //todo 定制处理
                    cj.getAttribute("width") &&
                      td.setAttribute("width", cj.getAttribute("width"));
                    cj.getAttribute("valign") &&
                      td.setAttribute("valign", cj.getAttribute("valign"));
                    cj.getAttribute("align") &&
                      td.setAttribute("align", cj.getAttribute("align"));
                    cj.style.cssText && (td.style.cssText = cj.style.cssText);
                    preNode = td;
                    td = td.nextSibling;
                  } else {
                    var cloneTd = cj.cloneNode(true);
                    domUtils.removeAttributes(cloneTd, [
                      "class",
                      "rowSpan",
                      "colSpan"
                    ]);

                    preNode.parentNode.appendChild(cloneTd);
                  }
                }
                td = ut.getNextCell(tmpNode, true, true);
                if (!tableCopyList[i]) break;
                if (!td) {
                  var cellInfo = ut.getCellInfo(tmpNode);
                  ut.table.insertRow(ut.table.rows.length);
                  ut.update();
                  td = ut.getVSideCell(tmpNode, true);
                }
              }
            }
            ut.update();
          } else {
            table = me.document.createElement("table");
            for (var i = 0, ci; (ci = tableCopyList[i++]); ) {
              var tr = table.insertRow(table.rows.length);
              for (var j = 0, cj; (cj = ci[j++]); ) {
                cloneTd = cloneCell(cj);
                domUtils.removeAttributes(cloneTd, ["class"]);
                tr.appendChild(cloneTd);
              }
              if (j == 2 && cloneTd.rowSpan > 1) {
                cloneTd.rowSpan = 1;
              }
            }

            var defaultValue = getDefaultValue(me),
              width =
                me.body.offsetWidth -
                (needIEHack
                  ? parseInt(
                      domUtils.getComputedStyle(me.body, "margin-left"),
                      10
                    ) * 2
                  : 0) -
                defaultValue.tableBorder * 2 -
                (me.options.offsetWidth || 0);
            me.execCommand(
              "insertHTML",
              "<table  " +
                (isFullCol && isFullRow ? 'width="' + width + '"' : "") +
                ">" +
                table.innerHTML.replace(/>\s*</g, "><") +
                "</table>"
            );
          }
          me.fireEvent("contentchange");
          me.fireEvent("saveScene");
          html.html = "";
        } else {
          var div = me.document.createElement("div"),
            tables;
          div.innerHTML = html.html;
          tables = div.getElementsByTagName("table");
          if (domUtils.findParentByTagName(me.selection.getStart(), "table")) {
            utils.each(tables, function (t) {
              domUtils.remove(t);
            });
            if (
              domUtils.findParentByTagName(
                me.selection.getStart(),
                "caption",
                true
              )
            ) {
              div.innerHTML = div[browser.ie ? "innerText" : "textContent"];
            }
            //表格中把&nbsp;换成' ',不然在word-break: normal的表格不会自动换行
            div.innerHTML = div.innerHTML.replace(/&nbsp;/g, " ");
          } else {
            utils.each(tables, function (table) {
              removeStyleSize(table, true);
              domUtils.removeAttributes(table, ["style"]);
              utils.each(
                domUtils.getElementsByTagName(table, "td"),
                function (td) {
                  //设置了高度的td不需要加br
                  var tdHeight = td && parseInt(td.height ? td.height : 0) > 0;
                  if (isEmptyBlock(td) && !tdHeight) {
                    //部分td不需要 <td colspan="2" background="http://insurance.money.hexun.com/img/img024.gif" height="1">
                    //</td>
                    domUtils.fillNode(me.document, td);
                  }
                  removeStyleSize(td, true);

                  // 复制粘贴表格的时候样式出现不同，先屏蔽掉
                  // domUtils.removeAttributes(td, ['style']);

                  //非本地创建的表格需要重置padding，避免默认的padiing值影响
                  // if(!table.getAttribute('_innercreatetable') || !table.getAttribute('_pastedtable')){
                  //     td.setAttribute('width', td.getAttribute('width') - 20);
                  //     table.setAttribute('_pastedtable', true);
                  // }

                  // td.style.lineHeight = 'normal';
                }
              );
            });
          }
          html.html = div.innerHTML;
        }
      });

      //这段代码是编辑器自动处理表格宽度大于显示区域时候，表格的宽度调整为显示区域大小
      /*me.addListener('afterpaste', function () {
                utils.each(domUtils.getElementsByTagName(me.body, "table"), function (table) {
                    if (table.offsetWidth > me.body.offsetWidth) {
                        var defaultValue = getDefaultValue(me, table);
                        table.style.width = me.body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0) + 'px'
                    }
                })
            });*/
      me.addListener("blur", function () {
        tableCopyList = null;
      });
      var timer;
      me.addListener("keydown", function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
          var rng = me.selection.getRange(),
            cell = domUtils.findParentByTagName(
              rng.startContainer,
              ["th", "td"],
              true
            );
          if (cell) {
            var table = cell.parentNode.parentNode.parentNode;
            if (table.offsetWidth > table.getAttribute("width")) {
              cell.style.wordBreak = "break-all";
            }
          }
        }, 100);
      });
      me.addListener("selectionchange", function () {
        toggleDragableState(me, false, "", null);
      });

      //内容变化时触发索引更新
      //todo 可否考虑标记检测，如果不涉及表格的变化就不进行索引重建和更新
      me.addListener("contentchange", function () {
        var me = this;
        //尽可能排除一些不需要更新的状况
        hideDragLine(me);
        if (getUETableBySelected(me)) return;
        var rng = me.selection.getRange();
        var start = rng.startContainer;
        start = domUtils.findParentByTagName(start, ["td", "th"], true);
        utils.each(
          domUtils.getElementsByTagName(me.document, "table"),
          function (table) {
            if (me.fireEvent("excludetable", table) === true) return;
            table.ueTable = new UETable(table);
            utils.each(
              domUtils.getElementsByTagName(me.document, "td"),
              function (td) {
                if (domUtils.isEmptyBlock(td) && td !== start) {
                  //设置了高度的td不需要加br
                  var tdHeight = td && parseInt(td.height ? td.height : 0) > 0;
                  if (!tdHeight) {
                    domUtils.fillNode(me.document, td);
                  }
                  if (browser.ie && browser.version == 6) {
                    td.innerHTML = "&nbsp;";
                  }
                }
              }
            );
            utils.each(
              domUtils.getElementsByTagName(me.document, "th"),
              function (th) {
                if (domUtils.isEmptyBlock(th) && th !== start) {
                  domUtils.fillNode(me.document, th);
                  if (browser.ie && browser.version == 6) {
                    th.innerHTML = "&nbsp;";
                  }
                }
              }
            );
            table.onmousemove = function () {
              me.options.tableDragable && toggleDragButton(true, this, me);
            };
            table.onmouseout = function () {
              toggleDragableState(me, false, "", null);
              hideDragLine(me);
            };
            table.onclick = function (evt) {
              evt = me.window.event || evt;
              var target = getParentTdOrTh(evt.target || evt.srcElement);
              if (!target) return;
              var ut = getUETable(target),
                table = ut.table,
                cellInfo = ut.getCellInfo(target),
                cellsRange,
                rng = me.selection.getRange();
              //if ("topLeft" == inPosition(table, mouseCoords(evt))) {
              //    cellsRange = ut.getCellsRange(ut.table.rows[0].cells[0], ut.getLastCell());
              //    ut.setSelected(cellsRange);
              //    return;
              //}
              //if ("bottomRight" == inPosition(table, mouseCoords(evt))) {
              //    return;
              //}
              if (inTableSide(table, target, evt, true)) {
                var endTdCol = ut.getCell(
                  ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].rowIndex,
                  ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].cellIndex
                );
                if (evt.shiftKey && ut.selectedTds.length) {
                  if (ut.selectedTds[0] !== endTdCol) {
                    cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdCol);
                    ut.setSelected(cellsRange);
                  } else {
                    rng && rng.selectNodeContents(endTdCol).select();
                  }
                } else {
                  if (target !== endTdCol) {
                    cellsRange = ut.getCellsRange(target, endTdCol);
                    ut.setSelected(cellsRange);
                  } else {
                    rng && rng.selectNodeContents(endTdCol).select();
                  }
                }
                return;
              }
              if (inTableSide(table, target, evt)) {
                var endTdRow = ut.getCell(
                  ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].rowIndex,
                  ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].cellIndex
                );
                if (evt.shiftKey && ut.selectedTds.length) {
                  if (ut.selectedTds[0] !== endTdRow) {
                    cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdRow);
                    ut.setSelected(cellsRange);
                  } else {
                    rng && rng.selectNodeContents(endTdRow).select();
                  }
                } else {
                  if (target !== endTdRow) {
                    cellsRange = ut.getCellsRange(target, endTdRow);
                    ut.setSelected(cellsRange);
                  } else {
                    rng && rng.selectNodeContents(endTdRow).select();
                  }
                }
              }
            };
            table.ondblclick = function (evt) {
              evt = me.window.event || evt;
              var target = getParentTdOrTh(evt.target || evt.srcElement);
              if (target) {
                var h;
                if ((h = getRelation(target, mouseCoords(evt)))) {
                  if (h == "h1") {
                    h = "h";
                    if (
                      inTableSide(
                        domUtils.findParentByTagName(target, "table"),
                        target,
                        evt
                      )
                    ) {
                      me.execCommand("adaptbywindow");
                    } else {
                      target = getUETable(target).getPreviewCell(target);
                      if (target) {
                        var rng = me.selection.getRange();
                        rng.selectNodeContents(target).setCursor(true, true);
                      }
                    }
                  }
                  h == "h" && me.execCommand("adaptbytext");
                }
              }
            };
          }
        );

        switchBoderColor(true);
      });

      //仅IE8以上支持
      if (!browser.ie || (browser.ie && browser.version > 7)) {
        domUtils.on(me.document, "mousemove", mouseMoveEvent);
      }
      domUtils.on(me.document, "mouseout", function (evt) {
        var target = evt.target || evt.srcElement;
        if (target.tagName == "TABLE") {
          toggleDragableState(me, false, "", null);
        }
      });

      me.addListener("mousedown", mouseDownEvent);
      me.addListener("mouseup", mouseUpEvent);

      var currentRowIndex = 0;
      me.addListener("tabkeydown", function () {
        var range = this.selection.getRange(),
          common = range.getCommonAncestor(true, true),
          table = domUtils.findParentByTagName(common, "table");
        if (table) {
          if (domUtils.findParentByTagName(common, "caption")) {
            var cell = domUtils.getElementsByTagName(table, "th td");
            if (cell && cell.length) {
              range.setStart(cell[0], 0).setCursor(false, true);
            }
          } else {
            var cell = domUtils.findParentByTagName(common, ["td", "th"], true),
              ua = getUETable(cell);
            currentRowIndex =
              cell.rowSpan > 1
                ? currentRowIndex
                : ua.getCellInfo(cell).rowIndex;
            var nextCell = ua.getTabNextCell(cell, currentRowIndex);
            if (nextCell) {
              if (isEmptyBlock(nextCell)) {
                range.setStart(nextCell, 0).setCursor(false, true);
              } else {
                range.selectNodeContents(nextCell).select();
              }
            } else {
              me.fireEvent("saveScene");
              me.__hasEnterExecCommand = true;
              this.execCommand("insertrownext");
              me.__hasEnterExecCommand = false;
              range = this.selection.getRange();
              range
                .setStart(table.rows[table.rows.length - 1].cells[0], 0)
                .setCursor();
              me.fireEvent("saveScene");
            }
          }
          return true;
        }
      });
      browser.ie &&
        me.addListener("selectionchange", function () {
          toggleDragableState(this, false, "", null);
        });
      me.addListener("keydown", function (type, evt) {
        var me = this;
        //处理在表格的最后一个输入tab产生新的表格
        var keyCode = evt.keyCode || evt.which;
        if (keyCode == 8 || keyCode == 46) {
          return;
        }
        var notCtrlKey =
          !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey;
        //notCtrlKey && removeSelectedClass(domUtils.getElementsByTagName(me.body, "td"));
        var ut = getUETableBySelected(me);
        if (!ut) return;
        notCtrlKey && ut.clearSelected();
      });

      me.addListener("beforegetcontent", function () {
        switchBoderColor(false);
        browser.ie &&
          utils.each(
            me.document.getElementsByTagName("caption"),
            function (ci) {
              if (domUtils.isEmptyNode(ci)) {
                ci.innerHTML = "&nbsp;";
              }
            }
          );
      });
      me.addListener("aftergetcontent", function () {
        switchBoderColor(true);
      });
      me.addListener("getAllHtml", function () {
        removeSelectedClass(me.document.getElementsByTagName("td"));
      });
      //修正全屏状态下插入的表格宽度在非全屏状态下撑开编辑器的情况
      me.addListener(
        "fullscreenchanged",
        function (type, fullscreen, backBodyWidth) {
          if (!fullscreen) {
            var ratio = this.body.offsetWidth / document.body.offsetWidth,
              tables = domUtils.getElementsByTagName(this.body, "table");
            utils.each(tables, function (table) {
              var tableWidth = table.offsetWidth;
              //当表格宽度小于非全屏body宽度， 或者表格宽度不等于全屏body宽度（证明用户曾自定义宽度）时不调整。
              if (
                tableWidth < me.body.offsetWidth ||
                tableWidth != backBodyWidth
              )
                return false;
              var tds = domUtils.getElementsByTagName(table, "td"),
                backWidths = [];
              utils.each(tds, function (td) {
                backWidths.push(td.offsetWidth);
              });
              for (var i = 0, td; (td = tds[i]); i++) {
                td.setAttribute("width", Math.floor(backWidths[i] * ratio));
              }
              table.setAttribute(
                "width",
                Math.floor(getTableWidth(me, needIEHack, getDefaultValue(me)))
              );
            });
          }
        }
      );

      //重写execCommand命令，用于处理框选时的处理
      var oldExecCommand = me.execCommand;
      me.execCommand = function (cmd) {
        var me = this;
        cmd = cmd.toLowerCase();
        var ut = getUETableBySelected(me),
          tds,
          range = new dom.Range(me.document),
          cmdFun = me.commands[cmd] || UE.commands[cmd],
          result;
        if (!cmdFun) return;
        if (
          ut &&
          !commands[cmd] &&
          !cmdFun.notNeedUndo &&
          !me.__hasEnterExecCommand
        ) {
          me.__hasEnterExecCommand = true;
          me.fireEvent("beforeexeccommand", cmd);
          tds = ut.selectedTds;
          var lastState = -2,
            lastValue = -2,
            value,
            state;
          for (var i = 0, td; (td = tds[i]); i++) {
            //表格选择的背景颜色改为单元格的颜色
            if (cmd == "backcolor") {
              //td.style.backgroundColor = "";
              //break;
              cmd = "edittd";
            }

            if (isEmptyBlock(td)) {
              range.setStart(td, 0).setCursor(false, true);
            } else {
              range.selectNodeContents(td).select();
            }
            state = me.queryCommandState(cmd);
            value = me.queryCommandValue(cmd);
            if (state != -1) {
              if (lastState !== state || lastValue !== value) {
                me._ignoreContentChange = true;
                result = oldExecCommand.apply(me, arguments);
                me._ignoreContentChange = false;
                if (domUtils.isEmptyBlock(td)) {
                  domUtils.fillNode(me.document, td);
                }
              }
              lastState = me.queryCommandState(cmd);
              lastValue = me.queryCommandValue(cmd);
            }
          }
          range.setStart(tds[0], 0).shrinkBoundary(true).setCursor(false, true);
          me.fireEvent("contentchange");
          me.fireEvent("afterexeccommand", cmd);
          me.__hasEnterExecCommand = false;
          me._selectionChange();
          //表格选择的背景颜色改为单元格的颜色  去掉selectTdClass
          if (cmd == "edittd") {
            removeSelectedClass(domUtils.getElementsByTagName(me.body, "td"));
          }
        } else {
          result = oldExecCommand.apply(me, arguments);
        }
        return result;
      };
    });

    function reset() {
      me.currentSelectedArr = [];
      anchorTd = null;
    }
    /**
     * 删除obj的宽高style，改成属性宽高
     * @param obj
     * @param replaceToProperty
     */
    function removeStyleSize(obj, replaceToProperty) {
      removeStyle(obj, "width", true);
      removeStyle(obj, "height", true);
    }
    function removeStyle(obj, styleName, replaceToProperty) {
      if (obj.style[styleName]) {
        replaceToProperty &&
          obj.setAttribute(styleName, parseInt(obj.style[styleName], 10));
        obj.style[styleName] = "";
      }
    }
    function getParentTdOrTh(ele) {
      if (ele.tagName == "TD" || ele.tagName == "TH") return ele;
      var td;
      if (
        (td =
          domUtils.findParentByTagName(ele, "td", true) ||
          domUtils.findParentByTagName(ele, "th", true))
      )
        return td;
      return null;
    }
    function isEmptyBlock(node) {
      var reg = new RegExp(domUtils.fillChar, "g");
      if (
        node[browser.ie ? "innerText" : "textContent"]
          .replace(/^\s*$/, "")
          .replace(reg, "").length > 0
      ) {
        return 0;
      }
      for (var n in dtd.$isNotEmpty) {
        if (node.getElementsByTagName(n).length) {
          return 0;
        }
      }
      return 1;
    }

    function mouseCoords(evt) {
      if (evt.pageX || evt.pageY) {
        return { x: evt.pageX, y: evt.pageY };
      }
      return {
        //页面上的位置=可视区域位置+页面滚动条切去高度-自身border高度
        x:
          evt.clientX +
          me.document.body.scrollLeft -
          me.document.body.clientLeft,
        y: evt.clientY + me.document.body.scrollTop - me.document.body.clientTop
      };
    }
    function mouseMoveEvent(evt) {
      try {
        //普通状态下鼠标移动
        var target = getParentTdOrTh(evt.target || evt.srcElement),
          pos;
        //修改单元格大小时的鼠标移动
        if (onDrag && dragTd) {
          me.document.body.style.webkitUserSelect = "none";
          me.selection.getNative()[browser.ie ? "empty" : "removeAllRanges"]();
          pos = mouseCoords(evt);
          toggleDragableState(me, true, "", pos, target);
          if (onDrag == "h") {
            dragLine.style.left = getPermissionX(dragTd, evt) + "px";
          } else if (onDrag == "v") {
            dragLine.style.top = getPermissionY(dragTd, evt) + "px";
          }
          return;
        }
        //当鼠标处于table上时，修改移动过程中的光标状态
        if (target) {
          pos = mouseCoords(evt);
          var state = getRelation(target, pos),
            table = domUtils.findParentByTagName(target, "table", true);
          if (inTableSide(table, target, evt, true)) {
            //toggleCursor(pos,true,"_h");
            me.body.style.cursor =
              "url(" + me.options.cursorpath + "h.png),pointer";
          } else if (inTableSide(table, target, evt)) {
            //toggleCursor(pos,true,"_v");
            me.body.style.cursor =
              "url(" + me.options.cursorpath + "v.png),pointer";
          } else {
            //toggleCursor(pos,false,"");
            me.body.style.cursor = "text";
            if (/\d/.test(state)) {
              state = state.replace(/\d/, "");
              target = getUETable(target).getPreviewCell(target, state == "v");
            }
            //位于第一行的顶部或者第一列的左边时不可拖动
            toggleDragableState(
              me,
              target ? !!state : false,
              target ? state : "",
              pos,
              target
            );
          }
        }
      } catch (e) {
        showError(e);
      }
    }
    function inTableSide(table, cell, evt, top) {
      var pos = mouseCoords(evt),
        state = getRelation(cell, pos);
      if (top) {
        var caption = table.getElementsByTagName("caption")[0],
          capHeight = caption ? caption.offsetHeight : 0;
        return state == "v1" && pos.y - domUtils.getXY(table).y - capHeight < 8;
      } else {
        return state == "h1" && pos.x - domUtils.getXY(table).x < 8;
      }
    }

    /**
     * 获取拖动时允许的X轴坐标
     * @param dragTd
     * @param evt
     */
    function getPermissionX(dragTd, evt) {
      var ut = getUETable(dragTd);
      if (ut) {
        var preTd = ut.getSameEndPosCells(dragTd, "x")[0],
          nextTd = ut.getSameStartPosXCells(dragTd)[0],
          mouseX = mouseCoords(evt).x,
          cellspacing =
            parseInt(ut.table.getAttribute("cellpadding")) * 2 || 20,
          left =
            (preTd ? domUtils.getXY(preTd).x : domUtils.getXY(ut.table).x) +
            cellspacing,
          right = nextTd
            ? domUtils.getXY(nextTd).x + nextTd.offsetWidth - cellspacing
            : me.body.offsetWidth + 5 ||
              parseInt(domUtils.getComputedStyle(me.body, "width"), 10);
        return mouseX < left ? left : mouseX > right ? right : mouseX;
      }
    }
    /**
     * 获取拖动时允许的Y轴坐标
     * @param dragTd
     * @param evt
     */
    function getPermissionY(dragTd, evt) {
      try {
        var top = domUtils.getXY(dragTd).y,
          mousePosY = mouseCoords(evt).y;
        return mousePosY < top ? top : mousePosY;
      } catch (e) {
        showError(e);
      }
    }
    /**
     * 移动状态切换
     * @param dragable
     * @param dir
     */
    function toggleDragableState(editor, dragable, dir, mousePos, cell) {
      try {
        editor.body.style.cursor =
          dir == "h" ? "col-resize" : dir == "v" ? "row-resize" : "text";
        if (browser.ie) {
          if (dir && !mousedown && !getUETableBySelected(editor)) {
            getDragLine(editor, editor.document);
            showDragLineAt(dir, cell);
          } else {
            hideDragLine(editor);
          }
        }
        onBorder = dragable;
      } catch (e) {
        showError(e);
      }
    }

    /**
     * 获取鼠标与当前单元格的相对位置
     * @param ele
     * @param mousePos
     */
    function getRelation(ele, mousePos) {
      var elePos = domUtils.getXY(ele);

      if (elePos.x + ele.offsetWidth - mousePos.x < 4) {
        return "h";
      }
      if (mousePos.x - elePos.x < 4) {
        return "h1";
      }
      if (elePos.y + ele.offsetHeight - mousePos.y < 4) {
        return "v";
      }
      if (mousePos.y - elePos.y < 4) {
        return "v1";
      }
      return "";
    }

    function mouseDownEvent(type, evt) {
      //右键菜单单独处理
      if (evt.button == 2) {
        var ut = getUETableBySelected(me),
          flag = false;
        if (ut) {
          var td = getTargetTd(me, evt);
          utils.each(ut.selectedTds, function (ti) {
            if (ti === td) {
              flag = true;
            }
          });
          if (!flag) {
            //removeSelectedClass(domUtils.getElementsByTagName(me.body,"td"));
            //removeSelectedClass(domUtils.getElementsByTagName(me.body,"th"));
            ut.clearSelected();
          } else {
            td = ut.selectedTds[0];
            setTimeout(function () {
              me.selection.getRange().setStart(td, 0).setCursor(false, true);
            }, 0);
          }
        }
        return;
      }
      if (evt.shiftKey) {
        return;
      }

      //removeSelectedClass(domUtils.getElementsByTagName(me.body,"td"));
      //removeSelectedClass(domUtils.getElementsByTagName(me.body,"th"));
      startTd = getTargetTd(me, evt);
      if (!startTd) return;
      var table = domUtils.findParentByTagName(startTd, "table", true);
      ut = getUETable(table);
      ut && ut.clearSelected();
      //判断当前鼠标状态
      if (!onBorder) {
        me.document.body.style.webkitUserSelect = "";
        mousedown = true;
        me.addListener("mouseover", mouseOverEvent);
      } else {
        if (browser.ie && browser.version < 8) return;
        var state = getRelation(startTd, mouseCoords(evt));
        if (/\d/.test(state)) {
          state = state.replace(/\d/, "");
          startTd = getUETable(startTd).getPreviewCell(startTd, state == "v");
        }
        hideDragLine(me);
        getDragLine(me, me.document);
        showDragLineAt(state, startTd);
        mousedown = true;
        //拖动开始
        onDrag = state;
        dragTd = startTd;
        dragStartY = getPermissionY(dragTd, evt);
      }
      //改变保存按钮的disable
      if (typeof this.options.ueditorChangeEvent == "function") {
        this.options.ueditorChangeEvent();
      }
    }
    function getDefaultValue(editor, table) {
      var borderMap = {
          thin: "0px",
          medium: "1px",
          thick: "2px"
        },
        tableBorder,
        tdPadding,
        tdBorder,
        tmpValue;
      if (!table) {
        table = editor.document.createElement("table");
        table.insertRow(0).insertCell(0).innerHTML = "xxx";
        editor.body.appendChild(table);
        var td = table.getElementsByTagName("td")[0];
        tmpValue = domUtils.getComputedStyle(table, "border-left-width");
        tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
        tmpValue = domUtils.getComputedStyle(td, "padding-left");
        tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
        tmpValue = domUtils.getComputedStyle(td, "border-left-width");
        tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
        domUtils.remove(table);
        return {
          tableBorder: tableBorder,
          tdPadding: tdPadding,
          tdBorder: tdBorder
        };
      } else {
        td = table.getElementsByTagName("td")[0];
        tmpValue = domUtils.getComputedStyle(table, "border-left-width");
        tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
        tmpValue = domUtils.getComputedStyle(td, "padding-left");
        tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
        tmpValue = domUtils.getComputedStyle(td, "border-left-width");
        tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
        return {
          tableBorder: tableBorder,
          tdPadding: tdPadding,
          tdBorder: tdBorder
        };
      }
    }
    function removeSelectedClass(cells) {
      utils.each(cells, function (cell) {
        domUtils.removeClasses(cell, "selectTdClass");
      });
    }
    function addSelectedClass(cells) {
      utils.each(cells, function (cell) {
        domUtils.addClass(cell, "selectTdClass");
      });
    }
    function getWidth(cell) {
      if (!cell) return 0;
      // return parseInt(domUtils.getComputedStyle(cell,"width"), 10);
      return parseInt(
        cell.getAttribute("width") || domUtils.getComputedStyle(cell, "width")
      );
    }

    // 获得宽度为百分比的px值
    function getPercentWidth(cell) {
      if (!cell) {
        return 0;
      } else {
        var table = getUETable(cell).table,
          backTableWidth = getWidth(table);
        return (
          pointPercent(cell.getAttribute("width")) * parseInt(backTableWidth) ||
          domUtils.getComputedStyle(cell, "width")
        );
      }
    }
    // 小数点与百分比转换
    function pointPercent(num) {
      if (/%/.test(num)) {
        return num.replace("%", "") / 100;
      } else {
        return Number(num * 100).toFixed(1) + "%";
      }
    }

    function changeColWidth(cell, changeValue) {
      if (Math.abs(changeValue) < 2) return; // 阀值改为小于2像素的拖拽不响应
      var ut = getUETable(cell);
      if (ut) {
        var table = ut.table,
          backTableWidth = getWidth(table),
          defaultValue = getDefaultValue(me, table),
          //这里不考虑一个都没有情况，如果一个都没有，可以认为该表格的结构可以精简
          leftCells = ut.getSameEndPosCells(cell, "x"),
          isPercent = table.getAttribute("units"), //为了兼容旧数据。新数据都是使用百分比添加的,并且添加units属性
          // backLeftWidth = getWidth(leftCells[0]) - defaultValue.tdPadding *2 - defaultValue.tdBorder,
          // backLeftWidth = getWidth(leftCells[0]),
          backLeftWidth = isPercent
            ? getPercentWidth(leftCells[0])
            : getWidth(leftCells[0]), //%
          cellSpacing = parseInt(table.getAttribute("cellspacing") || 0),
          rightCells = ut.getSameStartPosXCells(cell, cellSpacing),
          // backRightWidth = getWidth(rightCells[0]) - defaultValue.tdPadding *2 - defaultValue.tdBorder;
          // backRightWidth = getWidth(rightCells[0]);
          backRightWidth = isPercent
            ? getPercentWidth(rightCells[0])
            : getWidth(rightCells[0]); //%
        if (isNaN(backLeftWidth)) {
          backLeftWidth =
            parseInt(domUtils.getComputedStyle(leftCells[0], "width")) -
            defaultValue.tdPadding * 2 -
            defaultValue.tdBorder;
        }
        if (isNaN(backRightWidth)) {
          backRightWidth =
            parseInt(domUtils.getComputedStyle(rightCells[0], "width")) -
            defaultValue.tdPadding * 2 -
            defaultValue.tdBorder;
        }

        //防止出现负宽度和0宽度，这两种情况都会让宽度失常
        if (backLeftWidth + changeValue < 1 && leftCells[0]) {
          changeValue = -backLeftWidth + 1;
        } else if (backRightWidth - changeValue < 1 && rightCells[0]) {
          changeValue = backRightWidth - 1;
        }
        //整列被rowspan时存在
        utils.each(leftCells, function (cell) {
          if (cell.style.width) cell.style.width = "";
          // if(changeValue < 0)cell.style.wordBreak = "break-all";
          // cell.setAttribute("width",backLeftWidth + changeValue);
          if (isPercent) {
            cell.setAttribute(
              "width",
              pointPercent((backLeftWidth + changeValue) / backTableWidth)
            ); //%
          } else {
            cell.setAttribute("width", backLeftWidth + changeValue);
          }
        });
        utils.each(rightCells, function (cell) {
          if (cell.style.width) cell.style.width = "";
          // if(changeValue > 0 )cell.style.wordBreak = "break-all";
          // cell.setAttribute("width",backRightWidth - changeValue);
          if (isPercent) {
            cell.setAttribute(
              "width",
              pointPercent((backRightWidth - changeValue) / backTableWidth)
            ); //%
          } else {
            cell.setAttribute("width", backRightWidth - changeValue);
          }
        });
        //如果是在表格最右边拖动，则还需要调整表格宽度，否则在合并过的单元格中输入文字，表格会被撑开
        if (!cell.nextSibling) {
          if (table.style.width) table.style.width = "";
          table.setAttribute("width", backTableWidth + changeValue);
          // 如果单元格是采用百分比的话，需要改变所有单元格的百分比大小。因为合并的话没有width属性，所以是所有有width属性的都要修改
          if (isPercent) {
            var newPercent,
              changePercent = changeValue / backTableWidth;
            for (var i = 0; i < $(table).find("td").length; i++) {
              if ($(table).find("td")[i].getAttribute("width")) {
                newPercent = pointPercent(
                  pointPercent($(table).find("td")[i].getAttribute("width")) -
                    changePercent / ut.colsNum
                );
                $(table).find("td")[i].setAttribute("width", newPercent);
              }
            }
            // table.setAttribute("width",pointPercent((backTableWidth + changeValue)/backTableWidth)); //%
          }
        }
      }
    }

    function changeRowHeight(td, changeValue) {
      if (Math.abs(changeValue) < 10) return;
      var ut = getUETable(td);
      if (ut) {
        var cells = ut.getSameEndPosCells(td, "y"),
          //备份需要连带变化的td的原始高度，否则后期无法获取正确的值
          backHeight = cells[0] ? cells[0].offsetHeight : 0;
        for (var i = 0, cell; (cell = cells[i++]); ) {
          setCellHeight(cell, changeValue, backHeight);
        }
      }
    }

    function setCellHeight(cell, height, backHeight) {
      var lineHight = parseInt(
          domUtils.getComputedStyle(cell, "line-height"),
          10
        ),
        tmpHeight = backHeight + height;
      height = tmpHeight < lineHight ? lineHight : tmpHeight;
      if (cell.style.height) cell.style.height = "";
      cell.rowSpan == 1
        ? cell.setAttribute("height", height)
        : cell.removeAttribute && cell.removeAttribute("height");
    }

    function mouseUpEvent(type, evt) {
      if (evt.button == 2) return;
      mousedown = false;
      //if(browser.ie && !me.body.contentEditable){
      //    me.body.contentEditable = true;
      //}
      me.document.body.style.webkitUserSelect = "";
      //拖拽状态下的mouseUP
      if (
        (!browser.ie || (browser.ie && browser.version > 7)) &&
        onDrag &&
        dragTd
      ) {
        dragLine = me.document.getElementById("ue_tableDragLine");
        var dragTdPos = domUtils.getXY(dragTd),
          dragLinePos = domUtils.getXY(dragLine);
        switch (onDrag) {
          case "h":
            changeColWidth(
              dragTd,
              dragLinePos.x - dragTdPos.x - dragTd.offsetWidth
            );
            break;
          case "v":
            changeRowHeight(
              dragTd,
              dragLinePos.y - dragTdPos.y - dragTd.offsetHeight
            );
            break;
          default:
        }
        // table有高度属性的时候，拖动边框需要同时修改table的height属性，这样当table只有一行的时候才能拖动
        dragEndY = getPermissionY(dragTd, evt);
        dragLength = dragEndY - dragStartY;
        var selfTable = domUtils.findParentByTagName(startTd, "table", true);
        if ($(selfTable).attr("height")) {
          var dragHeight = parseInt($(selfTable).attr("height")) + dragLength;
          $(selfTable).attr("height", dragHeight + "px");
        }
        onDrag = "";
        dragTd = null;

        hideDragLine(me);
        return;
      }
      //正常状态下的mouseup
      var range = null;
      if (!startTd) {
        var target = domUtils.findParentByTagName(
          evt.target || evt.srcElement,
          "td",
          true
        );
        if (!target)
          target = domUtils.findParentByTagName(
            evt.target || evt.srcElement,
            "th",
            true
          );
        if (target && (target.tagName == "TD" || target.tagName == "TH")) {
          range = new dom.Range(me.document);
          range.setStart(target, 0).setCursor(false, true);
        }
      } else {
        var ut = getUETable(startTd),
          cell = ut ? ut.selectedTds[0] : null;
        if (cell) {
          range = new dom.Range(me.document);
          if (domUtils.isEmptyBlock(cell)) {
            range.setStart(cell, 0).setCursor(false, true);
          } else {
            range
              .selectNodeContents(cell)
              .shrinkBoundary()
              .setCursor(false, true);
          }
        } else {
          range = me.selection.getRange().shrinkBoundary();
          if (!range.collapsed) {
            var start = domUtils.findParentByTagName(
                range.startContainer,
                ["td", "th"],
                true
              ),
              end = domUtils.findParentByTagName(
                range.endContainer,
                ["td", "th"],
                true
              );
            //在table里边的不能清除
            if (
              (start && !end) ||
              (!start && end) ||
              (start && end && start !== end)
            ) {
              range.setCursor(false, true);
            }
          }
        }
        startTd = null;
        me.removeListener("mouseover", mouseOverEvent);
      }
      me._selectionChange();
    }

    function mouseOverEvent(type, evt) {
      currentTd = evt.target || evt.srcElement;
      //需要判断两个TD是否位于同一个表格内
      if (
        startTd &&
        ((startTd.tagName == "TD" && currentTd.tagName == "TD") ||
          (startTd.tagName == "TH" && currentTd.tagName == "TH")) &&
        domUtils.findParentByTagName(startTd, "table") ==
          domUtils.findParentByTagName(currentTd, "table")
      ) {
        var ut = getUETable(currentTd);
        if (startTd != currentTd) {
          me.document.body.style.webkitUserSelect = "none";
          me.selection.getNative()[browser.ie ? "empty" : "removeAllRanges"]();
          var range = ut.getCellsRange(startTd, currentTd);
          ut.setSelected(range);
        } else {
          me.document.body.style.webkitUserSelect = "";
          ut.clearSelected();
        }
      }
      evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
    }
    /**
     * 根据当前点击的td或者table获取索引对象
     * @param tdOrTable
     */
    function getUETable(tdOrTable) {
      var tag = tdOrTable.tagName.toLowerCase();
      tdOrTable =
        tag == "td" || tag == "th"
          ? domUtils.findParentByTagName(tdOrTable, "table", true)
          : tdOrTable;
      if (!tdOrTable.ueTable) {
        tdOrTable.ueTable = new UETable(tdOrTable);
      }
      return tdOrTable.ueTable;
    }
    /**
     * 根据当前框选的td来获取ueTable对象
     */
    function getUETableBySelected(editor) {
      var table = getTableItemsByRange(editor).table;
      if (table && table.ueTable && table.ueTable.selectedTds.length) {
        return table.ueTable;
      }
      return null;
    }
    function getDragLine(editor, doc) {
      if (mousedown) return;
      dragLine = editor.document.createElement("div");
      domUtils.setAttributes(dragLine, {
        id: "ue_tableDragLine",
        unselectable: "on",
        contenteditable: false,
        onresizestart: "return false",
        ondragstart: "return false",
        onselectstart: "return false",
        style:
          "background-color:blue;position:absolute;padding:0;margin:0;background-image:none;border:0px none;opacity:0;filter:alpha(opacity=0)"
      });
      //domUtils.on(dragLine,['resizestart','dragstart','selectstart'],function(evt){
      //    domUtils.preventDefault(evt);
      //});
      editor.body.appendChild(dragLine);
    }

    function hideDragLine(editor) {
      if (mousedown) return;
      var line;
      while ((line = editor.document.getElementById("ue_tableDragLine"))) {
        domUtils.remove(line);
      }
    }

    /**
     * 依据state（v|h）在cell位置显示横线
     * @param state
     * @param cell
     */
    function showDragLineAt(state, cell) {
      if (!cell) return;
      var table = domUtils.findParentByTagName(cell, "table"),
        caption = table.getElementsByTagName("caption"),
        width = table.offsetWidth,
        height =
          table.offsetHeight -
          (caption.length > 0 ? caption[0].offsetHeight : 0),
        tablePos = domUtils.getXY(table),
        cellPos = domUtils.getXY(cell),
        css;
      switch (state) {
        case "h":
          css =
            "height:" +
            height +
            "px;top:" +
            (tablePos.y + (caption.length > 0 ? caption[0].offsetHeight : 0)) +
            "px;left:" +
            (cellPos.x + cell.offsetWidth - 2);
          dragLine.style.cssText =
            css +
            "px;position: absolute;display:block;background-color:blue;width:1px;border:0; color:blue;opacity:.3;filter:alpha(opacity=30)";
          break;
        case "v":
          css =
            "width:" +
            width +
            "px;left:" +
            tablePos.x +
            "px;top:" +
            (cellPos.y + cell.offsetHeight - 2);
          //必须加上border:0和color:blue，否则低版ie不支持背景色显示
          dragLine.style.cssText =
            css +
            "px;overflow:hidden;position: absolute;display:block;background-color:blue;height:1px;border:0;color:blue;opacity:.2;filter:alpha(opacity=20)";
          break;
        default:
      }
    }
    /**
     * 当表格边框颜色为白色时设置为虚线,true为添加虚线
     * @param flag
     */
    function switchBoderColor(flag) {
      var tableArr = domUtils.getElementsByTagName(me.body, "table"),
        color;
      for (var i = 0, node; (node = tableArr[i++]); ) {
        var td = domUtils.getElementsByTagName(node, "td");
        if (td[0]) {
          if (flag) {
            color = td[0].style.borderColor.replace(/\s/g, "");
            if (/(#ffffff)|(rgb\(255,f55,255\))/gi.test(color))
              domUtils.addClass(node, "noBorderTable");
          } else {
            domUtils.removeClasses(node, "noBorderTable");
          }
        }
      }
    }

    function getTableWidth(editor, needIEHack, defaultValue) {
      var body = editor.body;
      return (
        body.offsetWidth -
        (needIEHack
          ? parseInt(domUtils.getComputedStyle(body, "margin-left"), 10) * 2
          : 0) -
        defaultValue.tableBorder * 2 -
        (editor.options.offsetWidth || 0)
      );
    }
    //计算每个单元格的大小
    function getTableCellWidth(opt) {
      var borderWidth, totalPadding, totalMargin;
      if (opt.borderType == 0) {
        if (opt.cellSpacing == 0) {
          borderWidth = opt.border * (opt.numCols - 1 + 2);
        } else {
          borderWidth = opt.border * (opt.numCols * 2 + 2);
        }
      } else {
        borderWidth = opt.border * 2;
      }
      totalPadding =
        (!opt.cellPadding || opt.cellPadding == "0" ? 10 : opt.cellPadding) *
        (opt.numCols * 2);
      totalMargin = opt.cellSpacing * (opt.numCols - 1 + 2);
      return (
        (opt.ueditorWidth - borderWidth - totalPadding - totalMargin) /
        opt.numCols
      );
    }
    // 计算每个单元格的百分比大小
    function getTableCellPercentWidth(opt) {
      return (100 / opt.numCols).toFixed(1) + "%";
    }
    /**
     * 插入表格
     * @param numRows 行数
     * @param numCols 列数
     * @param height 列数
     * @param width 列数
     * @param heightUnit 列数
     * @param widthUnit 列数
     * @param bgColor 表格背景
     * @param border 边框大小
     * @param borderColor 边框颜色
     * @param cellSpacing 单元格间距
     * @param cellPadding 单元格边距
     */
    me.commands["inserttable"] = {
      queryCommandState: function () {
        if (this.highlight) {
          return -1;
        }
        var range = this.selection.getRange();
        return domUtils.findParentByTagName(
          range.startContainer,
          "table",
          true
        ) ||
          domUtils.findParentByTagName(range.endContainer, "table", true) ||
          me.currentSelectedArr.length > 0
          ? /*-1     之前的源码*/ 0
          : 0;
      },
      execCommand: function (cmdName, opt) {
        opt = opt || { numRows: 5, numCols: 5, border: 1 };
        // 加上hhhh的class，不然noBorderTable会在再次编辑时消失。？？？
        var html = [
            '<div style="max-width:100%"><table units="hasPercent" ' +
              (opt.border == "0" ? ' class="noBorderTable hhhh"' : "") +
              ' _innerCreateTable = "true" '
          ],
          optBorder = opt.border,
          optBorderStyle = opt.borderStyle,
          tableBorderStyle,
          tableTdBorderStyle;
        //新表格样式调整，默认justify排列，且单词不截断。
        var tablejustify = "word-break: break-all;text-align: justify;";

        /**
         * @desc 修正插入表格时，表格边框线显示异常的bug
         * @author jser
         * @date 2017-1-17
         */
        if (typeof optBorder === "undefined") {
          optBorder = "1";
        }
        tableBorderStyle = tableTdBorderStyle =
          "border:" +
          optBorderStyle +
          " " +
          optBorder +
          "px" +
          " " +
          opt.borderColor +
          ";"; // 表格边框内联样式
        if (opt.borderType == 1) {
          tableTdBorderStyle = "border:none;";
        } else {
          html.push(' style="border-collapse:collapse;" ');
        }

        if (opt.cellSpacing && opt.cellSpacing != "0") {
          html.push(
            ' style="float:none; border-collapse:separate;' +
              tableBorderStyle +
              "background-color:" +
              opt.bgColor +
              ";" +
              '" '
          ); //添加表格边框内联样式
        } else {
          html.push(
            ' style="float:none; border-collapse:collapse;' +
              tableBorderStyle +
              "background-color:" +
              opt.bgColor +
              ";" +
              '" '
          );
        }
        opt.cellSpacing &&
          opt.cellSpacing != "0" &&
          html.push(' cellSpacing="' + opt.cellSpacing + '" ');
        opt.cellPadding &&
          /*opt.cellPadding != '0' &&*/ html.push(
            ' cellPadding="' + opt.cellPadding + '" '
          );
        if (!opt.ueditorWidth) {
          html.push('defaultWidth = "true"'); //defaultWidth属性，用于判断表格宽度是否使用默认宽度，用于全屏切换
        }
        var defaultWidth;
        if (
          $(this.container).find(".edui-toolbar").attr("isfullscreen") ===
          "fullScreen"
        ) {
          defaultWidth =
            parseInt($(this.body).find(".breakPage").css("width")) -
            2 * parseInt($(this.body).find(".breakPage").css("padding-left"));
        } else {
          defaultWidth = this.body.clientWidth;
        }
        opt.ueditorWidth = opt.ueditorWidth || defaultWidth;
        // opt.ueditorWidth = opt.ueditorWidth
        html.push(
          ' width="' +
            opt.ueditorWidth +
            (typeof opt.ueditorWidthUnit == "undefined"
              ? "px"
              : opt.ueditorWidthUnit) +
            '" '
        );
        opt.ueditorHeight &&
          html.push(
            ' height="' +
              opt.ueditorHeight +
              (typeof opt.ueditorHeightUnit == "undefined"
                ? "px"
                : opt.ueditorHeightUnit) +
              '" '
          );
        opt.align && html.push(' align="' + opt.align + '" ');
        html.push(
          ' border="' +
            (opt.border || 0) +
            '" borderColor="' +
            (opt.borderColor || "#000000") +
            '"'
        );
        opt.borderType == "1" &&
          html.push(' borderType="1" frame="box" rules="none" ');
        opt.commCellPadding == "1" && html.push(' commCellPadding="1" ');
        // opt.bgColor && html.push( ' bgColor="' + opt.bgColor + '"' );
        html.push(" ><tbody>");

        // var tableCellWidth = getTableCellWidth(opt);
        var tableCellWidth = getTableCellPercentWidth(opt); //%
        // opt.ueditorWidth = Math.floor( opt.ueditorWidth / opt.numCols );
        console.log(
          "style---->",
          tableCellWidth,
          'style="width:' +
            opt.ueditorWidth +
            (typeof opt.ueditorWidthUnit == "undefined"
              ? "px"
              : opt.ueditorWidthUnit) +
            ";"
        );
        for (var i = 0; i < opt.numRows; i++) {
          html.push("<tr>");
          for (var j = 0; j < opt.numCols; j++) {
            //html.push( '<td style="width:' + opt.ueditorWidth + (typeof opt.ueditorWidthUnit == "undefined" ? 'px' : opt.ueditorWidthUnit) + ';'
            html.push(
              '<td borderColor="' +
                (opt.borderColor || "#000000") +
                '"  valign="top"  style="padding:0 3px;font-size:12px;word-break: break-all;width:' +
                tableCellWidth +
                ";" +
                //+ (opt.borderType == '1' ? 'border:' + opt.border + 'px solid ' + (opt.borderColor || '#000000') : '')
                //+(opt.commCellPadding == "1" ? "padding:0px;" : "")
                tableTdBorderStyle + //jser 2017-1-17 修复火狐下单元格的边框线样式
                tablejustify +
                (opt.cellPadding != ""
                  ? "padding:" + opt.cellPadding + "px;"
                  : "") +
                '">' +
                (browser.ie ? domUtils.fillChar : "<br/>") +
                "</td>"
            );
          }
          html.push("</tr>");
        }
        me.execCommand("insertHtml", html.join("") + "</tbody></table></div>");
        reset();
        //如果表格的align不是默认，将不占位,给后边的block元素设置clear:both
        if (opt.align) {
          var range = me.selection.getRange(),
            bk = range.createBookmark(),
            start = range.startContainer;
          while (start && !domUtils.isBody(start)) {
            if (domUtils.isBlockElm(start)) {
              start.style.clear = "both";
              range.moveToBookmark(bk).select();
              break;
            }
            start = start.parentNode;
          }
        }
      }
    };
    me.commands["edittable"] = {
      queryCommandState: function () {
        var range = this.selection.getRange();
        if (this.highlight) {
          return -1;
        }
        return domUtils.findParentByTagName(
          range.startContainer,
          "table",
          true
        ) || me.currentSelectedArr.length > 0
          ? 0
          : -1;
      },
      execCommand: function (cmdName, opt) {
        var start = me.selection.getStart(),
          table = domUtils.findParentByTagName(start, "table", true),
          optBorder = opt.border,
          tableBorderStyle, //表格边框样式
          tableTdBorderStyle; //表格单元格边框样式

        if (table) {
          table.style.cssText = table.style.cssText.replace(
            /border[^;]+/gi,
            ""
          );
          //table.style.borderCollapse = opt.cellSpacing && opt.cellSpacing != '0' || opt.cellPadding && opt.cellPadding != '0' ? 'separate' : 'collapse';
          table.style.borderCollapse =
            opt.cellSpacing && opt.cellSpacing != "0" ? "separate" : "collapse";
          opt.cellSpacing && opt.cellSpacing != "0"
            ? table.setAttribute("cellSpacing", opt.cellSpacing)
            : table.removeAttribute("cellSpacing");
          //opt.cellPadding || opt.cellPadding != '0' ? table.setAttribute( 'cellPadding', opt.cellPadding ) : table.removeAttribute( 'cellPadding' );
          opt.ueditorHeight &&
            table.setAttribute("height", opt.ueditorHeight + "px"); //opt.ueditorHeightUnit );
          opt.align && table.setAttribute("align", opt.align);
          // 当宽高为默认值时，要将height去掉，width设置为窗口宽度
          if (!opt.ueditorHeight && table.getAttribute("height")) {
            table.setAttribute("height", "");
          }
          if (!opt.ueditorWidth) {
            table.setAttribute("defaultWidth", "true");
          } else {
            table.setAttribute("defaultWidth", "");
          }
          opt.ueditorWidth = opt.ueditorWidth || this.body.clientWidth;
          if (opt.ueditorWidth) {
            //opt.ueditorWidthUnit );
            table.setAttribute("width", opt.ueditorWidth + "px");
            table.style.width = "";
          }
          if (opt.bgColor) {
            table.style.backgroundColor = opt.bgColor;
            // table.setAttribute( 'bgColor', opt.bgColor );
          } else {
            domUtils.removeAttributes(table, ["bgColor"]);
          }

          /**
           * @desc 修复IE下td边框线为黑色的bugFF下修改td的默认边框样式
           * @author jser
           * @date 2017-1-14
           */
          if (typeof optBorder === "undefined") {
            optBorder = "1";
          }

          tableBorderStyle = tableTdBorderStyle =
            (opt.borderStyle || "solid") +
            " " +
            (opt.borderColor || "#000000") +
            " " +
            (optBorder + "px");

          // 判断是否要显示表格的边框线
          if (opt.borderType == 1) {
            tableTdBorderStyle = "none";
          }

          if (opt.borderColor) {
            // jser 设置表格外边框线
            table.style.border = tableBorderStyle;
            table.setAttribute("bordercolor", opt.borderColor);
            // jser 设置表格单元格边框线
            tableCells = table.getElementsByTagName("td");
            tableCellsLen = tableCells.length;

            while (tableCellsLen) {
              tableCellsLen -= 1;
              tableCells[tableCellsLen].setAttribute(
                "bordercolor",
                opt.borderColor
              );
            }
          }

          table.setAttribute("border", opt.border);
          if (domUtils.hasClass(table, "noBorderTable")) {
            domUtils.removeClasses(table, ["noBorderTable"]);
          }
          domUtils.addClass(table, opt.border == "0" ? " noBorderTable" : "");

          if (opt.borderType == "1") {
            table.setAttribute("borderType", "1");
            table.setAttribute("frame", "box");
            table.setAttribute("rules", "none");
          } else {
            table.removeAttribute("borderType");
            table.removeAttribute("frame");
            table.removeAttribute("rules");
          }

          if (opt.cellPadding != "") {
            // for ( var i = 0, ti, tds = table.getElementsByTagName( 'td' ); ti = tds[i++]; ) {
            //     ti.style.padding = opt.cellPadding + "px";
            // }
            table.setAttribute("cellPadding", opt.cellPadding);
          } else {
            // for ( var i = 0, ti, tds = table.getElementsByTagName( 'td' ); ti = tds[i++]; ) {
            //     ti.style.padding = "";

            // }
            table.removeAttribute("cellPadding");
          }

          var tds = table.getElementsByTagName("td");
          //调整td宽度
          if (!table.getAttribute("units") === "hasPercent") {
            //用于兼容旧数据，有units属性的话，是使用百分比作为单位的，这时宽度不用调整
            utils.each(tds, function (td) {
              var tdWidth = td.getAttribute("width");

              if (opt.cellPadding != "") {
                td.style.padding = opt.cellPadding + "px";
                tdWidth = tdWidth - opt.cellPadding * 2;
              } else {
                td.style.padding = "";
              }
              td.style.border = tableTdBorderStyle;

              if (opt.cellSpacing != 0) {
                tdWidth -= opt.border * 2;
              } else {
                tdWidth -= opt.border;
              }
              td.setAttribute("width", tdWidth);
            });
          } else {
            utils.each(tds, function (td) {
              if (opt.cellPadding != "") {
                td.style.padding = opt.cellPadding + "px";
              } else {
                td.style.padding = "";
              }
              td.style.border = tableTdBorderStyle;
            });
          }
        }
      }
    };

    me.commands["edittd"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this);
        if (!tableItems.cell) return -1;
        return 0;
      },
      /**
       * 单元格属性编辑
       * @param cmdName
       * @param tdItems
       */
      execCommand: function (cmdName, tdItems) {
        var range = this.selection.getRange(),
          tdsall = getUETableBySelected(this),
          tds = !me.currentSelectedArr.length
            ? [
                domUtils.findParentByTagName(
                  range.startContainer,
                  ["td", "th"],
                  true
                )
              ]
            : me.currentSelectedArr;

        if (Object.prototype.toString.call(tdItems) === "[object Object]") {
          tds = tdsall && tdsall.selectedTds ? tdsall.selectedTds : tds;
          for (var i = 0, td; (td = tds[i++]); ) {
            td.style.backgroundColor = tdItems.bgColor;
            td.bgColor = tdItems.bgColor;
            // td.style.borderWidth = tdItems.borderSize;
            // 如果表格table的cellSpacing大于0，那么table的border去掉，以防止被覆盖
            if (
              !$(td).parents("table").attr("cellspacing") &&
              !$(td).parents("table").attr("frame")
            ) {
              // $(td).parents('table').css('border','none');

              var tdCols = $(td).index();
              var tdRows = $(td).parent().index();
              // 合并单元格做相关处理
              if (td.getAttribute("colspan") || td.getAttribute("rowspan")) {
                var tdColCounts = td.getAttribute("colspan");
                var tdRowCounts = td.getAttribute("rowspan");
                for (var j = 0; j < tdColCounts; j++) {
                  if ($(td).prev()) {
                    $(td).prev().css("border-right", "none");
                  }
                  if ($(td).next()) {
                    $(td).next().css("border-left", "none");
                  }
                  if (tdRows) {
                    var tdTop = $(td).parents("table")[0].rows[tdRows - 1]
                      .cells[tdCols + j];
                    $(tdTop).css("border-bottom", "none");
                  }
                  if (
                    $(td).parents("table")[0].rows[
                      tdRows + parseInt(tdRowCounts)
                    ]
                  ) {
                    var tdTop = $(td).parents("table")[0].rows[
                      tdRows + parseInt(tdRowCounts)
                    ].cells[tdCols + j];
                    $(tdTop).css("border-top", "none");
                  }
                }
                for (var j = 0; j < tdRowCounts; j++) {
                  if ($(td).prev()) {
                    var tdLeft = $(td).parents("table")[0].rows[tdRows + j]
                      .cells[tdCols - 1];
                    $(tdLeft).css("border-right", "none");
                    // $(td).prev().css('border-right','none')
                  }
                  if ($(td).next()) {
                    if (j === 0) {
                      var tdRight = $(td).parents("table")[0].rows[tdRows]
                        .cells[tdCols + 1];
                    } else {
                      var tdRight = $(td).parents("table")[0].rows[tdRows + j]
                        .cells[tdCols];
                    }
                    $(tdRight).css("border-left", "none");
                    // $(td).next().css('border-left','none')
                  }
                  if (tdRows) {
                    var tdTop = $(td).parents("table")[0].rows[tdRows - 1]
                      .cells[tdCols];
                    $(tdTop).css("border-bottom", "none");
                  }
                  if (
                    $(td).parents("table")[0].rows[
                      tdRows + parseInt(tdRowCounts)
                    ]
                  ) {
                    var tdTop = $(td).parents("table")[0].rows[
                      tdRows + parseInt(tdRowCounts)
                    ].cells[tdCols];
                    $(tdTop).css("border-top", "none");
                  }
                }
              } else {
                // // 当改变边框样式的时候，处理被覆盖的问题
                // // 左
                if ($(td).prev()) {
                  $(td).prev().css("border-right", "none");
                }
                // // 右
                if ($(td).next()) {
                  $(td).next().css("border-left", "none");
                }
                // 上
                // var tdCols = $(td).index();
                // var tdRows = $(td).parent().index();
                if (tdRows) {
                  var tdTop = $(td).parents("table")[0].rows[tdRows - 1].cells[
                    tdCols
                  ];
                  $(tdTop).css("border-bottom", "none");
                }
                // // 下
                if ($(td).parents("table")[0].rows[tdRows + 1]) {
                  var tdTop = $(td).parents("table")[0].rows[tdRows + 1].cells[
                    tdCols
                  ];
                  $(tdTop).css("border-top", "none");
                }
              }
            }
            // 边框设置
            $(td).attr("bSelect", tdItems.borderSelectShow);
            for (var j = 0; j < tdItems.borderSelectShow.length; j++) {
              $(td).css(
                "border-" + tdItems.borderSelectShow[j],
                tdItems.borderSize +
                  " " +
                  tdItems.unitBorderStyle +
                  " " +
                  tdItems.borderColor
              );
              // 多选的时候，处理相邻边框的冲突问题
              if (tds.length !== 1) {
                var tdCols = $(td).index();
                var tdRows = $(td).parent().index();
                if (
                  tdItems.borderSelectShow.indexOf("left") < 0 &&
                  tds.indexOf($(td).prev()[0]) >= 0
                ) {
                  $(td).css(
                    "border-left",
                    tdItems.borderSize +
                      " " +
                      tdItems.unitBorderStyle +
                      " " +
                      tdItems.borderColor
                  );
                }
                if (
                  tdItems.borderSelectShow.indexOf("top") < 0 &&
                  tds.indexOf(
                    $(td).parents("table")[0].rows[tdRows - 1].cells[tdCols]
                  ) >= 0
                ) {
                  $(td).css(
                    "border-top",
                    tdItems.borderSize +
                      " " +
                      tdItems.unitBorderStyle +
                      " " +
                      tdItems.borderColor
                  );
                }
              }
            }
            // $(td).css('border-left',tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor)
            // $(td).css('border-right',tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor)
            // $(td).css('border-top',tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor)
            // $(td).css('border-bottom',tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor)
            // td.style.borderLeft = tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor;
            // td.style.borderRight = tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor;
            // td.style.borderTop = tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor;
            // td.style.borderBottom = tdItems.borderSize + " " + tdItems.unitBorderStyle + " " + tdItems.borderColor;

            td.setAttribute("bordercolor", tdItems.borderColor);
            td.setAttribute("vAlign", tdItems.vAlign);
            //旧表格兼容，旧表格点开单元格水平选择默认确定后，需要调整为新样式：两端对齐，单词不打断。
            if (!tdItems.align) {
              td.removeAttribute("align");
              domUtils.setStyles(td, {
                "text-align": "justify",
                "word-break": "break-all"
              });
            } else {
              domUtils.removeStyle(td, "text-align");
              td.setAttribute("align", tdItems.align);
            }
          }
        } else {
          if (tdsall && tdsall.selectedTds) {
            tdsall = tdsall.selectedTds;
          }
          for (var i = 0, td1; (td1 = tdsall[i++]); ) {
            td1.style.backgroundColor = tdItems == "default" ? "" : tdItems;
            td1.bgColor = tdItems == "default" ? "" : tdItems;
          }
        }
      }
    };

    /**
     * 删除表格
     */
    me.commands["deletetable"] = {
      queryCommandState: function () {
        if (this.highlight) {
          return -1;
        }
        var range = this.selection.getRange();
        return (domUtils.findParentByTagName(
          range.startContainer,
          "table",
          true
        ) &&
          domUtils.findParentByTagName(range.endContainer, "table", true)) ||
          me.currentSelectedArr.length > 0
          ? 0
          : -1;
      },
      execCommand: function () {
        var range = this.selection.getRange(),
          table = domUtils.findParentByTagName(
            me.currentSelectedArr.length > 0
              ? me.currentSelectedArr[0]
              : range.startContainer,
            "table",
            true
          );
        deleteTable(table, range);
        reset();
      }
    };

    /**
     * 向右合并单元格
     */
    me.commands["mergeright"] = {
      queryCommandState: function (cmd) {
        var tableItems = getTableItemsByRange(this);
        if (!tableItems.cell) return -1;
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length) return -1;
        var cellInfo = ut.getCellInfo(tableItems.cell),
          rightColIndex = cellInfo.colIndex + cellInfo.colSpan;
        if (rightColIndex >= ut.colsNum) return -1;
        var rightCellInfo = ut.indexTable[cellInfo.rowIndex][rightColIndex];
        return rightCellInfo.rowIndex == cellInfo.rowIndex &&
          rightCellInfo.rowSpan == cellInfo.rowSpan
          ? 0
          : -1;
      },
      execCommand: function (cmd) {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.mergeRight(cell);
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 向下合并单元格
     */
    me.commands["mergedown"] = {
      queryCommandState: function (cmd) {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell || cell.tagName == "TH") return -1;
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length) return -1;
        var cellInfo = ut.getCellInfo(tableItems.cell),
          downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan;
        // 如果处于最下边则不能f向右合并
        if (downRowIndex >= ut.rowsNum) return -1;
        var downCellInfo = ut.indexTable[downRowIndex][cellInfo.colIndex];
        // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
        return downCellInfo.colIndex == cellInfo.colIndex &&
          downCellInfo.colSpan == cellInfo.colSpan &&
          tableItems.cell.tagName !== "TH"
          ? 0
          : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.mergeDown(cell);
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 删除行
     */
    me.commands["deleterow"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this);
        if (!tableItems.cell) {
          return -1;
        }
        return 0;
      },
      execCommand: function () {
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          cellsRange = ut.cellsRange,
          cellInfo = ut.getCellInfo(cell),
          preCell = ut.getVSideCell(cell),
          nextCell = ut.getVSideCell(cell, true),
          rng = this.selection.getRange();
        if (utils.isEmptyObject(cellsRange)) {
          ut.deleteRow(cellInfo.rowIndex);
        } else {
          for (
            var i = cellsRange.beginRowIndex;
            i < cellsRange.endRowIndex + 1;
            i++
          ) {
            ut.deleteRow(cellsRange.beginRowIndex);
          }
        }
        var table = ut.table;
        if (!table.getElementsByTagName("td").length) {
          var nextSibling = table.nextSibling;
          domUtils.remove(table);
          if (nextSibling) {
            rng.setStart(nextSibling, 0).setCursor(false, true);
          }
        } else {
          if (
            cellInfo.rowSpan == 1 ||
            cellInfo.rowSpan ==
              cellsRange.endRowIndex - cellsRange.beginRowIndex + 1
          ) {
            if (nextCell || preCell)
              rng
                .selectNodeContents(nextCell || preCell)
                .setCursor(false, true);
          } else {
            var newCell = ut.getCell(
              cellInfo.rowIndex,
              ut.indexTable[cellInfo.rowIndex][cellInfo.colIndex].cellIndex
            );
            if (newCell) rng.selectNodeContents(newCell).setCursor(false, true);
          }
        }
      }
    };

    /**
     * 删除列
     */
    me.commands["deletecol"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this);
        if (!tableItems.cell) return -1;
        return 0;
      },
      execCommand: function () {
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          range = ut.cellsRange,
          cellInfo = ut.getCellInfo(cell),
          preCell = ut.getHSideCell(cell),
          nextCell = ut.getHSideCell(cell, true);
        if (utils.isEmptyObject(range)) {
          ut.deleteCol(cellInfo.colIndex);
        } else {
          for (var i = range.beginColIndex; i < range.endColIndex + 1; i++) {
            ut.deleteCol(range.beginColIndex);
          }
        }
        var table = ut.table,
          rng = this.selection.getRange();
        if (!table.getElementsByTagName("td").length) {
          var nextSibling = table.nextSibling;
          domUtils.remove(table);
          if (nextSibling) {
            rng.setStart(nextSibling, 0).setCursor(false, true);
          }
        } else {
          if (domUtils.inDoc(cell, this.document)) {
            rng.setStart(cell, 0).setCursor(false, true);
          } else {
            if (nextCell && domUtils.inDoc(nextCell, this.document)) {
              rng.selectNodeContents(nextCell).setCursor(false, true);
            } else {
              if (preCell && domUtils.inDoc(preCell, this.document)) {
                rng.selectNodeContents(preCell).setCursor(true, true);
              }
            }
          }
        }
      }
    };

    /**
     * 完全拆分单元格
     */
    me.commands["splittocells"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell) return -1;
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length > 0) return -1;
        return cell && (cell.colSpan > 1 || cell.rowSpan > 1) ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.splitToCells(cell);
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 将单元格拆分成行
     */
    me.commands["splittorows"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell) return -1;
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length > 0) return -1;
        return cell && cell.rowSpan > 1 ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.splitToRows(cell);
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 在表格前插入行
     */
    me.commands["insertparagraphbeforetable"] = {
      queryCommandState: function () {
        if (this.highlight) {
          return -1;
        }
        var range = this.selection.getRange(),
          start = range.startContainer,
          td =
            domUtils.findParentByTagName(start, "td", true) ||
            me.currentSelectedArr[0];
        return td && domUtils.findParentByTagName(td, "table") ? 0 : -1;
      },
      execCommand: function () {
        var range = this.selection.getRange(),
          start = range.startContainer,
          table = domUtils.findParentByTagName(start, "table", true);

        start = me.document.createElement(me.options.enterTag);
        table.parentNode.insertBefore(start, table);
        clearSelectedTd(me.currentSelectedArr);
        if (start.tagName == "P") {
          //trace:868
          start.innerHTML = browser.ie ? "" : "<br/>";
          range.setStart(start, 0);
        } else {
          range.setStartBefore(start);
        }
        range.setCursor();
      }
    };

    /**
     * 将单元格拆分成列
     */
    me.commands["splittocols"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        if (!cell) return -1;
        var ut = getUETable(tableItems.table);
        if (ut.selectedTds.length > 0) return -1;
        return cell && cell.colSpan > 1 ? 0 : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell);
        ut.splitToCols(cell);
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 插入行
     */
    me.commands["insertrow"] = {
      queryCommandState: function () {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        return cell &&
          cell.tagName == "TD" &&
          getUETable(tableItems.table).rowsNum < this.options.maxRowNum
          ? 0
          : -1;
      },
      execCommand: function () {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          cellInfo = ut.getCellInfo(cell);
        //ut.insertRow(!ut.selectedTds.length ? cellInfo.rowIndex:ut.cellsRange.beginRowIndex,'');
        if (!ut.selectedTds.length) {
          ut.insertRow(cellInfo.rowIndex);
        } else {
          var range = ut.cellsRange;
          for (
            var i = 0, len = range.endRowIndex - range.beginRowIndex + 1;
            i < len;
            i++
          ) {
            ut.insertRow(range.beginRowIndex);
          }
        }
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 插入列
     */
    me.commands["insertcol"] = {
      queryCommandState: function (cmd) {
        var tableItems = getTableItemsByRange(this),
          cell = tableItems.cell;
        return cell &&
          (cell.tagName == "TD" || cell.tagName == "TH") &&
          getUETable(tableItems.table).colsNum < this.options.maxColNum
          ? 0
          : -1;
      },
      execCommand: function (cmd) {
        var rng = this.selection.getRange(),
          bk = rng.createBookmark(true);
        if (this.queryCommandState(cmd) == -1) return;
        var cell = getTableItemsByRange(this).cell,
          ut = getUETable(cell),
          cellInfo = ut.getCellInfo(cell);
        //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex:ut.cellsRange.beginColIndex);
        if (!ut.selectedTds.length) {
          ut.insertCol(cellInfo.colIndex);
        } else {
          var range = ut.cellsRange;
          for (
            var i = 0, len = range.endColIndex - range.beginColIndex + 1;
            i < len;
            i++
          ) {
            ut.insertCol(range.beginColIndex);
          }
        }
        rng.moveToBookmark(bk).select();
      }
    };

    /**
     * 合并多个单元格，通过两个cell将当前包含的所有横纵单元格进行合并
     */
    me.commands["mergecells"] = {
      queryCommandState: function () {
        return getUETableBySelected(this) ? 0 : -1;
      },
      execCommand: function () {
        var ut = getUETableBySelected(this);
        if (ut && ut.selectedTds.length) {
          var cell = ut.selectedTds[0];
          getUETableBySelected(this).mergeRange();
          var rng = this.selection.getRange();
          if (domUtils.isEmptyBlock(cell)) {
            rng.setStart(cell, 0).collapse(true);
          } else {
            rng.selectNodeContents(cell);
          }
          rng.select();

          // 把浏览器生成的&#8302清除掉，不然输入文字后换行会删除文字；if用来区分使用文档导入表格的
          if (!rng.startContainer.tagName) {
            $(rng.startContainer).remove();
          }
        }
      }
    };

    /**
     * 将cellFrom单元格中的内容移动到cellTo中
     * @param cellTo  目标单元格
     * @param cellFrom  源单元格
     */
    function _moveContent(cellTo, cellFrom) {
      if (_isEmpty(cellFrom)) return;

      if (_isEmpty(cellTo)) {
        cellTo.innerHTML = cellFrom.innerHTML;
        return;
      }
      var child = cellTo.lastChild;
      if (child.nodeType != 1 || child.tagName != "BR") {
        cellTo.appendChild(cellTo.ownerDocument.createElement("br"));
      }

      //依次移动内容
      while ((child = cellFrom.firstChild)) {
        cellTo.appendChild(child);
      }
    }

    /**
     * 根据两个单元格来获取中间包含的所有单元格集合选区
     * @param cellA
     * @param cellB
     * @return {Object} 选区的左上和右下坐标
     */
    function _getCellsRange(cellA, cellB) {
      var trA = cellA.parentNode,
        trB = cellB.parentNode,
        aRowIndex = trA.rowIndex,
        bRowIndex = trB.rowIndex,
        rows = trA.parentNode.parentNode.rows,
        rowsNum = rows.length,
        cellsNum = rows[0].cells.length,
        cellAIndex = getIndex(cellA),
        cellBIndex = getIndex(cellB);

      if (cellA == cellB) {
        return {
          beginRowIndex: aRowIndex,
          beginCellIndex: cellAIndex,
          endRowIndex: aRowIndex + cellA.rowSpan - 1,
          endCellIndex: cellBIndex + cellA.colSpan - 1
        };
      }

      var beginRowIndex = Math.min(aRowIndex, bRowIndex),
        beginCellIndex = Math.min(cellAIndex, cellBIndex),
        endRowIndex = Math.max(
          aRowIndex + cellA.rowSpan - 1,
          bRowIndex + cellB.rowSpan - 1
        ),
        endCellIndex = Math.max(
          cellAIndex + cellA.colSpan - 1,
          cellBIndex + cellB.colSpan - 1
        );

      while (1) {
        var tmpBeginRowIndex = beginRowIndex,
          tmpBeginCellIndex = beginCellIndex,
          tmpEndRowIndex = endRowIndex,
          tmpEndCellIndex = endCellIndex;
        // 检查是否有超出TableRange上边界的情况
        if (beginRowIndex > 0) {
          for (cellIndex = beginCellIndex; cellIndex <= endCellIndex; ) {
            var currentTopTd = rows[beginRowIndex].cells[cellIndex];
            if (_isHide(currentTopTd)) {
              //overflowRowIndex = beginRowIndex == currentTopTd.rootRowIndex ? 1:0;
              beginRowIndex = currentTopTd.getAttribute("rootRowIndex");
              currentTopTd =
                rows[currentTopTd.getAttribute("rootRowIndex")].cells[
                  currentTopTd.getAttribute("rootCellIndex")
                ];
            }

            cellIndex = getIndex(currentTopTd) + (currentTopTd.colSpan || 1);
          }
        }

        //检查是否有超出左边界的情况
        if (beginCellIndex > 0) {
          for (var rowIndex = beginRowIndex; rowIndex <= endRowIndex; ) {
            var currentLeftTd = rows[rowIndex].cells[beginCellIndex];
            if (_isHide(currentLeftTd)) {
              // overflowCellIndex = beginCellIndex== currentLeftTd.rootCellIndex ? 1:0;
              beginCellIndex = currentLeftTd.getAttribute("rootCellIndex");
              currentLeftTd =
                rows[currentLeftTd.getAttribute("rootRowIndex")].cells[
                  currentLeftTd.getAttribute("rootCellIndex")
                ];
            }
            rowIndex =
              currentLeftTd.parentNode.rowIndex + (currentLeftTd.rowSpan || 1);
          }
        }

        // 检查是否有超出TableRange下边界的情况
        if (endRowIndex < rowsNum) {
          for (var cellIndex = beginCellIndex; cellIndex <= endCellIndex; ) {
            var currentDownTd = rows[endRowIndex].cells[cellIndex];
            if (_isHide(currentDownTd)) {
              currentDownTd =
                rows[currentDownTd.getAttribute("rootRowIndex")].cells[
                  currentDownTd.getAttribute("rootCellIndex")
                ];
            }
            endRowIndex =
              currentDownTd.parentNode.rowIndex + currentDownTd.rowSpan - 1;
            cellIndex = getIndex(currentDownTd) + (currentDownTd.colSpan || 1);
          }
        }

        //检查是否有超出右边界的情况
        if (endCellIndex < cellsNum) {
          for (rowIndex = beginRowIndex; rowIndex <= endRowIndex; ) {
            var currentRightTd = rows[rowIndex].cells[endCellIndex];
            if (_isHide(currentRightTd)) {
              currentRightTd =
                rows[currentRightTd.getAttribute("rootRowIndex")].cells[
                  currentRightTd.getAttribute("rootCellIndex")
                ];
            }
            endCellIndex =
              getIndex(currentRightTd) + currentRightTd.colSpan - 1;
            rowIndex =
              currentRightTd.parentNode.rowIndex +
              (currentRightTd.rowSpan || 1);
          }
        }

        if (
          tmpBeginCellIndex == beginCellIndex &&
          tmpEndCellIndex == endCellIndex &&
          tmpEndRowIndex == endRowIndex &&
          tmpBeginRowIndex == beginRowIndex
        ) {
          break;
        }
      }

      //返回选区的起始和结束坐标
      return {
        beginRowIndex: beginRowIndex,
        beginCellIndex: beginCellIndex,
        endRowIndex: endRowIndex,
        endCellIndex: endCellIndex
      };
    }

    /**
     * 鼠标按下事件
     * @param type
     * @param evt
     */
    function _mouseDownEvent(type, evt) {
      anchorTd = evt.target || evt.srcElement;

      if (
        me.queryCommandState("highlightcode") ||
        domUtils.findParent(anchorTd, function (node) {
          return node.tagName == "DIV" && /highlighter/.test(node.id);
        })
      ) {
        return;
      }

      if (evt.button == 2) return;
      me.document.body.style.webkitUserSelect = "";

      clearSelectedTd(me.currentSelectedArr);
      domUtils.clearSelectedArr(me.currentSelectedArr);
      //在td里边点击，anchorTd不是td
      if (anchorTd.tagName !== "TD") {
        anchorTd = domUtils.findParentByTagName(anchorTd, "td") || anchorTd;
      }

      if (anchorTd.tagName == "TD") {
        me.addListener("mouseover", function (type, evt) {
          var tmpTd = evt.target || evt.srcElement;
          _mouseOverEvent.call(me, tmpTd);
          evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
        });
      } else {
        reset();
      }
    }

    /**
     * 鼠标移动事件
     * @param tmpTd
     */
    function _mouseOverEvent(tmpTd) {
      //需要判断两个TD是否位于同一个表格内
      if (
        anchorTd &&
        tmpTd.tagName == "TD" &&
        domUtils.findParentByTagName(anchorTd, "table") ==
          domUtils.findParentByTagName(tmpTd, "table")
      ) {
        me.document.body.style.webkitUserSelect = "none";
        var table = tmpTd.parentNode.parentNode.parentNode;
        me.selection.getNative()[browser.ie ? "empty" : "removeAllRanges"]();
        var range = _getCellsRange(anchorTd, tmpTd);
        _toggleSelect(table, range);
      }
    }

    /**
     * 切换选区状态
     * @param table
     * @param cellsRange
     */
    function _toggleSelect(table, cellsRange) {
      var rows = table.rows;
      clearSelectedTd(me.currentSelectedArr);
      for (var i = cellsRange.beginRowIndex; i <= cellsRange.endRowIndex; i++) {
        for (
          var j = cellsRange.beginCellIndex;
          j <= cellsRange.endCellIndex;
          j++
        ) {
          var td = rows[i].cells[j];
          td.className = "selectTdClass";
          me.currentSelectedArr.push(td);
        }
      }
    }

    //更新rootRowIndxe,rootCellIndex
    function update(table) {
      var tds = table.getElementsByTagName("td"),
        rowIndex,
        cellIndex,
        rows = table.rows;
      for (var j = 0, tj; (tj = tds[j++]); ) {
        if (!_isHide(tj)) {
          rowIndex = tj.parentNode.rowIndex;
          cellIndex = getIndex(tj);
          for (var r = 0; r < tj.rowSpan; r++) {
            var c = r == 0 ? 1 : 0;
            for (; c < tj.colSpan; c++) {
              var tmp = rows[rowIndex + r].children[cellIndex + c];

              tmp.setAttribute("rootRowIndex", rowIndex);
              tmp.setAttribute("rootCellIndex", cellIndex);
            }
          }
        }
        if (!_isHide(tj)) {
          domUtils.removeAttributes(tj, ["rootRowIndex", "rootCellIndex"]);
        }
        if (tj.colSpan && tj.colSpan == 1) {
          tj.removeAttribute("colSpan");
        }
        if (tj.rowSpan && tj.rowSpan == 1) {
          tj.removeAttribute("rowSpan");
        }
        var width;
        if (!_isHide(tj) && (width = tj.style.width) && /%/.test(width)) {
          tj.style.width = Math.floor(100 / tj.parentNode.cells.length) + "%";
        }
      }
    }

    me.adjustTable = function (cont) {
      var table = cont.getElementsByTagName("table");
      for (var i = 0, ti; (ti = table[i++]); ) {
        //如果表格的align不是默认，将不占位,给后边的block元素设置clear:both
        if (ti.getAttribute("align")) {
          var next = ti.nextSibling;
          while (next) {
            if (domUtils.isBlockElm(next)) {
              break;
            }
            next = next.nextSibling;
          }
          if (next) {
            next.style.clear = "both";
          }
        }

        ti.removeAttribute("_innerCreateTable");
        var tds = domUtils.getElementsByTagName(ti, "td"),
          td,
          tmpTd;

        for (var j = 0, tj; (tj = tds[j++]); ) {
          if (domUtils.isEmptyNode(tj)) {
            tj.innerHTML = browser.ie ? domUtils.fillChar : "<br/>";
          }
          var index = getIndex(tj),
            rowIndex = tj.parentNode.rowIndex,
            rows = domUtils.findParentByTagName(tj, "table").rows;

          for (var r = 0; r < tj.rowSpan; r++) {
            var c = r == 0 ? 1 : 0;
            for (; c < tj.colSpan; c++) {
              if (!td) {
                td = tj.cloneNode(false);

                td.rowSpan = td.colSpan = 1;
                td.style.display = "none";
                td.innerHTML = browser.ie ? "" : "<br/>";
              } else {
                td = td.cloneNode(true);
              }

              td.setAttribute("rootRowIndex", tj.parentNode.rowIndex);
              td.setAttribute("rootCellIndex", index);
              if (r == 0) {
                if (tj.nextSibling) {
                  tj.parentNode.insertBefore(td, tj.nextSibling);
                } else {
                  tj.parentNode.appendChild(td);
                }
              } else {
                tmpTd = rows[rowIndex + r].children[index];
                if (tmpTd) {
                  tmpTd.parentNode.insertBefore(td, tmpTd);
                } else {
                  //trace:1032
                  rows[rowIndex + r].appendChild(td);
                }
              }
            }
          }
        }
        var bw = domUtils.getComputedStyle(ti, "border-width");
        if (
          (bw == "0px" && ti.style.border != "none") ||
          ((bw == "" || bw == "medium") && ti.getAttribute("border") === "0")
        ) {
          //trace 2377 ie7下获取宽度值为medium
          domUtils.addClass(ti, "noBorderTable");
        }
      }
      me.fireEvent("afteradjusttable", cont);
    };

    //me.addListener( 'beforegetcontent', function () {
    //    for ( var i = 0, ti, ts = me.document.getElementsByTagName( 'table' ); ti = ts[i++]; ) {
    //        var pN = ti.parentNode;
    //        if ( pN && pN.getAttribute( 'dropdrag' ) ) {
    //            domUtils.remove( pN, true )
    //        }
    //    }
    //} );
    //
    //me.addListener( 'aftergetcontent', function () {
    //    if ( !me.queryCommandState( 'source' ) )
    //        me.fireEvent( 'afteradjusttable', me.document )
    //} );
    ////table拖拽
    //me.addListener( "afteradjusttable", function ( type, cont ) {
    //    var table = cont.getElementsByTagName( "table" ),
    //            dragCont = domUtils.creElm( me.document, 'div', {
    //                style:'margin:0;padding:5px;border:0;',
    //                dropdrag:true
    //            } );
    //    for ( var i = 0, ti; ti = table[i++]; ) {
    //        var parentNode = ti.parentNode;
    //        if ( parentNode && parentNode.nodeType == 1 ) {
    //            //插入代码
    //            if ( /syntaxhighlighter/.test( parentNode.className ) ) continue;
    //            (function ( ti ) {
    //                var div = dragCont.cloneNode( false );
    //                ti.parentNode.insertBefore( div, ti );
    //                div.appendChild( ti );
    //                var borderStyle;
    //                domUtils.on( div, 'mousemove', function ( evt ) {
    //                    var tag = evt.srcElement || evt.target;
    //                    if ( tag.tagName.toLowerCase() == "div" ) {
    //                        if ( ie && me.body.getAttribute( "contentEditable" ) == 'true' )
    //                            me.body.setAttribute( "contentEditable", "false" );
    //                        borderStyle = clickPosition( ti, this, evt )
    //                    }
    //                } );
    //                if ( ie ) {
    //                    domUtils.on( div, 'mouseleave', function ( evt ) {
    //                        if ( domUtils.isTagNode( evt.srcElement, "div" ) && me.body.getAttribute( "contentEditable" ) == 'false' ) {
    //                            me.body.setAttribute( "contentEditable", "true" );
    //                        }
    //                    } );
    //                }
    //                domUtils.on( div, "mousedown", function ( evt ) {
    //                    if ( domUtils.isTagNode( evt.srcElement || evt.target, 'div' ) ) {
    //                        if ( ie && me.body.getAttribute( "contentEditable" ) == 'true' )
    //                            me.body.setAttribute( "contentEditable", "false" );
    //                        var tWidth = ti.offsetWidth,
    //                                tHeight = ti.offsetHeight,
    //                                align = ti.getAttribute( 'align' );
    //                        try {
    //                            baidu.editor.ui.uiUtils.startDrag( evt, {
    //                                ondragstart:function () {
    //                                },
    //                                ondragmove:function ( x, y ) {
    //                                    if ( align && align != "left" && /\w?w-/.test( borderStyle ) ) {
    //                                        x = -x;
    //                                    }
    //                                    if ( /^s?[we]/.test( borderStyle ) ) {
    //                                        ti.setAttribute( "width", (tWidth + x) > 0 ? tWidth + x : 0 );
    //                                    }
    //                                    if ( /^s/.test( borderStyle ) ) {
    //                                        ti.setAttribute( "height", (tHeight + y) > 0 ? tHeight + y : 0 );
    //                                    }
    //                                },
    //                                ondragstop:function () {
    //                                }
    //                            }, me.document );
    //                        } catch ( e ) {
    //                            alert( me.getLang("tableDrag"));
    //                        }
    //                    }
    //                } );
    //                domUtils.on( ti, "mouseover", function () {
    //                    var div = ti.parentNode;
    //                    if ( div && div.parentNode && div.getAttribute( 'dropdrag' ) ) {
    //                        domUtils.setStyle( div, "cursor", "text" );
    //                        if ( ie && me.body.getAttribute( "contentEditable" ) == 'false' )
    //                            me.body.setAttribute( "contentEditable", "true" );
    //                    }
    //                } );
    //            })( ti );
    //        }
    //    }
    //} );
    //function clickPosition( table, div, evt ) {
    //    var pos = domUtils.getXY( table ),
    //            tWidth = table.offsetWidth,
    //            tHeight = table.offsetHeight,
    //            evtPos = {
    //                top:evt.clientY,
    //                left:evt.clientX
    //            },
    //            borderStyle = "";
    //    if ( Math.abs( evtPos.left - pos.x - tWidth ) < 15 ) {
    //        //右，右下
    //        borderStyle = Math.abs( evtPos.top - pos.y - tHeight ) < 15 ? "se-resize" : "e-resize";
    //    } else if ( Math.abs( evtPos.top - pos.y - tHeight ) < 15 && Math.abs( evtPos.left - pos.x ) < tWidth ) {
    //        //下
    //        borderStyle = "s-resize";
    //    }
    //    domUtils.setStyle( div, "cursor", borderStyle || 'text' );
    //    return borderStyle;
    //}

    /**
     * UE表格操作类
     * @param table
     * @constructor
     */
    function UETable(table) {
      this.table = table;
      this.indexTable = [];
      this.selectedTds = [];
      this.cellsRange = {};
      this.update(table);
    }
    UETable.prototype = {
      getMaxRows: function () {
        var rows = this.table.rows,
          maxLen = 1;
        for (var i = 0, row; (row = rows[i]); i++) {
          var currentMax = 1;
          for (var j = 0, cj; (cj = row.cells[j++]); ) {
            currentMax = Math.max(cj.rowSpan || 1, currentMax);
          }
          maxLen = Math.max(currentMax + i, maxLen);
        }
        return maxLen;
      },
      /**
       * 获取当前表格的最大列数
       */
      getMaxCols: function () {
        var rows = this.table.rows,
          maxLen = 0,
          cellRows = {};
        for (var i = 0, row; (row = rows[i]); i++) {
          var cellsNum = 0;
          for (var j = 0, cj; (cj = row.cells[j++]); ) {
            cellsNum += cj.colSpan || 1;
            if (cj.rowSpan && cj.rowSpan > 1) {
              for (var k = 1; k < cj.rowSpan; k++) {
                if (!cellRows["row_" + (i + k)]) {
                  cellRows["row_" + (i + k)] = cj.colSpan || 1;
                } else {
                  cellRows["row_" + (i + k)]++;
                }
              }
            }
          }
          cellsNum += cellRows["row_" + i] || 0;
          maxLen = Math.max(cellsNum, maxLen);
        }
        return maxLen;
      },
      getCellColIndex: function (cell) {},
      /**
       * 获取当前cell旁边的单元格，
       * @param cell
       * @param right
       */
      getHSideCell: function (cell, right) {
        try {
          var cellInfo = this.getCellInfo(cell),
            previewRowIndex,
            previewColIndex;
          var len = this.selectedTds.length,
            range = this.cellsRange;
          //首行或者首列没有前置单元格
          if (
            (!right && (!len ? !cellInfo.colIndex : !range.beginColIndex)) ||
            (right &&
              (!len
                ? cellInfo.colIndex == this.colsNum - 1
                : range.endColIndex == this.colsNum - 1))
          )
            return null;

          previewRowIndex = !len ? cellInfo.rowIndex : range.beginRowIndex;
          previewColIndex = !right
            ? !len
              ? cellInfo.colIndex < 1
                ? 0
                : cellInfo.colIndex - 1
              : range.beginColIndex - 1
            : !len
            ? cellInfo.colIndex + 1
            : range.endColIndex + 1;
          return this.getCell(
            this.indexTable[previewRowIndex][previewColIndex].rowIndex,
            this.indexTable[previewRowIndex][previewColIndex].cellIndex
          );
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 获取视觉上的后置单元格
       * @param cell
       * @param bottom
       */
      getVSideCell: function (cell, bottom, ignoreRange) {
        try {
          var cellInfo = this.getCellInfo(cell),
            nextRowIndex,
            nextColIndex;
          var len = this.selectedTds.length && !ignoreRange,
            range = this.cellsRange;
          //末行或者末列没有后置单元格
          if (
            (!bottom && cellInfo.rowIndex == 0) ||
            (bottom &&
              (!len
                ? cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1
                : range.endRowIndex == this.rowsNum - 1))
          )
            return null;

          nextRowIndex = !bottom
            ? !len
              ? cellInfo.rowIndex - 1
              : range.beginRowIndex - 1
            : !len
            ? cellInfo.rowIndex + cellInfo.rowSpan
            : range.endRowIndex + 1;
          nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
          return this.getCell(
            this.indexTable[nextRowIndex][nextColIndex].rowIndex,
            this.indexTable[nextRowIndex][nextColIndex].cellIndex
          );
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 获取相同结束位置的单元格，xOrY指代了是获取x轴相同还是y轴相同
       */
      getSameEndPosCells: function (cell, xOrY) {
        try {
          var flag = xOrY.toLowerCase() === "x",
            end =
              domUtils.getXY(cell)[flag ? "x" : "y"] +
              cell["offset" + (flag ? "Width" : "Height")],
            rows = this.table.rows,
            cells = null,
            returns = [];
          for (var i = 0; i < this.rowsNum; i++) {
            cells = rows[i].cells;
            for (var j = 0, tmpCell; (tmpCell = cells[j++]); ) {
              var tmpEnd =
                domUtils.getXY(tmpCell)[flag ? "x" : "y"] +
                tmpCell["offset" + (flag ? "Width" : "Height")];
              //对应行的td已经被上面行rowSpan了
              if (tmpEnd > end && flag) break;
              if (cell == tmpCell || end == tmpEnd) {
                //只获取单一的单元格
                //todo 仅获取单一单元格在特定情况下会造成returns为空，从而影响后续的拖拽实现，修正这个。需考虑性能
                if (tmpCell[flag ? "colSpan" : "rowSpan"] == 1) {
                  returns.push(tmpCell);
                }
                if (flag) break;
              }
            }
          }
          return returns;
        } catch (e) {
          showError(e);
        }
      },
      setCellContent: function (cell, content) {
        cell.innerHTML = content || (browser.ie ? domUtils.fillChar : "<br />");
      },
      cloneCell: cloneCell,
      /**
       * 获取跟当前单元格的右边竖线为左边的所有未合并单元格
       */
      getSameStartPosXCells: function (cell) {
        try {
          //需要拿出cellspacing来判断，因为有cellspacing时，start值会增加
          var cellSpacing = parseInt(
              this.table.getAttribute("cellspacing") || 0
            ),
            start = domUtils.getXY(cell).x + cell.offsetWidth + cellSpacing,
            rows = this.table.rows,
            cells,
            returns = [];
          for (var i = 0; i < this.rowsNum; i++) {
            cells = rows[i].cells;
            for (var j = 0, tmpCell; (tmpCell = cells[j++]); ) {
              var tmpStart = domUtils.getXY(tmpCell).x;
              if (tmpStart > start) break;
              if (tmpStart == start && tmpCell.colSpan == 1) {
                returns.push(tmpCell);
                break;
              }
            }
          }
          return returns;
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 更新table对应的索引表
       */
      update: function (table) {
        this.table = table || this.table;
        this.selectedTds = [];
        this.cellsRange = {};
        this.indexTable = [];
        var rows = this.table.rows,
          //暂时采用rows Length,对残缺表格可能存在问题，
          //todo 可以考虑取最大值
          rowsNum = rows.length,
          colsNum = this.getMaxCols();
        this.rowsNum = rowsNum;
        this.colsNum = colsNum;
        for (var i = 0, len = rows.length; i < len; i++) {
          this.indexTable[i] = new Array(colsNum);
        }
        //填充索引表
        for (var rowIndex = 0, row; (row = rows[rowIndex]); rowIndex++) {
          for (
            var cellIndex = 0, cell, cells = row.cells;
            (cell = cells[cellIndex]);
            cellIndex++
          ) {
            //修正整行被rowSpan时导致的行数计算错误
            if (cell.rowSpan > rowsNum) {
              cell.rowSpan = rowsNum;
            }
            var colIndex = cellIndex,
              rowSpan = cell.rowSpan || 1,
              colSpan = cell.colSpan || 1;
            //当已经被上一行rowSpan或者被前一列colSpan了，则跳到下一个单元格进行
            while (this.indexTable[rowIndex][colIndex]) colIndex++;
            for (var j = 0; j < rowSpan; j++) {
              for (var k = 0; k < colSpan; k++) {
                if (this.indexTable[rowIndex + j]) {
                  //2015-11-17 残缺表格会报错，加上保护
                  this.indexTable[rowIndex + j][colIndex + k] = {
                    rowIndex: rowIndex,
                    cellIndex: cellIndex,
                    colIndex: colIndex,
                    rowSpan: rowSpan,
                    colSpan: colSpan
                  };
                }
              }
            }
          }
        }
        //修复残缺td
        for (j = 0; j < rowsNum; j++) {
          for (k = 0; k < colsNum; k++) {
            if (this.indexTable[j][k] === undefined) {
              row = rows[j];
              cell = row.cells[row.cells.length - 1];
              cell = cell
                ? cell.cloneNode(true)
                : this.table.ownerDocument.createElement("td");
              this.setCellContent(cell);
              if (cell.colSpan !== 1) cell.colSpan = 1;
              if (cell.rowSpan !== 1) cell.rowSpan = 1;
              row.appendChild(cell);
              this.indexTable[j][k] = {
                rowIndex: j,
                cellIndex: cell.cellIndex,
                colIndex: k,
                rowSpan: 1,
                colSpan: 1
              };
            }
          }
        }
        //当框选后删除行或者列后撤销，需要重建选区。
        var tds = domUtils.getElementsByTagName(this.table, "td"),
          selectTds = [];
        utils.each(tds, function (td) {
          if (domUtils.hasClass(td, "selectTdClass")) {
            selectTds.push(td);
          }
        });
        if (selectTds.length) {
          var start = selectTds[0],
            end = selectTds[selectTds.length - 1],
            startInfo = this.getCellInfo(start),
            endInfo = this.getCellInfo(end);
          this.selectedTds = selectTds;
          this.cellsRange = {
            beginRowIndex: startInfo.rowIndex,
            beginColIndex: startInfo.colIndex,
            endRowIndex: endInfo.rowIndex + endInfo.rowSpan - 1,
            endColIndex: endInfo.colIndex + endInfo.colSpan - 1
          };
        }
      },
      //获取单元格行号
      getCellRowIndex: function (cell) {
        var cellIndex = cell.cellIndex,
          rows = this.table.rows,
          rowLen = rows.length;
        if (rowLen)
          while (rowLen--) {
            if (rows[rowLen].cells[cellIndex] === cell) {
              return rowLen;
            }
          }
        return -1;
      },
      /**
       * 获取单元格的索引信息
       */
      getCellInfo: function (cell) {
        if (!cell) return;
        var cellIndex = cell.cellIndex,
          rowIndex = this.getCellRowIndex(cell),
          rowInfo = this.indexTable[rowIndex],
          numCols = this.colsNum;
        for (var colIndex = cellIndex; colIndex < numCols; colIndex++) {
          var cellInfo = rowInfo[colIndex];
          if (
            cellInfo.rowIndex === rowIndex &&
            cellInfo.cellIndex === cellIndex
          ) {
            return cellInfo;
          }
        }
      },
      /**
       * 根据行列号获取单元格
       */
      getCell: function (rowIndex, cellIndex) {
        return (
          (rowIndex < this.rowsNum &&
            this.table.rows[rowIndex].cells[cellIndex]) ||
          null
        );
      },
      /**
       * 删除单元格
       */
      deleteCell: function (cell, rowIndex) {
        rowIndex =
          typeof rowIndex == "number" ? rowIndex : this.getCellRowIndex(cell);
        var row = this.table.rows[rowIndex];
        row.deleteCell(cell.cellIndex);
      },
      /**
       * 根据始末两个单元格获取被框选的所有单元格范围
       */
      getCellsRange: function (cellA, cellB) {
        function checkRange(
          beginRowIndex,
          beginColIndex,
          endRowIndex,
          endColIndex
        ) {
          var tmpBeginRowIndex = beginRowIndex,
            tmpBeginColIndex = beginColIndex,
            tmpEndRowIndex = endRowIndex,
            tmpEndColIndex = endColIndex,
            cellInfo,
            colIndex,
            rowIndex;
          // 通过indexTable检查是否存在超出TableRange上边界的情况
          if (beginRowIndex > 0) {
            for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
              cellInfo = me.indexTable[beginRowIndex][colIndex];
              rowIndex = cellInfo.rowIndex;
              if (rowIndex < beginRowIndex) {
                tmpBeginRowIndex = Math.min(rowIndex, tmpBeginRowIndex);
              }
            }
          }
          // 通过indexTable检查是否存在超出TableRange右边界的情况
          if (endColIndex < me.colsNum) {
            for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
              cellInfo = me.indexTable[rowIndex][endColIndex];
              colIndex = cellInfo.colIndex + cellInfo.colSpan - 1;
              if (colIndex > endColIndex) {
                tmpEndColIndex = Math.max(colIndex, tmpEndColIndex);
              }
            }
          }
          // 检查是否有超出TableRange下边界的情况
          if (endRowIndex < me.rowsNum) {
            for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
              cellInfo = me.indexTable[endRowIndex][colIndex];
              rowIndex = cellInfo.rowIndex + cellInfo.rowSpan - 1;
              if (rowIndex > endRowIndex) {
                tmpEndRowIndex = Math.max(rowIndex, tmpEndRowIndex);
              }
            }
          }
          // 检查是否有超出TableRange左边界的情况
          if (beginColIndex > 0) {
            for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
              cellInfo = me.indexTable[rowIndex][beginColIndex];
              colIndex = cellInfo.colIndex;
              if (colIndex < beginColIndex) {
                tmpBeginColIndex = Math.min(
                  cellInfo.colIndex,
                  tmpBeginColIndex
                );
              }
            }
          }
          //递归调用直至所有完成所有框选单元格的扩展
          if (
            tmpBeginRowIndex != beginRowIndex ||
            tmpBeginColIndex != beginColIndex ||
            tmpEndRowIndex != endRowIndex ||
            tmpEndColIndex != endColIndex
          ) {
            return checkRange(
              tmpBeginRowIndex,
              tmpBeginColIndex,
              tmpEndRowIndex,
              tmpEndColIndex
            );
          } else {
            // 不需要扩展TableRange的情况
            return {
              beginRowIndex: beginRowIndex,
              beginColIndex: beginColIndex,
              endRowIndex: endRowIndex,
              endColIndex: endColIndex
            };
          }
        }
        try {
          var me = this,
            cellAInfo = me.getCellInfo(cellA);
          if (cellA === cellB) {
            return {
              beginRowIndex: cellAInfo.rowIndex,
              beginColIndex: cellAInfo.colIndex,
              endRowIndex: cellAInfo.rowIndex + cellAInfo.rowSpan - 1,
              endColIndex: cellAInfo.colIndex + cellAInfo.colSpan - 1
            };
          }
          var cellBInfo = me.getCellInfo(cellB);
          // 计算TableRange的四个边
          var beginRowIndex = Math.min(cellAInfo.rowIndex, cellBInfo.rowIndex),
            beginColIndex = Math.min(cellAInfo.colIndex, cellBInfo.colIndex),
            endRowIndex = Math.max(
              cellAInfo.rowIndex + cellAInfo.rowSpan - 1,
              cellBInfo.rowIndex + cellBInfo.rowSpan - 1
            ),
            endColIndex = Math.max(
              cellAInfo.colIndex + cellAInfo.colSpan - 1,
              cellBInfo.colIndex + cellBInfo.colSpan - 1
            );

          return checkRange(
            beginRowIndex,
            beginColIndex,
            endRowIndex,
            endColIndex
          );
        } catch (e) {
          if (debug) throw e;
        }
      },
      /**
       * 依据cellsRange获取对应的单元格集合
       */
      getCells: function (range) {
        //每次获取cells之前必须先清除上次的选择，否则会对后续获取操作造成影响
        this.clearSelected();
        var beginRowIndex = range.beginRowIndex,
          beginColIndex = range.beginColIndex,
          endRowIndex = range.endRowIndex,
          endColIndex = range.endColIndex,
          cellInfo,
          rowIndex,
          colIndex,
          tdHash = {},
          returnTds = [];
        for (var i = beginRowIndex; i <= endRowIndex; i++) {
          for (var j = beginColIndex; j <= endColIndex; j++) {
            cellInfo = this.indexTable[i][j];
            rowIndex = cellInfo.rowIndex;
            colIndex = cellInfo.colIndex;
            // 如果Cells里已经包含了此Cell则跳过
            var key = rowIndex + "|" + colIndex;
            if (tdHash[key]) continue;
            tdHash[key] = 1;
            if (
              rowIndex < i ||
              colIndex < j ||
              rowIndex + cellInfo.rowSpan - 1 > endRowIndex ||
              colIndex + cellInfo.colSpan - 1 > endColIndex
            ) {
              return null;
            }
            returnTds.push(this.getCell(rowIndex, cellInfo.cellIndex));
          }
        }
        return returnTds;
      },
      /**
       * 清理已经选中的单元格
       */
      clearSelected: function () {
        removeSelectedClass(this.selectedTds);
        this.selectedTds = [];
        this.cellsRange = {};
      },
      /**
       * 根据range设置已经选中的单元格
       */
      setSelected: function (range) {
        var cells = this.getCells(range);
        addSelectedClass(cells);
        this.selectedTds = cells;
        this.cellsRange = range;
      },
      isFullRow: function () {
        var range = this.cellsRange;
        return range.endColIndex - range.beginColIndex + 1 == this.colsNum;
      },
      isFullCol: function () {
        var range = this.cellsRange,
          table = this.table,
          ths = table.getElementsByTagName("th"),
          rows = range.endRowIndex - range.beginRowIndex + 1;
        return !ths.length
          ? rows == this.rowsNum
          : rows == this.rowsNum || rows == this.rowsNum - 1;
      },
      /**
       * 获取视觉上的前置单元格，默认是左边，top传入时
       * @param cell
       * @param top
       */
      getNextCell: function (cell, bottom, ignoreRange) {
        try {
          var cellInfo = this.getCellInfo(cell),
            nextRowIndex,
            nextColIndex;
          var len = this.selectedTds.length && !ignoreRange,
            range = this.cellsRange;
          //末行或者末列没有后置单元格
          if (
            (!bottom && cellInfo.rowIndex == 0) ||
            (bottom &&
              (!len
                ? cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1
                : range.endRowIndex == this.rowsNum - 1))
          )
            return null;

          nextRowIndex = !bottom
            ? !len
              ? cellInfo.rowIndex - 1
              : range.beginRowIndex - 1
            : !len
            ? cellInfo.rowIndex + cellInfo.rowSpan
            : range.endRowIndex + 1;
          nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
          return this.getCell(
            this.indexTable[nextRowIndex][nextColIndex].rowIndex,
            this.indexTable[nextRowIndex][nextColIndex].cellIndex
          );
        } catch (e) {
          showError(e);
        }
      },
      getPreviewCell: function (cell, top) {
        try {
          var cellInfo = this.getCellInfo(cell),
            previewRowIndex,
            previewColIndex;
          var len = this.selectedTds.length,
            range = this.cellsRange;
          //首行或者首列没有前置单元格
          if (
            (!top && (!len ? !cellInfo.colIndex : !range.beginColIndex)) ||
            (top &&
              (!len
                ? cellInfo.rowIndex > this.colsNum - 1
                : range.endColIndex == this.colsNum - 1))
          )
            return null;

          previewRowIndex = !top
            ? !len
              ? cellInfo.rowIndex
              : range.beginRowIndex
            : !len
            ? cellInfo.rowIndex < 1
              ? 0
              : cellInfo.rowIndex - 1
            : range.beginRowIndex;
          previewColIndex = !top
            ? !len
              ? cellInfo.colIndex < 1
                ? 0
                : cellInfo.colIndex - 1
              : range.beginColIndex - 1
            : !len
            ? cellInfo.colIndex
            : range.endColIndex + 1;
          return this.getCell(
            this.indexTable[previewRowIndex][previewColIndex].rowIndex,
            this.indexTable[previewRowIndex][previewColIndex].cellIndex
          );
        } catch (e) {
          showError(e);
        }
      },
      /**
       * 移动单元格中的内容
       */
      moveContent: function (cellTo, cellFrom) {
        if (isEmptyBlock(cellFrom)) return;
        if (isEmptyBlock(cellTo)) {
          cellTo.innerHTML = cellFrom.innerHTML;
          return;
        }
        var child = cellTo.lastChild;
        if (child.nodeType == 3 || !dtd.$block[child.tagName]) {
          cellTo.appendChild(cellTo.ownerDocument.createElement("br"));
        }
        while ((child = cellFrom.firstChild)) {
          cellTo.appendChild(child);
        }
      },
      /**
       * 向右合并单元格
       */
      mergeRight: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          rightColIndex = cellInfo.colIndex + cellInfo.colSpan,
          rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex],
          rightCell = this.getCell(
            rightCellInfo.rowIndex,
            rightCellInfo.cellIndex
          );
        //合并
        cell.colSpan = cellInfo.colSpan + rightCellInfo.colSpan;
        //被合并的单元格不应存在宽度属性
        cell.removeAttribute("width");
        //移动内容
        this.moveContent(cell, rightCell);
        //删掉被合并的Cell
        this.deleteCell(rightCell, rightCellInfo.rowIndex);
        this.update();
      },
      /**
       * 向下合并单元格
       */
      mergeDown: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan,
          downCellInfo = this.indexTable[downRowIndex][cellInfo.colIndex],
          downCell = this.getCell(
            downCellInfo.rowIndex,
            downCellInfo.cellIndex
          );
        cell.rowSpan = cellInfo.rowSpan + downCellInfo.rowSpan;
        cell.removeAttribute("height");
        this.moveContent(cell, downCell);
        this.deleteCell(downCell, downCellInfo.rowIndex);
        this.update();
      },
      /**
       * 合并整个range中的内容
       */
      mergeRange: function () {
        //由于合并操作可以在任意时刻进行，所以无法通过鼠标位置等信息实时生成range，只能通过缓存实例中的cellsRange对象来访问
        var range = this.cellsRange,
          leftTopCell = this.getCell(
            range.beginRowIndex,
            this.indexTable[range.beginRowIndex][range.beginColIndex].cellIndex
          );
        if (
          leftTopCell.tagName == "TH" &&
          range.endRowIndex !== range.beginRowIndex
        ) {
          var index = this.indexTable,
            info = this.getCellInfo(leftTopCell);
          leftTopCell = this.getCell(1, index[1][info.colIndex].cellIndex);
          range = this.getCellsRange(
            leftTopCell,
            this.getCell(
              index[this.rowsNum - 1][info.colIndex].rowIndex,
              index[this.rowsNum - 1][info.colIndex].cellIndex
            )
          );
        }
        // 合并多行时，并每一行都全选的话，计算所有行的高度总和
        var mergeRangeHeight = 0;
        for (var i = 0; i < range.endRowIndex - range.beginRowIndex + 1; i++) {
          if (
            this.table.rows[
              leftTopCell.parentNode.rowIndex + i
            ].cells[0].getAttribute("height")
          ) {
            mergeRangeHeight =
              mergeRangeHeight +
              parseInt(
                this.table.rows[
                  leftTopCell.parentNode.rowIndex + i
                ].cells[0].getAttribute("height")
              );
          } else {
            mergeRangeHeight =
              mergeRangeHeight +
              parseInt(
                this.table.rows[leftTopCell.parentNode.rowIndex + i].cells[0]
                  .offsetHeight
              );
          }
        }
        // 删除剩余的Cells
        var cells = this.getCells(range),
          len = cells.length,
          cell;
        while (len--) {
          cell = cells[len];
          if (cell !== leftTopCell) {
            this.moveContent(leftTopCell, cell);
            this.deleteCell(cell);
          }
        }
        // 修改左上角Cell的rowSpan和colSpan，并调整宽度属性设置
        leftTopCell.rowSpan = range.endRowIndex - range.beginRowIndex + 1;
        leftTopCell.rowSpan > 1 && leftTopCell.removeAttribute("height");
        leftTopCell.colSpan = range.endColIndex - range.beginColIndex + 1;
        leftTopCell.colSpan > 1 && leftTopCell.removeAttribute("width");
        if (leftTopCell.rowSpan == this.rowsNum && leftTopCell.colSpan != 1) {
          // leftTopCell.colSpan = 1;
        }
        // $(leftTopCell).html().replace(/\u200B/g,'')
        if (leftTopCell.colSpan == this.colsNum && leftTopCell.rowSpan != 1) {
          var rowIndex = leftTopCell.parentNode.rowIndex;
          for (var i = 0; i < leftTopCell.rowSpan - 1; i++) {
            var row = this.table.rows[rowIndex + 1];
            row.parentNode.removeChild(row);
          }

          leftTopCell.style.height = mergeRangeHeight + "px";
          // $(leftTopCell).css('font-size','16px')
          leftTopCell.rowSpan = 1;
        }
        this.update();
      },
      /**
       * 插入一行单元格
       */
      insertRow: function (rowIndex, tagName) {
        var numCols = this.colsNum,
          table = this.table,
          row = table.insertRow(rowIndex),
          cell,
          width = parseInt(
            (table.offsetWidth - numCols * 20 - numCols - 1) / numCols,
            10
          );
        //首行直接插入,无需考虑部分单元格被rowspan的情况
        if (rowIndex == 0 || rowIndex == this.rowsNum) {
          for (var colIndex = 0; colIndex < numCols; colIndex++) {
            cell = tagName
              ? table.ownerDocument.createElement("th")
              : row.insertCell(colIndex);
            //cell.innerHTML = browser.ie ? domUtils.fillChar : "<br/>";
            this.setCellContent(cell);
            cell.setAttribute("valign", me.options.tdvalign);
            tagName && row.appendChild(cell);
          }
        } else {
          var infoRow = this.indexTable[rowIndex],
            cellIndex = 0;
          for (colIndex = 0; colIndex < numCols; colIndex++) {
            var cellInfo = infoRow[colIndex];
            //如果存在某个单元格的rowspan穿过待插入行的位置，则修改该单元格的rowspan即可，无需插入单元格
            if (cellInfo.rowIndex < rowIndex) {
              cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
              cell.rowSpan = cellInfo.rowSpan + 1;
            } else {
              cell = row.insertCell(cellIndex++);
              this.setCellContent(cell);
            }
          }
        }
        //框选时插入不触发contentchange，需要手动更新索引。
        this.update();
        return row;
      },
      /**
       * 删除一行单元格
       * @param rowIndex
       */
      deleteRow: function (rowIndex) {
        var row = this.table.rows[rowIndex],
          infoRow = this.indexTable[rowIndex],
          colsNum = this.colsNum,
          count = 0; //处理计数
        for (var colIndex = 0; colIndex < colsNum; ) {
          var cellInfo = infoRow[colIndex],
            cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
          if (cell.rowSpan > 1) {
            if (cellInfo.rowIndex == rowIndex) {
              var clone = cell.cloneNode(true);
              clone.rowSpan = cell.rowSpan - 1;
              clone.innerHTML = "";
              cell.rowSpan = 1;
              var nextRowIndex = rowIndex + 1,
                nextRow = this.table.rows[nextRowIndex],
                insertCellIndex,
                preMerged =
                  this.getPreviewMergedCellsNum(nextRowIndex, colIndex) - count;
              if (preMerged < colIndex) {
                insertCellIndex = colIndex - preMerged - 1;
                //nextRow.insertCell(insertCellIndex);
                domUtils.insertAfter(nextRow.cells[insertCellIndex], clone);
              } else {
                if (nextRow.cells.length)
                  nextRow.insertBefore(clone, nextRow.cells[0]);
              }
              count += 1;
              //cell.parentNode.removeChild(cell);
            }
          }
          colIndex += cell.colSpan || 1;
        }
        var deleteTds = [],
          cacheMap = {};
        for (colIndex = 0; colIndex < colsNum; colIndex++) {
          var tmpRowIndex = infoRow[colIndex].rowIndex,
            tmpCellIndex = infoRow[colIndex].cellIndex,
            key = tmpRowIndex + "_" + tmpCellIndex;
          if (cacheMap[key]) continue;
          cacheMap[key] = 1;
          cell = this.getCell(tmpRowIndex, tmpCellIndex);
          deleteTds.push(cell);
        }
        var mergeTds = [];
        utils.each(deleteTds, function (td) {
          if (td.rowSpan == 1) {
            td.parentNode.removeChild(td);
          } else {
            mergeTds.push(td);
          }
        });
        utils.each(mergeTds, function (td) {
          td.rowSpan--;
        });
        row.parentNode.removeChild(row);
        //浏览器方法本身存在bug,采用自定义方法删除
        //this.table.deleteRow(rowIndex);
        this.update();
      },
      insertCol: function (colIndex) {
        var rowsNum = this.rowsNum,
          rowIndex = 0,
          tableRow,
          cell,
          backWidth = parseInt(
            (this.table.offsetWidth -
              (this.colsNum + 1) * 20 -
              (this.colsNum + 1)) /
              (this.colsNum + 1),
            10
          );
        function replaceTdToTh(rowIndex, cell, tableRow) {
          if (rowIndex == 0) {
            var th = cell.nextSibling || cell.previousSibling;
            if (th.tagName == "TH") {
              th = cell.ownerDocument.createElement("th");
              th.appendChild(cell.firstChild);
              tableRow.insertBefore(th, cell);
              domUtils.remove(cell);
            }
          }
        }
        var preCell;
        if (colIndex == 0 || colIndex == this.colsNum) {
          for (; rowIndex < rowsNum; rowIndex++) {
            tableRow = this.table.rows[rowIndex];
            preCell =
              tableRow.cells[colIndex == 0 ? colIndex : tableRow.cells.length];
            cell = tableRow.insertCell(
              colIndex == 0 ? colIndex : tableRow.cells.length
            );
            this.setCellContent(cell);
            cell.setAttribute("valign", me.options.tdvalign);
            preCell &&
              cell.setAttribute("width", preCell.getAttribute("width"));
            replaceTdToTh(rowIndex, cell, tableRow);
          }
        } else {
          for (; rowIndex < rowsNum; rowIndex++) {
            var cellInfo = this.indexTable[rowIndex][colIndex];
            if (cellInfo.colIndex < colIndex) {
              cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
              cell.colSpan = cellInfo.colSpan + 1;
            } else {
              tableRow = this.table.rows[rowIndex];
              preCell = tableRow.cells[cellInfo.cellIndex];

              cell = tableRow.insertCell(cellInfo.cellIndex);
              this.setCellContent(cell);
              cell.setAttribute("valign", me.options.tdvalign);
              preCell &&
                cell.setAttribute("width", preCell.getAttribute("width"));
            }
            replaceTdToTh(rowIndex, cell, tableRow);
          }
        }
        //框选时插入不触发contentchange，需要手动更新索引
        this.update();
        this.updateWidth(backWidth);
      },
      updateWidth: function (width) {
        var tds = domUtils.getElementsByTagName(this.table, "td");
        utils.each(tds, function (td) {
          td.setAttribute("width", width);
        });
      },
      deleteCol: function (colIndex) {
        var indexTable = this.indexTable,
          tableRows = this.table.rows,
          backTableWidth = this.table.getAttribute("width"),
          backTdWidth = 0,
          rowsNum = this.rowsNum,
          cacheMap = {};
        for (var rowIndex = 0; rowIndex < rowsNum; ) {
          var infoRow = indexTable[rowIndex],
            cellInfo = infoRow[colIndex],
            key = cellInfo.rowIndex + "_" + cellInfo.colIndex;
          // 跳过已经处理过的Cell
          if (cacheMap[key]) continue;
          cacheMap[key] = 1;
          var cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
          if (!backTdWidth)
            backTdWidth =
              cell && parseInt(cell.offsetWidth / cell.colSpan, 10).toFixed(0);
          // 如果Cell的colSpan大于1, 就修改colSpan, 否则就删掉这个Cell
          if (cell.colSpan > 1) {
            cell.colSpan--;
          } else {
            tableRows[rowIndex].deleteCell(cellInfo.cellIndex);
          }
          rowIndex += cellInfo.rowSpan || 1;
        }
        this.table.setAttribute(
          "width",
          backTableWidth.replace("px", "") - backTdWidth
        );
        this.update();
      },
      splitToCells: function (cell) {
        var me = this,
          cells = this.splitToRows(cell);
        utils.each(cells, function (cell) {
          me.splitToCols(cell);
        });
      },
      splitToRows: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          rowIndex = cellInfo.rowIndex,
          colIndex = cellInfo.colIndex,
          results = [];
        // 修改Cell的rowSpan
        cell.rowSpan = 1;
        results.push(cell);
        // 补齐单元格
        for (
          var i = rowIndex, endRow = rowIndex + cellInfo.rowSpan;
          i < endRow;
          i++
        ) {
          if (i == rowIndex) continue;
          var tableRow = this.table.rows[i],
            tmpCell = tableRow.insertCell(
              colIndex - this.getPreviewMergedCellsNum(i, colIndex)
            );
          tmpCell.colSpan = cellInfo.colSpan;
          this.setCellContent(tmpCell);
          tmpCell.setAttribute("valign", me.options.tdvalign);
          if (cell.style.cssText) {
            tmpCell.style.cssText = cell.style.cssText;
          }
          results.push(tmpCell);
        }
        this.update();
        return results;
      },
      getPreviewMergedCellsNum: function (rowIndex, colIndex) {
        var indexRow = this.indexTable[rowIndex],
          num = 0;
        for (var i = 0; i < colIndex; ) {
          var colSpan = indexRow[i].colSpan,
            tmpRowIndex = indexRow[i].rowIndex;
          num += colSpan - (tmpRowIndex == rowIndex ? 1 : 0);
          i += colSpan;
        }
        return num;
      },
      splitToCols: function (cell) {
        var cellInfo = this.getCellInfo(cell),
          rowIndex = cellInfo.rowIndex,
          colIndex = cellInfo.colIndex,
          results = [];
        // 修改Cell的rowSpan
        cell.colSpan = 1;
        results.push(cell);
        // 补齐单元格
        for (
          var j = colIndex, endCol = colIndex + cellInfo.colSpan;
          j < endCol;
          j++
        ) {
          if (j == colIndex) continue;
          var tableRow = this.table.rows[rowIndex],
            tmpCell = tableRow.insertCell(
              this.indexTable[rowIndex][j].cellIndex + 1
            );
          tmpCell.rowSpan = cellInfo.rowSpan;
          this.setCellContent(tmpCell);
          tmpCell.setAttribute("valign", me.options.tdvalign);
          if (cell.style.cssText) {
            tmpCell.style.cssText = cell.style.cssText;
          }
          //处理th的情况
          if (cell.tagName == "TH") {
            var th = cell.ownerDocument.createElement("th");
            th.appendChild(tmpCell.firstChild);
            th.setAttribute("valign", me.options.tdvalign);
            th.rowSpan = tmpCell.rowSpan;
            tableRow.insertBefore(th, tmpCell);
            domUtils.remove(tmpCell);
          }
          results.push(tmpCell);
        }
        this.update();
        return results;
      },
      isLastCell: function (cell) {
        var cellInfo = this.getCellInfo(cell);
        return (
          cellInfo.rowIndex + cellInfo.rowSpan == this.rowsNum &&
          cellInfo.colIndex + cellInfo.colSpan == this.colsNum
        );
      },
      getLastCell: function (cells) {
        cells = cells || this.table.getElementsByTagName("td");
      },
      selectRow: function (rowIndex) {
        var indexRow = this.indexTable[rowIndex],
          start = this.getCell(indexRow[0].rowIndex, indexRow[0].cellIndex),
          end = this.getCell(
            indexRow[this.colsNum - 1].rowIndex,
            indexRow[this.colsNum - 1].cellIndex
          ),
          range = this.getCellsRange(start, end);
        this.setSelected(range);
      },
      selectTable: function () {
        var tds = this.table.getElementsByTagName("td"),
          range = this.getCellsRange(tds[0], tds[tds.length - 1]);
        this.setSelected(range);
      }
    };

    function getSelectedArr(editor) {
      var ut =
        getTableItemsByRange(editor).cell || getUETableBySelected(editor);
      return ut ? (ut.nodeType ? [ut] : ut.selectedTds) : [];
    }
    /**
     * 根据当前选区获取相关的table信息
     * @return {Object}
     */
    function getTableItemsByRange(editor) {
      var start = editor.selection.getStart(),
        //在table或者td边缘有可能存在选中tr的情况
        cell = start && domUtils.findParentByTagName(start, ["td", "th"], true),
        tr = cell && cell.parentNode,
        table = tr && tr.parentNode.parentNode;

      return {
        cell: cell,
        tr: tr,
        table: table
      };
    }
    /**
     * 获取需要触发对应点击或者move事件的td对象
     * @param evt
     */
    function getTargetTd(editor, evt) {
      var target = domUtils.findParentByTagName(
        evt.target || evt.srcElement,
        ["td", "th"],
        true
      );
      //排除了非td内部以及用于代码高亮部分的td
      return target && !(editor.fireEvent("excludeTable", target) === true)
        ? target
        : null;
    }
    function cloneCell(cell, ingoreMerge) {
      if (!cell || utils.isString(cell)) {
        return this.table.ownerDocument.createElement(cell || "td");
      }
      var flag = domUtils.hasClass(cell, "selectTdClass");
      flag && domUtils.removeClasses(cell, "selectTdClass");
      var tmpCell = cell.cloneNode(true);
      if (ingoreMerge) {
        tmpCell.rowSpan = tmpCell.colSpan = 1;
      }
      tmpCell.style.borderLeftStyle = "";
      tmpCell.style.borderTopStyle = "";
      tmpCell.style.borderLeftColor = cell.style.borderRightColor;
      tmpCell.style.borderLeftWidth = cell.style.borderRightWidth;
      tmpCell.style.borderTopColor = cell.style.borderBottomColor;
      tmpCell.style.borderTopWidth = cell.style.borderBottomWidth;
      flag && domUtils.addClass(cell, "selectTdClass");
      return tmpCell;
    }
  };
  //table.js end
  //enterkey.js start
  ///import core
  ///import plugins/undo.js
  ///commands 设置回车标签p或br
  ///commandsName  EnterKey
  ///commandsTitle  设置回车标签p或br
  /**
   * @description 处理回车
   * @author zhanyi
   */
  UE.plugins["enterkey"] = function () {
    var hTag,
      me = this,
      tag = me.options.enterTag;
    me.addListener("keyup", function (type, evt) {
      var keyCode = evt.keyCode || evt.which;
      if (keyCode == 13) {
        var range = me.selection.getRange(),
          start = range.startContainer,
          doSave;

        //修正在h1-h6里边回车后不能嵌套p的问题
        if (!browser.ie) {
          if (/h\d/i.test(hTag)) {
            if (browser.gecko) {
              var h = domUtils.findParentByTagName(
                start,
                ["h1", "h2", "h3", "h4", "h5", "h6", "blockquote"],
                true
              );
              if (!h) {
                me.document.execCommand("formatBlock", false, "<p>");
                doSave = 1;
              }
            } else {
              //chrome remove div
              if (start.nodeType == 1) {
                var tmp = me.document.createTextNode(""),
                  div;
                range.insertNode(tmp);
                div = domUtils.findParentByTagName(tmp, "div", true);
                if (div) {
                  var p = me.document.createElement("p");
                  while (div.firstChild) {
                    p.appendChild(div.firstChild);
                  }
                  div.parentNode.insertBefore(p, div);
                  domUtils.remove(div);
                  range.setStartBefore(tmp).setCursor();
                  doSave = 1;
                }
                domUtils.remove(tmp);
              }
            }

            if (me.undoManger && doSave) {
              me.undoManger.save();
            }
          }
          //没有站位符，会出现多行的问题
          browser.opera && range.select();
        }

        setTimeout(function () {
          me.selection
            .getRange()
            .scrollToView(
              me.autoHeightEnabled,
              me.autoHeightEnabled ? domUtils.getXY(me.iframe).y : 0
            );
        }, 50);
      }
    });

    me.addListener("keydown", function (type, evt) {
      var keyCode = evt.keyCode || evt.which,
        isTdDom = false,
        tmpStart;
      if (keyCode == 13) {
        //回车
        if (me.undoManger) {
          me.undoManger.save();
        }
        hTag = "";

        var range = me.selection.getRange();
        if (!range.collapsed) {
          //跨td不能删
          var start = range.startContainer,
            end = range.endContainer,
            startTd = domUtils.findParentByTagName(start, "td", true),
            endTd = domUtils.findParentByTagName(end, "td", true);
          if (
            (startTd && endTd && startTd !== endTd) ||
            (!startTd && endTd) ||
            (startTd && !endTd)
          ) {
            evt.preventDefault
              ? evt.preventDefault()
              : (evt.returnValue = false);
            return;
          }
        }
        me.currentSelectedArr &&
          domUtils.clearSelectedArr(me.currentSelectedArr);

        if (tag == "p") {
          if (!browser.ie) {
            tmpStart = range.startContainer;
            start = domUtils.findParentByTagName(
              range.startContainer,
              [
                "ol",
                "ul",
                "p",
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "blockquote"
              ],
              true
            );

            //opera下执行formatblock会在table的场景下有问题，回车在opera原生支持很好，所以暂时在opera去掉调用这个原生的command
            //trace:2431
            if (!start && !browser.opera) {
              while (tmpStart) {
                if (domUtils.isBody(tmpStart)) {
                  break;
                }
                if (tmpStart.nodeName == "TD") {
                  //以后有内联有问题直接在这里补分支
                  isTdDom = true;
                  break;
                }
                tmpStart = tmpStart.parentNode;
              }
              if (browser.webkit && isTdDom) {
                //chrome
                me.execCommand("inserthtml", " "); //'　' 修复chrome/safari(webkit)下添加块级换行bug
              }
              me.document.execCommand("formatBlock", false, "<p>");
              if (browser.gecko) {
                range = me.selection.getRange();
                start = domUtils.findParentByTagName(
                  range.startContainer,
                  "p",
                  true
                );
                start && domUtils.removeDirtyAttr(start);
              }
            } else {
              hTag = start.tagName;
              start.tagName.toLowerCase() == "p" &&
                browser.gecko &&
                domUtils.removeDirtyAttr(start);
            }
          }
        } else {
          evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);

          if (!range.collapsed) {
            range.deleteContents();
            start = range.startContainer;
            if (
              start.nodeType == 1 &&
              (start = start.childNodes[range.startOffset])
            ) {
              while (start.nodeType == 1) {
                if (dtd.$empty[start.tagName]) {
                  range.setStartBefore(start).setCursor();
                  if (me.undoManger) {
                    me.undoManger.save();
                  }
                  return false;
                }
                if (!start.firstChild) {
                  var br = range.document.createElement("br");
                  start.appendChild(br);
                  range.setStart(start, 0).setCursor();
                  if (me.undoManger) {
                    me.undoManger.save();
                  }
                  return false;
                }
                start = start.firstChild;
              }
              if (
                start === range.startContainer.childNodes[range.startOffset]
              ) {
                br = range.document.createElement("br");
                range.insertNode(br).setCursor();
              } else {
                range.setStart(start, 0).setCursor();
              }
            } else {
              br = range.document.createElement("br");
              range.insertNode(br).setStartAfter(br).setCursor();
            }
          } else {
            br = range.document.createElement("br");
            range.insertNode(br);
            var parent = br.parentNode;
            if (parent.lastChild === br) {
              br.parentNode.insertBefore(br.cloneNode(true), br);
              range.setStartBefore(br);
            } else {
              range.setStartAfter(br);
            }
            range.setCursor();
          }
        }
      }
    });
  };
  //enterkey.js end
  //basestyle.js start
  ///import core
  ///commands 加粗,斜体,上标,下标
  ///commandsName  Bold,Italic,Subscript,Superscript
  ///commandsTitle  加粗,加斜,下标,上标
  /**
   * b u i等基础功能实现
   * @function
   * @name baidu.editor.execCommands
   * @param    {String}    cmdName    bold加粗。italic斜体。subscript上标。superscript下标。
   */
  /**
   * 字体加粗
   * @command bold
   * @param { String } cmd 命令字符串
   * @remind 对已加粗的文本内容执行该命令， 将取消加粗
   * @method execCommand
   * @example
   * ```javascript
   * //editor是编辑器实例
   * //对当前选中的文本内容执行加粗操作
   * //第一次执行， 文本内容加粗
   * editor.execCommand( 'bold' );
   *
   * //第二次执行， 文本内容取消加粗
   * editor.execCommand( 'bold' );
   * ```
   */

  /**
   * 字体倾斜
   * @command italic
   * @method execCommand
   * @param { String } cmd 命令字符串
   * @remind 对已倾斜的文本内容执行该命令， 将取消倾斜
   * @example
   * ```javascript
   * //editor是编辑器实例
   * //对当前选中的文本内容执行斜体操作
   * //第一次操作， 文本内容将变成斜体
   * editor.execCommand( 'italic' );
   *
   * //再次对同一文本内容执行， 则文本内容将恢复正常
   * editor.execCommand( 'italic' );
   * ```
   */

  /**
   * 下标文本，与“superscript”命令互斥
   * @command subscript
   * @method execCommand
   * @remind  把选中的文本内容切换成下标文本， 如果当前选中的文本已经是下标， 则该操作会把文本内容还原成正常文本
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * //editor是编辑器实例
   * //对当前选中的文本内容执行下标操作
   * //第一次操作， 文本内容将变成下标文本
   * editor.execCommand( 'subscript' );
   *
   * //再次对同一文本内容执行， 则文本内容将恢复正常
   * editor.execCommand( 'subscript' );
   * ```
   */

  /**
   * 上标文本，与“subscript”命令互斥
   * @command superscript
   * @method execCommand
   * @remind 把选中的文本内容切换成上标文本， 如果当前选中的文本已经是上标， 则该操作会把文本内容还原成正常文本
   * @param { String } cmd 命令字符串
   * @example
   * ```javascript
   * //editor是编辑器实例
   * //对当前选中的文本内容执行上标操作
   * //第一次操作， 文本内容将变成上标文本
   * editor.execCommand( 'superscript' );
   *
   * //再次对同一文本内容执行， 则文本内容将恢复正常
   * editor.execCommand( 'superscript' );
   * ```
   */
  UE.plugins["basestyle"] = function () {
    var basestyles = {
        bold: ["strong", "b"],
        italic: ["em", "i"],
        subscript: ["sub"],
        superscript: ["sup"]
      },
      getObj = function (editor, tagNames) {
        //var start = editor.selection.getStart();
        var path = editor.selection.getStartElementPath();
        //return  domUtils.findParentByTagName( start, tagNames, true )
        return utils.findNode(path, tagNames);
      },
      me = this;
    for (var style in basestyles) {
      (function (cmd, tagNames) {
        me.commands[cmd] = {
          execCommand: function (cmdName) {
            var range = new dom.Range(me.document),
              obj = "";
            //table的处理
            if (me.currentSelectedArr && me.currentSelectedArr.length > 0) {
              for (var i = 0, ci; (ci = me.currentSelectedArr[i++]); ) {
                if (ci.style.display != "none") {
                  range.selectNodeContents(ci).select();
                  //trace:943
                  !obj && (obj = getObj(this, tagNames));
                  if (cmdName == "superscript" || cmdName == "subscript") {
                    if (!obj || obj.tagName.toLowerCase() != cmdName) {
                      range.removeInlineStyle(["sub", "sup"]);
                    }
                  }
                  obj
                    ? range.removeInlineStyle(tagNames)
                    : range.applyInlineStyle(tagNames[0]);
                }
              }
              range.selectNodeContents(me.currentSelectedArr[0]).select();
            } else {
              range = me.selection.getRange();
              obj = getObj(this, tagNames);

              if (range.collapsed) {
                if (obj) {
                  var tmpText = me.document.createTextNode("");
                  range.insertNode(tmpText).removeInlineStyle(tagNames);

                  range.setStartBefore(tmpText);
                  domUtils.remove(tmpText);
                } else {
                  var tmpNode = range.document.createElement(tagNames[0]);
                  if (cmdName == "superscript" || cmdName == "subscript") {
                    tmpText = me.document.createTextNode("");
                    range
                      .insertNode(tmpText)
                      .removeInlineStyle(["sub", "sup"])
                      .setStartBefore(tmpText)
                      .collapse(true);
                  }
                  range.insertNode(tmpNode).setStart(tmpNode, 0);
                }
                range.collapse(true);
              } else {
                if (cmdName == "superscript" || cmdName == "subscript") {
                  if (!obj || obj.tagName.toLowerCase() != cmdName) {
                    range.removeInlineStyle(["sub", "sup"]);
                  }
                }
                obj
                  ? range.removeInlineStyle(tagNames)
                  : range.applyInlineStyle(tagNames[0]);
              }

              range.select();
            }

            return true;
          },
          queryCommandState: function () {
            if (this.highlight) {
              return -1;
            }
            return getObj(this, tagNames) ? 1 : 0;
          }
        };
      })(style, basestyles[style]);
    }
  };
  //basestyle.js end
  //hoverimage.js start
  UE.plugins["hoverimage"] = function () {
    UE.commands["hoverchangeimage"] = {
      execCommand: function (cmdName) {
        //这里有4种情况 图片+图片，图片+图标，图标+图标，图标+图片
        var images = $(
          "img[_defImg][_hovImg], img[_defFont][_hovFont], div[_defFont][_hovFont], div[_defImg][_hovImg]"
        );
        //var   images = $(" div[_deffont][_hovfont]");
        var hoverImages = $(".J_hoverImage");
        var isUE = false;
        var editorBody = this.body
          ? this.body
          : this.editor
          ? this.editor.body
          : false;

        if (editorBody) {
          images = $(editorBody).find(
            "img[_defImg][_hovImg], img[_defFont][_hovFont], div[_defFont][_hovFont], div[_defImg][_hovImg]"
          );
        }
        if (editorBody) {
          hoverImages = $(editorBody).find(".J_hoverImage");
        }

        if (images.length == 0) {
          return;
        }

        hoverImages.remove();

        for (var i = 0; i < images.length; i++) {
          var elem = images[i];
          var elemParent = $(elem).parent();
          var elemTop = $(elem).position().top;
          var elemLeft = $(elem).position().left;
          var elemWidth = $(elem).width();
          var elemHeight = $(elem).height();
          var elemTitle = $(elem).attr("title") || "";
          var elemFont = $(elem).attr("_defFont");
          var hoverImage = "";
          var hoverImageSrc = $(elem).attr("_hovImg");
          var hoverImageStyle = "position: absolute; opacity:0;";
          var hoverFont = $(elem).attr("_hovFont");
          var hoverColor = $(elem).attr("_hovColor");
          isUE =
            ($(elem).parents(".richContent").length > 0 || editorBody) &&
            $(elemParent).is("p, span, td");

          if (isUE) {
            if (
              !(
                elemParent[0].nodeName.toLowerCase() === "span" &&
                $(elemParent).hasClass("J_hoverImageParent")
              )
            ) {
              var spanStyle =
                "display: inline-block; width: " +
                elemWidth +
                "px; height: " +
                elemHeight +
                "px; _display: block; _zoom: 1;";
              $(elem).after(
                "<span class='J_hoverImageParent' style='" +
                  spanStyle +
                  "'></span>"
              );

              elemParent = $(elem).next("span");
              $(elemParent).append($(elem));
            }
          }
          //visibility:hidden 防止再ie6-8中hover图片src为空时出现图片ie独有ico 20160106
          var hoverImage = $(elemParent).find(".J_hoverImage");
          if (hoverImage.length == 0) {
            hoverImageStyle +=
              "top: 0px; left: 0px; width:" +
              elemWidth +
              "px; height:" +
              elemHeight +
              "px;";
            //浮动图片的内容为字体图标是时，做特殊处理
            if (!!hoverFont) {
              font_size = elemWidth > elemHeight ? elemHeight : elemWidth;
              hoverImageStyle +=
                "font-size:" +
                font_size +
                "px; text-align : center; line-height:" +
                elemHeight +
                "px;";
              hoverImage =
                "<div class='J_hoverImage " +
                hoverFont +
                "' style='" +
                hoverImageStyle +
                "color: " +
                hoverColor +
                "' ></div>";
            } else {
              hoverImage =
                "<img class='J_hoverImage' src='" +
                hoverImageSrc +
                "' style='" +
                hoverImageStyle +
                (hoverImageSrc ? "" : "visibility:hidden;") +
                "' title='" +
                elemTitle +
                "' alt='" +
                elemTitle +
                "' >";
            }
            $(elem).after(hoverImage);
          }

          $(elem).css("opacity", ""); // 防止在富文本保存时，原图是被隐藏的，然后style直接被持久化，输出的时候直接被隐藏的问题。
        }

        var eventElems = $(images).parent();
        $.each(eventElems, function (i, elem) {
          var defImage = $(this).find("img[_defImg], div[_defFont]")[0];
          if (
            typeof $(defImage).attr("_hovImg") == "undefined" &&
            typeof $(defImage).attr("_hovFont") == "undefined"
          ) {
            return;
          }
          if (
            typeof $(defImage).attr("_hovImg") != "undefined" &&
            $(defImage).attr("_hovImg").length == 0
          ) {
            return;
          }
          var module = $(elem).parents(".form");
          if (UE.browser.chrome && !$(module).hasClass("formStyle31")) {
            $(elem).css("position", "relative"); // 解决有时候hover上去图片显示不出来。
          }

          $(elem).off(".hoverImage");
          $(elem)
            .on("mouseenter.hoverImage", function () {
              var image = $(this).find("img[_defImg], div[_defFont]")[0];
              var hoverImage = $(this).find(".J_hoverImage");
              refreshImageStyle(image, hoverImage);
              $(image).stop(false, true).animate({ opacity: 0 }, 500);
              $(hoverImage).stop(false, true).animate({ opacity: 1 }, 500);
            })
            .on("mouseleave.hoverImage", function () {
              var image = $(this).find("img[_defImg], div[_defFont]")[0];
              var hoverImage = $(this).find(".J_hoverImage");
              refreshImageStyle(image, hoverImage);
              $(hoverImage).stop(false, true).animate({ opacity: 0 }, 500);
              $(image).stop(false, true).animate({ opacity: 1 }, 500);
            });
        });

        function refreshImageStyle(srcImg, targetImg) {
          var imageWidth = $(srcImg).width();
          var imageHeight = $(srcImg).height();
          var imageTop = $(srcImg).position().top;
          var imageLeft = $(srcImg).position().left;
          var imageMarginLeft = $(srcImg).css("margin-left");
          var imageMarginTop = $(srcImg).css("margin-top");
          if (!!imageMarginLeft) {
            imageMarginLeft = parseInt(imageMarginLeft.replace("px", ""));
            imageLeft += imageMarginLeft;
          }
          if (!!imageMarginTop) {
            imageMarginTop = parseInt(imageMarginTop.replace("px", ""));
            imageTop += imageMarginTop;
          }
          //浮动图片的内容为字体图标时，做特殊处理
          if ($(srcImg).context.tagName == "DIV") {
            $(srcImg).parent().css("display", "block");
          }
          $(targetImg).css({
            top: imageTop + "px",
            left: imageLeft + "px",
            width: imageWidth + "px",
            height: imageHeight + "px"
          });
        }
      }
    };
  };
  //hoverimage.js end
  //wordpasteimg.js start
  UE.plugins["wordpasteimg"] = function () {
    var me = this;
    me.ready(function () {
      $(me.body).delegate('img[iswordimgtips="true"]', "click", function () {
        me.execCommand("wordpasteimgtips", this);
      });
    });
    UE.commands["wordpasteimgtips"] = {
      execCommand: function (cmdName, img) {
        var src = img.getAttribute("word_img");
        for (var topWin = window; ; ) {
          if (topWin != topWin.parent) {
            topWin = topWin.parent;
          } else {
            break;
          }
        }
        var body = topWin.document.getElementsByTagName("body");
        body.length && (body = body[0]);
        var tips =
          '<div id="word_tips" style="-webkit-user-select: none;position: absolute;z-index: 999999;top: 0;bottom: 0;left: 0;right: 0;background-color: rgba(0,0,0,.6);">' +
          '<div style="position: absolute;top: 50%; left: 50%;width: 440px;margin-left: -220px;height: 290px; margin-top: -145px;background-color: #eee;border-radius: 8px;font-size: 12px;color: #000;-webkit-box-shadow: 5px 5px 20px #000;-moz-box-shadow: 5px 5px 20px #000;-ms-box-shadow: 5px 5px 20px #000;-o-box-shadow: 5px 5px 20px #000;box-shadow: 5px 5px 20px #000;">' +
          '<div style="line-height: 25px;text-align: center;margin-top: 10px;">目前无法直接从文档（如word）中粘贴图片，请通过以下方法上传图片：<br/>' +
          '方法一：在文档中将该图片另存为本地图片，再点击上传按钮<span class="xhe_showImageNoteTag" style="background:url(' +
          me.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/menu/icons.gif) no-repeat 20px 20px; display: inline-block;vertical-align: middle;width: 20px;height: 20px;background-position: -420px 0 !important;"></span>把图片上传。<br/>' +
          '方法二：直接点击上传按钮<span class="xhe_showImageNoteTag" style="background:url(' +
          me.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/menu/icons.gif) no-repeat 20px 20px; display: inline-block;vertical-align: middle;width: 20px;height: 20px;background-position: -420px 0 !important;"" ></span>，在选择文件框的“文件名”中，粘贴以下路径：<br/>' +
          '<div style="-webkit-user-select: text;;padding: 0 10px;color: red;font-size: 13px;word-wrap: break-word;word-break: normal;">' +
          src +
          "<br/></div>" +
          "如下图所示:" +
          '<div style="width: 361px;height: 66px;margin: 0 auto;background:url(' +
          me.options.BUS_UEDITOR_HOME_URL_IMAGE +
          '/image/menu/showImageExam1.png) no-repeat;"></div>' +
          '<div id="close_tips" style="width: 52px;color: #fff;background-color: #c9302c;border-radius: 3px;margin: 20px auto 0 auto;cursor: pointer;">关闭</div>' +
          "</div>" +
          "</div>" +
          "</div>";
        $(body)
          .append(tips)
          .find("#word_tips #close_tips")
          .on("click", function () {
            $(this).parents("#word_tips").remove();
          });

        // // 该DIV的样式不能写入到ueditor文件中，因为这弹出框要出入到最顶端
        // var localDiv = ["<div id='xhe_bigShowImageNote' style='width:100%;height:100%;position: absolute ;border-radius: 5px;background-color:black;z-index:9999;cursor: default;filter: alpha(opacity=50); opacity:0.5;'>",
        //                "</div><div id='xhe_showImageNote' style='font-size: 12px;margin:0 auto;display: block;border-radius: 8px;position: absolute; width: 440px;top: 35%;left:35%;z-index:10000;background-color:#eee;padding-top: 15px;padding-left:15px; color:#000;-webkit-box-shadow:5px 5px 20px #000;-moz-box-shadow:5px 5px 20px #000;-ms-box-shadow:5px 5px 20px #000;-o-box-shadow:5px 5px 20px #000;box-shadow:5px 5px 20px #000;'>",
        //                     "<div>  <div style='margin-top:5px' onselectstart='return false;'>目前无法直接从文档（如word）中粘贴图片，请通过以下方法上传图片：<br /></div>",
        //                             "<div style='margin-top:10px' onselectstart='return false;'>方法一：在文档中将该图片另存为本地图片，再点击上传按钮<span class='xhe_showImageNoteTag' style='background:url("+me.options.BUS_UEDITOR_HOME_URL_IMAGE+"/image/menu/icons.gif) no-repeat 20px 20px; display: inline-block;vertical-align: middle;width: 20px;height: 20px;background-position: -420px 0 !important;'></span>把图片上传。<br /></div>",
        //                             "<div style='margin-top:5px' onselectstart='return false;'>方法二：直接点击上传按钮<span class='xhe_showImageNoteTag' style='background:url("+me.options.BUS_UEDITOR_HOME_URL_IMAGE+"/image/menu/icons.gif) no-repeat 20px 20px; display: inline-block;vertical-align: middle;width: 20px;height: 20px;background-position: -420px 0 !important;' ></span>，在选择文件框的“文件名”中，粘贴以下路径：</div>",
        //                             "<div class='xhe_srcStyle' style='color:red; font-size:13px;margin-top: 5px;margin-bottom: 10px;word-wrap: break-word; margin-right: 10px;word-break: normal;'><p>"+src+"</p></div>",
        //                             "<div style='margin-bottom:15px;'  onselectstart='return false;'>如下图所示：<br /></div>",
        //                             "<div><span class='xhe_showImageExample' style='background:url("+me.options.BUS_UEDITOR_HOME_URL_IMAGE+"/image/menu/showImageExam1.png) no-repeat;margin-left: 20px;width:370px;height:70px; display:block'></span></div>",
        //                     "</div>",
        //                     "<div id='xhe_cancelImageDiv' style=' width:100%; height:10%'>",
        //                         "<input type='button' class='xhe_spanCancel' value='关闭' style='margin-right: 45% ;margin-right: 45%;margin-bottom: 15px;margin-top: 30px;*margin-bottom: 10px;text-decoration: none;cursor: pointer;float: right;width: 45px;height: 25px;text-align: center;' />",
        //                     "</div>",
        //                "</div>"];
        // // //设置编辑器的属性为绝对
        // // container.parentNode.parentNode.style.position = "absolute";
        // $(body).append(localDiv.join(""));
        // $("#xhe_bigShowImageNote").css("height",_contentWin.parent.document.body.scrollHeight+"px");
        // for(var i=0;i<_contentWin.parent.document.getElementsByTagName("iframe").length;i++){
        //     if(_contentWin.parent.document.getElementsByTagName("iframe")[i].contentWindow === _contentWin){
        //         $("#xhe_showImageNote").css("top",$(_contentWin.parent.document.getElementsByTagName("iframe")[i]).offset().top+"px");
        //     }
        // }
      }
    };
  };
  //wordpasteimg.js end
  //tablepopup.js start
  UE.plugins["tablepopup"] = function () {
    var $G = function (id) {
        return document.getElementById(id);
      },
      $focus = function (node) {
        setTimeout(function () {
          if (browser.ie) {
            var r = node.createTextRange();
            r.collapse(false);
            r.select();
          } else {
            node.focus();
          }
        }, 0);
      };
    //表格与单元格弹窗初始化
    UE.commands["inittablepopup"] = {
      execCommand: function (cmdName, tid) {
        //表格弹出框  DIV对象
        var dialog = $EDITORUI[tid],
          //当前打开dialog的编辑器实例
          editor = this,
          domUtils = UE.dom.domUtils,
          utils = UE.utils,
          browser = UE.browser,
          lang = UE.I18N[editor.options.lang][dialog.className.split("-")[2]];
        utils.domReady(function () {
          // var langImgPath = editor.options.langPath + editor.options.lang + "/images/";
          //针对静态资源
          for (var i in lang["static"]) {
            var dom = $G(i);
            if (!dom) continue;
            var tagName = dom.tagName,
              content = lang["static"][i];
            // if(content.src){
            //     //clone
            //     content = utils.extend({},content,false);
            //     content.src = langImgPath + content.src;
            // }
            // if(content.style){
            //     content = utils.extend({},content,false);
            //     content.style = content.style.replace(/url\s*\(/g,"url(" + langImgPath)
            // }
            switch (tagName.toLowerCase()) {
              case "var":
                dom.parentNode.replaceChild(
                  document.createTextNode(content),
                  dom
                );
                break;
              case "select":
                var ops = dom.options;
                for (var j = 0, oj; (oj = ops[j]); ) {
                  oj.innerHTML = content.options[j++];
                }
                for (var p in content) {
                  p != "options" && dom.setAttribute(p, content[p]);
                }
                break;
              default:
                domUtils.setAttributes(dom, content);
            }
          }
        });
      }
    };
    //表格弹窗初始化事件
    UE.commands["tablepopupevent"] = {
      execCommand: function (cmdName, tableId) {
        var domUtils = baidu.editor.dom.domUtils;
        var inputs = document.getElementsByTagName("input"),
          editor = this,
          selects = [],
          divSelects = [],
          lang = UE.I18N[editor.options.lang]["inserttable"];
        // selects.push(document.getElementById('align'));
        // selects.push(document.getElementById('borderType'));
        divSelects.push(document.getElementById("borderStyle"));
        divSelects.push(document.getElementById("align"));
        divSelects.push(document.getElementById("borderType"));
        //selects.push(document.getElementById('commCellPadding'));

        //改造之后的ueditor的弹出框是加入到父类里面去的，
        //var ueditorWidthUnit = document.getElementById('ueditorWidthUnit'),
        //    ueditorHeightUnit = document.getElementById('ueditorHeightUnit');
        //selects.push(ueditorWidthUnit);
        //selects.push(ueditorHeightUnit);
        //ie给出默认值
        for (var i = 0, ci; (ci = inputs[i++]); ) {
          switch (ci.id) {
            case "numRows":
            case "numCols":
              ci.value = 5;
              break;
            case "bgColor":
              ci.value = "";
              break;
            case "borderColor":
              ci.value = "#000000";
              break;
            case "border":
              ci.value = 1;
              break;
            case "cellSpacing":
              ci.value = "0";
              break;
            case "cellPadding":
              ci.value = "";
              break;
            default:
          }
        }
        //return;
        for (var i = 0, ci; (ci = selects[i++]); ) {
          ci.options[0].selected = true;
        }
        //return;
        var state = editor.queryCommandState("edittable");
        if (state == 0) {
          var range = editor.selection.getRange(),
            table = domUtils.findParentByTagName(
              range.startContainer,
              "table",
              true
            );
          if (table) {
            var numRows = table.rows.length,
              cellCount = 0;
            //列取最大数
            for (var i = 0, ri; (ri = table.rows[i++]); ) {
              var tmpCellCount = 0;
              for (var j = 0, cj; (cj = ri.cells[j++]); ) {
                if (cj.style.display != "none") {
                  tmpCellCount++;
                }
              }
              cellCount = Math.max(tmpCellCount, cellCount);
            }
            domUtils.setAttributes($G("numRows"), {
              value: numRows,
              disabled: true
            });
            domUtils.setAttributes($G("numCols"), {
              value: cellCount,
              disabled: true
            });

            $G("cellPadding").value = table.getAttribute("cellPadding") || "";
            $G("cellSpacing").value = table.getAttribute("cellSpacing") || "0";

            var value = table.getAttribute("width");
            value = !value
              ? ["", table.offsetWidth]
              : /%$/.test(value)
              ? value.match(/(\d+)(%)?/)
              : ["", value.replace(/px/i, "")];

            $G("ueditorWidth").value = value[1];
            //$G('ueditorWidthUnit').options[value[2] ? 1:0].selected = true;
            value = table.getAttribute("height");
            value = !value
              ? ["", ""]
              : /%$/.test(value)
              ? value.match(/(\d+)(%)?/)
              : ["", value.replace(/px/i, "")];
            $G("ueditorHeight").value = value[1]; //? value[1] : $(table).outerHeight();
            //$G('ueditorHeightUnit').options[value[2]?1:0].selected = true;
            $G("borderColor").value = (
              table.getAttribute("borderColor") || "#000000"
            ).toUpperCase();
            $G("border").value = table.getAttribute("border");
            for (
              var i = 0, ip, opts = $G("align").options;
              (ip = opts[i++]);

            ) {
              if (
                ip.value == (table.getAttribute("align") || "").toLowerCase()
              ) {
                ip.selected = true;
                break;
              }
            }
            $G("borderType").options[
              table.getAttribute("borderType") == "1" ? 1 : 0
            ].selected = true;
            //$G("commCellPadding").options[table.getAttribute('commCellPadding') == '1' ? 1: 0].selected = true;
            $G("bgColor").value = (
              table.getAttribute("bgColor") || ""
            ).toUpperCase();
            createTable();
          }
        } else {
          $focus($G("numRows"));
        }

        var init = function () {
          addColorPickListener();
          addPxChangeListener();
          addFloatListener();
          addBorderTypeChangeListener();
          addCommCellPaddingChangeListener();
          addBorderStyleListener();
        };

        function addBorderTypeChangeListener() {
          domUtils.on($G("borderType"), "change", createTable);
        }

        function addCommCellPaddingChangeListener() {
          //domUtils.on($G("commCellPadding"),"change",createTable);
        }

        function addFloatListener() {
          domUtils.on($G("align"), "change", function () {
            setTablePosition(this.value);
          });
        }

        function addBorderStyleListener() {
          domUtils.on($G("borderStyle"), "change", function () {
            // setTableBorderStyle(this.value);
            createTable();
          });
        }

        // function(e){
        //           $('#'+me.id+'unitBorderStyle').find('.borderStyleInner')[0].innerHTML = this.innerHTML;
        //           $('#'+me.id+'unitBorderStyle').find('.borderStyleCon').css('display','none');
        //           $('#'+me.id+'unitBorderStyle').find('.borderStyleIcon').removeClass('active');
        //           $('#'+me.id+'unitBorderStyle').attr('value',this.getAttribute('value'))
        //       }

        /**
         * 根据传入的value值变更table的位置
         * @param value
         */
        function setTablePosition(value) {
          var table = $G("preview").children[0],
            margin = (table.parentNode.offsetWidth - table.offsetWidth) / 2;
          if (value == "center") {
            table.style.marginLeft = margin + "px";
          } else if (value == "right") {
            table.style.marginLeft = 2 * margin - 5 + "px";
          } else {
            table.style.marginLeft = "5px";
          }
        }

        /**
         * 绑定border、spaceing等更改事件
         */
        function addPxChangeListener() {
          var ids = ["border", "cellPadding", "cellSpacing"];
          for (var i = 0, ci; (ci = $G(ids[i++])); ) {
            domUtils.on(ci, "keyup", function () {
              $G("message").style.display = "none";
              switch (this.id) {
                case "border":
                  $G("border").value = filter(this.value, "border");
                  break;
                case "cellPadding":
                  $G("cellPadding").value = filter(this.value, "cellPadding");
                  break;
                case "cellSpacing":
                  $G("cellSpacing").value = filter(this.value, "cellSpacing");
                  break;
                default:
              }
              createTable();
              //setTablePosition($G("align").value);
            });
          }
        }

        function isNum(str) {
          return /^(0|[1-9][0-9]*)$/.test(str);
        }

        /**
         * 依据属性框中的属性值创建table对象
         */
        function createTable() {
          var border = $G("border").value || 1,
            borderColor = $G("borderColor").value || "#000000",
            cellPadding = $G("cellPadding").value || "",
            //cellPadding=$G("cellPadding").value || 0,
            cellSpacing = $G("cellSpacing").value || 0,
            bgColor = $G("bgColor").value || "#FFFFFF",
            align = $G("align").value || "",
            borderType = $G("borderType").value || 0,
            borderStyle = $G("borderStyle").getAttribute("value") || "solid";

          border = setMax(border, 5);
          cellPadding = setMax(cellPadding, 5);
          cellSpacing = setMax(cellSpacing, 5);

          var html = ["<table "];
          if (cellSpacing > 0) {
            html.push(
              ' style="border-collapse:separate; border:' +
                (border || 1) +
                "px solid " +
                (borderColor || "#000000") +
                ';"'
            );
          } else {
            html.push(
              ' style="border-collapse:collapse; border:' +
                (border || 1) +
                "px solid " +
                (borderColor || "#000000") +
                ';"'
            );
          }
          //html.push('border:' + (border||1) +'px solid ' + (borderColor||'#000000;"'));

          if (borderType == "1") {
            html.push(' frame="box" rules="none" ');
          }
          cellSpacing > 0 && html.push(' cellSpacing="' + cellSpacing + '" ');

          //这一块是表格的预览版本
          html.push(
            ' border="' +
              (border || 1) +
              '" borderColor="' +
              (borderColor || "#ff0000") +
              '"'
          );
          bgColor && html.push(' bgColor="' + bgColor + '"');
          html.push(
            ' ><tr><td colspan="3" style="width:90px;">' +
              lang["static"]["lang_forPreview"] +
              "</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></table>"
          );
          var preview = $G("preview");
          preview.innerHTML = html.join("");
          //如果针对每个单元格
          var table = preview.firstChild,
            tableBorderStyle = (tableTdBorderStyle =
              borderStyle +
              " " +
              border +
              "px" +
              " " +
              (borderColor || "#000000"));

          if (borderType == 1) {
            tableTdBorderStyle = "none";
          }

          for (
            var i = 0, td, tds = domUtils.getElementsByTagName(table, "td");
            (td = tds[i++]);

          ) {
            td.style.padding = cellPadding + "px";
            // 设置单元格的边框
            td.style.border = tableTdBorderStyle;
          }

          /**
           * @desc 通过style内联样式设置修正表格的样式
           * @author jser
           * @date 2017-1-17
           */
          // 设置表格边框
          table.style.border = tableBorderStyle;
          // 设置表格背景色
          table.style.backgroundColor = bgColor;
          // 设置单元格是否合并
          // table.style.borderCollapse = cellSpacing ? "separate" : "collapse";
          // 设置单元格间距
          table.style.borderSpacing = cellSpacing > 0 ? cellSpacing + "px" : "";

          setTablePosition(align.toLowerCase());
        }

        function setMax(value, max) {
          return value > max ? max : value;
        }

        function filter(value, property) {
          var maxPreviewValue = 5,
            maxValue = 10;
          if (!isNum(value) && value != "") {
            $G(property).value = "";
            $G("message").style.display = "";
            $G("messageContent").innerHTML = lang.errorNum;
            return property == "border" ? 1 : 0;
          }
          if (value > maxPreviewValue) {
            $G("message").style.display = "";
            $G("messageContent").innerHTML = lang.overflowPreviewMsg.replace(
              "{#value}",
              maxPreviewValue
            );
            if (value > maxValue) {
              $G("messageContent").innerHTML = lang.overflowMsg.replace(
                "{#value}",
                maxValue
              );
              $G(property).value = maxValue;
              return maxValue;
            }
          }
          return value;
        }
        /**
         * 绑定取色器监听事件
         */
        function addColorPickListener() {
          var colorPicker = getColorPicker(),
            ids = ["bgColor", "borderColor"];
          for (var i = 0, ci; (ci = $G(ids[i++])); ) {
            domUtils.on(ci, "click", function () {
              var me = this;
              showColorPicker(colorPicker, me);
              colorPicker.content.onpickcolor = function (t, color) {
                me.value = color.toUpperCase();
                colorPicker.hide();
                createTable();
              };
              colorPicker.content.onpicknocolor = function () {
                me.value = "";
                colorPicker.hide();
                createTable();
              };
            });
            domUtils.on(ci, "keyup", function () {
              colorPicker.hide();
              createTable();
            });
          }
          domUtils.on(document, "mousedown", function () {
            //UE.ui.Popup.postHide(this);
          });
        }

        /**
         * 实例化一个colorpicker对象
         */
        function getColorPicker() {
          return new UE.ui.Popup({
            content: new UE.ui.ColorPicker({
              noColorText: lang.noColor,
              editor: editor
            })
          });
        }

        /**
         * 在anchorObj上显示colorpicker
         * @param anchorObj
         */
        function showColorPicker(colorPicker, anchorObj) {
          colorPicker.showAnchor(anchorObj);
        }

        init();

        domUtils.on($G("ueditorWidth"), "keyup", function () {
          var value = this.value;
          if (value > 100) {
            //$G("ueditorWidthUnit").value="px";
          }
        });
        domUtils.on($G("ueditorHeight"), "keyup", function () {
          var value = this.value;
          if (value > 100) {
            //$G("ueditorHeightUnit").value="px";
          }
        });

        // 边框样式style的事件绑定
        //      $('#tablewrapper_id').find('.borderStyleMask').on('click',function(e) {
        // if(!$('#tablewrapper_id').find('.borderStyleIcon').hasClass('active')){
        //                    $('#tablewrapper_id').find('.borderStyleIcon').addClass('active');
        //                    $('#tablewrapper_id').find('.borderStyleCon').css('display','block');
        //                }else{
        //                    $('#tablewrapper_id').find('.borderStyleIcon').removeClass('active');
        //                    $('#tablewrapper_id').find('.borderStyleCon').css('display','none');
        //                }
        //      });
        $("#tablewrapper_id")
          .find("#borderStyle li")
          .on("click", function (e) {
            $("#tablewrapper_id").find(
              ".borderStyleInner"
            )[0].innerHTML = this.innerHTML;
            $("#tablewrapper_id")
              .find(".borderStyleCon")
              .css("display", "none");
            $("#tablewrapper_id")
              .find(".borderStyleIcon")
              .removeClass("active");
            $("#tablewrapper_id")
              .find("#borderStyle")
              .attr("value", this.getAttribute("value"));
            createTable();
          });

        //            $('#tablewrapper_id').find('.alignMask').on('click',function(e) {
        // if(!$('#tablewrapper_id').find('.alignIcon').hasClass('active')){
        //                    $('#tablewrapper_id').find('.alignIcon').addClass('active');
        //                    $('#tablewrapper_id').find('.alignCon').css('display','block');
        //                    $('#tablewrapper_id').find('.alignCon').css('z-index','999');
        //                }else{
        //                    $('#tablewrapper_id').find('.alignIcon').removeClass('active');
        //                    $('#tablewrapper_id').find('.alignCon').css('display','none');
        //                }
        //      });
        $("#tablewrapper_id")
          .find("#align li")
          .on("click", function (e) {
            $("#tablewrapper_id").find(
              ".alignInner"
            )[0].innerHTML = this.innerHTML;
            $("#tablewrapper_id").find(".alignCon").css("display", "none");
            $("#tablewrapper_id").find(".alignIcon").removeClass("active");
            $("#tablewrapper_id")
              .find("#align")
              .attr("value", this.getAttribute("value"));
            createTable();
          });

        //            $('#tablewrapper_id').find('.borderTypeMask').on('click',function(e) {
        // if(!$('#tablewrapper_id').find('.borderTypeIcon').hasClass('active')){
        //                    $('#tablewrapper_id').find('.borderTypeIcon').addClass('active');
        //                    $('#tablewrapper_id').find('.borderTypeCon').css('display','block');
        //                    // $('#tablewrapper_id').find('li[value="'+$('#tablewrapper_id').find('#borderType').attr('value')+'"]').css({'backgroundColor':'#5874d8','color':'#fff'})
        //                }else{
        //                    $('#tablewrapper_id').find('.borderTypeIcon').removeClass('active');
        //                    $('#tablewrapper_id').find('.borderTypeCon').css('display','none');
        //                }
        //      });
        $("#tablewrapper_id")
          .find("#borderType li")
          .on("click", function (e) {
            $("#tablewrapper_id").find(
              ".borderTypeInner"
            )[0].innerHTML = this.innerHTML;
            $("#tablewrapper_id").find(".borderTypeCon").css("display", "none");
            $("#tablewrapper_id").find(".borderTypeIcon").removeClass("active");
            $("#tablewrapper_id")
              .find("#borderType")
              .attr("value", this.getAttribute("value"));
            createTable();
          });
        //集合所有的mask 点击事件
        var hasSelects = $("#tablewrapper_id").find(".tableMask");
        var SelectUis = $("#tablewrapper_id").find("ul");
        var SelectIcons = $("#tablewrapper_id").find(".tableIcon");
        for (var i = 0; i < hasSelects.length; i++) {
          hasSelects[i].index = i;
          hasSelects[i].onclick = function (e) {
            var e = e || window.event;
            var This = this;
            for (var i = 0; i < SelectUis.length; i++) {
              SelectUis[i].style.display = "none";
              $(SelectIcons[i]).removeClass("active");
            }
            SelectUis[this.index].style.display = "block";
            $(this).prev().addClass("active");
            document.onclick = function () {
              SelectUis[This.index].style.display = "none";
              $(SelectIcons[This.index]).removeClass("active");
            };
            e.cancelBubble = true;
          };
        }

        $("#tablewrapper_id").find("button")[0].onclick = function () {
          for (var i = 0, opt = {}, ci; (ci = inputs[i++]); ) {
            switch (ci.id) {
              case "numRows":
              case "numCols":
              case "ueditorHeight":
              case "ueditorWidth":
                if (ci.value && !/^[1-9]+[0-9]*$/.test(parseInt(ci.value))) {
                  alert(lang.errorNum);
                  $focus(ci);
                  return false;
                }
                ci.value ? (ci.value = parseInt(ci.value)) : "";
                break;
              case "cellspacing":
              case "cellpadding":
              case "border":
                if (ci.value && !/^[0-9]*$/.test(ci.value)) {
                  alert(lang.errorNum);
                  $focus(ci);
                  return false;
                }
                break;
              case "bgColor":
              case "borderColor":
                if (
                  ci.value &&
                  !/^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(ci.value)
                ) {
                  alert(lang.errorColor);
                  $focus(ci);
                  return false;
                }
                break;
              default:
            }
            opt[ci.id] = ci.value || (ci.id == "border" ? 0 : "");
          }

          for (var i = 0, ci; (ci = selects[i++]); ) {
            opt[ci.id] = ci.value.toUpperCase();
          }
          for (var i = 0, ci; (ci = divSelects[i++]); ) {
            opt[ci.id] = ci.getAttribute("value").toUpperCase();
          }

          if (
            opt.numCols.replace(/(^\s*)|(\s*$)/g, "") == "" ||
            opt.numRows.replace(/(^\s*)|(\s*$)/g, "") == ""
          ) {
            domUtils.ing({
              tips: "行数或者列数不能为空！"
            });
            return false;
          }

          editor.execCommand(state == -1 ? "inserttable" : "edittable", opt);
          //var dialog = window.parent.$EDITORUI[me.dialogId];
          var dialog = "";
          if (tableId.dialogId) {
            dialog = window.self.$EDITORUI[tableId.dialogId];
          } else {
            dialog = window.self.$EDITORUI[tableId.id];
          }

          dialog.close(true);
        };
        $("#tablewrapper_id").find("button")[1].onclick = function () {
          var dialog = "";
          if (tableId.dialogId) {
            dialog = window.self.$EDITORUI[tableId.dialogId];
          } else {
            dialog = window.self.$EDITORUI[tableId.id];
          }
          dialog.close(true);
        };
      }
    };
  };
  //tablepopup.js end
  //music.src.js start
  UE.plugins["music"] = function () {
    var me = this;
    me.ready(function () {
      // 在audio上添加一层div，屏蔽掉audio才能触发其他事件
      $(me.body).delegate(".audioDiv", "mouseover", function (e) {
        $(me.body).find(".music-mask").css("z-index", "99");
      });
      $(me.body).delegate(".audioDiv", "mouseout", function (e) {
        $(me.body).find(".music-mask").css("z-index", "");
      });
      if (
        $(me.body).find(".audioDiv") &&
        $(me.body).find(".music-mask_2") &&
        $(me.body).find(".music-mask_2").hasClass("music-mask-color")
      ) {
        $(me.body).find(".music-mask_2").removeClass("music-mask-color");
      }

      /**
       *自定义audio
                  // 绑定事件
                  $(me.body).delegate('.audioPlay','click',function(e){
                      // var _audio = $(me.body).find("#audioPlayer")[0];
                      var _audio = $(e.target).parent().find("#audioPlayer")[0];

                      //获得音乐的总时间console.log(transTime(_audio.duration))
                      var timeAll = transTime(_audio.duration);
                      // $(me.body).find(".audioDuraTime").text(timeAll);
                      $(e.target).parent().find(".audioDuraTime").text(timeAll);

                      // 监听音频播放时间并更新进度条
                      _audio.addEventListener('timeupdate', function (e) {
                          updateProgress(_audio,e);
                      }, false);

                      // 监听播放完成事件
                      _audio.addEventListener('ended', function (e) {
                          audioEnded(e);
                      }, false);

                      if(_audio.paused){
                          // 播放音乐时暂定其他正在播放的音乐
                          var audios = $(me.body).find('audio');
                          var plays = $(me.body).find('.playOrPause');
                          for (var i = 0; i < audios.length; i++) {
                              if (!audios[i].paused) {
                                  audios[i].pause();
                                  $($(me.body).find('.playOrPause')[i]).attr('src', me.options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/pause.svg');
                              }
                          }

                          _audio.play();
                          $(e.target).parent().find(".playOrPause").attr('src', me.options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/play.svg');
                      }else{
                          _audio.pause();
                          $(e.target).parent().find(".playOrPause").attr('src', me.options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/pause.svg');
                      }

                  })

                  // 点击进度条跳到指定点播放
                  $(me.body).delegate('.progressBarBg','click',function(e){
                      // 处理与#progressDot的mousedown的冲突
                      if(e.target.id !== 'progressDot'){
                          var _audio = $(e.target).parents('.audioDiv').find("#audioPlayer")[0];
                          // 只有音乐开始播放后才可以调节，已经播放过但暂停了的也可以
                          if (_audio.currentTime != 0) {
                              var pgsWidth = $(me.body).find('.progressBarBg').width();
                              var rate = e.offsetX / pgsWidth;
                              _audio.currentTime = _audio.duration * rate;
                              updateProgress(_audio,e);
                          }
                      }
                  })

                  // 监听音频播放时间并更新进度条
                  function updateProgress(audio,e) {
                      var value = audio.currentTime / audio.duration;
                      $(e.target).parents('.audioDiv').find('.progressBar').css('width', value * 100 + '%');
                      $(e.target).parents('.audioDiv').find('.progressDot').css('left', value * 100 + '%');
                      $(e.target).parents('.audioDiv').find('.audioCurTime').html(transTime(audio.currentTime,e));
                  }
                  // 监听音频播放音量并更新进度条
                  function updateVolume(audio,e) {
                      var value = audio.volume;
                      $(e.target).parent().find('.vProgressBar').css('height', value * 100 + '%');
                      $(e.target).parent().find('.vProgressDot').css('top', value * 100 + '%');
                  }
                  // 监听播放完成事件
                  function audioEnded(e) {
                      $(e.target).parent().find('.progressBar').css('width', 0);
                      $(e.target).parent().find('.progressDot').css('left', 0);
                      $(e.target).parent().find('.playOrPause').attr('src', me.options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/pause.svg');
                  }
                  // 播放时间转换
                  function transTime(value,e) {
                      var time = "";
                      var h = parseInt(value / 3600);
                      value %= 3600;
                      var m = parseInt(value / 60);
                      var s = parseInt(value % 60);
                      if (h > 0) {
                          time = formatTime(h + ":" + m + ":" + s,e);
                      } else {
                          time = formatTime(m + ":" + s,e);
                      }

                      return time;
                  }
                  function formatTime(value,e) {
                      var time = "";
                      var s = value.split(':');
                      var i = 0;
                      for (; i < s.length - 1; i++) {
                          time += s[i].length == 1 ? ("0" + s[i]) : s[i];
                          time += ":";
                      }
                      time += s[i].length == 1 ? ("0" + s[i]) : s[i];

                      return time;
                  }

                  // 鼠标拖动进度点时可以调节进度
                  // 鼠标按下时
                  $(me.body).delegate('.progressDot','mousedown',function(e){
                      var dot = this;
                      var _audio = $(e.target).parents('.audioDiv').find("#audioPlayer")[0];
                      // if (!_audio.paused || _audio.currentTime != 0) {
                      var oriLeft = parseInt($(dot).css('left'));
                      var mouseX =  e.clientX;
                      var maxLeft = oriLeft; // 向左最大可拖动距离
                      var maxRight = $(e.target).parents('.audioDiv').find('.progressBarBg').width() - oriLeft; // 向右最大可拖动距离

                      // 禁止默认的选中事件（避免鼠标拖拽进度点的时候选中文字）
                      if (e.preventDefault) {
                          e.preventDefault();
                      } else {
                          e.returnValue = false;
                      }

                      // 禁止事件冒泡
                      if (e && e.stopPropagation) {
                          e.stopPropagation();
                      } else {
                          window.event.cancelBubble = true;
                      }

                      // 开始拖动
                      var moveDom = $(me.body)[0];
                      moveDom.onmousemove = function (e) {
                          var length = e.pageX - mouseX;
                          if (length > maxRight) {
                              length = maxRight;
                          } else if (length < -maxLeft) {
                              length = -maxLeft;
                          }
                          var pgsWidth = $(e.target).parents('.audioDiv').find('.progressBarBg').width();
                          var rate = (oriLeft + length) / pgsWidth;
                          _audio.currentTime = _audio.duration * rate;
                          updateProgress(_audio,e);
                      };

                      // 拖动结束
                      moveDom.onmouseup = function (e) {
                          moveDom.onmousemove = null;
                          moveDom.onmouseup = null;
                      };
                  });

                  // 音量调节
                  $(me.body).delegate('.audioVolume','mouseenter',function(e){
                      var innerHeight = $(me.body).innerHeight(); //可视区域的高度
                      var scrollTop = $(me.body).scrollTop();  //滚动条的滚动距离
                      var offset = $(e.target).offset();  //事件触发目标的位置
                      // 音量控制的位置
                      if((innerHeight + scrollTop - offset.top) < (offset.top - scrollTop)){
                          $(e.target).parents('.audioDiv').find(".volumeAdjust").css('top','');
                          $(e.target).parents('.audioDiv').find(".volumeAdjust").css('bottom','100%');
                          // $(e.target).parents('.audioDiv').find(".vProgressDot").css('top','8%');
                      }else{
                          $(e.target).parents('.audioDiv').find(".volumeAdjust").css('top','100%');
                          $(e.target).parents('.audioDiv').find(".volumeAdjust").css('bottom','');
                      }

                      $(e.target).parent().find('.volumeAdjust').show();
                      $(me.body).delegate('.vProgressBarBg','click',function(e){
                          // 处理与#vProgressDot的mousedown的冲突
                          if(e.target.id !== 'vProgressDot'){
                              var _audio = $(e.target).parents('.audioDiv').find("#audioPlayer")[0];
                              var pgsHeight = $(e.target).parents('.audioDiv').find('.vProgressBarBg').height();
                              var value = e.offsetY / pgsHeight;
                              _audio.volume = value;
                              updateVolume(_audio,e);
                          }
                      });
                      // 鼠标拖动进度点时可以调节音量进度
                      // 鼠标按下时
                      $(me.body).delegate('.vProgressDot','mousedown',function(e){
                          var dot = this;
                          var _audio = $(e.target).parent().parents('.audioDiv').find("#audioPlayer")[0];
                          var oriTop = parseInt($(dot).css('top'));
                          var mouseY =  e.clientY;
                          var maxTop = oriTop; // 向上最大可拖动距离
                          var maxBottom = $(e.target).parents('.audioDiv').find('.vProgressBarBg').height() - oriTop; // 向下最大可拖动距离

                          // 禁止默认的选中事件（避免鼠标拖拽进度点的时候选中文字）
                          if (e.preventDefault) {
                              e.preventDefault();
                          } else {
                              e.returnValue = false;
                          }

                          // 禁止事件冒泡
                          if (e && e.stopPropagation) {
                              e.stopPropagation();
                          } else {
                              window.event.cancelBubble = true;
                          }

                          // 开始拖动
                          var moveDom = $(me.body)[0];
                          moveDom.onmousemove = function (ev) {
                              var length = ev.pageY - mouseY;
                              if (length > maxBottom) {
                                  length = maxBottom;
                              } else if (length < -maxTop) {
                                  length = -maxTop;
                              }
                              var pgsWidth = $(e.target).parents('.audioDiv').find('.vProgressBarBg').height();
                              var value = (oriTop + length) / pgsWidth;
                              _audio.volume = value;
                              updateVolume(_audio,e);
                          };
                          // 拖动结束
                          moveDom.onmouseup = function (e) {
                              moveDom.onmousemove = null;
                              moveDom.onmouseup = null;
                          };
                      });
                  });
                  $(me.body).delegate('.audioVolume','mouseleave',function(e){
                      $(e.target).parent().find('.volumeAdjust').hide();
                  });



              });
              UE.commands['uploadBackMp3'] = {
                  execCommand: function(result){
                      var str = '';
                      if( result ){
                          var data = $.parseJSON(result);
                          data = data.data;
                          if( data.length ){
                              str = '<div style="text-align:center;user-select:none;">'+
                                      '<div style="display:inline-block" class="audioDiv" contenteditable="false" key="audio" >'+
                                          '<audio id="audioPlayer" src="'+data[0].filePath+'" type="audio/mp3" name="'+ data[0].fileName +'"></audio>'+
                                          '<div style="display:inline-block;position: relative;background-color:#2C333C;width:40px;height:40px;margin-right:1px;cursor:pointer;" class="audioPlay">'+
                                              // '<?xml version="1.0" encoding="utf-8"?>'+
                                              // '<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->'+
                                              // '<svg fill="#fff" width="28px" height="28px" class="pause" version="1.1" id="图层_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"'+
                                              //   'viewBox="0 0 18 18" style="enable-background:new 0 0 18 18;position: absolute;margin: auto;top: 0;left: 0;bottom: 0;right: 0;cursor:pointer;" xml:space="preserve">'+
                                              // '<g>'+
                                              //  '<path d="M5.5,15h1C6.8,15,7,14.8,7,14.5v-11C7,3.2,6.8,3,6.5,3h-1C5.2,3,5,3.2,5,3.5v11C5,14.8,5.2,15,5.5,15z"/>'+
                                              //  '<path d="M11,3.5v11c0,0.3,0.2,0.5,0.5,0.5h1c0.3,0,0.5-0.2,0.5-0.5v-11C13,3.2,12.8,3,12.5,3h-1C11.2,3,11,3.2,11,3.5z"/>'+
                                              // '</g>'+
                                              // '</svg>'+

                                              // '<?xml version="1.0" encoding="utf-8"?>'+
                                              // '<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->'+
                                              // '<svg fill="#fff" width="28px" height="28px" class="play" version="1.1" id="图层_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"'+
                                              //   'viewBox="0 0 18 18" style="enable-background:new 0 0 18 18;position: absolute;margin: auto;top: 0;left: 0;bottom: 0;right: 0;display:none;cursor:pointer;" xml:space="preserve">'+
                                              // '<path d="M14.1,8.6L6.5,3.5c-0.3-0.2-0.8,0-0.8,0.4l0,10.1c0,0.4,0.4,0.6,0.8,0.4l7.6-5.1C14.4,9.2,14.4,8.8,14.1,8.6z"/>'+
                                              // '</svg>'+
                                              '<img class="playOrPause" style="pointer-events:none;width:50%;height:50%;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;cursor:pointer;" src="'+me.options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/pause.svg">'+

                                          '</div>'+
                                          '<div id="audioSpeed" style="display:inline-block;position: relative;background-color:#2C333C;width:298px;height:40px;" class="audioSpeed">'+
                                              '<div id="progressBarBg" class="progressBarBg" style="background-color: #d9d9d9;position: relative;top:50%;left:5%;height: 3px;width:93%;border-radius:2px;cursor: pointer;">'+
                                                  '<span id="progressDot" class="progressDot" style="width: 12px;height: 10px;border-radius: 50%;background-color: #fff;position: absolute;left: 0;top: 50%;margin-top: -5px;margin-left: -5px;cursor: pointer;"></span>'+
                                                  '<div id="progressBar" class="progressBar" style="background-color: #649fec;width: 0;height: 3px;border-radius:2px;"></div>'+
                                              '</div>'+
                                          '</div>'+
                                          '<div id="audioTime" style="display:inline-block;position: relative;background-color:#2C333C;width:100px;height:40px;margin-right:1px;" class="audioTime">'+
                                              '<p id="audioTimeShow" style="height:20px;position:absolute;top:50%;margin-top:-10px;color:#fff;left:0;right:0;"><span class="audioCurTime">00:00</span>/<span class="audioDuraTime">00:00</span></p>'+
                                          '</div>'+
                                          '<div style="display:inline-block;position: relative;background-color:#2C333C;width:40px;height:40px;cursor:pointer;" class="audioVolume">'+
                                              // '<?xml version="1.0" encoding="utf-8"?>'+
                                              // '<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->'+
                                              // '<svg fill="#fff" width="28px" height="28px" version="1.1" id="图层_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"'+
                                              //   'viewBox="0 0 18 18" style="enable-background:new 0 0 18 18;position: absolute;margin: auto;top: 0;left: 0;bottom: 0;right: 0;cursor:pointer;" xml:space="preserve">'+
                                              // '<g>'+
                                              //  '<path d="M9.3,3.5L5.7,5.9C5.6,6,5.5,6,5.4,6H2.6C2.3,6,2.1,6.2,2.1,6.5v5c0,0.3,0.2,0.5,0.5,0.5h2.8c0.1,0,0.2,0,0.3,0.1l3.6,2.4'+
                                              //      'c0.3,0.2,0.8,0,0.8-0.4l0-10.1C10.1,3.5,9.6,3.3,9.3,3.5z"/>'+
                                              //  '<path d="M13.5,4.3c-0.2-0.2-0.5-0.1-0.7,0.1c-0.2,0.2-0.1,0.5,0.1,0.7c1.3,0.9,2,2.3,2,3.9c0,1.6-0.8,3-2.1,3.9'+
                                              //      'c-0.2,0.2-0.3,0.5-0.1,0.7c0.1,0.1,0.3,0.2,0.4,0.2c0.1,0,0.2,0,0.3-0.1c1.6-1.1,2.5-2.8,2.5-4.7C15.9,7.1,15,5.4,13.5,4.3z"/>'+
                                              //  '<path d="M13.7,9c0-1.3-0.7-2.4-1.8-3c-0.2-0.1-0.5,0-0.7,0.2c-0.1,0.2,0,0.5,0.2,0.7c0.8,0.4,1.3,1.3,1.3,2.2'+
                                              //      'c0,0.9-0.5,1.7-1.3,2.2c-0.2,0.1-0.3,0.4-0.2,0.7c0.1,0.2,0.3,0.3,0.4,0.3c0.1,0,0.2,0,0.2-0.1C13,11.4,13.7,10.3,13.7,9z"/>'+
                                              // '</g>'+
                                              // '</svg>'+
                                              '<img class="volume" style="pointer-events:none;width:50%;height:50%;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;" src="'+me.options.BUS_UEDITOR_HOME_URL_IMAGE+'/image/volume.svg">'+

                                              '<div style="display:none;position: absolute;top:100%;left:0;background-color:#2C333C;width:40px;height:120px;" class="volumeAdjust">'+
                                                  '<div id="vProgressBarBg" class="vProgressBarBg" style="background-color: #d9d9d9;position: relative;top:5%;left:50%;height: 83%;width:3px;border-radius:2px;cursor: pointer;">'+
                                                      '<span id="vProgressDot" class="vProgressDot" style="width: 10px;height: 10px;border-radius: 50%;background-color: #fff;position: absolute;left: 0px;top: 100%;margin-top: -8px;margin-left: -4px;cursor: pointer;"></span>'+
                                                      '<div class="vProgressBar" style="background-color: #649fec;width: 3px;height: 100%;border-radius:2px;"></div>'+
                                                  '</div>'+
                                              '</div>'+
                                          '</div>'+
                                      '</div>'+
                                    '</div>&#8203;<br>';
                          }else{
                              str = '';
                          }
                      }
                      me.execCommand('inserthtml', str);
                  }
              };
      */
    });
    UE.commands["uploadBackMp3"] = {
      execCommand: function (result) {
        var str = "";
        if (result) {
          var data = $.parseJSON(result);
          data = data.data;
          if (data.length) {
            str =
              '<div id="audio_parents" style="text-align:center;" contenteditable="false">' +
              '<div style="width:400px;display:inline-block;position: relative;" class="audioDiv" contenteditable="false" key="audio" >' +
              '<div style="position: absolute;top: 0;left: 0;right: 0;bottom:0;pointer-events: none;" class="music-mask"></div>' +
              '<div style="position: absolute;top: 0;left: 0;right: 0;bottom:0;pointer-events: none;" class="music-mask_2"></div>' +
              // '<audio controlslist="nodownload" style="width:400px" controls="controls" id="audioPlayer" src="'+data[0].filePath.replace(/\.mp3/,'')+'" type="audio/mp3" name="'+ data[0].fileName +'"></audio>'+
              '<audio controlslist="nodownload" style="width:400px" controls="controls" id="audioPlayer" src="' +
              data[0].filePath +
              '" type="audio/mp3" name="' +
              data[0].fileName +
              '"></audio>' +
              "</div>" +
              "</div>";
            // +'&#8203;<br>';
            // str = '<p style="text-align:center;">'+
            //      '<audio style="width:480px;background:#000;height:40px" controls="controls">'+
            //          '<source src="'+data[0].filePath+'" type="audio/mpeg" />'+
            //          // '<embed width="400" height="400" type="application/x-shockwave-flash" src="'+ Fai.top._resRoot +'/js/comm/jwplayer/jwplayer.swf?file='+data[0].filePath+'" allowfullscreen="true" />'+
            //      '</audio>&#8203;<br />'+
            //  '</p>';
          } else {
            str = "";
          }
        }
        //禁止在视频上方插入音乐，否则音乐会插入视频的覆盖层里面
        if (
          !$(editor.selection.getRange().startContainer).hasClass(
            "netVideo_mask"
          )
        ) {
          me.execCommand("inserthtml", str);
        }
      }
    };
  };
  //music.src.js end
  //imgScale.js start
  //图片支持拖拽缩放
  UE.plugins["imgScale"] = function () {
    var me = this;
    // me.addListener( 'click', function( type, e ) {
    //     if ( e.target.tagName == 'IMG' ) {
    //          console.log(Scale())
    //     }
    // } );
    var elementUpdated = false;
    function Scale() {
      this.editor = null;
      this.resizer = null;
      this.cover = null;
      this.doc = document;
      this.prePos = { x: 0, y: 0 };
      this.startPos = { x: 0, y: 0 };
    }

    (function () {
      var rect = [
        //[left, top, width, height]
        [0, 0, -1, -1],
        [0, 0, 0, -1],
        [0, 0, 1, -1],
        [0, 0, -1, 0],
        [0, 0, 1, 0],
        [0, 0, -1, 1],
        [0, 0, 0, 1],
        [0, 0, 1, 1]
      ];

      Scale.prototype = {
        init: function (editor) {
          var me = this;
          me.editor = editor;
          me.startPos = this.prePos = { x: 0, y: 0 };
          me.dragId = -1;

          var hands = [],
            cover = (me.cover = document.createElement("div")),
            resizer = (me.resizer = document.createElement("div"));

          cover.id = me.editor.ui.id + "_imagescale_cover";
          cover.style.cssText =
            "position:absolute;display:none;z-index:" +
            me.editor.options.zIndex +
            ";filter:alpha(opacity=0); opacity:0;background:#CCC;";
          domUtils.on(cover, "click", function () {
            me.hide();
          });

          // domUtils.on(cover, 'mousewheel', function (e) {
          //     me.hide();
          // });

          for (i = 0; i < 8; i++) {
            hands.push(
              '<span class="edui-editor-imagescale-hand' + i + '"></span>'
            );
          }
          resizer.id = me.editor.ui.id + "_imagescale";
          resizer.className = "edui-editor-imagescale";
          resizer.innerHTML = hands.join("");
          resizer.style.cssText +=
            ";display:none;border:1px dashed #557CE1;z-index:" +
            me.editor.options.zIndex +
            ";";

          // me.editor.ui.getDom().appendChild(cover);
          // me.editor.ui.getDom().appendChild(resizer);
          // domUtils.on(resizer, 'mousewheel', function (e) {
          //     me.hide();
          // });

          // console.log(me.editor.body)
          $(me.editor.ui.getDom())
            .find(".edui-editor-iframeholder")[0]
            .appendChild(cover);
          $(me.editor.ui.getDom())
            .find(".edui-editor-iframeholder")[0]
            .appendChild(resizer);

          me.initStyle();
          me.initEvents();
        },
        initStyle: function () {
          utils.cssRule(
            "imagescale",
            ".edui-editor-imagescale{display:none;position:relative;border:1px dashed #557CE1;cursor:hand;-webkit-box-sizing: content-box;-moz-box-sizing: content-box;box-sizing: content-box;}" +
              ".edui-editor-imagescale span{position:absolute;width:8px;height:8px;border:1px solid #557ce1;box-sizing:border-box;overflow:hidden;font-size:0px;display:block;background-color:#f6f6f6;}" +
              '.edui-editor-imagescale .spanHover:after{content:"";width:4px;height:4px;display:inline-block;background-color:#387ed6;position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;}' +
              ".edui-editor-imagescale .edui-editor-imagescale-hand0{cursor:nw-resize;top:0;margin-top:-5px;left:0;margin-left:-5px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand1{cursor:n-resize;top:0;margin-top:-5px;left:50%;margin-left:-4px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand2{cursor:ne-resize;top:0;margin-top:-5px;left:100%;margin-left:-4px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand3{cursor:w-resize;top:50%;margin-top:-4px;left:0;margin-left:-5px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand4{cursor:e-resize;top:50%;margin-top:-4px;left:100%;margin-left:-4px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand5{cursor:sw-resize;top:100%;margin-top:-4px;left:0;margin-left:-5px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand6{cursor:s-resize;top:100%;margin-top:-4px;left:50%;margin-left:-4px;}" +
              ".edui-editor-imagescale .edui-editor-imagescale-hand7{cursor:se-resize;top:100%;margin-top:-4px;left:100%;margin-left:-4px;}"
          );
        },
        initEvents: function () {
          var me = this;

          me.startPos.x = me.startPos.y = 0;
          me.isDraging = false;
        },
        _eventHandler: function (e) {
          var me = this;
          switch (e.type) {
            case "mousedown":
              var hand = e.target || e.srcElement,
                hand;
              if (
                hand.className.indexOf("edui-editor-imagescale-hand") != -1 &&
                me.dragId == -1
              ) {
                // me.dragId = hand.className.slice(-1);
                me.dragId = hand.className.slice(27, 28);
                me.startPos.x = me.prePos.x = e.clientX;
                me.startPos.y = me.prePos.y = e.clientY;
                domUtils.on(
                  me.doc,
                  "mousemove",
                  me.proxy(me._eventHandler, me)
                );
              }
              break;
            case "mousemove":
              if (me.dragId != -1) {
                me.updateContainerStyle(me.dragId, {
                  x: e.clientX - me.prePos.x,
                  y: e.clientY - me.prePos.y
                });
                me.prePos.x = e.clientX;
                me.prePos.y = e.clientY;
                elementUpdated = true;
                me.updateTargetElement();
                editor.options.ueditorChangeEvent &&
                  editor.options.ueditorChangeEvent();
              }
              break;
            case "mouseup":
              if (me.dragId != -1) {
                me.updateContainerStyle(me.dragId, {
                  x: e.clientX - me.prePos.x,
                  y: e.clientY - me.prePos.y
                });
                me.updateTargetElement();
                if (me.target.parentNode) me.attachTo(me.target);
                me.dragId = -1;
              }
              domUtils.un(me.doc, "mousemove", me.proxy(me._eventHandler, me));
              //修复只是点击挪动点，但没有改变大小，不应该触发contentchange
              if (elementUpdated) {
                elementUpdated = false;
                me.editor.fireEvent("contentchange");
              }
              break;
            case "mouseover":
              if (e.target.tagName == "SPAN") {
                $(e.target).addClass("spanHover");
              }
              break;
            case "mouseout":
              if (e.target.tagName == "SPAN") {
                $(e.target).removeClass("spanHover");
              }
              break;
            default:
              break;
          }
        },
        updateTargetElement: function () {
          var me = this;
          domUtils.setStyles(me.target, {
            width: me.resizer.style.width,
            height: me.resizer.style.height
          });
          me.target.width = parseInt(me.resizer.style.width);
          me.target.height = parseInt(me.resizer.style.height);
          me.attachTo(me.target);
        },
        updateContainerStyle: function (dir, offset) {
          var me = this,
            dom = me.resizer,
            tmp;
          proportion = dom.clientHeight / dom.clientWidth;

          if (rect[dir][0] != 0) {
            tmp = parseInt(dom.style.left) + offset.x;
            dom.style.left = me._validScaledProp("left", tmp) + "px";
          }
          if (rect[dir][1] != 0) {
            tmp = parseInt(dom.style.top) + offset.y;
            dom.style.top = me._validScaledProp("top", tmp) + "px";
          }
          // if (rect[dir][2] != 0) {
          //     tmp = dom.clientWidth + rect[dir][2] * offset.x;
          //     dom.style.width = me._validScaledProp('width', tmp) + 'px';
          // }
          // if (rect[dir][3] != 0) {
          //     tmp = dom.clientHeight + rect[dir][3] * offset.y;console.log(tmp+',h')
          //     dom.style.height = me._validScaledProp('height', tmp) + 'px';
          // }
          if (rect[dir][2] != 0 && rect[dir][3] == 0) {
            tmp = dom.clientWidth + rect[dir][2] * offset.x;
            dom.style.width = me._validScaledProp("width", tmp) + "px";
          }
          if (rect[dir][3] != 0 && rect[dir][2] == 0) {
            tmp = dom.clientHeight + rect[dir][3] * offset.y;
            dom.style.height = me._validScaledProp("height", tmp) + "px";
          }
          if (rect[dir][2] != 0 && rect[dir][3] != 0) {
            tmpW = dom.clientWidth + rect[dir][2] * offset.x;
            tmpH = dom.clientHeight + rect[dir][2] * offset.x * proportion;
            dom.style.width = me._validScaledProp("width", tmpW) + "px";
            dom.style.height = me._validScaledProp("height", tmpH) + "px";
          }
        },
        _validScaledProp: function (prop, value) {
          var ele = this.resizer,
            wrap = document;

          value = isNaN(value) ? 0 : value;
          switch (prop) {
            case "left":
              return value < 0
                ? 0
                : value + ele.clientWidth > wrap.clientWidth
                ? wrap.clientWidth - ele.clientWidth
                : value;
            case "top":
              return value < 0
                ? 0
                : value + ele.clientHeight > wrap.clientHeight
                ? wrap.clientHeight - ele.clientHeight
                : value;
            case "width":
              return value <= 0
                ? 1
                : value + ele.offsetLeft > wrap.clientWidth
                ? wrap.clientWidth - ele.offsetLeft
                : value;
            case "height":
              return value <= 0
                ? 1
                : value + ele.offsetTop > wrap.clientHeight
                ? wrap.clientHeight - ele.offsetTop
                : value;
          }
        },
        hideCover: function () {
          // this.cover.style.display = 'none';
          $(this.cover).remove();
        },
        showCover: function () {
          var me = this,
            editorPos = domUtils.getXY(me.editor.ui.getDom());
          // iframePos = domUtils.getXY(me.editor.iframe);
          var editorIframe =
            navigator.userAgent.indexOf("Edge") > -1
              ? $(me.editor.container).find("#baidu_editor_0")[0]
              : me.editor.iframe;
          var iframePos = domUtils.getXY(editorIframe);

          domUtils.setStyles(me.cover, {
            width: editorIframe.offsetWidth - 16 + "px",
            height: editorIframe.offsetHeight - 16 + "px",
            top: iframePos.y - editorPos.y + "px",
            left: iframePos.x - editorPos.x + "px",
            position: "absolute",
            display: ""
          });
        },
        show: function (targetObj) {
          var me = this;
          me.resizer.style.display = "block";
          if (targetObj) me.attachTo(targetObj);

          domUtils.on(
            this.resizer,
            "mousedown",
            me.proxy(me._eventHandler, me)
          );
          domUtils.on(me.doc, "mouseup", me.proxy(me._eventHandler, me));
          // 为9个拖动节点添加hover事件
          domUtils.on(
            this.resizer,
            "mouseover",
            me.proxy(me._eventHandler, me)
          );
          domUtils.on(this.resizer, "mouseout", me.proxy(me._eventHandler, me));

          me.showCover();
          me.editor.fireEvent("afterscaleshow", me);
          me.editor.fireEvent("saveScene");
        },
        hide: function () {
          // 把选区从图片上去掉
          editor.selection.clearRange();
          editor.selection
            .getRange()
            .setEnd(editor.selection.getRange().endContainer, 0);

          var me = this;
          me.hideCover();
          // me.resizer.style.display = 'none';
          $(me.resizer).remove();

          domUtils.un(me.resizer, "mousedown", me.proxy(me._eventHandler, me));
          domUtils.un(me.doc, "mouseup", me.proxy(me._eventHandler, me));
          domUtils.un(me.resizer, "mouseover", me.proxy(me._eventHandler, me));
          domUtils.un(me.resizer, "mouseout", me.proxy(me._eventHandler, me));
          me.editor.fireEvent("afterscalehide", me);

          // me.container.addEventListener('click',function(){
          //     console.log('con')
          // })
        },
        proxy: function (fn, context) {
          return function (e) {
            return fn.apply(context || this, arguments);
          };
        },
        attachTo: function (targetObj) {
          var me = this,
            target = (me.target = targetObj),
            resizer = this.resizer,
            imgPos = domUtils.getXY(target),
            // iframePos = domUtils.getXY(me.editor.iframe),
            editorPos = domUtils.getXY(resizer.parentNode),
            resizerPos = domUtils.getXY(resizer);
          var editorIframe =
            navigator.userAgent.indexOf("Edge") > -1
              ? $(me.editor.container).find("#baidu_editor_0")[0]
              : me.editor.iframe;
          var iframePos = domUtils.getXY(editorIframe);
          // console.log(iframePos.y + ',' + imgPos.y + ',' + $(me.editor.iframe.contentDocument).scrollTop() + ',' + resizerPos.y);
          var posLeft;
          // if((iframePos.y + imgPos.y - $(me.editor.iframe.contentDocument).scrollTop()) != resizerPos.y){
          //     posLeft = iframePos.y + imgPos.y - $(me.editor.iframe.contentDocument).scrollTop() - resizerPos.y
          // }
          if (
            iframePos.y +
              imgPos.y -
              $(
                $(me.editor.container).find("#baidu_editor_0")[0]
                  .contentDocument
              ).scrollTop() !=
            resizerPos.y
          ) {
            posLeft =
              iframePos.y +
              imgPos.y -
              $(
                $(me.editor.container).find("#baidu_editor_0")[0]
                  .contentDocument
              ).scrollTop() -
              resizerPos.y;
          }

          domUtils.setStyles(resizer, {
            width: target.width + "px",
            height: target.height + "px",
            // 'left': iframePos.x + imgPos.x - me.editor.document.body.scrollLeft - editorPos.x - parseInt(resizer.style.borderLeftWidth) + 'px',
            // 'top': iframePos.y + imgPos.y - me.editor.document.body.scrollTop - editorPos.y - parseInt(resizer.style.borderTopWidth) + 'px'
            // 'left': iframePos.x + imgPos.x - $(me.editor.iframe.contentDocument).scrollLeft() - editorPos.x - parseInt(resizer.style.borderLeftWidth) + 'px',
            // 'top': iframePos.y + imgPos.y - $(me.editor.iframe.contentDocument).scrollTop() - editorPos.y - parseInt(resizer.style.borderTopWidth) + 'px'
            left:
              iframePos.x +
              imgPos.x -
              $(
                $(me.editor.container).find("#baidu_editor_0")[0]
                  .contentDocument
              ).scrollLeft() -
              editorPos.x -
              parseInt(resizer.style.borderLeftWidth) +
              "px",
            top: posLeft + "px"
          });
        }
      };
    })();
    // $(me.resizer).on('click',function(){
    //     console.log('evnet')
    // })
    // me.container.addEventListener( 'click', function( e ) {
    //     console.log('con')
    // })
    setTimeout(function () {
      me.body.onscroll = function () {
        var scrollCover = $(me.container).find(
          "#" + me.ui.id + "_imagescale_cover"
        );
        var scrollMain = $(me.container).find("#" + me.ui.id + "_imagescale");
        if (scrollCover.length > 0) {
          scrollCover.remove();
          scrollMain.remove();
        }
      };
    }, 300);

    me.addListener("click", function (type, e) {
      var imageScale;
      if (!me.options.isResponsive && e.target.tagName == "IMG") {
        // if ( !e.target.tagName == 'IMG' ) {
        imageScale = new Scale();
        imageScale.init(me);
        // me.ui.getDom().appendChild(imageScale.resizer);
        $(me.container)
          .find(".edui-editor-iframeholder")[0]
          .appendChild(imageScale.resizer);
        imageScale.show(e.target);

        var _keyDownHandler = function (e) {
            imageScale.hide();
            // if(imageScale.target) me.selection.getRange().selectNode(imageScale.target).select();
          },
          _mouseDownHandler = function (e) {
            var ele = e.target || e.srcElement;
            if (
              ele &&
              (ele.className === undefined ||
                ele.className.indexOf("edui-editor-imagescale") == -1)
            ) {
              _keyDownHandler(e);
            }
          },
          timer;

        me.addListener("afterscaleshow", function (e) {
          me.addListener("beforekeydown", _keyDownHandler);
          me.addListener("beforemousedown", _mouseDownHandler);
          domUtils.on(document, "keydown", _keyDownHandler);
          domUtils.on(document, "mousedown", _mouseDownHandler);
          me.selection.getNative().removeAllRanges();
        });
        me.addListener("afterscalehide", function (e) {
          me.removeListener("beforekeydown", _keyDownHandler);
          me.removeListener("beforemousedown", _mouseDownHandler);
          domUtils.un(document, "keydown", _keyDownHandler);
          domUtils.un(document, "mousedown", _mouseDownHandler);
          var target = imageScale.target;
          if (target.parentNode) {
            // me.selection.getRange().selectNode(target).select();
          }
        });
      } else {
        if (imageScale && imageScale.resizer.style.display != "none")
          imageScale.hide();
      }

      // domUtils.on( document, 'mousedown', function ( evt ,e ) {
      //     if (evt.target.tagName !== 'SPAN' && imageScale && imageScale.resizer.style.display != 'none'){
      //         imageScale.hide()
      //     }
      // } );
    });
  };
  //imgScale.js end
  //ui.js start
  var baidu = baidu || {};
  baidu.editor = baidu.editor || {};
  baidu.editor.ui = {};
  //ui.js end
  // uiUtils.js start
  (function () {
    var browser = baidu.editor.browser,
      domUtils = baidu.editor.dom.domUtils;

    var magic = "$EDITORUI";
    var root = (window[magic] = {});
    var uidMagic = "ID" + magic;
    var uidCount = 0;

    var uiUtils = (baidu.editor.ui.uiUtils = {
      uid: function (obj) {
        return obj ? obj[uidMagic] || (obj[uidMagic] = ++uidCount) : ++uidCount;
      },
      hook: function (fn, callback) {
        var dg;
        if (fn && fn._callbacks) {
          dg = fn;
        } else {
          dg = function () {
            var q;
            if (fn) {
              q = fn.apply(this, arguments);
            }
            var callbacks = dg._callbacks;
            var k = callbacks.length;
            while (k--) {
              var r = callbacks[k].apply(this, arguments);
              if (q === undefined) {
                q = r;
              }
            }
            return q;
          };
          dg._callbacks = [];
        }
        dg._callbacks.push(callback);
        return dg;
      },
      createElementByHtml: function (html) {
        var el = document.createElement("div");
        el.innerHTML = html;
        el = el.firstChild;
        el.parentNode.removeChild(el);
        return el;
      },
      getViewportElement: function () {
        return browser.ie && browser.quirks
          ? document.body
          : document.documentElement;
      },
      getClientRect: function (element) {
        var bcr;
        //trace  IE6下在控制编辑器显隐时可能会报错，catch一下
        try {
          bcr = element.getBoundingClientRect();
        } catch (e) {
          bcr = { left: 0, top: 0, height: 0, width: 0 };
        }
        var rect = {
          left: Math.round(bcr.left),
          top: Math.round(bcr.top),
          height: Math.round(bcr.bottom - bcr.top),
          width: Math.round(bcr.right - bcr.left)
        };
        var doc;
        while (
          (doc = element.ownerDocument) !== document &&
          (element = domUtils.getWindow(doc).frameElement)
        ) {
          bcr = element.getBoundingClientRect();
          rect.left += bcr.left;
          rect.top += bcr.top;
        }
        rect.bottom = rect.top + rect.height;
        rect.right = rect.left + rect.width;
        return rect;
      },
      getViewportRect: function () {
        var viewportEl = uiUtils.getViewportElement();
        var width = (window.innerWidth || viewportEl.clientWidth) | 0;
        var height = (window.innerHeight || viewportEl.clientHeight) | 0;
        return {
          left: 0,
          top: 0,
          height: height,
          width: width,
          bottom: height,
          right: width
        };
      },
      setViewportOffset: function (element, offset) {
        var rect;
        var fixedLayer = uiUtils.getFixedLayer();
        if (element.parentNode === fixedLayer) {
          element.style.left = offset.left + "px";
          element.style.top = offset.top + "px";
        } else {
          domUtils.setViewportOffset(element, offset);
        }
      },
      getEventOffset: function (evt) {
        var el = evt.target || evt.srcElement;
        var rect = uiUtils.getClientRect(el);
        var offset = uiUtils.getViewportOffsetByEvent(evt);
        return {
          left: offset.left - rect.left,
          top: offset.top - rect.top
        };
      },
      getViewportOffsetByEvent: function (evt) {
        var el = evt.target || evt.srcElement;
        var frameEl = domUtils.getWindow(el).frameElement;
        var offset = {
          left: evt.clientX,
          top: evt.clientY
        };
        if (frameEl && el.ownerDocument !== document) {
          var rect = uiUtils.getClientRect(frameEl);
          offset.left += rect.left;
          offset.top += rect.top;
        }
        return offset;
      },
      setGlobal: function (id, obj) {
        root[id] = obj;
        return magic + '["' + id + '"]';
      },
      unsetGlobal: function (id) {
        delete root[id];
      },
      copyAttributes: function (tgt, src) {
        var attributes = src.attributes;
        var k = attributes.length;
        while (k--) {
          var attrNode = attributes[k];
          if (
            attrNode.nodeName != "style" &&
            attrNode.nodeName != "class" &&
            (!browser.ie || attrNode.specified)
          ) {
            tgt.setAttribute(attrNode.nodeName, attrNode.nodeValue);
          }
        }
        if (src.className) {
          tgt.className += " " + src.className;
        }
        if (src.style.cssText) {
          tgt.style.cssText += ";" + src.style.cssText;
        }
      },
      removeStyle: function (el, styleName) {
        if (el.style.removeProperty) {
          el.style.removeProperty(styleName);
        } else if (el.style.removeAttribute) {
          el.style.removeAttribute(styleName);
        } else throw "";
      },
      contains: function (elA, elB) {
        return (
          elA &&
          elB &&
          (elA === elB
            ? false
            : elA.contains
            ? elA.contains(elB)
            : elA.compareDocumentPosition(elB) & 16)
        );
      },
      startDrag: function (evt, callbacks, doc) {
        var doc = doc || document;
        var startX = evt.clientX;
        var startY = evt.clientY;
        function handleMouseMove(evt) {
          var x = evt.clientX - startX;
          var y = evt.clientY - startY;
          callbacks.ondragmove(x, y);
          if (evt.stopPropagation) {
            evt.stopPropagation();
          } else {
            evt.cancelBubble = true;
          }
        }
        if (doc.addEventListener) {
          function handleMouseUp(evt) {
            doc.removeEventListener("mousemove", handleMouseMove, true);
            doc.removeEventListener("mouseup", handleMouseMove, true);
            window.removeEventListener("mouseup", handleMouseUp, true);
            callbacks.ondragstop();
          }
          doc.addEventListener("mousemove", handleMouseMove, true);
          doc.addEventListener("mouseup", handleMouseUp, true);
          window.addEventListener("mouseup", handleMouseUp, true);
          evt.preventDefault();
        } else {
          var elm = evt.srcElement;
          elm.setCapture();
          function releaseCaptrue() {
            elm.releaseCapture();
            elm.detachEvent("onmousemove", handleMouseMove);
            elm.detachEvent("onmouseup", releaseCaptrue);
            elm.detachEvent("onlosecaptrue", releaseCaptrue);
            callbacks.ondragstop();
          }
          elm.attachEvent("onmousemove", handleMouseMove);
          elm.attachEvent("onmouseup", releaseCaptrue);
          elm.attachEvent("onlosecaptrue", releaseCaptrue);
          evt.returnValue = false;
        }
        callbacks.ondragstart();
      },
      getFixedLayer: function () {
        var layer = document.getElementById("edui_fixedlayer");
        if (layer == null) {
          layer = document.createElement("div");
          layer.id = "edui_fixedlayer";
          layer.className = "edui_fixedlayer";
          document.body.appendChild(layer);
          if (browser.ie && browser.version <= 8) {
            layer.style.position = "absolute";
            bindFixedLayer();
            setTimeout(updateFixedOffset);
          } else {
            layer.style.position = "fixed";
          }
          layer.style.left = "0";
          layer.style.top = "0";
          layer.style.width = "0";
          layer.style.height = "0";
        }
        return layer;
      },
      makeUnselectable: function (element) {
        if (browser.opera || (browser.ie && browser.version < 9)) {
          element.unselectable = "on";
          if (element.hasChildNodes()) {
            for (var i = 0; i < element.childNodes.length; i++) {
              if (element.childNodes[i].nodeType == 1) {
                uiUtils.makeUnselectable(element.childNodes[i]);
              }
            }
          }
        } else {
          if (element.style.MozUserSelect !== undefined) {
            element.style.MozUserSelect = "none";
          } else if (element.style.WebkitUserSelect !== undefined) {
            element.style.WebkitUserSelect = "none";
          } else if (element.style.KhtmlUserSelect !== undefined) {
            element.style.KhtmlUserSelect = "none";
          }
        }
      },
      // toolbas自适应
      toolbarAdjust: function (object) {
        var blockWidth = [],
          boxWidthSum = 0,
          allBoxWidthSum = 0, //所有工具box的宽度之和
          blockWidthSum = 0, //所有分块的宽度之和
          frontSubEnd = 0,
          countSum = 0; //所有工具的数量之和
        var toolbarsDom = object.getDom();

        // 区别全屏和非全屏，并对各个工具的放置做处理
        if (toolbarsDom.getAttribute("isFullScreen") !== "fullScreen") {
          // if($(toolbarsDom).parents('.formMSG').width() < window.innerWidth){
          if (window.innerWidth > 715) {
            var contentWidth = 0;
            for (var i = 0; i < object.items.length; i++) {
              $(toolbarsDom)
                .find("#" + object.items[i].idName)
                .css("width", object.items[i].initWidth);
              contentWidth += object.items[i].initWidth;
            }
            // if($(toolbarsDom).parent().width() === 0){
            //     $(toolbarsDom).css('width',"760px")
            // }else{
            // $(toolbarsDom).css('width',contentWidth)
            // console.log(editor.options.ueOuterWidth)
            var toolbarsWidth;
            if (editor.options.ueOuterWidth) {
              toolbarsWidth = editor.options.ueOuterWidth;
            } else {
              toolbarsWidth = $(toolbarsDom).parent().width();
            }
            $(toolbarsDom).css("width", toolbarsWidth);
            // }
          } else {
            if (window.innerWidth > 332) {
              $(toolbarsDom)
                .parents(".formMSG")
                .css("width", window.innerWidth);
              // $(toolbarsDom).css('width',window.innerWidth);
              $(toolbarsDom).css(
                "width",
                $(toolbarsDom).parents("#content").css("width")
              );
            } else {
              $(toolbarsDom).parents(".formMSG").css("width", "332px");
              $(toolbarsDom).css("width", "330px");
            }
          }

          // 由于全屏和非全屏是不断在切换的，所以采取的思路是：有全屏切换到非全屏时，将所有工具box都append到include类的div里面，
          // 再根据优先级不断地显示出来。而不是用直接根据宽度把显示不了的append到include类里面，这样的话有全屏切换到非全屏就会有问题。
          for (var i = 0; i < object.items.length; i++) {
            object.items[i].showIconNum = 0;
            // blockWidth[i] = $(toolbarsDom).find('.toolbarsBlock')[i].offsetWidth;
            blockWidth[i] = $($(toolbarsDom).find(".toolbarsBlock")[i]).width();
            object.items[i].boxWidthSum = 0;
            // 将所有的工具tool都append到.include类里面
            // if($('#'+object.items[i].idName).children('.edui-box').length){
            //    $('#'+object.items[i].idName).children('.edui-box').appendTo($('#'+object.items[i].idName).find('.include'));
            //    $('#'+object.items[i].idName).children('.edui-box').addClass('include_box')
            // }
            if (
              $("#" + object.id)
                .find("#" + object.items[i].idName)
                .children(".edui-box").length
            ) {
              $("#" + object.id)
                .find("#" + object.items[i].idName)
                .children(".edui-box")
                .appendTo(
                  $("#" + object.id)
                    .find("#" + object.items[i].idName)
                    .find(".include")
                );
              $("#" + object.id)
                .find("#" + object.items[i].idName)
                .children(".edui-box")
                .addClass("include_box");
            }

            for (var j = 0; j < object.items[i].toolbarsClass.length; j++) {
              var boxDom = object.items[i].toolbarsClass[j].getDom();
              if ($(boxDom).hasClass("showIcon")) {
                $(boxDom).removeClass("showIcon");
              }
              $(boxDom).addClass("include_box");
              $(boxDom).addClass("priority" + boxDom.getAttribute("priority"));
            }
          }
          // 当非全屏情况下无需自适应的时候用下面注释的代码
          // for(var i=1;i<=countSum;i++){
          //     var newBlockWidthSum = 0;
          //     var oldBlockWidthSum = 0;
          //     var nextBoxShow = $(object.getDom()).find('.priority'+(i));    //下一个需要显示的box
          //     var nextBoxShowBlock = nextBoxShow.parents('.toolbarsBlock');       //下一个需要显示的box所在的分块
          //     for(var j=0;j<object.items.length;j++){
          //         if(nextBoxShowBlock.attr('id') === object.items[j].idName){
          //             var newBlockWidthSum = object.items[j].initWidth;
          //         }
          //     }
          //     for(var j=0;j<nextBoxShowBlock.children('.edui-box').length;j++){
          //         oldBlockWidthSum += (nextBoxShowBlock.children('.edui-box')[j].offsetWidth + 8);
          //     }
          //     if(oldBlockWidthSum+10<=newBlockWidthSum){
          //         nextBoxShow.appendTo(nextBoxShowBlock);
          //         nextBoxShow.addClass('showIcon');
          //         if(nextBoxShow.hasClass('include_box')){
          //             nextBoxShow.removeClass('include_box');
          //         }
          //     }
          // }
          // for(var i=0;i<object.items.length;i++){
          //     var includeBox = $(toolbarsDom.getElementsByClassName('toolbarsBlock')[i]).find('.include_box');
          //     if(!includeBox.length){
          //         $(toolbarsDom).find('#'+object.items[i].idName+' .blockSet').css('pointer-events','none');
          //         $(toolbarsDom).find('#'+object.items[i].idName+' .blockArrow').css('display','none');
          //     }else{
          //         $(toolbarsDom).find('#'+object.items[i].idName+' .blockSet').css('pointer-events','');
          //         $(toolbarsDom).find('#'+object.items[i].idName+' .blockArrow').css('display','');
          //     }
          // }
        } else {
          if ($(object.getDom()).parents("#answer").length) {
            $(toolbarsDom).css(
              "width",
              Math.ceil(editor2.container.offsetWidth * 0.8)
            );
          } else {
            $(toolbarsDom).css(
              "width",
              // origin Math.ceil((editor.container.offsetWidth - 112) * 0.8)
              Math.min(
                Math.ceil((editor.container.offsetWidth - 112) * 0.8),
                1200
              )
            );
          }
          // $(toolbarsDom).css('width',Math.ceil(editor.container.offsetWidth * 0.8));
        }
        //切换全屏的时候计算icon的显示或者隐藏
        var showMax = 0, //获取显示的icon中优先级最小的一个
          showAllIconSum = 0; //计算显示的icon的宽度之和
        var showIcon = $(toolbarsDom).find(".showIcon");
        for (var i = 0; i < showIcon.length; i++) {
          $(showIcon[i]).removeClass("showIcon");
          $(showIcon[i]).addClass("include_box");
          $(showIcon[i]).appendTo(
            $(showIcon[i]).parents(".toolbarsBlock").find(".include")
          );
        }
        for (var i = 0; i < object.items.length; i++) {
          $($(toolbarsDom).find(".toolbarsBlock")[i]).css("width", "66px");
          countSum += object.items[i].count;
          // 初始状态：弹层均为收起；全屏和非全屏切换、窗口缩放时弹层也需收起
          $(toolbarsDom)
            .find("#" + object.items[i].idName + " .include")
            .css("display", "none");
          $(toolbarsDom)
            .find("#" + object.items[i].idName + " .blockArrow")
            .removeClass("active");
          $(toolbarsDom)
            .find("#" + object.items[i].idName + " .blockName p")
            .css("color", "");
        }
        showAllIconSum += 4; //添加四条边框的宽度和

        var newBlockWidthSum;
        // for(var i=1;i<=countSum;i++){
        for (var i = 1; i <= 37; i++) {
          newBlockWidthSum = 0;
          var perBlockWidth = 0;
          showMax = i;
          for (
            var j = 0;
            j < $(object.getDom()).find(".toolbarsBlock").length;
            j++
          ) {
            // console.log($(object.getDom()).find('.toolbarsBlock')[j].offsetWidth + ',' + $($(object.getDom()).find('.toolbarsBlock')[j]).width())
            // newBlockWidthSum += parseInt($(object.getDom()).find('.toolbarsBlock')[j].offsetWidth);
            newBlockWidthSum += $(
              $(object.getDom()).find(".toolbarsBlock")[j]
            ).width();
          }
          var nextBoxShow = $(object.getDom()).find(".priority" + showMax); //下一个需要显示的box
          var nextBoxShowBlock = nextBoxShow.parents(".toolbarsBlock"); //下一个需要显示的box所在的分块
          if (showMax === 2) {
            nextBoxShow.css("width", "70px");
          }
          if (showMax === 3) {
            nextBoxShow.css("width", "56px");
          }
          // console.log($(toolbarsDom).width()+','+newBlockWidthSum)
          // if(toolbarsDom.offsetWidth>=newBlockWidthSum){
          if ($(toolbarsDom).width() >= newBlockWidthSum) {
            nextBoxShow.appendTo(nextBoxShowBlock);

            nextBoxShow.addClass("showIcon");
            if (nextBoxShow.hasClass("include_box")) {
              nextBoxShow.removeClass("include_box");
            }
            // 优先级相同的话需要double，例如上标和下标、撤销和恢复等等
            // if(nextBoxShowBlock.width() > nextBoxShowBlock)
            var showIconWidthSum = 0;
            for (
              var n = 0;
              n < nextBoxShowBlock.find(".showIcon").length;
              n++
            ) {
              // showIconWidthSum += (nextBoxShowBlock.find('.showIcon')[n].offsetWidth+8);
              var showIconWidth = 0;
              if ($(nextBoxShowBlock.find(".showIcon")[n]).width()) {
                showIconWidth = $(
                  nextBoxShowBlock.find(".showIcon")[n]
                ).width();
              } else {
                if (
                  $(nextBoxShowBlock.find(".showIcon")[n])
                    .find(".edui-arrow")
                    .width()
                ) {
                  showIconWidth =
                    $(nextBoxShowBlock.find(".showIcon")[n])
                      .find(".edui-icon")
                      .width() +
                    $(nextBoxShowBlock.find(".showIcon")[n])
                      .find(".edui-arrow")
                      .width() +
                    3;
                } else {
                  showIconWidth =
                    $(nextBoxShowBlock.find(".showIcon")[n])
                      .find(".edui-icon")
                      .width() + 2;
                }
              }
              showIconWidthSum += showIconWidth + 8;
            }

            if (nextBoxShow.length === 2) {
              if (showIconWidthSum < 66) {
                nextBoxShowBlock.css("width", "66px");
              } else {
                nextBoxShowBlock.css("width", showIconWidthSum + 1);
              }
            } else if (nextBoxShow.length === 1) {
              if (showIconWidthSum < 66) {
                nextBoxShowBlock.css("width", "66px");
              } else {
                nextBoxShowBlock.css("width", showIconWidthSum + 1);
              }
            }

            var newBlockWidthSum_1 = 0;
            for (
              var j = 0;
              j < $(object.getDom()).find(".toolbarsBlock").length;
              j++
            ) {
              // newBlockWidthSum_1 += parseInt($(object.getDom()).find('.toolbarsBlock')[j].offsetWidth);
              newBlockWidthSum_1 += parseInt(
                $($(object.getDom()).find(".toolbarsBlock")[j]).width()
              );
            }

            // box显示出来后，如果超过工具栏的总宽度需要去掉
            // if(newBlockWidthSum_1>object.getDom().offsetWidth){
            if (newBlockWidthSum_1 > $(object.getDom()).width()) {
              var noUseWidth = 0;
              var nextBoxShowWidth;
              if (nextBoxShow.width()) {
                if (nextBoxShow.length === 2) {
                  nextBoxShowWidth = 2 * (nextBoxShow.width() + 8);
                } else {
                  nextBoxShowWidth = nextBoxShow.width() + 8;
                }
              } else {
                if (nextBoxShow.length === 2) {
                  if (nextBoxShow.find(".edui-arrow").width()) {
                    nextBoxShowWidth =
                      2 *
                      (nextBoxShow.find(".edui-icon").width() +
                        nextBoxShow.find(".edui-arrow").width() +
                        3 +
                        8);
                  } else {
                    nextBoxShowWidth =
                      2 * (nextBoxShow.find(".edui-icon").width() + 2 + 8);
                  }
                  // nextBoxShowWidth = 2 * (nextBoxShow.width()+8);
                } else {
                  nextBoxShowWidth = nextBoxShow.width() + 8;
                }
              }
              if (!nextBoxShow.hasClass("include_box")) {
                nextBoxShow.addClass("include_box");
              }
              nextBoxShow.appendTo(nextBoxShow.siblings(".include"));
              nextBoxShow.removeClass("showIcon");
              for (
                var n = 0;
                n < nextBoxShowBlock.find(".showIcon").length;
                n++
              ) {
                var noShowIconWidth = 0;
                if ($(nextBoxShowBlock.find(".showIcon")[n]).width()) {
                  noShowIconWidth = $(
                    nextBoxShowBlock.find(".showIcon")[n]
                  ).width();
                } else {
                  if (
                    $(nextBoxShowBlock.find(".showIcon")[n])
                      .find(".edui-arrow")
                      .width()
                  ) {
                    noShowIconWidth =
                      $(nextBoxShowBlock.find(".showIcon")[n])
                        .find(".edui-icon")
                        .width() +
                      $(nextBoxShowBlock.find(".showIcon")[n])
                        .find(".edui-arrow")
                        .width() +
                      3;
                  } else {
                    noShowIconWidth =
                      $(nextBoxShowBlock.find(".showIcon")[n])
                        .find(".edui-icon")
                        .width() + 2;
                  }
                }
                // noUseWidth += (nextBoxShowBlock.find('.showIcon')[n].offsetWidth+8)
                noUseWidth += noShowIconWidth + 8;
              }
              if (noUseWidth === 0 || noUseWidth < 66) {
                nextBoxShowBlock.css("width", "66px");
                $(object.getDom()).css(
                  "width",
                  newBlockWidthSum_1 - nextBoxShowWidth + 66 + 1 + "px"
                );
              } else {
                nextBoxShowBlock.css("width", noUseWidth + 1);
                $(object.getDom()).css(
                  "width",
                  newBlockWidthSum_1 - nextBoxShowWidth + 1 + "px"
                );
              }
              break;
            }
          } else {
            $(toolbarsDom).css("width", "330px");
          }
        }
        // 当toolbars的宽度大于所有分块的宽度和并且所有工具已经显示的时候，toolbars宽度需要调整
        // if(toolbarsDom.offsetWidth>newBlockWidthSum_1 && $(toolbarsDom).find('.include_box').length == 0){
        if (
          $(toolbarsDom).width() > newBlockWidthSum_1 &&
          $(toolbarsDom).find(".include_box").length == 0
        ) {
          $(toolbarsDom).css("width", newBlockWidthSum_1);
        }

        for (var i = 0; i < object.items.length; i++) {
          // 当分块只能放一个功能的时候，也将这个功能隐藏
          if (
            $(toolbarsDom.getElementsByClassName("toolbarsBlock")[i]).find(
              ".showIcon"
            ).length === 1
          ) {
            $(toolbarsDom.getElementsByClassName("toolbarsBlock")[i])
              .children(".edui-box")
              .removeClass("showIcon");
            $(toolbarsDom.getElementsByClassName("toolbarsBlock")[i])
              .children(".edui-box")
              .addClass("include_box");
          }

          var includeBox = $(
            toolbarsDom.getElementsByClassName("toolbarsBlock")[i]
          ).find(".include_box");
          if (includeBox.length) {
            includeBox.appendTo(
              $(toolbarsDom).find("#" + object.items[i].idName + " .include")
            );
            $(toolbarsDom)
              .find("#" + object.items[i].idName + " .blockSet")
              .css("pointer-events", "");
            $(toolbarsDom)
              .find("#" + object.items[i].idName + " .blockArrow")
              .css("display", "");
          } else {
            $(toolbarsDom)
              .find("#" + object.items[i].idName + " .blockSet")
              .css("pointer-events", "none");
            $(toolbarsDom)
              .find("#" + object.items[i].idName + " .blockArrow")
              .css("display", "none");
          }

          if (
            !$(toolbarsDom.getElementsByClassName("toolbarsBlock")[i]).children(
              ".edui-box"
            ).length
          ) {
            $(toolbarsDom.getElementsByClassName("toolbarsBlock")[i]).addClass(
              "toolbarsBlockBg"
            );
          } else {
            if (
              $(
                toolbarsDom.getElementsByClassName("toolbarsBlock")[i]
              ).hasClass("toolbarsBlockBg")
            ) {
              $(
                toolbarsDom.getElementsByClassName("toolbarsBlock")[i]
              ).removeClass("toolbarsBlockBg");
            }
          }
        }
        // 添加事件
        var blockSet = $(object.getDom()).find(".blockSet");
        var boxInclude = $(object.getDom()).find(".include");
        var toolbarsBlockE = $(object.getDom()).find(".toolbarsBlock");
        for (var i = 0; i < blockSet.length; i++) {
          blockSet[i].setAttribute("index", i);
          if ($(boxInclude[i]).children().length) {
            toolbarsBlockE[i].onclick = function (e) {
              if (!$(e.target).hasClass("edui-box")) {
                //点击各项功能工具时不触发
                var e = e || window.event;
                var This = object;
                var $index = $(this).find(".blockSet").attr("index");
                for (var j = 0; j < boxInclude.length; j++) {
                  if ($index == j) {
                    // 选择高亮样式
                    if ($(toolbarsBlockE[j]).hasClass("toolbarsBlockBg_show")) {
                      $(toolbarsBlockE[j]).removeClass("toolbarsBlockBg_show");
                    } else {
                      $(toolbarsBlockE[j]).addClass("toolbarsBlockBg_show");
                    }
                    continue;
                  }
                  boxInclude[j].style.display = "none";
                  $(blockSet[j]).find(".blockArrow").removeClass("active");
                  $(blockSet[j]).find(".blockName p").css("color", "");
                  $(toolbarsBlockE[j]).removeClass("toolbarsBlockBg_show");
                }
                var includeWidth = 0;
                if (!$(this).find(".blockArrow").hasClass("active")) {
                  $(this).find(".blockArrow").addClass("active");
                  $(this).find(".blockName p").css("color", "#3680D9");
                  $(this).find(".include").css("display", "block");
                  var includeChildLen = $(this).find(".include").children()
                    .length;
                  // for(var i=0;i<includeChildLen;i++){
                  //     includeWidth += ($(this).parent().find('.include').children()[i].offsetWidth +8);
                  // }
                  // if($(this).width() > includeWidth){
                  //     var includeLeft = ($(this).width() - includeWidth)/2 + 'px';
                  //     $(this).parent().find('.include').css('left',includeLeft);
                  // }else{
                  //     var halfIncludeWidth = 0;
                  //     for(var i=0;i<$(this).parent().find('.include').children().length;i++){
                  //         if(halfIncludeWidth < includeWidth/2){
                  //             halfIncludeWidth += ($(this).parent().find('.include').children()[i].offsetWidth +8);
                  //         }
                  //     }

                  //     $(this).parent().find('.include').css('width',parseInt(halfIncludeWidth)+'px');
                  //     $(this).parent().find('.include').css('left',(($(this).parent().width())-parseInt(halfIncludeWidth))/2 +'px');
                  // }
                  // if($(this).parent().attr('id') === 'caozuo'){
                  //     $(this).parent().find('.include').css('left','-6px');
                  // }
                  // 弹层排列规则
                  var includeBoxColumnNum = 2; // 两列
                  var includeBoxItemWidth =
                    $(this).find(".include").children()[0].offsetWidth || 23;
                  if (includeChildLen < includeBoxColumnNum) {
                    includeWidth = includeBoxItemWidth;
                  } else {
                    for (var j = 1; j < includeChildLen; j++) {
                      // 获取宽度最大的一项
                      if (
                        $(this).find(".include").children()[j].offsetWidth >
                        includeBoxItemWidth
                      ) {
                        includeBoxItemWidth = $(this)
                          .find(".include")
                          .children()[j].offsetWidth;
                      }
                    }
                    var includeBoxColumnItemMarginLeft = 13;
                    includeWidth =
                      includeBoxItemWidth * includeBoxColumnNum +
                      includeBoxColumnItemMarginLeft;
                  }
                  $(this).find(".include").css("width", includeWidth);
                  // if(includeChildLen <= 5){
                  //     for(var j=0;j<includeChildLen;j++){
                  //         // includeWidth += ($(this).find('.include').children()[j].offsetWidth +8);
                  //         includeWidth += ($($(this).find('.include').children()[j]).width() +8);
                  //     }
                  //     if($(this).width() > includeWidth){
                  //         $(this).find('.include').css('width',$(this).width()-4);
                  //     }else{
                  //         $(this).find('.include').css('width',includeWidth);
                  //     }
                  //     // if((editor.body.offsetWidth - $(this).find('.include').offset().left) < includeWidth){
                  //     //     $(this).find('.include').css('left',($(this).width()-includeWidth-6)+'px');    //减去padding和border的值，double
                  //     // }
                  // }else if(5 < includeChildLen && includeChildLen <= 8){
                  //     for(var j=0;j<4;j++){
                  //         // includeWidth += ($(this).find('.include').children()[j].offsetWidth +8);
                  //         includeWidth += ($($(this).find('.include').children()[j]).width() +8);
                  //     }
                  //     $(this).find('.include').css('width',includeWidth+1);
                  //     $(this).find('.include').css('left',0);
                  //     // console.log(includeWidth)
                  // }else if(8 < includeChildLen && includeChildLen <= 10){
                  //     for(var j=0;j<5;j++){
                  //         // includeWidth += ($(this).find('.include').children()[j].offsetWidth +8);
                  //         includeWidth += ($($(this).find('.include').children()[j]).width() +8);
                  //     }
                  //     $(this).find('.include').css('width',includeWidth+1);
                  //     // if((editor.body.offsetWidth - $(this).find('.include').offset().left) < includeWidth){
                  //     if(($(editor.body).width() - $(this).find('.include').offset().left) < includeWidth){
                  //         $(this).find('.include').css('left',($(this).width()-includeWidth-6)+'px');    //减去padding和border的值，double
                  //     }
                  // }else{
                  //     for(var j=0;j<6;j++){
                  //         // includeWidth += ($(this).find('.include').children()[j].offsetWidth +8);
                  //         includeWidth += ($($(this).find('.include').children()[j]).width() +8);
                  //     }
                  //     $(this).find('.include').css('width',includeWidth+1);
                  // }
                } else {
                  $(this).find(".blockArrow").removeClass("active");
                  $(this).find(".blockName p").css("color", "");
                  $(this).find(".include").css("display", "none");
                }
                e.stopPropagation();

                $(this).find(".include")[0].onclick = function (ev) {
                  ev.stopPropagation();
                };
                document.onclick = function () {
                  // 清除高亮样式
                  var tollbarShowItemDom = $(toolbarsDom).find(
                    ".toolbarsBlock.toolbarsBlockBg_show"
                  );
                  if (tollbarShowItemDom) {
                    tollbarShowItemDom.removeClass("toolbarsBlockBg_show");
                  }
                  if ($(toolbarsDom).find(".blockArrow").hasClass("active")) {
                    $(toolbarsDom).find(".blockArrow").removeClass("active");
                    $(toolbarsDom).find(".blockName p").css("color", "");
                    $(toolbarsDom).find(".include").css("display", "none");
                  }
                };
              }
            };
          } else {
            toolbarsBlockE[i].onclick = null;
          }
        }

        for (var i = 0; i < object.items.length; i++) {
          if (
            $($(toolbarsDom).find(".toolbarsBlock")[i]).find(".showIcon")
              .length == 0
          ) {
            $($(toolbarsDom).find(".toolbarsBlock")[i]).css("width", "66px");
          }
        }
        // $(object.getDom()).find('.edui-editor-toolbarbox').click()
        UE.editor.addListener("ready", function () {
          if (window.frameElement) {
            domUtils.on(
              window.frameElement.contentWindow.document,
              "click",
              function (evt) {
                if ($(object.getDom()).find(".blockArrow").hasClass("active")) {
                  $(object.getDom()).find(".blockArrow").removeClass("active");
                  $(object.getDom()).find(".blockName p").css("color", "");
                  $(object.getDom())
                    .parent()
                    .find(".include")
                    .css("display", "none");
                }
                // 选择高亮样式
                if (
                  $(object.getDom())
                    .find(".toolbarsBlockBg")
                    .hasClass("toolbarsBlockBg_show")
                ) {
                  $(object.getDom())
                    .find(".toolbarsBlockBg")
                    .removeClass("toolbarsBlockBg_show");
                }
              }
            );
          }
          domUtils.on(UE.editor.document, "click", function (evt) {
            if ($(object.getDom()).find(".blockArrow").hasClass("active")) {
              $(object.getDom()).find(".blockArrow").removeClass("active");
              $(object.getDom()).find(".blockName p").css("color", "");
              $(object.getDom())
                .parent()
                .find(".include")
                .css("display", "none");
            }
            // 选择高亮样式
            if (
              $(object.getDom())
                .find(".toolbarsBlockBg")
                .hasClass("toolbarsBlockBg_show")
            ) {
              $(object.getDom())
                .find(".toolbarsBlockBg")
                .removeClass("toolbarsBlockBg_show");
            }
          });
        });
      }
    });
    function updateFixedOffset() {
      var layer = document.getElementById("edui_fixedlayer");
      uiUtils.setViewportOffset(layer, {
        left: 0,
        top: 0
      });
    }
    function bindFixedLayer(adjOffset) {
      domUtils.on(window, "scroll", updateFixedOffset);
      domUtils.on(
        window,
        "resize",
        baidu.editor.utils.defer(updateFixedOffset, 0, true)
      );
    }
  })();
  // uiUtils.js end
  // UIBase.js start
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      EventBase = baidu.editor.EventBase,
      UIBase = (baidu.editor.ui.UIBase = function () {});

    UIBase.prototype = {
      className: "",
      uiName: "",
      initOptions: function (options) {
        var me = this;
        for (var k in options) {
          me[k] = options[k];
        }
        this.id = this.id || "edui" + uiUtils.uid();
      },
      initUIBase: function () {
        this._globalKey = utils.unhtml(uiUtils.setGlobal(this.id, this));
      },
      render: function (holder) {
        var html = this.renderHtml();
        var el = uiUtils.createElementByHtml(html);
        var seatEl = this.getDom();
        if (seatEl != null) {
          seatEl.parentNode.replaceChild(el, seatEl);
          uiUtils.copyAttributes(el, seatEl);
        } else {
          if (typeof holder == "string") {
            holder = document.getElementById(holder);
          }
          holder = holder || uiUtils.getFixedLayer();
          holder.appendChild(el);
        }
        this.postRender();
      },
      getDom: function (name) {
        if (!name) {
          return document.getElementById(this.id);
        } else {
          return document.getElementById(this.id + "_" + name);
        }
      },
      postRender: function () {
        this.fireEvent("postrender");
      },
      getHtmlTpl: function () {
        return "";
      },
      formatHtml: function (tpl) {
        var prefix = "edui-" + this.uiName;
        return tpl
          .replace(/##/g, this.id)
          .replace(/%%-/g, this.uiName ? prefix + "-" : "")
          .replace(/%%/g, (this.uiName ? prefix : "") + " " + this.className)
          .replace(/\$\$/g, this._globalKey);
      },
      renderHtml: function () {
        return this.formatHtml(this.getHtmlTpl());
      },
      dispose: function () {
        var box = this.getDom();
        if (box) baidu.editor.dom.domUtils.remove(box);
        uiUtils.unsetGlobal(this.id);
      }
    };
    utils.inherits(UIBase, EventBase);
  })();
  // UIBase.js end
  // Separator.js start
  //分隔符 '|' ,用来标识分割button区域
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      Separator = (baidu.editor.ui.Separator = function (options) {
        this.initOptions(options);
        this.initSeparator();
      });
    Separator.prototype = {
      uiName: "separator",
      initSeparator: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return '<div id="##" class="edui-box %%"></div>';
      }
    };
    utils.inherits(Separator, UIBase);
  })();
  // Separator.js end
  // NewlineSeparator.js start
  //分隔符'||', 表现为空元素，实现button区域换行
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      NewlineSeparator = (baidu.editor.ui.NewlineSeparator = function (
        options
      ) {
        this.initOptions(options);
        this.initNewlineSeparator();
      });
    NewlineSeparator.prototype = {
      uiName: "newlineseparator",
      initNewlineSeparator: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return '<div id="##" class="edui-box %%" style="display:block !important;"></div>';
      }
    };
    utils.inherits(NewlineSeparator, UIBase);
  })();
  // NewlineSeparator.js end
  // Mask.js start
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      UIBase = baidu.editor.ui.UIBase,
      uiUtils = baidu.editor.ui.uiUtils;

    var Mask = (baidu.editor.ui.Mask = function (options) {
      this.initOptions(options);
      this.initUIBase();
    });
    Mask.prototype = {
      getHtmlTpl: function () {
        return '<div id="##" class="edui-mask %%" onmousedown="return $$._onMouseDown(event, this);"></div>';
      },
      postRender: function () {
        var me = this;
        domUtils.on(window, "resize", function () {
          setTimeout(function () {
            if (!me.isHidden()) {
              me._fill();
            }
          });
        });
      },
      show: function (zIndex) {
        this._fill();
        this.getDom().style.display = "";
        this.getDom().style.zIndex = zIndex;
      },
      hide: function () {
        this.getDom().style.display = "none";
        this.getDom().style.zIndex = "";
      },
      isHidden: function () {
        return this.getDom().style.display == "none";
      },
      _onMouseDown: function () {
        return false;
      },
      _fill: function () {
        var el = this.getDom();
        var vpRect = uiUtils.getViewportRect();
        el.style.width = vpRect.width + "px";
        el.style.height = vpRect.height + "px";
      }
    };
    utils.inherits(Mask, UIBase);
  })();
  // Mask.js end
  // Stateful.js start
  (function () {
    var browser = baidu.editor.browser,
      domUtils = baidu.editor.dom.domUtils,
      uiUtils = baidu.editor.ui.uiUtils;

    var TPL_STATEFUL =
      'onmousedown="$$.Stateful_onMouseDown(event, this);"' +
      ' onmouseup="$$.Stateful_onMouseUp(event, this);"' +
      (browser.ie
        ? ' onmouseenter="$$.Stateful_onMouseEnter(event, this);"' +
          ' onmouseleave="$$.Stateful_onMouseLeave(event, this);"'
        : ' onmouseover="$$.Stateful_onMouseOver(event, this);"' +
          ' onmouseout="$$.Stateful_onMouseOut(event, this);"');

    baidu.editor.ui.Stateful = {
      alwalysHoverable: false,
      Stateful_init: function () {
        this._Stateful_dGetHtmlTpl = this.getHtmlTpl;
        this.getHtmlTpl = this.Stateful_getHtmlTpl;
      },
      Stateful_getHtmlTpl: function () {
        var tpl = this._Stateful_dGetHtmlTpl();
        // 使用function避免$转义
        return tpl.replace(/stateful/g, function () {
          return TPL_STATEFUL;
        });
      },
      Stateful_onMouseEnter: function (evt, el) {
        if (!this.isDisabled() || this.alwalysHoverable) {
          if (
            !(
              this.className == "edui-for-insertunorderedlist" ||
              this.className == "edui-for-insertorderedlist"
            )
          ) {
            this.addState("hover");
            this.fireEvent("over");
          }
        }
      },
      Stateful_onMouseLeave: function (evt, el) {
        if (!this.isDisabled() || this.alwalysHoverable) {
          this.removeState("hover");
          this.removeState("active");
          this.fireEvent("out");
        }
      },
      Stateful_onMouseOver: function (evt, el) {
        var rel = evt.relatedTarget;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.Stateful_onMouseEnter(evt, el);
        }
      },
      Stateful_onMouseOut: function (evt, el) {
        var rel = evt.relatedTarget;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.Stateful_onMouseLeave(evt, el);
        }
      },
      Stateful_onMouseDown: function (evt, el) {
        if (!this.isDisabled()) {
          if (
            !(
              this.className == "edui-for-insertunorderedlist" ||
              this.className == "edui-for-insertorderedlist"
            )
          ) {
            this.addState("active");
          }
        }
      },
      Stateful_onMouseUp: function (evt, el) {
        if (!this.isDisabled()) {
          this.removeState("active");
        }
      },
      Stateful_postRender: function () {
        if (this.disabled && !this.hasState("disabled")) {
          this.addState("disabled");
        }
      },
      hasState: function (state) {
        return domUtils.hasClass(this.getStateDom(), "edui-state-" + state);
      },
      addState: function (state) {
        if (!this.hasState(state)) {
          this.getStateDom() &&
            (this.getStateDom().className += " edui-state-" + state);
        }
      },
      removeState: function (state) {
        if (this.hasState(state)) {
          domUtils.removeClasses(this.getStateDom(), ["edui-state-" + state]);
        }
      },
      getStateDom: function () {
        return this.getDom("state");
      },
      isChecked: function () {
        return this.hasState("checked");
      },
      setChecked: function (checked) {
        if (!this.isDisabled() && checked) {
          this.addState("checked");
        } else {
          this.removeState("checked");
        }
      },
      isDisabled: function () {
        return this.hasState("disabled");
      },
      setDisabled: function (disabled) {
        if (disabled) {
          this.removeState("hover");
          this.removeState("checked");
          this.removeState("active");
          this.addState("disabled");
        } else {
          this.removeState("disabled");
        }
      }
    };
  })();
  // Stateful.js end
  //Popup.js start
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      domUtils = baidu.editor.dom.domUtils,
      Stateful = baidu.editor.ui.Stateful,
      UIBase = baidu.editor.ui.UIBase,
      Popup = (baidu.editor.ui.Popup = function (options) {
        this.initOptions(options);
        this.initPopup();
      });

    var allPopups = [];
    function closeAllPopup(el) {
      var newAll = [];
      for (var i = 0; i < allPopups.length; i++) {
        var pop = allPopups[i];
        if (!pop.isHidden()) {
          if (pop.queryAutoHide(el) !== false) {
            pop.hide();
          }
        }
      }
    }

    Popup.postHide = closeAllPopup;

    var ANCHOR_CLASSES = [
      "edui-anchor-topleft",
      "edui-anchor-topright",
      "edui-anchor-bottomleft",
      "edui-anchor-bottomright"
    ];
    Popup.prototype = {
      SHADOW_RADIUS: 5,
      content: null,
      _hidden: false,
      autoRender: true,
      canSideLeft: true,
      canSideUp: true,
      initPopup: function () {
        this.initUIBase();
        allPopups.push(this);
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-popup %%">' +
          ' <div id="##_body" class="edui-popup-body">' +
          // ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: white;" frameborder="0" width="100%" height="100%" src="javascript:"></iframe>' +
          ' <div class="edui-shadow"></div>' +
          ' <div id="##_content" class="edui-popup-content">' +
          this.getContentHtmlTpl() +
          "  </div>" +
          " </div>" +
          "</div>"
        );
      },
      getContentHtmlTpl: function () {
        if (this.content) {
          if (typeof this.content == "string") {
            return this.content;
          }
          return this.content.renderHtml();
        } else {
          return "";
        }
      },
      _UIBase_postRender: UIBase.prototype.postRender,
      postRender: function () {
        if (this.content instanceof UIBase) {
          this.content.postRender();
        }
        this.fireEvent("postRenderAfter");
        this.hide(true);
        this._UIBase_postRender();
      },
      _doAutoRender: function () {
        if (!this.getDom() && this.autoRender) {
          this.render();
        }
      },
      mesureSize: function () {
        var box = this.getDom("content");
        return uiUtils.getClientRect(box);
      },
      fitSize: function () {
        var popBodyEl = this.getDom("body");
        popBodyEl.style.width = "";
        popBodyEl.style.height = "";
        var size = this.mesureSize();
        popBodyEl.style.width = size.width + "px";
        popBodyEl.style.height = size.height + "px";
        return size;
      },
      showAnchor: function (element, hoz) {
        this.showAnchorRect(uiUtils.getClientRect(element), hoz);
      },
      showAnchorRect: function (rect, hoz) {
        //弹窗与上方按钮相隔的像素
        var offsetTop = 3;

        this._doAutoRender();
        var vpRect = uiUtils.getViewportRect();
        this._show();
        var popSize = this.fitSize();

        var sideLeft, sideUp, left, top;
        if (hoz) {
          sideLeft =
            this.canSideLeft &&
            rect.right + popSize.width > vpRect.right &&
            rect.left > popSize.width;
          sideUp =
            this.canSideUp &&
            rect.top + popSize.height > vpRect.bottom &&
            rect.bottom > popSize.height;
          left = sideLeft ? rect.left - popSize.width : rect.right;
          top = sideUp ? rect.bottom - popSize.height : rect.top;
        } else {
          sideLeft =
            this.canSideLeft &&
            rect.right + popSize.width > vpRect.right &&
            rect.left > popSize.width;
          sideUp =
            this.canSideUp &&
            rect.top + popSize.height > vpRect.bottom &&
            rect.bottom > popSize.height;
          left = sideLeft ? rect.right - popSize.width : rect.left;
          top = sideUp ? rect.top - popSize.height : rect.bottom;
        }

        var iframeLeft;
        if (this.editor && this.editor.iframe) {
          var iframeRect = uiUtils.getClientRect(this.editor.iframe);
          var iframeTop = iframeRect.top;
          iframeLeft = iframeRect.left;
          var ifremeHeight = this.editor.iframe.clientHeight;
          //最大top值不能越过编辑区
          top > iframeTop + ifremeHeight && (top = iframeTop + ifremeHeight);
        }

        //横向滚动条的偏移
        var offsetLeft =
          rect.left < 0 ? (iframeLeft ? iframeLeft : 0) - rect.left : 0;

        var popEl = this.getDom();
        // 对"客服"做处理，防止部分弹层被遮住
        if ($(popEl).hasClass("edui-for-qqservice")) {
          uiUtils.setViewportOffset(popEl, {
            left: left + offsetLeft,
            top:
              $(this.editor.container).find("#edui1_iframeholder").offset()
                .top + offsetTop
          });
        } else if ($(popEl).hasClass("edui-for-hoverimage")) {
          uiUtils.setViewportOffset(popEl, {
            left: left + offsetLeft - 66,
            top:
              $(this.editor.container).find("#edui1_iframeholder").offset()
                .top + offsetTop
          });
        } else {
          uiUtils.setViewportOffset(popEl, {
            left: left + offsetLeft,
            top: top + offsetTop
          });
        }
        domUtils.removeClasses(popEl, ANCHOR_CLASSES);
        popEl.className +=
          " " + ANCHOR_CLASSES[(sideUp ? 1 : 0) * 2 + (sideLeft ? 1 : 0)];
        if (this.editor) {
          popEl.style.zIndex = this.editor.container.style.zIndex * 1 + 10;
          baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex =
            popEl.style.zIndex - 1;
        }
      },
      //图片修改的定位
      showTool: function (element, hoz) {
        this.showToolRect(element, uiUtils.getClientRect(element), hoz);
      },
      //图片修改的定位
      showToolRect: function (element, rect, hoz) {
        this._doAutoRender();
        var vpRect = uiUtils.getViewportRect();
        this._show();
        var popSize = this.fitSize();
        // var scrollLeft = this.editor.iframe.contentWindow.document.body.scrollLeft;
        // var scrollTop = this.editor.iframe.contentWindow.document.body.scrollTop;

        var popEl = this.getDom();

        //横向滚动条的偏移
        var scrollLeft = this.editor.body.scrollLeft;
        var width = popEl.clientWidth;
        var height = popEl.clientHeight;
        var left = rect.left;
        var top = rect.top + rect.height - height;
        // var iframeRect = uiUtils.getClientRect(this.editor.iframe);
        var editorIframe =
          navigator.userAgent.indexOf("Edge") > -1
            ? $(this.editor.container).find("#baidu_editor_0")[0]
            : this.editor.iframe;
        var iframeRect = uiUtils.getClientRect(editorIframe);
        var iframeLeft = iframeRect.left;
        var iframeTop = iframeRect.top;
        var iframeHeight = iframeRect.height;
        var iframeWidth = iframeRect.width;
        // var imageOffsetTop = element.offsetTop;

        var scrollHeight = 20;
        var scrollWidth = 20;

        if (top < iframeTop) {
          top = iframeTop;
        } else if (top + height > iframeTop + iframeHeight - scrollHeight) {
          top = iframeTop + iframeHeight - scrollHeight - height + 12;
        }
        /*if(scrollTop > imageOffsetTop){
                    top = iframeTop+2;
                }else if(scrollTop < imageOffsetTop){
                    top = iframeTop + imageOffsetTop - scrollTop+2;
                }  */

        if (left < iframeLeft) {
          left = iframeLeft;
        } else if (left + width > iframeLeft + iframeWidth - scrollWidth) {
          left = iframeLeft + iframeWidth - scrollWidth - width;
        }

        uiUtils.setViewportOffset(popEl, {
          left: left,
          top: top
        });
        domUtils.removeClasses(popEl, ANCHOR_CLASSES);
        //popEl.className += ' ' + ANCHOR_CLASSES[(sideUp ? 1 : 0) * 2 + (sideLeft ? 1 : 0)];
        if (this.editor) {
          popEl.style.zIndex = this.editor.container.style.zIndex * 1 + 10;
          baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex =
            popEl.style.zIndex - 1;
        }
      },
      showAt: function (offset) {
        var left = offset.left;
        var top = offset.top;
        var rect = {
          left: left,
          top: top,
          right: left,
          bottom: top,
          height: 0,
          width: 0
        };
        this.showAnchorRect(rect, false);
      },
      _show: function () {
        if (this._hidden) {
          var box = this.getDom();
          box.style.display = "";
          this._hidden = false;
          //if (box.setActive) {
          //    box.setActive();
          //}
          this.fireEvent("show");
        }
      },
      isHidden: function () {
        return this._hidden;
      },
      show: function () {
        this._doAutoRender();
        this._show();
      },
      hide: function (notNofity) {
        if (!this._hidden && this.getDom()) {
          //this.getDom().style.visibility = 'hidden';
          this.getDom().style.display = "none";
          this._hidden = true;
          if (!notNofity) {
            this.fireEvent("hide");
            //对表格的扩展键进行特殊的处理
            var className = this.getDom().className;
            if (/edui-for-inserttable/g.test(className)) {
              //动态更新表格扩展弹出框内容
              this.getDom().outerHTML = "";
            }
          }
        }
      },
      queryAutoHide: function (el) {
        return !el || !uiUtils.contains(this.getDom(), el);
      }
    };
    utils.inherits(Popup, UIBase);
    utils.extend(Popup.prototype, Stateful, true);

    domUtils.on(document, "mousedown", function (evt) {
      var el = evt.target || evt.srcElement;
      closeAllPopup(el);
    });
    domUtils.on(window, "scroll", function () {
      closeAllPopup();
    });

    //var lastVpRect = uiUtils.getViewportRect();
    //domUtils.on( window, 'resize', function () {
    //    var vpRect = uiUtils.getViewportRect();
    //    if (vpRect.width != lastVpRect.width || vpRect.height != lastVpRect.height) {
    //        closeAllPopup();
    //    }
    //} );
  })();
  //Popup.js end
  // Button.js start
  ///import core
  ///import uicore
  ///import ui/stateful.js
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      Stateful = baidu.editor.ui.Stateful,
      Button = (baidu.editor.ui.Button = function (options) {
        this.initOptions(options);
        this.initButton();
      });
    Button.prototype = {
      uiName: "button",
      label: "",
      title: "",
      showIcon: true,
      showText: true,
      initButton: function () {
        this.initUIBase();
        this.Stateful_init();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          '<div id="##_state" stateful>' +
          '<div class="%%-wrap"><div id="##_body" unselectable="on" ' +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' class="%%-body" onmousedown="return false;" onclick="return $$._onClick();">' +
          (this.showIcon ? '<div class="edui-box edui-icon"></div>' : "") +
          (this.showText
            ? '<div class="edui-box edui-label">' + this.label + "</div>"
            : "") +
          "</div>" +
          "</div>" +
          "</div></div>"
        );
      },
      postRender: function () {
        this.Stateful_postRender();
        this.setDisabled(this.disabled);
      },
      _onClick: function () {
        if (!this.isDisabled()) {
          this.fireEvent("click");

          UE.editor.options.ueditorChangeEvent &&
            UE.editor.options.ueditorChangeEvent();
        }
      }
    };
    utils.inherits(Button, UIBase);
    utils.extend(Button.prototype, Stateful);
  })();
  // Button.js end
  //Toolbar.js start
  // ToolBar
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      me = this,
      UIBase = baidu.editor.ui.UIBase,
      Toolbar = (baidu.editor.ui.Toolbar = function (options) {
        this.initOptions(options);
        this.initToolbar();
      });

    Toolbar.prototype = {
      items: null,
      initToolbar: function () {
        this.items = this.items || [];
        this.initUIBase();
      },
      add: function (item) {
        this.items.push(item);
      },
      getHtmlTpl: function () {
        var buff = [];
        var hasShrink;
        // for (var i=0; i<this.items.length; i++) {
        //     this.items[i].className.indexOf('shrinkopenup') > -1 && (hasShrink = true);
        //     buff[i] = this.items[i].renderHtml();
        // }
        // var editoruiToolbar = '<div id="##" width="123" class="edui-toolbar '+(hasShrink ? 'shrinkopenup' : '')+' %%" onselectstart="return false;" onmousedown="return $$._onMouseDown(event, this);" onclick="return $$._onClick(event, this);">' +
        //     buff.join('') +
        //     '</div>';

        for (var i = 0; i < this.items.length; i++) {
          // buff.push('<div title='+this.items[i].name+' id='+this.items[i].idName+' class='+this.items[i].className+'>');
          buff.push(
            "<div id=" +
              this.items[i].idName +
              " class=" +
              this.items[i].className +
              ">"
          );
          for (var j = 0; j < this.items[i].toolbarsClass.length; j++) {
            buff.push(this.items[i].toolbarsClass[j].renderHtml());
          }
          // buff.push('</div>');
          buff.push(
            '<div class="include" id="' +
              this.items[i].idName +
              'Include"></div><div class="blockSet"><div class="blockName"><p>' +
              this.items[i].name +
              '</p><a class="blockArrow"></a></div></div></div>'
          );
        }
        var editoruiToolbar =
          '<div id="##" width="123" class="edui-toolbar %%" onselectstart="return false;" onmousedown="return $$._onMouseDown(event, this);" onclick="return $$._onClick(event, this);">' +
          buff.join("") +
          "</div>";

        return editoruiToolbar;
      },
      postRender: function () {
        var box = this.getDom();
        // for (var i=0; i<this.items.length; i++) {
        //     this.items[i].postRender();
        // }
        // for (var i=0; i<this.items[0].toolbarsClass.length; i++) {
        //     this.items[0].toolbarsClass[i].postRender();
        // }
        for (var i = 0; i < this.items.length; i++) {
          for (var j = 0; j < this.items[i].toolbarsClass.length; j++) {
            this.items[i].toolbarsClass[j].postRender();
          }
        }
        uiUtils.makeUnselectable(box);
        // console.log(me.editor.ui.toolbarsClass)
        // 添加“优先级”的属性、自适应
        if (me.editor && me.editor.ui && me.editor.ui.toolbarsClass) {
          for (var i in me.editor.ui.toolbarsClass) {
            $(this.getDom())
              .find(".edui-for-" + i)
              .attr("priority", me.editor.ui.toolbarsClass[i].priority);
          }
        }
        if (me.editor2 && me.editor2.ui && me.editor2.ui.toolbarsClass) {
          for (var i in me.editor2.ui.toolbarsClass) {
            $(this.getDom())
              .find(".edui-for-" + i)
              .attr("priority", me.editor2.ui.toolbarsClass[i].priority);
          }
        }
        // $(this.getDom()).find('.edui-button-body')[11]
        var ThisToolbars = this;
        uiUtils.toolbarAdjust(this);
        window.onresize = function () {
          // 由于快速拖动的话函数会执行不了，导致toolbar排列不齐，所以使用setTimeout来延迟执行
          // setTimeout(function(){
          uiUtils.toolbarAdjust(ThisToolbars);
          // },100)
          // 在非全屏下，窗口缩放时需要把工具的弹窗popup隐藏
          for (
            var i = 0;
            i <
            $(editor.container)
              .parents("body")
              .find(".edui_fixedlayer .edui-popup").length;
            i++
          ) {
            $(
              $(editor.container)
                .parents("body")
                .find(".edui_fixedlayer .edui-popup")[i]
            ).css("display", "none");
          }
        };
        // console.log(ThisToolbars)
        // console.log(editor.options);debugger

        // 图文展示点击.set-line40的时候（模块样式切换）要重新加载toolbars
        if ($(box).parents(".settingHardHeight").find(".set-line40").length) {
          $(box)
            .parents(".settingHardHeight")
            .find(".set-line40")[0].onclick = function () {
            uiUtils.toolbarAdjust(ThisToolbars);
          };
        }
        if ($(box).parents("#tabs").find("a").length) {
          // $(box).parents('#tabs').find('a')[0].onclick = function(){
          //     uiUtils.toolbarAdjust(ThisToolbars)
          // }
          for (var j = 0; j < $(box).parents("#tabs").find("a").length; j++) {
            // $(box).parents('#tabs').find('a')[j].onclick = function(){
            //     uiUtils.toolbarAdjust(ThisToolbars)
            // }
            $(box)
              .parents("#tabs")
              .find("a")
              [j].addEventListener("click", function () {
                uiUtils.toolbarAdjust(ThisToolbars);
                // 重新编辑的时候如果表格是用默认宽度则需要修改
                for (var i = 0; i < $(editor.body).find("table").length; i++) {
                  3;
                  if (
                    $(editor.body)
                      .find("table")
                      [i].getAttribute("defaultwidth") == "true"
                  ) {
                    $($(editor.body).find("table")[i]).css(
                      "width",
                      $(editor.body).css("width") ||
                        $(editor.body).find("table")[i].getAttribute("width")
                    );
                  }
                }
              });
          }
        }
        // 建站添加在线地图模块时触发
        if ($(box).parents("#mapEdit").find(".jz-radio-input").length) {
          $(box)
            .parents("#mapEdit")
            .find(".jz-radio-input")[0]
            .addEventListener("click", function () {
              setTimeout(function () {
                uiUtils.toolbarAdjust(ThisToolbars);
              });
            });
          $(box)
            .parents("#mapEdit")
            .find(".tabs-item")[1]
            .addEventListener("click", function () {
              uiUtils.toolbarAdjust(ThisToolbars);
            });
        }
      },
      _onMouseDown: function (event) {
        var target = event.target || event.srcElement;
        if (target.id !== "SWFUpload_0") {
          return false;
        }
      },
      _onClick: function (event, ele) {
        var target = event.target || event.srcElement;
        var curToorBar = $(target).parents('[class*="edui-for-"]');
        if (curToorBar[0]) {
          var name = curToorBar[0].className.match(/edui-for-(\S+)/)[1];
        }
      }
    };
    utils.inherits(Toolbar, UIBase);
  })();
  //Toolbar.js end
  //Menu.js start
  // Menu
  ///import core
  ///import uicore
  ///import ui\popup.js
  ///import ui\stateful.js
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase,
      Popup = baidu.editor.ui.Popup,
      Stateful = baidu.editor.ui.Stateful,
      Menu = (baidu.editor.ui.Menu = function (options) {
        this.initOptions(options);
        this.initMenu();
      });

    var menuSeparator = {
      renderHtml: function () {
        return '<div class="edui-menuitem edui-menuseparator"><div class="edui-menuseparator-inner"></div></div>';
      },
      postRender: function () {},
      queryAutoHide: function () {
        return true;
      }
    };
    Menu.prototype = {
      items: null,
      uiName: "menu",
      initMenu: function () {
        this.items = this.items || [];
        this.initPopup();
        this.initItems();
      },
      initItems: function () {
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          if (item == "-") {
            this.items[i] = this.getSeparator();
          } else if (!(item instanceof MenuItem)) {
            this.items[i] = this.createItem(item);
          }
        }
      },
      getSeparator: function () {
        return menuSeparator;
      },
      createItem: function (item) {
        return new MenuItem(item);
      },
      _Popup_getContentHtmlTpl: Popup.prototype.getContentHtmlTpl,
      getContentHtmlTpl: function () {
        if (this.items.length == 0) {
          return this._Popup_getContentHtmlTpl();
        }
        var buff = [];
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          buff[i] = item.renderHtml();
        }
        return '<div class="%%-body">' + buff.join("") + "</div>";
      },
      _Popup_postRender: Popup.prototype.postRender,
      postRender: function () {
        var me = this;
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          item.ownerMenu = this;
          item.postRender();
        }
        domUtils.on(this.getDom(), "mouseover", function (evt) {
          evt = evt || event;
          var rel = evt.relatedTarget || evt.fromElement;
          var el = me.getDom();
          if (!uiUtils.contains(el, rel) && el !== rel) {
            me.fireEvent("over");
          }
        });
        this._Popup_postRender();
      },
      queryAutoHide: function (el) {
        if (el) {
          if (uiUtils.contains(this.getDom(), el)) {
            return false;
          }
          for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (item.queryAutoHide(el) === false) {
              return false;
            }
          }
        }
      },
      clearItems: function () {
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          clearTimeout(item._showingTimer);
          clearTimeout(item._closingTimer);
          if (item.subMenu) {
            item.subMenu.destroy();
          }
        }
        this.items = [];
      },
      destroy: function () {
        if (this.getDom()) {
          domUtils.remove(this.getDom());
        }
        this.clearItems();
      },
      dispose: function () {
        this.destroy();
      }
    };
    utils.inherits(Menu, Popup);

    var MenuItem = (baidu.editor.ui.MenuItem = function (options) {
      this.initOptions(options);
      this.initUIBase();
      this.Stateful_init();
      if (this.subMenu && !(this.subMenu instanceof Menu)) {
        this.subMenu = new Menu(this.subMenu);
      }
    });
    MenuItem.prototype = {
      label: "",
      subMenu: null,
      ownerMenu: null,
      uiName: "menuitem",
      alwalysHoverable: true,
      getHtmlTpl: function () {
        return (
          '<div id="##" class="%%" stateful onclick="$$._onClick(event, this);">' +
          '<div class="%%-body">' +
          this.renderLabelHtml() +
          "</div>" +
          "</div>"
        );
      },
      postRender: function () {
        var me = this;
        this.addListener("over", function () {
          //对于非打勾选中的menuitem还有所有的listitem,hover item时把其它的item checked状态去掉
          var items = this.ownerMenu.items;
          var itemNode = items[0].getDom();
          var checkedNode = itemNode.getElementsByClassName("edui-checked")[0];
          if (
            (checkedNode &&
              getComputedStyle(checkedNode, null).display == "none") ||
            domUtils.hasClass(itemNode, "edui-listitem")
          ) {
            for (var i = 0; i < items.length; i++) {
              if (items[i] != this) {
                items[i].removeState && items[i].removeState("checked");
              }
            }
          }

          me.ownerMenu.fireEvent("submenuover", me);
          if (me.subMenu) {
            me.delayShowSubMenu();
          }
        });
        if (this.subMenu) {
          this.getDom().className += " edui-hassubmenu";
          this.subMenu.render();
          this.addListener("out", function () {
            me.delayHideSubMenu();
          });
          this.subMenu.addListener("over", function () {
            clearTimeout(me._closingTimer);
            me._closingTimer = null;
            me.addState("opened");
          });
          this.ownerMenu.addListener("hide", function () {
            me.hideSubMenu();
          });
          this.ownerMenu.addListener("submenuover", function (t, subMenu) {
            if (subMenu !== me) {
              me.delayHideSubMenu();
            }
          });
          this.subMenu._bakQueryAutoHide = this.subMenu.queryAutoHide;
          this.subMenu.queryAutoHide = function (el) {
            if (el && uiUtils.contains(me.getDom(), el)) {
              return false;
            }
            return this._bakQueryAutoHide(el);
          };
        }
        this.getDom().style.tabIndex = "-1";
        uiUtils.makeUnselectable(this.getDom());
        this.Stateful_postRender();
      },
      delayShowSubMenu: function () {
        var me = this;
        if (!me.isDisabled()) {
          me.addState("opened");
          clearTimeout(me._showingTimer);
          clearTimeout(me._closingTimer);
          me._closingTimer = null;
          me._showingTimer = setTimeout(function () {
            me.showSubMenu();
          }, 250);
        }
      },
      delayHideSubMenu: function () {
        var me = this;
        if (!me.isDisabled()) {
          me.removeState("opened");
          clearTimeout(me._showingTimer);
          if (!me._closingTimer) {
            me._closingTimer = setTimeout(function () {
              if (!me.hasState("opened")) {
                me.hideSubMenu();
              }
              me._closingTimer = null;
            }, 400);
          }
        }
      },
      renderLabelHtml: function () {
        return (
          '<div class="edui-checked"></div>' +
          '<div class="edui-icon"></div>' +
          '<div class="edui-box edui-label %%-label">' +
          (this.label || "") +
          "</div>"
        );
      },
      getStateDom: function () {
        return this.getDom();
      },
      queryAutoHide: function (el) {
        if (this.subMenu && this.hasState("opened")) {
          return this.subMenu.queryAutoHide(el);
        }
      },
      _onClick: function (event, this_) {
        if (this.hasState("disabled")) return;
        if (this.fireEvent("click", event, this_) !== false) {
          if (this.subMenu) {
            this.showSubMenu();
          } else {
            Popup.postHide();
          }
        }
      },
      showSubMenu: function () {
        var rect = uiUtils.getClientRect(this.getDom());
        rect.right -= 5;
        rect.left += 2;
        rect.width -= 7;
        rect.top -= 4;
        rect.bottom += 4;
        rect.height += 8;
        this.subMenu.showAnchorRect(rect, true);
      },
      hideSubMenu: function () {
        this.subMenu.hide();
      }
    };
    utils.inherits(MenuItem, UIBase);
    utils.extend(MenuItem.prototype, Stateful, true);
  })();
  //Menu.js end
  // SplitButton.js start
  ///import core
  ///import uicore
  ///import ui/stateful.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      domUtils = baidu.editor.dom.domUtils,
      UIBase = baidu.editor.ui.UIBase,
      Stateful = baidu.editor.ui.Stateful,
      SplitButton = (baidu.editor.ui.SplitButton = function (options) {
        this.initOptions(options);
        this.initSplitButton();
      });
    SplitButton.prototype = {
      dialogId: "", //特别说明  在弹出框中的id与嵌套的DIV id不一致，这个是dialog 的id
      popup: null,
      uiName: "splitbutton",
      title: "",
      initSplitButton: function () {
        this.initUIBase();
        this.Stateful_init();
        var me = this;
        if (this.popup != null) {
          var popup = this.popup;
          this.popup = null;
          this.setPopup(popup);
        }
      },
      _UIBase_postRender: UIBase.prototype.postRender,
      postRender: function () {
        this.Stateful_postRender();
        this._UIBase_postRender();
      },
      setPopup: function (popup) {
        if (this.popup === popup) return;
        if (this.popup != null) {
          this.popup.dispose();
        }
        popup.addListener("show", utils.bind(this._onPopupShow, this));
        popup.addListener("hide", utils.bind(this._onPopupHide, this));
        popup.addListener(
          "postrender",
          utils.bind(function () {
            popup
              .getDom("body")
              .appendChild(
                uiUtils.createElementByHtml(
                  '<div id="' +
                    this.popup.id +
                    '_bordereraser" class="edui-bordereraser edui-background" style="width:' +
                    (uiUtils.getClientRect(this.getDom()).width - 2) +
                    'px"></div>'
                )
              );
            popup.getDom().className += " " + this.className;
          }, this)
        );
        this.popup = popup;
      },
      _onPopupShow: function () {
        if (
          !(
            this.className == "edui-for-insertunorderedlist" ||
            this.className == "edui-for-insertorderedlist"
          )
        ) {
          this.addState("opened");
        }
      },
      _onPopupHide: function () {
        this.removeState("opened");
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful>' +
          '<div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(event, this);" onmouseover="$$._onButtonMouseover(event);" onmouseout="$$._onButtonMouseout(event);">' +
          '<div class="edui-box edui-icon"></div>' +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          '<div class="edui-box edui-arrow" onclick="$$._onArrowClick(event);" onmouseover="$$._onArrowMouseover(event);" onmouseout="$$._onArrowMouseout(event);"></div>' +
          "</div>" +
          "</div>" +
          "</div>"
        );
      },
      showPopup: function () {
        // 当popup往上弹出的时候，做特殊处理
        var rect = uiUtils.getClientRect(this.getDom());
        rect.top -= this.popup.SHADOW_RADIUS;
        rect.height += this.popup.SHADOW_RADIUS;
        this.popup.showAnchorRect(rect);
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          // this.showPopup();
          // 修改列表的交互：分为左边和右边两部分
          if ($(event.target).hasClass("edui-icon")) {
            if (this.className == "edui-for-insertorderedlist") {
              editor.execCommand("insertorderedlist", "decimal");
            } else if (this.className == "edui-for-insertunorderedlist") {
              editor.execCommand("insertunorderedlist", "circle");
            } else {
              this.showPopup();
            }
          } else {
            this.showPopup();
          }

          UE.editor.options.ueditorChangeEvent &&
            UE.editor.options.ueditorChangeEvent();
        }
      },
      _onButtonClick: function () {
        if (!this.isDisabled()) {
          this.fireEvent("buttonclick");

          UE.editor.options.ueditorChangeEvent &&
            UE.editor.options.ueditorChangeEvent();
        }
      },
      _onArrowMouseover: function (event) {
        if (
          $(event.target).parents(".edui-for-insertorderedlist").length ||
          $(event.target).parents(".edui-for-insertunorderedlist").length
        ) {
          $(event.target).css("border-color", "#387ed6");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-button-body")
            .css("border-color", "#e3e2e8");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-splitborder")
            .css("border-left-color", "#387ed6");
        }
      },
      _onArrowMouseout: function (event) {
        if (
          $(event.target).parents(".edui-for-insertorderedlist").length ||
          $(event.target).parents(".edui-for-insertunorderedlist").length
        ) {
          $(event.target).css("border-color", "");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-button-body")
            .css("border-color", "");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-splitborder")
            .css("border-left-color", "");
        }
      },
      _onButtonMouseover: function (event) {
        if (
          $(event.target).parents(".edui-for-insertorderedlist").length ||
          $(event.target).parents(".edui-for-insertunorderedlist").length
        ) {
          $(event.target).parent().css("border-color", "#387ed6");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-arrow")
            .css("border-color", "#e3e2e8");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-splitborder")
            .css("border-left-color", "#387ed6");
        }
      },
      _onButtonMouseout: function (event) {
        if (
          $(event.target).parents(".edui-for-insertorderedlist").length ||
          $(event.target).parents(".edui-for-insertunorderedlist").length
        ) {
          $(event.target).parent().css("border-color", "");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-arrow")
            .css("border-color", "");
          $(event.target)
            .parents(".edui-menubutton")
            .find(".edui-splitborder")
            .css("border-left-color", "");
        }
      }
    };
    utils.inherits(SplitButton, UIBase);
    utils.extend(SplitButton.prototype, Stateful, true);
  })();
  // SplitButton.js end
  //Combox.js start
  // Combox
  ///import core
  ///import uicore
  ///import ui/menu.js
  ///import ui/splitbutton.js
  (function () {
    // todo: menu和item提成通用list
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      Menu = baidu.editor.ui.Menu,
      SplitButton = baidu.editor.ui.SplitButton,
      Combox = (baidu.editor.ui.Combox = function (options) {
        this.initOptions(options);
        this.initCombox();
      });
    Combox.prototype = {
      uiName: "combox",
      initCombox: function () {
        var me = this;
        this.items = this.items || [];
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          item.uiName = "listitem";
          item.index = i;
          item.onclick = function () {
            me.selectByIndex(this.index);
          };
        }
        this.popup = new Menu({
          items: this.items,
          uiName: "list",
          editor: this.editor
        });

        //字号hover跟随变化
        function setFontsize() {
          me.editor.execCommand("FontSize", this.value);
        }
        function restoreFontsize() {
          me.editor.execCommand("FontSize", me.oriValue);
        }
        function removeOut() {
          this.removeListener("out", restoreFontsize);
        }

        this.popup.addListener("show", function () {
          //字号hover跟随变化
          baidu.editor.ui.tool.isBanHidePopupWhenScroll = true;
          var isFontsize = me.className.indexOf("fontsize") > -1;
          if (isFontsize) {
            me.oriValue = me.value;
            for (var i = 0, curItem; (curItem = me.items[i++]); ) {
              curItem.removeListener("over", setFontsize);
              curItem.removeListener("click", removeOut);
              curItem.addListener("over", setFontsize);
              curItem.addListener("out", restoreFontsize);
              curItem.addListener("click", removeOut);
            }
          }
          //弹窗弹出时把当前值设置为checked状态
          for (var i = 0; i < this.items.length; i++) {
            this.items[i].removeState("checked");
            if (this.items[i].value == me.value) {
              this.items[i].addState("checked");
              // this.value = me.value;
              var checkedNode = this.items[i].getDom();
              //字体打开弹窗时，自动滑到选中区域
              // checkedNode.scrollIntoView && checkedNode.scrollIntoView();
              var offsetTop = checkedNode.offsetTop;
              me.popup.getDom("content").scrollTop = offsetTop;
            }
          }
        });
        this.popup.addListener("hide", function () {
          baidu.editor.ui.tool.isBanHidePopupWhenScroll = false;
        });
        this.initSplitButton();
      },
      _SplitButton_postRender: SplitButton.prototype.postRender,
      postRender: function () {
        this._SplitButton_postRender();
        this.setLabel(this.label || "");
        this.setValue(this.initValue || "");
      },
      showPopup: function () {
        var rect = uiUtils.getClientRect(this.getDom());
        rect.top += 1;
        rect.bottom -= 1;
        rect.height -= 2;
        this.popup.showAnchorRect(rect);
      },
      getValue: function () {
        return this.value;
      },
      setValue: function (value) {
        var index = this.indexByValue(value);
        if (index != -1) {
          this.selectedIndex = index;
          this.setLabel(this.items[index].label);
          this.value = this.items[index].value;
        } else {
          this.selectedIndex = -1;
          this.setLabel(this.getLabelForUnknowValue(value));
          this.value = value;
        }
      },
      //该方法是设置字体和字号的标题
      setLabel: function (label) {
        this.getDom("button_body").innerHTML = label;
        this.label = label;
      },
      getLabelForUnknowValue: function (value) {
        return value;
      },
      indexByValue: function (value) {
        for (var i = 0; i < this.items.length; i++) {
          if (value == this.items[i].value) {
            return i;
          }
        }
        return -1;
      },
      getItem: function (index) {
        return this.items[index];
      },
      selectByIndex: function (index) {
        if (
          index < this.items.length &&
          this.fireEvent("select", index) !== false
        ) {
          this.selectedIndex = index;
          this.value = this.items[index].value;
          this.setLabel(this.items[index].label);
        }
      },
      getHtmlTpl: function () {
        return this.hasInput
          ? '<div id="##" class="edui-box %%">' +
              "<div " +
              (this.title ? 'title="' + this.title + '"' : "") +
              ' id="##_state" stateful>' +
              '<div class="%%-body" onmousedown="$$._onmousedown(event, this)" onclick="$$._onfocus(event, this)">' +
              // '<input type="text" id="##_button_body" class="edui-box edui-button-body"/>')+
              '<div id="##_button_body" class="edui-box edui-button-body" onkeydown="$$._onkeydown(event, this)" onclick="$$._onArrowClick(event, this);">' +
              '<div class="edui-box edui-icon"></div>' +
              "</div>" +
              '<div class="edui-box edui-splitborder"></div>' +
              '<div class="edui-box edui-arrow" onclick="$$._onArrowClick(event);"></div>' +
              "</div>" +
              "</div>" +
              "</div>"
          : '<div id="##" class="edui-box %%">' +
              "<div " +
              (this.title ? 'title="' + this.title + '"' : "") +
              ' id="##_state" stateful>' +
              '<div class="%%-body">' +
              '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(event, this);">' +
              '<div class="edui-box edui-icon"></div>' +
              "</div>" +
              '<div class="edui-box edui-splitborder"></div>' +
              '<div class="edui-box edui-arrow" onclick="$$._onArrowClick(event);"></div>' +
              "</div>" +
              "</div>" +
              "</div>";
      },
      _onmousedown: function (event, ele) {
        event.cancelBubble = true;
        baidu.editor.ui.Popup.postHide();
      },
      _onfocus: function (event, ele) {
        //选中可输入框
        var me = this;
        ele = ele.firstChild;
        ele.setAttribute("contenteditable", true);
        ele.innerHTML = parseInt(ele.innerHTML) || ele.innerHTML;

        if (document.selection) {
          var range = document.body.createTextRange();
          range.moveToElementText(ele);
          range.select();
        } else if (window.getSelection) {
          var range = document.createRange();
          range.selectNodeContents(ele);
          window.getSelection().removeAllRanges();
          window.getSelection().addRange(range);
        }
        // this.editor.selection.getRange().selectNode(ele).select();
        ele.focus();

        var blur = function () {
          ele.removeAttribute("contenteditable");
          ele.innerHTML =
            ele.innerHTML +
            (me.unit && ele.innerHTML.indexOf(me.unit) == -1 ? me.unit : "");
          domUtils.un(document, "mousedown", blur);
        };
        domUtils.on(document, "mousedown", blur);
      },
      _onkeydown: function (event, ele) {
        event.cancelBubble = true;
        var keyCode = event.keyCode;
        var maxValue = parseInt(this.maxValue);
        var minValue = parseInt(this.minValue);
        var unit = this.unit || "";
        var command = this.command;

        //字母键,删除键,左右键不阻止，回车键执行
        if (
          !(
            (keyCode > 47 && keyCode < 58) ||
            (keyCode > 95 && keyCode < 106) ||
            keyCode == 8 ||
            keyCode == 37 ||
            keyCode == 39
          )
        ) {
          event.preventDefault();
        }
        if (keyCode == 13) {
          var value = parseInt(ele.innerHTML);
          if (value && value >= minValue && value <= maxValue) {
            value = value + unit;
            this.editor.execCommand(command, value);
            this.oriValue = value;
          } else {
            alert("请输入" + minValue + "到" + maxValue + "的数字");
            ele.innerHTML = this.oriValue;
          }
          this.popup.hide();
        }
      }
    };
    utils.inherits(Combox, SplitButton);
  })();
  //Combox.js end
  //Dialog.js start
  // Dialog
  ///import core
  ///import uicore
  ///import ui/mask.js
  ///import ui/button.js
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      uiUtils = baidu.editor.ui.uiUtils,
      Mask = baidu.editor.ui.Mask,
      UIBase = baidu.editor.ui.UIBase,
      Button = baidu.editor.ui.Button,
      Dialog = (baidu.editor.ui.Dialog = function (options) {
        this.initOptions(
          utils.extend(
            {
              autoReset: true,
              draggable: true,
              onok: function () {},
              oncancel: function () {},
              onclose: function (t, ok) {
                return ok ? this.onok() : this.oncancel();
              }
            },
            options
          )
        );
        this.initDialog();
      });
    var modalMask;
    var dragMask;
    Dialog.prototype = {
      draggable: false,
      uiName: "dialog",
      initDialog: function () {
        var me = this;
        this.initUIBase();
        this.modalMask =
          modalMask ||
          (modalMask = new Mask({
            className: "edui-dialog-modalmask"
          }));
        this.dragMask =
          dragMask ||
          (dragMask = new Mask({
            className: "edui-dialog-dragmask"
          }));
        this.closeButton = new Button({
          className: "edui-dialog-closebutton",
          title: me.closeDialog,
          onclick: function () {
            me.close(false);
          }
        });
        if (this.buttons) {
          for (var i = 0; i < this.buttons.length; i++) {
            if (!(this.buttons[i] instanceof Button)) {
              this.buttons[i] = new Button(this.buttons[i]);
            }
          }
        }
      },
      fitSize: function () {
        var popBodyEl = this.getDom("body");
        //if (!(baidu.editor.browser.ie && baidu.editor.browser.version == 7)) {
        //    uiUtils.removeStyle(popBodyEl, 'width');
        //    uiUtils.removeStyle(popBodyEl, 'height');
        //}
        var size = this.mesureSize();
        popBodyEl.style.width = size.width + "px";
        popBodyEl.style.height = size.height + "px";
        return size;
      },
      safeSetOffset: function (offset) {
        var me = this;
        var el = me.getDom();
        var vpRect = uiUtils.getViewportRect();
        var rect = uiUtils.getClientRect(el);
        var left = offset.left;
        if (left + rect.width > vpRect.right) {
          left = vpRect.right - rect.width;
        }
        var top = offset.top;
        if (top + rect.height > vpRect.bottom) {
          top = vpRect.bottom - rect.height;
        }
        el.style.left = Math.max(left, 0) + "px";
        el.style.top = Math.max(top, 0) + "px";
      },
      showAtCenter: function () {
        this.getDom().style.display = "";
        var vpRect = uiUtils.getViewportRect();
        var popSize = this.fitSize();
        var titleHeight = this.getDom("titlebar").offsetHeight | 0;
        var left = vpRect.width / 2 - popSize.width / 2;
        var top =
          vpRect.height / 2 - (popSize.height - titleHeight) / 2 - titleHeight;
        var popEl = this.getDom();
        this.safeSetOffset({
          left: Math.max(left | 0, 0),
          top: Math.max(top | 0, 0)
        });
        if (!domUtils.hasClass(popEl, "edui-state-centered")) {
          popEl.className += " edui-state-centered";
        }
        this._show();
      },
      getContentHtml: function () {
        var contentHtml = "";
        if (typeof this.content == "string") {
          contentHtml = this.content;
        } else if (this.iframeUrl) {
          contentHtml =
            '<span id="' +
            this.id +
            '_contmask" class="dialogcontmask"></span><iframe id="' +
            this.id +
            '_iframe" class="%%-iframe" height="100%" width="100%" frameborder="0" src="' +
            this.iframeUrl +
            '"></iframe>';
        }
        return contentHtml;
      },
      getHtmlTpl: function () {
        var footHtml = "";
        if (this.buttons) {
          var buff = [];
          for (var i = 0; i < this.buttons.length; i++) {
            buff[i] = this.buttons[i].renderHtml();
          }
          footHtml =
            '<div class="%%-foot">' +
            '<div id="##_buttons" class="%%-buttons">' +
            buff.join("") +
            "</div>" +
            "</div>";
        }
        return (
          '<div id="##" class="%%"><div class="%%-wrap"><div id="##_body" class="%%-body">' +
          '<div class="%%-shadow"></div>' +
          '<div id="##_titlebar" class="%%-titlebar">' +
          '<div class="%%-draghandle" onmousedown="$$._onTitlebarMouseDown(event, this);">' +
          '<span class="%%-caption">' +
          (this.title || "") +
          "</span>" +
          "</div>" +
          this.closeButton.renderHtml() +
          "</div>" +
          '<div id="##_content" class="%%-content">' +
          (this.autoReset ? "" : this.getContentHtml()) +
          "</div>" +
          footHtml +
          "</div></div></div>"
        );
      },
      postRender: function () {
        // todo: 保持居中/记住上次关闭位置选项
        if (!this.modalMask.getDom()) {
          this.modalMask.render();
          this.modalMask.hide();
        }
        if (!this.dragMask.getDom()) {
          this.dragMask.render();
          this.dragMask.hide();
        }
        var me = this;
        this.addListener("show", function () {
          me.modalMask.show(this.getDom().style.zIndex - 2);
        });
        this.addListener("hide", function () {
          me.modalMask.hide();
        });
        if (this.buttons) {
          for (var i = 0; i < this.buttons.length; i++) {
            this.buttons[i].postRender();
          }
        }
        domUtils.on(window, "resize", function () {
          setTimeout(function () {
            if (!me.isHidden()) {
              me.safeSetOffset(uiUtils.getClientRect(me.getDom()));
            }
          });
        });
        this._hide();
      },
      mesureSize: function () {
        var body = this.getDom("body");
        var width = uiUtils.getClientRect(this.getDom("content")).width;
        var dialogBodyStyle = body.style;
        dialogBodyStyle.width = width;
        return uiUtils.getClientRect(body);
      },
      _onTitlebarMouseDown: function (evt, el) {
        if (this.draggable) {
          var rect;
          var vpRect = uiUtils.getViewportRect();
          var me = this;
          uiUtils.startDrag(evt, {
            ondragstart: function () {
              rect = uiUtils.getClientRect(me.getDom());
              me.getDom("contmask").style.visibility = "visible";
              me.dragMask.show(me.getDom().style.zIndex - 1);
            },
            ondragmove: function (x, y) {
              var left = rect.left + x;
              var top = rect.top + y;
              me.safeSetOffset({
                left: left,
                top: top
              });
            },
            ondragstop: function () {
              me.getDom("contmask").style.visibility = "hidden";
              domUtils.removeClasses(me.getDom(), ["edui-state-centered"]);
              me.dragMask.hide();
            }
          });
        }
      },
      reset: function () {
        this.getDom("content").innerHTML = this.getContentHtml();
      },
      _show: function () {
        if (this._hidden) {
          this.getDom().style.display = "";
          //要高过编辑器的zindxe
          this.editor.container.style.zIndex &&
            (this.getDom().style.zIndex =
              this.editor.container.style.zIndex * 1 + 10);
          this._hidden = false;
          this.fireEvent("show");
          baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex =
            this.getDom().style.zIndex - 4;
        }
      },
      isHidden: function () {
        return this._hidden;
      },
      _hide: function () {
        if (!this._hidden) {
          this.getDom().style.display = "none";
          this.getDom().style.zIndex = "";
          this._hidden = true;
          this.fireEvent("hide");
        }
      },
      open: function () {
        if (this.autoReset) {
          //有可能还没有渲染
          try {
            this.reset();
          } catch (e) {
            this.render();
            this.open();
          }
        }
        this.showAtCenter();
        if (this.iframeUrl) {
          try {
            this.getDom("iframe").focus();
          } catch (ex) {}
        }
      },
      _onCloseButtonClick: function (evt, el) {
        this.close(false);
      },
      close: function (ok) {
        if (this.fireEvent("close", ok) !== false) {
          this._hide();
        }
      }
    };
    utils.inherits(Dialog, UIBase);
  })();
  //Dialog.js end
  //MenuButton.js start
  // MenuButton
  ///import core
  ///import uicore
  ///import ui/menu.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      Menu = baidu.editor.ui.Menu,
      SplitButton = baidu.editor.ui.SplitButton,
      MenuButton = (baidu.editor.ui.MenuButton = function (options) {
        this.initOptions(options);
        this.initMenuButton();
      });
    MenuButton.prototype = {
      initMenuButton: function () {
        var me = this;
        this.uiName = "menubutton";
        this.popup = new Menu({
          items: me.items,
          className: me.className,
          editor: me.editor
        });
        //弹窗弹出时把当前值设置为checked状态
        this.popup.addListener("show", function () {
          var list = this;
          for (var i = 0; i < list.items.length; i++) {
            list.items[i].removeState("checked");
            if (list.items[i].value == me._value) {
              list.items[i].addState("checked");
              this.value = me._value;
            }
          }
        });
        this.initSplitButton();
      },
      setValue: function (value) {
        this._value = value;
      }
      // getHtmlTpl: function (){
      //     return '<div id="##" class="edui-box %%">' +
      //         '<div '+ (this.title ? 'title="' + this.title + '"' : '') +' id="##_state" stateful><div class="%%-body">' +
      //         '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(event, this);">' +
      //         '<div class="edui-box edui-icon"></div>' +
      //         '</div>' +
      //         //'<div class="edui-box edui-splitborder"></div>' +
      //         //'<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
      //         '</div></div></div>';
      // }
    };
    utils.inherits(MenuButton, SplitButton);
  })();
  //MenuButton.js end
  // ColorPicker.js start
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      ColorPicker = (baidu.editor.ui.ColorPicker = function (options) {
        this.initOptions(options);
        this.noColorText =
          this.noColorText || this.editor.getLang("clearColor");
        this.initUIBase();
      });

    ColorPicker.prototype = {
      getHtmlTpl: function () {
        return genColorPicker(this.noColorText, this.editor);
      },
      _onTableClick: function (evt) {
        var tgt = evt.target || evt.srcElement;
        var color = tgt.getAttribute("data-color");
        if (color) {
          this.fireEvent("pickcolor", color);
        }
      },
      _onTableOver: function (evt) {
        var tgt = evt.target || evt.srcElement;
        var color = tgt.getAttribute("data-color");
        if (color) {
          this.getDom("preview").style.backgroundColor = color;
          $(".edui-colorpicker-preview_textModifyColor").val(color);
        }
      },
      _onTableOut: function () {
        this.getDom("preview").style.backgroundColor = "";
      },
      _onPickNoColor: function () {
        this.fireEvent("picknocolor");
        $(".edui-colorpicker-preview_textModifyColor").val("输入颜色值");
      },
      _onOpenUpColorText: function (event) {
        var textModifyColor = $(
          ".edui-colorpicker-preview_textModifyColor"
        ).val();
        if (/^#[0-9a-fA-F]{6}$/.test(textModifyColor)) {
          this.fireEvent("pickcolor", textModifyColor);
        } else {
          domUtils.ing({
            tips: "您输入的十六进制颜色值无效！"
          });
        }
      },
      _cleanText: function () {
        $(".edui-colorpicker-preview_textModifyColor").val("");
        $(".edui-colorpicker-preview_textModifyColor").css("color", "black");
      }
    };
    utils.inherits(ColorPicker, UIBase);

    var COLORS = (
      "ffffff,FFCCCC,FFCC99,FFFF99,FFFFCC,99FF99,99FFFF,CCFFFF,CCCCFF,FFCCFF," +
      "CCCCCC,FF6666,FF9966,FFFF66,FFFF33,66FF99,33FFFF,66FFFF,9999FF,FF99FF," +
      "C0C0C0,FF0000,FF9900,FFCC66,FFFF00,33FF33,66CCCC,33CCFF,6666CC,CC66CC," +
      "999999,CC0000,FF6600,FFCC33,FFCC00,33CC00,00CCCC,3366FF,6633FF,CC33CC," +
      "666666,990000,CC6600,CC9933,999900,009900,339999,3333FF,6600CC,993399," +
      "333333,660000,993300,996633,666600,006600,336666,000099,333399,663366," +
      "000000,330000,663300,663333,333300,003300,003333,000066,330099,330033,"
    ).split(",");

    function genColorPicker(noColorText, editor) {
      var html =
        '<div id="##" class="edui-colorpicker %%">' +
        '<div class="edui-colorpicker-topbar edui-clearfix">' +
        '<div unselectable="on" id="##_preview" class="edui-colorpicker-preview" style="width:50px;margin-right: 5px;"></div>' +
        '<input type="text" id="textModifyColor" class="edui-colorpicker-preview_textModifyColor" style="width:80px;height: 18px;border: 1px inset #C5BCBC;color:#B2B8B9;" onfocus="$$._cleanText(event, this);" value="输入颜色值" />' +
        '<div unselectable="on" title="确定" id="openUpColorText" class="edui-colorpicker-openUpColorText" style="margin-left: 5px;" onclick="$$._onOpenUpColorText(event, this);"></div>' +
        '<div unselectable="on" title="清除颜色" class="edui-colorpicker-nocolor" onclick="$$._onPickNoColor(event, this);"></div>' +
        "</div>" +
        '<table  class="edui-box" style="border-collapse: collapse;" onmouseover="$$._onTableOver(event, this);" onmouseout="$$._onTableOut(event, this);" onclick="return $$._onTableClick(event, this);" cellspacing="0" cellpadding="0">' +
        //'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#366092;padding-top: 2px"><td colspan="10">'+editor.getLang("themeColor")+'</td> </tr>'+
        '<tr class="edui-colorpicker-tablefirstrow" >';
      for (var i = 0; i < COLORS.length; i++) {
        if (i && i % 10 === 0) {
          //html += '</tr>'+(i==60?'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#366092;"><td colspan="10">'+editor.getLang("standardColor")+'</td></tr>':'')+'<tr'+(i==60?' class="edui-colorpicker-tablefirstrow"':'')+'>';
          html +=
            "</tr>" +
            (i == 60 ? "" : "") +
            "<tr" +
            (i == 60 ? ' class="edui-colorpicker-tablefirstrow"' : "") +
            ">";
        }
        html +=
          i < 70
            ? '<td style="padding: 0 2px;"><a hidefocus title="' +
              COLORS[i] +
              '" onclick="return false;" href="javascript:" unselectable="on" class="edui-box edui-colorpicker-colorcell"' +
              ' data-color="#' +
              COLORS[i] +
              '"' +
              ' style="background-color:#' +
              COLORS[i] +
              ";border:solid #ccc;" +
              (i < 10 || i >= 60
                ? "border-width:1px;"
                : i >= 10 && i < 20
                ? "border-width:1px 1px 0 1px;"
                : "border-width:0 1px 0 1px;") +
              '"' +
              "></a></td>"
            : "";
      }
      html += "</tr></table></div>";
      return html;
    }
  })();
  // ColorPicker.js end
  //ColorButton.js start
  // ColorButton ——> ColorPicker
  ///import core
  ///import uicore
  ///import ui/colorpicker.js
  ///import ui/popup.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      ColorPicker = baidu.editor.ui.ColorPicker,
      Popup = baidu.editor.ui.Popup,
      SplitButton = baidu.editor.ui.SplitButton,
      ColorButton = (baidu.editor.ui.ColorButton = function (options) {
        this.initOptions(options);
        this.initColorButton();
      });
    ColorButton.prototype = {
      initColorButton: function () {
        var me = this;
        this.popup = new Popup({
          content: new ColorPicker({
            noColorText: me.editor.getLang("clearColor"),
            editor: me.editor,
            onpickcolor: function (t, color) {
              me._onPickColor(color);
            },
            onpicknocolor: function (t, color) {
              me._onPickNoColor(color);
            },
            onopenupcolortext: function (t, color) {
              me._onPickColor(color);
            }
          }),
          editor: me.editor
        });
        this.initSplitButton();
      },
      _SplitButton_postRender: SplitButton.prototype.postRender,
      postRender: function () {
        this._SplitButton_postRender();
        this.getDom("button_body").appendChild(
          uiUtils.createElementByHtml(
            '<div id="' + this.id + '_colorlump" class="edui-colorlump"></div>'
          )
        );
        this.getDom().className += " edui-colorbutton";
      },
      setColor: function (color) {
        this.getDom("colorlump").style.backgroundColor = color;
        this.color = color;
        if (color != "transparent") {
          $(".edui-colorpicker-preview_textModifyColor").val(color);
        }
      },
      _onPickColor: function (color) {
        if (this.fireEvent("pickcolor", color) !== false) {
          this.setColor(color);
          this.popup.hide();
        }
      },
      _onPickNoColor: function (color) {
        if (this.fireEvent("picknocolor") !== false) {
          this.popup.hide();
        }
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          UE.editor.options.ueditorChangeEvent &&
            UE.editor.options.ueditorChangeEvent();

          this.showPopup();
          var value = this.getDom("colorlump").style.backgroundColor;
          if (/rgba?\s*\([^)]*\)/.test(value)) {
            value = value.replace(/rgba?\s*\(([^)]*)\)/g, function (str) {
              return utils.fixColor("color", str);
            });
            $(".edui-colorpicker-preview_textModifyColor").val(value);
          }
        }
      }
    };
    utils.inherits(ColorButton, SplitButton);
  })();
  //ColorButton.js end
  // TablePicker.js start
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase;

    var TablePicker = (baidu.editor.ui.TablePicker = function (options) {
      this.initOptions(options);
      this.initTablePicker();
    });
    TablePicker.prototype = {
      defaultNumRows: 10,
      defaultNumCols: 10,
      maxNumRows: 20,
      maxNumCols: 20,
      numRows: 10,
      numCols: 10,
      lengthOfCellSide: 22,
      initTablePicker: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-tablepicker %%">' +
          '<div class="edui-tablepicker-body">' +
          '<div class="edui-pickarea">' +
          this.renderTableMenu() +
          "</div>" +
          "</div>" +
          "</div>"
        );
      },
      renderTableMenu: function () {
        var me = this.editor,
          uiUtils = UE.ui.uiUtils,
          lang = me.getLang("contextMenu"),
          items = "",
          subMenu = [
            {
              label: lang.edittable,
              cmdName: "edittable",
              exec: function () {
                domUtils.tablePopup();
                // me.ui._dialogs['inserttableDialog'].alterTableOpen();
              }
            },
            {
              label: lang.edittd,
              cmdName: "edittd",
              exec: function () {
                //如果没有创建，创建一下先
                if (UE.ui["edittd"]) {
                  new UE.ui["edittd"](this);
                }
                // me.ui._dialogs['edittdDialog'].open();
                domUtils.editTablePopup();
              }
            },
            "-",
            {
              label: lang.deletetable,
              cmdName: "deletetable"
            },
            {
              label: lang.insertparagraphbeforetable,
              cmdName: "insertparagraphbeforetable"
            },
            "-",
            {
              label: lang.deleterow,
              cmdName: "deleterow"
            },
            {
              label: lang.deletecol,
              cmdName: "deletecol"
            },
            "-",
            {
              label: lang.insertrow,
              cmdName: "insertrow"
            },
            {
              label: lang.insertcol,
              cmdName: "insertcol"
            },
            "-",
            {
              label: lang.mergeright,
              cmdName: "mergeright"
            },
            {
              label: lang.mergedown,
              cmdName: "mergedown"
            },
            "-",
            {
              label: lang.splittorows,
              cmdName: "splittorows"
            },
            {
              label: lang.splittocols,
              cmdName: "splittocols"
            },
            {
              label: lang.mergecells,
              cmdName: "mergecells"
            },
            {
              label: lang.splittocells,
              cmdName: "splittocells"
            }
          ];
        var last;
        for (var i = 0, si, subItems = []; (si = subMenu[i]); i++) {
          (function (subItem) {
            if (subItem == "-") {
              if ((last = subItems[subItems.length - 1]) && last !== "-") {
                subItems.push("-");
              }
            }

            if (
              (me.commands[subItem.cmdName] ||
                UE.commands[subItem.cmdName] ||
                subItem.query) &&
              (subItem.query
                ? subItem.query()
                : me.queryCommandState(subItem.cmdName)) > -1
            ) {
              subItems.push({
                label: subItem.label,
                className: "edui-for-" + subItem.cmdName,
                onclick: subItem.exec
                  ? function () {
                      subItem.exec.call(me);
                    }
                  : function () {
                      me.execCommand(subItem.cmdName, subItem.value);
                    }
              });
            }
          })(si);
        }
        if (subItems.length == 0) {
          subItems.push({
            label: "创建表格",
            className: "edittable",
            onclick: function () {
              domUtils.tablePopup();
              // me.ui._dialogs['inserttableDialog'].alterTableOpen();
            }
          });
        }
        menuButton = new UE.ui.Menu({
          items: subItems,
          editor: me
        });

        return menuButton.getContentHtmlTpl();
      },
      _UIBase_render: UIBase.prototype.render,
      render: function (holder) {
        this._UIBase_render(holder);
        this.getDom("label").innerHTML =
          "0" +
          this.editor.getLang("t_row") +
          " x 0" +
          this.editor.getLang("t_col");
      },
      _track: function (numCols, numRows) {
        var style = this.getDom("overlay").style;
        var sideLen = this.lengthOfCellSide;
        style.width = numCols * sideLen + "px";
        style.height = numRows * sideLen + "px";
        var label = this.getDom("label");
        label.innerHTML =
          numCols +
          this.editor.getLang("t_col") +
          " x " +
          numRows +
          this.editor.getLang("t_row");
        this.numCols = numCols;
        this.numRows = numRows;
      },
      _onMouseOver: function (evt, el) {
        var rel = evt.relatedTarget || evt.fromElement;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.getDom("label").innerHTML =
            "0" +
            this.editor.getLang("t_col") +
            " x 0" +
            this.editor.getLang("t_row");
          this.getDom("overlay").style.visibility = "";
        }
      },
      _onMouseOut: function (evt, el) {
        var rel = evt.relatedTarget || evt.toElement;
        if (!uiUtils.contains(el, rel) && el !== rel) {
          this.getDom("label").innerHTML =
            "0" +
            this.editor.getLang("t_col") +
            " x 0" +
            this.editor.getLang("t_row");
          this.getDom("overlay").style.visibility = "hidden";
        }
      },
      _onMouseMove: function (evt, el) {
        var style = this.getDom("overlay").style;
        var offset = uiUtils.getEventOffset(evt);
        var sideLen = this.lengthOfCellSide;
        var numCols = Math.ceil(offset.left / sideLen);
        var numRows = Math.ceil(offset.top / sideLen);
        this._track(numCols, numRows);
      },
      _onClick: function () {
        this.fireEvent("picktable", this.numCols, this.numRows);
      },
      _onMore: function () {
        this.fireEvent("more");
      }
    };
    utils.inherits(TablePicker, UIBase);
  })();
  // TablePicker.js end
  //TableButton.js start
  // TableButton ——> TablePicker
  ///import core
  ///import uicore
  ///import ui/popup.js
  ///import ui/tablepicker.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      TablePicker = baidu.editor.ui.TablePicker,
      SplitButton = baidu.editor.ui.SplitButton,
      TableButton = (baidu.editor.ui.TableButton = function (options) {
        this.initOptions(options);
        this.initTableButton();
      });
    TableButton.prototype = {
      initTableButton: function () {
        var me = this;
        this.popup = new Popup({
          content: new TablePicker({
            editor: me.editor,
            onpicktable: function (t, numCols, numRows) {
              me._onPickTable(numCols, numRows);
            },
            onmore: function () {
              me.popup.hide();
              me.fireEvent("more");
            }
          }),
          editor: me.editor
        });
        this.initSplitButton();
      },

      _onPickTable: function (numCols, numRows) {
        if (this.fireEvent("picktable", numCols, numRows) !== false) {
          this.popup.hide();
        }
      },
      _onButtonClick: function (event) {
        /*if (!this.isDisabled()) {
                    if(typeof this.editor.options.ueditorChangeEvent == "function"){
                        this.editor.options.ueditorChangeEvent();
                    }
                    this.fireEvent('buttonclick');
                    baidu.editor._internal(this.id);
                    baidu.editor._inserttable(this);
                }*/
        this._onArrowClick(event);
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
          '<div class="edui-box edui-icon"></div>' +
          (this.showText
            ? '<div class="edui-box edui-label">' + this.label + "</div>"
            : "") +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          "</div></div></div>"
        );
      }
    };
    utils.inherits(TableButton, SplitButton);
  })();
  //TableButton.js end
  // QQFacePicker.js start
  ///import core
  ///import uicore
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase,
      QQFacePicker = (baidu.editor.ui.QQFacePicker = function (options) {
        this.initOptions(options);
        this.noColorText =
          this.noColorText || this.editor.getLang("clearColor");
        this.initUIBase();
      });

    QQFacePicker.prototype = {
      getHtmlTpl: function () {
        return genQQFacePicker(this.editor);
      },
      _onTableClick: function (evt) {
        var tgt = evt.target || evt.srcElement;
        if (tgt.tagName === "IMG") {
          this.editor.execCommand("insertHtml", tgt.title);
          //this.editor.execCommand('insertHtml', tgt.outerHTML+'<span style="display:none">'+tgt.title+'</span>');
          this.fireEvent("closeface");
        }
      }
    };
    utils.inherits(QQFacePicker, UIBase);

    var faceList = [
      "/惊讶",
      "/撇嘴",
      "/色",
      "/发呆",
      "/得意",
      "/害羞",
      "/闭嘴",
      "/睡",
      "/大哭",
      "/尴尬",
      "/发怒",
      "/调皮",
      "/呲牙",
      "/微笑",
      "/难过",
      "/酷",
      "/折磨",
      "/吐",
      "/偷笑",
      "/可爱",
      "/白眼",
      "/傲慢",
      "/饥饿",
      "/困",
      "/惊恐",
      "/流汗",
      "/憨笑",
      "/大兵",
      "/奋斗",
      "/疑问",
      "/嘘",
      "/晕",
      "/衰",
      "/骷髅",
      "/敲打",
      "/再见",
      "/发抖",
      "/爱情",
      "/跳跳",
      "/猪头",
      "/拥抱",
      "/蛋糕",
      "/闪电",
      "/炸弹",
      "/刀",
      "/足球",
      "/便便",
      "/咖啡",
      "/饭",
      "/玫瑰",
      "/凋谢",
      "/爱心",
      "/心碎",
      "/礼物",
      "/太阳",
      "/月亮",
      "/强",
      "/弱",
      "/握手",
      "/飞吻",
      "/怄火",
      "/西瓜",
      "/冷汗",
      "/抠鼻",
      "/鼓掌",
      "/出糗",
      "/坏笑",
      "/左哼哼",
      "/右哼哼",
      "/哈欠",
      "/鄙视",
      "/委屈",
      "/快哭了",
      "/阴险",
      "/亲亲",
      "/吓",
      "/可怜",
      "/菜刀",
      "/啤酒",
      "/篮球",
      "/乒乓",
      "/示爱",
      "/瓢虫",
      "/抱拳",
      "/勾引",
      "/拳头",
      "/差劲",
      "/爱你",
      "/NO",
      "/OK",
      "/转圈",
      "/磕头",
      "/回头",
      "/跳绳",
      "/挥手",
      "/激动",
      "/街舞",
      "/献吻",
      "/左太极",
      "/右太极"
    ];
    function genQQFacePicker(editor) {
      var html =
        '<div id="##" class="edui-qqface %%">' +
        '<table  class="edui-box" style="border-collapse: collapse;" onclick="return $$._onTableClick(event, this);" cellspacing="0" cellpadding="0"><tr>';
      for (var i = 1; i <= faceList.length; i++) {
        html +=
          '<td id="' +
          i +
          '"><img _hidetool="true" src="' +
          editor.options.BUS_UEDITOR_HOME_URL_IMAGE +
          "/image/qqface/" +
          i +
          '.gif" id="img' +
          i +
          '" title="' +
          faceList[i - 1] +
          '"/></td>';
        if (i % 15 == 0) html += "</tr><tr>";
      }
      html += "</tr></table></div>";
      return html;
    }
  })();
  // QQFacePicker.js end
  //QQFacerButton.js start
  // QQFacerButton ——> QQFacePicker
  ///import core
  ///import uicore
  ///import ui/colorpicker.js
  ///import ui/popup.js
  ///import ui/splitbutton.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      QQFacePicker = baidu.editor.ui.QQFacePicker,
      Popup = baidu.editor.ui.Popup,
      SplitButton = baidu.editor.ui.SplitButton,
      QQFacerButton = (baidu.editor.ui.QQFacerButton = function (options) {
        this.initOptions(options);
        this.initQQFacerButton();
      });
    QQFacerButton.prototype = {
      initQQFacerButton: function () {
        var me = this;
        this.popup = new Popup({
          content: new QQFacePicker({
            noColorText: me.editor.getLang("clearColor"),
            editor: me.editor,
            oncloseface: function () {
              me._onCloseFace();
            }
          }),
          editor: me.editor
        });
        this.initSplitButton();
      },
      _SplitButton_postRender: SplitButton.prototype.postRender,
      postRender: function () {
        this._SplitButton_postRender();
        this.getDom("button_body").appendChild(
          uiUtils.createElementByHtml(
            '<div id="' + this.id + '_colorlump" class="edui-colorlump"></div>'
          )
        );
        this.getDom().className += " edui-colorbutton";
      },
      _onCloseFace: function () {
        this.popup.hide();
      },
      _onButtonClick: function () {
        this._onArrowClick();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
          '<div class="edui-qqface edui-icon"></div>' +
          "</div>" +
          "</div></div></div>"
        );
      }
    };
    utils.inherits(QQFacerButton, SplitButton);
  })();
  //QQFacerButton.js end
  // PasteImgUpload.js start
  // chrome 360急速等粘贴图片，实现浏览器直接上传图片。
  (function () {
    var _win;

    var PasteImgUpload = (baidu.editor.PasteImgUpload = function (ev, me) {
      if (
        /chrome\/(\d+\.\d)/gi.test(navigator.appVersion) &&
        me.options.isPasteImage
      ) {
        try {
          //_win = document.getElementById("edui1_iframeholder").firstChild.contentWindow;
          _win = me.ui.getDom("iframeholder").firstChild.contentWindow;

          var items = ev.clipboardData.items;
          var file;
          for (var i = 0; i < items.length && i <= 1; i++) {
            if (
              items[i].kind == "file" &&
              items[i].type.indexOf("image") > -1
            ) {
              file = items[i].getAsFile();
            }
          }
          if (file) {
            //如果支持直接粘贴且读到文件，则把浏览器默认粘贴图片的操作屏蔽，不然会出现两张图片。
            ev.preventDefault();
            var reader = new FileReader();
            reader.onload = function (evt) {
              var result = evt.target.result;
              var arr = result.split(",");
              var data = encodeURIComponent(arr[1]); // raw base64
              var contentType = arr[0].split(";")[0].split(":")[1];
              var tempImageId = Math.random();
              var image =
                "<img id='" +
                tempImageId +
                "' word_img='' src='" +
                result +
                "'  />";
              me.execCommand("inserthtml", image, true);
              var message = confirm("您确定要上传粘贴的图片吗？");
              if (message) {
                chromePasteImageLoad();

                $.ajax({
                  type: "POST",
                  url:
                    me.options.upPasteIamgeUrl + "&app=" + me.options.upImgApp,
                  data: "contentType=" + contentType + "&data=" + data,
                  success: function (info) {
                    var imageInfo = JSON.parse(info);
                    if (imageInfo.msg) {
                      alert(imageInfo.msg);
                      return;
                    }
                    var images = $(_win.document.body).find("img");
                    for (var i = 0; i < images.length; i++) {
                      if ($(images[i]).attr("src") == result) {
                        $(images[i]).attr("class", "ts_lazy_load_img");
                        $(images[i])
                          .attr("alt", "")
                          .attr("src", imageInfo["path"])
                          .attr("width", imageInfo["width"])
                          .attr("height", imageInfo["height"]);
                        $(images[i])
                          .attr("data-w", imageInfo["width"])
                          .attr("data-h", imageInfo["height"])
                          .attr("data-ratio", imageInfo["ratio"]);
                      }
                    }
                    $("#progressBody_Body").remove();
                    $("#progressWrap_Wrap").remove();
                  }
                });
                $(".progressCancel").live("click", function () {
                  var images = $(_win.document.body).find("img");
                  for (var i = 0; i < images.length; i++) {
                    if ($(images[i]).attr("id") == tempImageId) {
                      $(images[i]).remove();
                    }
                  }
                  $("#progressBody_Body").remove();
                  $("#progressWrap_Wrap").remove();
                });
              } else {
                var images = $(_win.document.body).find("img");
                for (var i = 0; i < images.length; i++) {
                  if ($(images[i]).attr("id") == tempImageId) {
                    $(images[i]).remove();
                  }
                }
              }
            };
            reader.readAsDataURL(file);
            return true;
          }
          return false;
        } catch (exp) {
          return false;
        }
      }
      return false;
    });
    function chromePasteImageLoad() {
      //setTimeout(function(){
      var progressIng = [
        '<div id="progressBody_Body" class="bodyDisable"></div>',
        '<div id="progressWrap_Wrap" class="bodyProgressWrap">',
        '<div class="progressCenter"></div>',
        '<div class="progressIngBody">',
        '<div class="progressIngTitle">图片上传中...</div>',
        '<div class="progressIngMission">',
        '<div class="mission"><div id="progress" class="progress"></div></div>',
        '<div id="progressNum" class="progressNum"></div>',
        "</div>",
        '<div class="progressInfo"><span class="progressFileSize"></span><a class="progressCancel" href="javascript:;">取消</a></div>',
        "</div>",
        "</div>"
      ];
      $(_win.parent.document.body).append(progressIng.join(""));
      console.log(_win.parent.document.body, "scrollHeight==");
      let height =
        _win.parent.document.body.scrollHeight ||
        _win.parent.document.body.querySelector("div").scrollHeight;
      $("#progressBody_Body").css("height", height + "px");
      $("#progressWrap_Wrap").css(
        "top",
        editor.container.offsetTop - editor.container.offsetHeight / 2 + "px"
      );
      //}//, 2000);
    }
  })();
  // PasteImgUpload.js end

  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase;

    var UpLoadImgSetPicker = (baidu.editor.ui.UpLoadImgSetPicker = function (
      options
    ) {
      this.initOptions(options);
      this.initUpLoadImgSetPicker();
    });

    UpLoadImgSetPicker.prototype = {
      initUpLoadImgSetPicker: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return (
          '<div style="font-size: 12px;width: 250px;text-align: left;" class="edui-popup-image xheDialogDiv">' +
          '<div style="padding:4px;-ms-border-radius: 5px;border-radius: 5px;">' +
          '文件类型：<input style="border:0px solid black;" type="radio" id="faiscoLocalFileImage" name="faiscoImageType" checked=checked />' +
          '<span id="faiscoLocalFileImageSpan" style="cursor:default;">本地文件</span>' +
          '<input style="border:0px solid black;margin-left:5px;" type="radio" id="faiscoWebFileImage" name="faiscoImageType"/>' +
          '<span id="faiscoWebFileImageSpan" style="cursor:default;">网络地址</span>' +
          "</div>" +
          '<div id="xheImageDiv" style="margin-top: 6px;margin-left: 5px;height: 62px;">图片文件：' +
          //'<span class="xheUpload" style="position: relative;display: inline-block;width: 164px;">'+
          //'<input type="text" style="visibility:hidden;" tabindex="-1">'+
          '<input type="text" id="xheImgSrc" disabled="true" value="" style="position: absolute;width: 107px;top: 0px;left: 0px;z-index: 1000003;">' +
          //'<input type="button" value="浏览" class="xheBtn" tabindex="-1" style="position: absolute;top: 0px;left: 114px;width: 50px;z-index: 1000001;padding: 0;">'+
          //'<input type="file" class="xheFile" id="xheFileUploadImage" size="13" name="filedata" tabindex="-1" style="cursor: pointer;position: absolute;top: 0px;left: 0px;width: 164px;opacity: 0;-ms-filter: alpha(opacity=0);filter: alpha(opacity=0);z-index: 1000002;">'+
          "</span>" +
          "</div>" +
          '<div id="xheImageWebDiv" style="display:none;height: 62px;padding: 3px;">' +
          '<div style="padding: 3px;">图片链接：' +
          '<input type="text" id="xheImgLink" style="width:150px;" />' +
          "</div>" +
          '<div style="padding: 3px;">宽度高度：' +
          '<input type="text" id="xheImgWidth" style="width:40px;" /> x <input type="text" id="xheImgHeight" style="width:40px;" />' +
          "</div>" +
          '<div style="padding: 3px;">宽高比：' +
          '<input type="text" id="xheImgRatio" style="width:40px;" />' +
          "</div>" +
          "</div>" +
          '<div class="btn_group">' +
          '<button class="btn_sure">确定</button>' +
          '<button class="btn_cancel">取消</button>' +
          "</div>" +
          // '<div style="text-align:right;">' +
          // '<button  style="cursor: pointer;">确定</button>' +
          // '<button  style="cursor: pointer;">取消</button>' +
          // '</div>' +
          "</div>"
        );
      },
      _UIBase_render: UIBase.prototype.render
    };

    utils.inherits(UpLoadImgSetPicker, UIBase);
  })();
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      UpLoadImgSetPicker = baidu.editor.ui.UpLoadImgSetPicker,
      SplitButton = baidu.editor.ui.SplitButton,
      UpLoadImgSetButton = (baidu.editor.ui.UpLoadImgSetButton = function (
        options
      ) {
        this.initOptions(options);
        this.initUpLoadImgSetButton();
      });

    UpLoadImgSetButton.prototype = {
      initUpLoadImgSetButton: function () {
        var me = this;
        this.popup = new Popup({
          //传入配置参数
          content: new UpLoadImgSetPicker({ editor: me.editor }),
          editor: me.editor,
          hide: function () {
            if (!this._hidden && this.getDom()) {
              this.getDom().style.display = "none";
              this._hidden = true;
              this.fireEvent("hide");
            }
          }
        });
        var flag = 0;
        this.popup.addListener("postRenderAfter", function () {
          var popupUI = this;
          if (flag) return;
          var cont = this.getDom(),
            btnConfirm = cont.getElementsByTagName("button")[0],
            btnCancel = cont.getElementsByTagName("button")[1];
          if (btnConfirm && btnCancel) {
            btnConfirm.onclick = function (urlSrc) {
              var jImg = $("#imageIncludeDiv"),
                jParent = $("img"),
                jSrc = $("#xheImgSrc"),
                jAlt = $("#xheImgAlt"),
                jAlign = $("#xheImgAlign"),
                jWidth = $("#xheImgWidth"),
                jHeight = $("#xheImgHeight"),
                jBorder = $("#xheImgBorder"),
                jVspace = $("#xheImgVspace"),
                jHspace = $("#xheImgHspace"),
                jLink = $("a"),
                jRatio = $("#xheImgRatio"),
                jImgLink = $("#xheImgLink");

              var ie7 = $.browser.msie && $.browser.version == 7,
                ie6 = $.browser.msie && $.browser.version == 6;
              var url = jImgLink.val();
              if (!url) {
                url = urlSrc;
              }

              if (url != "" && url != "http://") {
                var aUrl = url.split(" "),
                  sAlt = jAlt.val(),
                  sAlign = jAlign.val(),
                  sWidth = jWidth.val(),
                  sHeight = jHeight.val(),
                  sRatio = jRatio.val(),
                  sBorder = jBorder.val(),
                  sVspace = jVspace.val(),
                  sHspace = jHspace.val();
                if (aUrl.length > 1) {
                  //批量插入
                  var sTemplate = '<img src="xhe_tmpurl"',
                    sImg,
                    arrImg = [];

                  if (sAlt != "") {
                    sTemplate += ' alt="' + sAlt + '"';
                  } else {
                    sTemplate += ' alt=""';
                  }
                  if (sAlign && sAlign != "")
                    sTemplate += ' align="' + sAlign + '"';
                  if (sWidth && sWidth != "")
                    sTemplate += ' width="' + sWidth + '"';
                  if (sHeight && sHeight != "")
                    sTemplate += ' height="' + sHeight + '"';
                  if (sBorder && sBorder != "")
                    sTemplate += ' border="' + sBorder + '"';
                  if (sVspace && sVspace != "")
                    sTemplate += ' vspace="' + sVspace + '"';
                  if (sHspace && sHspace != "")
                    sTemplate += ' hspace="' + sHspace + '"';
                  if (sRatio && sRatio != "")
                    sTemplate += ' data-ratio="' + sRatio + '"';
                  if (sWidth && sWidth != "") {
                    sTemplate += ' width="' + sWidth + '"';
                    sTemplate += ' data-w="' + sWidth + '"';
                  }
                  if (sHeight && sHeight != "") {
                    sTemplate += ' height="' + sHeight + '"';
                    sTemplate += ' data-h="' + sHeight + '"';
                  }
                  if (sWidth && sWidth != "" && sRatio && sRatio != "") {
                    sTemplate += ' class="ts_lazy_load_img"';
                  }

                  sTemplate += " />";
                  for (var i in aUrl) {
                    url = aUrl[i];
                    if (url != "") {
                      url = url.split(",");
                      sImg = sTemplate;
                      sImg = sImg.replace("xhe_tmpurl", url[0]);
                      if (url[1])
                        sImg =
                          '<a href="' +
                          url[1] +
                          '" target="_blank">' +
                          sImg +
                          "</a>";
                      arrImg.push(sImg);
                    }
                  }
                  me.editor.execCommand(
                    "inserthtml",
                    arrImg.join("&nbsp;"),
                    true
                  );
                  popupUI.hide();
                } else if (aUrl.length == 1) {
                  //单URL模式
                  url = aUrl[0];
                  if (url != "") {
                    url = url.split(",");
                    var image;
                    if (jImgLink.val()) {
                      image =
                        '<a href="' +
                        jImgLink.val() +
                        '"><img class="ts_lazy_load_img"  src="' +
                        url[0] +
                        '" width="' +
                        sWidth +
                        '" height="' +
                        sHeight +
                        '" data-src="' +
                        url[0] +
                        '" data-w="' +
                        sWidth +
                        '" data-h="' +
                        sHeight +
                        '" data-ratio="' +
                        sRatio +
                        '"/></a>';
                    } else {
                      image =
                        '<img class="ts_lazy_load_img" src="' +
                        url[0] +
                        '" data-w="' +
                        sWidth +
                        '" data-h="' +
                        sHeight +
                        '" data-ratio="' +
                        sRatio +
                        '"/>';
                    }
                    me.editor.execCommand("inserthtml", image, true);
                    jImgLink.val("");
                    jWidth.val("");
                    jHeight.val("");
                    popupUI.hide();
                  }
                }

                $(".xheUpload").remove();
                var xheImgSrc = $(
                  '<input type="text" disabled="true" id="xheImgSrc" value="" style="position: absolute;width: 107px;top: 0px;left: 0px;z-index: 1000003;">'
                );
                $("#xheImageDiv").append(xheImgSrc);
                return false;
              }
            };

            btnCancel.onclick = function () {
              popupUI.hide();
            };
            document.getElementById(
              "faiscoLocalFileImage"
            ).onclick = function () {
              document.getElementById("xheImageDiv").style.display = "block";
              document.getElementById("xheImageWebDiv").style.display = "none";
            };
            document.getElementById(
              "faiscoWebFileImage"
            ).onclick = function () {
              document.getElementById("xheImageDiv").style.display = "none";
              document.getElementById("xheImageWebDiv").style.display = "block";
            };
            document.getElementById(
              "faiscoLocalFileImageSpan"
            ).onclick = function () {
              document.getElementById("xheImageDiv").style.display = "block";
              document.getElementById("xheImageWebDiv").style.display = "none";
              $("#faiscoLocalFileImage").attr("checked", "true");
            };
            document.getElementById(
              "faiscoWebFileImageSpan"
            ).onclick = function () {
              document.getElementById("xheImageDiv").style.display = "none";
              document.getElementById("xheImageWebDiv").style.display = "block";
              $("#faiscoWebFileImage").attr("checked", "true");
            };
          }
          flag = 1;
        });
        this.initSplitButton();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(); ">' +
          '<div class="edui-box edui-icon"></div>' +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          //'<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
          // '<div class="edui-box edui-splitborder"></div><div class="edui-box edui-arrow" onclick="$$._onButtonClick();"></div>'+
          "</div></div></div>"
        );
      },
      _onButtonClick: function (event, el) {
        if (!this.isDisabled()) {
          this.showPopup();
        }
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          this.editor.options.ueditorChangeEvent &&
            this.editor.options.ueditorChangeEvent();
          this.showPopup();
          var jText = $("#xheImgSrc"),
            xheDivSrcPanel = $("#xheImageDiv"),
            toUrl =
              this.editor.options.upLoadImageUrl +
              "&app=" +
              this.editor.options.upImgApp +
              "&maxWidth=1024&maxHeight=1024&imgMode=2&_TOKEN=" +
              $("#_TOKEN").attr("value"),
            uptext = this.editor.options.upImageExt;
          this.editor.execCommand(
            "uploadinit",
            this,
            jText,
            toUrl,
            uptext,
            xheDivSrcPanel
          );
        }
      }
    };

    utils.inherits(UpLoadImgSetButton, SplitButton);
  })();
  // UpLoadHoverImgSetPicker.js start
  // import util
  // import uicore
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase;

    var UpLoadHoverImgSetPicker = (baidu.editor.ui.UpLoadHoverImgSetPicker = function (
      options
    ) {
      this.initOptions(options);
      this.initUpLoadHoverImgSetPicker();
    });

    UpLoadHoverImgSetPicker.prototype = {
      initUpLoadHoverImgSetPicker: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        return (
          '<div class="edui-popup-hoverimage">' +
          '<div class="insertHoverImg defImg">' +
          '<div class="img_tips">默认图片</div>' +
          // '<input class="insert_input input_btn" type="button" value="插入图片" onclick=' + this.editor.options.outerFunction.htmlChoiceDefImage + ' />' +
          '<div class="insert_img btn_base" onclick="' +
          this.editor.options.outerFunction.htmlChoiceDefImage +
          '">插入图片</div>' +
          "</div>" +
          '<div class="insertHoverImg hoverImg">' +
          '<div class="img_tips">鼠标悬停图片</div>' +
          '<div class="insert_img btn_base"  onclick="' +
          this.editor.options.outerFunction.htmlChoiceHoverImage +
          '">插入图片</div>' +
          // '<input class="insert_input input_btn" type="button" value="插入图片" onclick=' + this.editor.options.outerFunction.htmlChoiceHoverImage + ' />' +
          "</div>" +
          '<div class="btn_group">' +
          '<button class="btn_sure">确定</button>' +
          '<button class="btn_cancel">取消</button>' +
          "</div>" +
          "</div>"
        );
      },
      _UIBase_render: UIBase.prototype.render
    };

    utils.inherits(UpLoadHoverImgSetPicker, UIBase);
  })();
  // UpLoadHoverImgSetPicker.js end
  //UploadHoverImgSetButton.js start
  ///UploadHoverImgSetButton ——> UpLoadHoverImgSetPicker
  (function () {
    var utils = baidu.editor.utils,
      domUtils = baidu.editor.dom.domUtils,
      Popup = baidu.editor.ui.Popup,
      UpLoadHoverImgSetPicker = baidu.editor.ui.UpLoadHoverImgSetPicker,
      SplitButton = baidu.editor.ui.SplitButton,
      UploadHoverImgSetButton = (baidu.editor.ui.UploadHoverImgSetButton = function (
        options
      ) {
        this.initOptions(options);
        this.initUploadHoverImgSetButton();
      });

    UploadHoverImgSetButton.prototype = {
      initUploadHoverImgSetButton: function () {
        var me = this;
        this.editor.options.hoverImageData = {
          // 用于存储鼠标悬停图片的数据，每次确定和取消都会清空这个对象
          defImg: {},
          hovImg: {}
        };

        this.popup = new Popup({
          //传入配置参数
          content: new UpLoadHoverImgSetPicker({ editor: me.editor }),
          editor: me.editor,
          hide: function () {
            if (!this._hidden && this.getDom()) {
              this.getDom().style.display = "none";
              this._hidden = true;
              this.fireEvent("hide");
              me.editor.options.clearPopupContent();
            }
          }
        });

        var flag = 0;
        this.popup.addListener("postRenderAfter", function (urlSrc) {
          var popupUI = this;
          if (flag) {
            return;
          }

          var cont = this.getDom(),
            btnConfirm = cont.getElementsByTagName("button")[0],
            btnCancel = cont.getElementsByTagName("button")[1];
          if (btnConfirm && btnCancel) {
            btnConfirm.onclick = function () {
              var defImg = me.editor.options.hoverImageData.defImg;
              var defImgId = defImg.id;
              var defImgPath = defImg.path;
              var defImgWidth = defImg.width;
              var defImgHeight = defImg.height;

              var hovImg = me.editor.options.hoverImageData.hovImg;
              var hovImgPath = hovImg.path;
              var str = "";

              if (!defImgPath || defImgPath.length == 0) {
                domUtils.ing({
                  tips: "请添加默认图片"
                });
                return;
              }

              if (!hovImgPath || hovImgPath.length == 0) {
                domUtils.ing({
                  tips: "请添加悬停图片"
                });
                return;
              }

              str +=
                '<img class="hoverImage" id="hoverImg_' +
                defImgId +
                '" src="' +
                defImgPath +
                '" _defImg="' +
                defImgPath +
                '" _hovImg="' +
                hovImgPath +
                '"';
              if (defImgWidth && defImgHeight) {
                str += ' width="' + defImgWidth + '"';
                str += ' height="' + defImgHeight + '"';
              }
              str += "/>";
              me.editor.pasteChoiceImage(str);
              me.editor.fireEvent("afterscencerestore");

              me.editor.options.clearPopupContent();
              // me.editor.options.restoreHoverPickerWidth();
              popupUI.hide();
              me.editor.options.hoverImageData = {
                defImg: {},
                hovImg: {}
              };
            };

            btnCancel.onclick = function () {
              var defImg = me.editor.options.hoverImageData.defImg;
              $(me.editor.body)
                .find("#hoverImg_" + defImg.id)
                .remove();

              me.editor.options.clearPopupContent();
              // me.editor.options.restoreHoverPickerWidth();
              popupUI.hide();
              me.editor.options.hoverImageData = {
                defImg: {},
                hovImg: {}
              };
            };
          }

          flag = 1;
        });

        this.editor.options.addHoverThumb = function (isDef) {
          var defImg = this.hoverImageData.defImg;
          var hovImg = this.hoverImageData.hovImg;
          var defImgPath = defImg.path;
          var hovImgPath = hovImg.path;
          var cont = me.popup.getDom();
          var popupBody = $(cont).find(".edui-popup-body");
          // var popupContent = $(cont).find(".edui-popup-content").children()[0];

          if (defImgPath || hovImgPath) {
            var delBtn = "<div class='clearHoverThumb' title='删除'></div>";

            // $(popupBody).css("width", "170px");
            // $(popupContent).css("width", "155px");

            if (isDef) {
              var insertHoverImgItemDef = $(cont).find(
                ".insertHoverImg.defImg"
              );

              if ($(insertHoverImgItemDef).find("img").length == 0) {
                var defImgThumb =
                  "<img class='hover_img' src=" +
                  defImgPath +
                  " width='60' height='22'/>";

                // $(insertHoverImgItemDef).css("width", "150px");
                $(insertHoverImgItemDef).find(".insert_img").remove();
                $(insertHoverImgItemDef).append(defImgThumb);
                $(insertHoverImgItemDef).append(delBtn);
              }
            } else {
              var insertHoverImgItemHov = $(cont).find(
                ".insertHoverImg.hoverImg"
              );

              if ($(insertHoverImgItemHov).find("img").length == 0) {
                var hovImgThumb =
                  "<img class='hover_img' src=" +
                  hovImgPath +
                  " width='60' height='22' />";

                // $(insertHoverImgItemHov).css("width", "150px");
                $(insertHoverImgItemHov).find(".insert_img").remove();
                $(insertHoverImgItemHov).append(hovImgThumb);
                $(insertHoverImgItemHov).append(delBtn);
              }
            }
          }

          $(cont)
            .find(".clearHoverThumb")
            .off(".hoverImage")
            .on("click.hoverImage", function () {
              me.editor.options.clearHoverThumb(this);
              // me.editor.options.restoreHoverPickerWidth();

              if ($(cont).find("img").length == 0) {
                // $(me.editor.body).find("#hoverImg_" + hoverImageData.defImgId).remove();
                me.editor.options.hoverImageData = {
                  defImg: {},
                  hovImg: {}
                };
              }
            });
        };

        this.editor.options.clearHoverThumb = function (delBtn) {
          var cont = me.popup.getDom();
          var hoverImageData = me.editor.options.hoverImageData;
          var insertHoverImgItem = $(delBtn).parent();
          var isClearDefItem = $(delBtn).parent(".defImg").length;
          var insertHtml =
            '<div class="insert_img btn_base" onclick="' +
            this.editor.options.outerFunction.htmlChoiceDefImage +
            '">插入图片</div>';

          if (isClearDefItem) {
            hoverImageData.defImg = {};
          } else {
            hoverImageData.hovImg = {};
            insertHtml =
              '<div class="insert_img btn_base"  onclick="' +
              this.editor.options.outerFunction.htmlChoiceHoverImage +
              '">插入图片</div>';
          }

          $(delBtn).remove();
          $(insertHoverImgItem).find("img").remove();
          $(insertHoverImgItem).append(insertHtml);
        };

        this.editor.options.clearPopupContent = function () {
          var cont = me.popup.getDom();
          var delBtns = $(cont).find(".clearHoverThumb");

          for (var i = 0; i < delBtns.length; i++) {
            me.editor.options.clearHoverThumb(delBtns[i]);
          }
          // me.editor.options.restoreHoverPickerWidth();
        };

        // this.editor.options.restoreHoverPickerWidth = function () {
        //     var cont = me.popup.getDom();

        //     if ($(cont).find("img").length == 0) {
        //         var popupBody = $(cont).find(".edui-popup-body");
        //         var popupContent = $(cont).find(".edui-popup-content").children()[0];
        //         var insertHoverImgItems = $(cont).find(".insertHoverImg");

        //         $(popupBody).css("width", "153px");
        //         $(popupContent).css("width", "135px");
        //         $(insertHoverImgItems).css("width", "119px");
        //     }
        // };
        this.initSplitButton();

        // if(me.editor.options.outerFunction.hoverChangeImage){
        //     me.editor.addListener("afterscencerestore", me.editor.options.outerFunction.hoverChangeImage);
        // }
        me.editor.addListener(
          "afterscencerestore",
          UE.commands["hoverchangeimage"].execCommand
        );
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful>' +
          '<div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick();">' +
          '<div class="edui-box edui-icon"></div>' +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          "</div>" +
          "</div>" +
          "</div>"
        );
      },
      _onButtonClick: function (event, el) {
        if (!this.isDisabled()) {
          this.showPopup();
          $(this.getDom())
            .parents(".toolbarsBlock")
            .find(".blockSet")[0]
            .click(); //把include的弹窗隐藏
        }
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          UE.editor.options.ueditorChangeEvent &&
            UE.editor.options.ueditorChangeEvent();

          this.showPopup();
        }
      }
    };

    utils.inherits(UploadHoverImgSetButton, SplitButton);
  })();
  //UploadHoverImgSetButton.js end
  // PhoneSetPicker.js start
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase;

    var PhoneSetPicker = (baidu.editor.ui.PhoneSetPicker = function (options) {
      this.initOptions(options);
      this.initPhoneSetPicker();
    });

    PhoneSetPicker.prototype = {
      initPhoneSetPicker: function () {
        this.initUIBase();
      },

      getHtmlTpl: function () {
        var me = this.editor;

        // return [
        //     '<div id="xheDialogPhone" style="width: 240px;">',
        //         '<div style="padding-top: 10px;">',
        //             '<div style="clear:both;float:left; width:60px; line-height:23px; text-align:right;">电话号码：</div>',
        //             '<div style="float:left;">',
        //                 '<input type="text" id="xhePhoneNumber" value="" class="xheText" />',
        //             '</div>',
        //         '</div>',
        //         // '<div style="text-align:right; clear:both; ">',
        //         //     '<button style="margin-top:22px;*line-height:16px;cursor: pointer;">确定</button>',
        //         //     '<button style="*line-height:16px;cursor: pointer;">取消</button>',
        //         // '</div>',
        //         '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>',
        //     '</div>'
        //     ].join('');
        return (
          '<div class="edui-popup-phone">' +
          '<div class="phone-num">' +
          '<div class="phone-num-text">电话号码：</div>' +
          '<input type="text" class="phone-num-input" maxlength="30"/>' +
          "</div>" +
          '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>' +
          "</div>"
        );
      }
    };

    utils.inherits(PhoneSetPicker, UIBase);
  })();
  // PhoneSetPicker.js end
  //PhoneSetButton.js start
  // PhoneSetButton ——> PhoneSetPicker
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      PhoneSetPicker = baidu.editor.ui.PhoneSetPicker,
      SplitButton = baidu.editor.ui.SplitButton,
      PhoneSetButton = (baidu.editor.ui.PhoneSetButton = function (options) {
        this.initOptions(options);
        this.initPhoneSetButtion();
      });

    PhoneSetButton.prototype = {
      initPhoneSetButtion: function () {
        var me = this;
        this.popup = new Popup({
          //传入配置参数
          content: new PhoneSetPicker({ editor: me.editor }),
          editor: me.editor,
          hide: function () {
            if (!this._hidden && this.getDom()) {
              this.getDom().style.display = "none";
              this._hidden = true;
              this.fireEvent("hide");
            }
          }
        });
        var flag = 0;
        this.popup.addListener("postRenderAfter", function () {
          var popupUI = this;
          if (flag) return;
          var cont = this.getDom(),
            btnPhone = cont.getElementsByTagName("button")[0],
            btnPhoneCancel = cont.getElementsByTagName("button")[1];
          btnPhone.onclick = function () {
            me.editor.execCommand(
              "phoneservice",
              cont.getElementsByClassName("phone-num-input")[0].value
            );
          };

          btnPhoneCancel.onclick = function () {
            popupUI.hide();
          };

          flag = 1;
        });
        this.initSplitButton();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(event, this);">' +
          '<div class="edui-box edui-icon"></div>' +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          //'<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
          "</div></div></div>"
        );
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          this.showPopup();

          this.editor.options.ueditorChangeEvent &&
            this.editor.options.ueditorChangeEvent();

          var me = this,
            editor = me.editor,
            range = editor.selection.getRange();
          var phoneNumber;

          var phoneNumNode = this.popup
            .getDom()
            .getElementsByClassName("phone-num-input")[0];

          var phoneservice = range.collapsed
              ? editor.queryCommandValue("link")
              : editor.selection.getStart(),
            phoneservice = domUtils.findParentByTagName(
              phoneservice,
              "a",
              true
            );

          if (phoneservice) {
            phoneNumber = phoneservice.getAttribute("phonenumber");
          }

          phoneNumNode.value = phoneNumber ? phoneNumber : "";
        }
      }
    };

    utils.inherits(PhoneSetButton, SplitButton);
  })();
  //PhoneSetButton.js end
  // LinkSetPicker.js start
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase;

    var LinkSetPicker = (baidu.editor.ui.LinkSetPicker = function (options) {
      this.initOptions(options);
      this.initLinkSetPicker();
    });
    LinkSetPicker.prototype = {
      initLinkSetPicker: function () {
        this.initUIBase();
      },
      getHtmlTpl: function () {
        var me = this.editor,
          opt = me.options.linkPicker,
          lang = me.getLang("linkPicker");

        return (
          '<div id="##" class="edui-popup-link %%">' +
          '<div class="link-con">' +
          "<table >" +
          '<tr><td colspan="8">' +
          lang.linkText +
          '：<input type="text" name="linkText" id="linkTextId" style="width: 170px;" /></td></tr>' +
          '<tr><td colspan="8">' +
          lang.linkAddress +
          '：<input type="text"  name="linkAddress" id="linkAddressId" style="width: 170px;" /></td></tr>' +
          '<tr><td colspan="4">' +
          lang.linkStyle +
          '：<select id="linkStyle">' +
          '<option value="underline" selected="selected">' +
          lang.hasUnderLine +
          "</option>" +
          '<option value="none">' +
          lang.noneUnderLine +
          "</option></select>" +
          "</td></tr>" +
          '<tr><td colspan="4">' +
          lang.openType +
          '：<select id="linkOpenType">' +
          '<option value="currentWindow" selected="selected">' +
          lang.currentWindow +
          "</option>" +
          '<option value="newWindow">' +
          lang.newWindow +
          "</option></select>" +
          "</td></tr>" +
          //'<tr><td colspan="2">'+lang.unLink+'：<input type="button" disabled="true" value="'+lang.unLink+'" name="isUnLink" id="isUnLinkId" />'+

          //'</td></tr>'+
          // '<tr><td colspan="4" align="left">'+
          //     '<input type="button" disabled="true" value="'+lang.unLink+'" name="isUnLink" id="isUnLinkId" /></td>'+
          // '<td colspan="4" align="right"><button >'+lang.confirmLink+'</button></td>'+
          // '<td colspan="4" align="right"><button >'+lang.cancelLink+'</button></td>'+
          // '</tr>'+
          "</table>" +
          "</div>" +
          '<div class="btn_group">' +
          '<button class="btn_sure">确定</button>' +
          '<button class="btn_cancel">取消</button>' +
          "</div>" +
          "</div>"
        );
      },
      _UIBase_render: UIBase.prototype.render
    };
    utils.inherits(LinkSetPicker, UIBase);
  })();
  // LinkSetPicker.js end
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      LinkSetPicker = baidu.editor.ui.LinkSetPicker,
      SplitButton = baidu.editor.ui.SplitButton,
      orgText,
      LinkSetButton = (baidu.editor.ui.LinkSetButton = function (options) {
        this.initOptions(options);
        this.initLinkSetButton();
      });

    LinkSetButton.prototype = {
      initLinkSetButton: function () {
        var me = this;
        this.popup = new Popup({
          content: new LinkSetPicker({ editor: me.editor }),
          editor: me.editor,
          hide: function () {
            if (!this._hidden && this.getDom()) {
              this.getDom().style.display = "none";
              this._hidden = true;
              this.fireEvent("hide");
            }
          }
        });
        var flag = 0;
        this.popup.addListener("postRenderAfter", function () {
          var popupUI = this;
          if (flag) return;
          var cont = this.getDom(),
            me = this,
            editor = me.editor,
            opt = editor.options,
            range = editor.selection.getRange(),
            text = $G("linkTextId"),
            link = range.collapsed
              ? editor.queryCommandValue("link")
              : editor.selection.getStart(),
            btnConfirm = cont.getElementsByTagName("button")[0],
            btnCancel = cont.getElementsByTagName("button")[1],
            inputNums = cont.getElementsByTagName("input"),
            rangeLink = domUtils.findParentByTagName(link, "a", true),
            linkCon = $(cont).find(".link-con")[0],
            btnGroup = $(cont).find(".btn_group")[0];

          // new 阻止事件冒泡到body
          linkCon.onclick = function (e) {
            e.stopPropagation();
          };
          // new 阻止事件冒泡到body
          btnGroup.onclick = function (e) {
            if (e && e.target) {
              if (e.target.nodeName === "BUTTON") {
                return;
              }
            }
            e.stopPropagation();
          };
          btnConfirm.onclick = function (e) {
            var href,
              link = range.collapsed
                ? editor.queryCommandValue("link")
                : editor.selection.getStart();
            href = $G("linkAddressId").value.replace(/^\s+|\s+$/g, "");

            if (href) {
              var jType = 2;
              if (jType === 103 || jType === 2) {
                //自定义类型
                try {
                  if (
                    top.location.hostname &&
                    href.indexOf("http://" + top.location.hostname) == 0
                  ) {
                    href = href.substring(
                      ("http://" + top.location.hostname).length
                    );
                  }
                } catch (exp) {}
                if (
                  href.length >= 1 &&
                  href.charAt(0) != "/" &&
                  href.charAt(0) != "#"
                ) {
                  // http:,ftp:,mailto:,tel:
                  if (/^(\w+:).+/.test(href) == false) {
                    href = "http://" + href;
                  }
                }
              }
              var obj = {
                href: href,
                style:
                  $G("linkStyle").value == "none"
                    ? "text-decoration:none;"
                    : "text-decoration:underline;",
                target:
                  $G("linkOpenType").value == "newWindow" ? "_blank" : "_self",
                title:
                  $G("linkTextId").value.replace(/^\s+|\s+$/g, "") ==
                  "只支持选中一个链接时生效"
                    ? ""
                    : $G("linkTextId").value.replace(/^\s+|\s+$/g, ""),
                data_ue_src: href
              };

              //修改链接内容的情况太特殊了，所以先做到这里了
              //todo:情况多的时候，做到command里
              if (orgText && text.value != orgText) {
                if (link) {
                  link[
                    browser.ie ? "innerText" : "textContent"
                  ] = obj.textValue = text.value;
                  range.selectNode(link).select();
                }
              }
              if (range.collapsed) {
                obj.textValue = text.value;
              }
              editor.execCommand("link", obj);
              popupUI.hide();
            } else {
              // new 阻止事件冒泡到body
              e.stopPropagation();
            }
          };
          btnCancel.onclick = function () {
            popupUI.hide();
          };
          flag = 1;
        });

        this.initSplitButton();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(event, this);">' +
          '<div class="edui-box edui-icon"></div>' +
          (this.showText
            ? '<div class="edui-box edui-label">' + this.label + "</div>"
            : "") +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          //'<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
          "</div></div></div>"
        );
      },
      //重写父类SplitButton的方法_onArrowClick
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          if (typeof this.editor.options.ueditorChangeEvent == "function") {
            this.editor.options.ueditorChangeEvent();
          }
          this.showPopup();
          //对link的初始化
          var me = this,
            editor = me.editor,
            range = editor.selection.getRange(),
            link = range.collapsed
              ? editor.queryCommandValue("link")
              : editor.selection.getStart(),
            url,
            lang = editor.getLang("link"),
            text = $G("linkTextId"),
            rangeLink = domUtils.findParentByTagName(
              range.getCommonAncestor(),
              "a",
              true
            );

          link = domUtils.findParentByTagName(link, "a", true);

          if (link) {
            url = utils.html(
              link.getAttribute("data_ue_src") || link.getAttribute("href", 2)
            );
            if (
              rangeLink === link &&
              !link.getElementsByTagName("img").length
            ) {
              text.removeAttribute("disabled");
              orgText = text.value =
                link[browser.ie ? "innerText" : "textContent"];
            } else {
              text.setAttribute("disabled", "true");
              text.value = lang.validLink;
              if (browser.version < 9) {
                text.value = editor.selection.getIERange().text.toString();
              } else {
                text.value = editor.selection.getText().trim();
              }
            }
          } else {
            if (range.collapsed) {
              text.removeAttribute("disabled");
              text.value = "";
            } else {
              text.setAttribute("disabled", "true");
              if (browser.version < 9) {
                text.value = editor.selection.getIERange().text.toString();
              } else {
                text.value = editor.selection.getText().trim();
              }
            }
          }
          $G("linkAddressId").value = url ? url : "";

          if (link && link.target == "_blank") {
            $G("linkOpenType").value = "newWindow";
          } else {
            $G("linkOpenType").value = "currentWindow";
          }
          if (link && link.style.textDecoration == "none") {
            $G("linkStyle").value = "none";
          } else {
            $G("linkStyle").value = "underline";
          }
          $focus($G("linkAddressId"));

          /*$G("linkAddressId").onblur = function(){
                            if(!hrefStartWith(this.value,["http","/","ftp://"])){
                                $G("msg").innerHTML = "<span style='color: red'>"+lang.httpPrompt+"</span>";
                            }else{
                                $G("msg").innerHTML = "";
                            }
                        };*/
        }
      }
    };

    function hrefStartWith(href, arr) {
      href = href.replace(/^\s+|\s+$/g, "");
      for (var i = 0, ai; (ai = arr[i++]); ) {
        if (href.indexOf(ai) == 0) {
          return true;
        }
      }
      return false;
    }

    function $G(id) {
      return document.getElementById(id);
    }
    function $focus(node) {
      setTimeout(function () {
        if (browser.ie) {
          var r = node.createTextRange();
          r.collapse(false);
          r.select();
        } else {
          node.focus();
        }
      }, 0);
    }

    utils.inherits(LinkSetButton, SplitButton);
  })();
  (function () {
    var utils = baidu.editor.utils,
      UIBase = baidu.editor.ui.UIBase;

    var QQSetPicker = (baidu.editor.ui.QQSetPicker = function (options) {
      this.initOptions(options);
      this.initQQSetPicker();
    });

    QQSetPicker.prototype = {
      initQQSetPicker: function () {
        this.initUIBase();
      },

      getHtmlTpl: function () {
        var me = this.editor;

        return [
          '<div class="xheDialogType">',
          '<div class="header">',
          '<div class="qqheader header_btn active" id="faiscoTypeOfQQ" name="faiscoServicesType">QQ</div>',
          '<div class="msnheader header_btn" id="faiscoTypeOfMSN" name="faiscoServicesType">MSN</div>',
          '<div class="skypeheader header_btn" id="faiscoTypeOfSkype" name="faiscoServicesType">Skype</div>',
          '<div class="aliwangwangheader header_btn" id="faiscoTypeOfAliWangWang" name="faiscoServicesType">阿里旺旺</div>',
          '<div class="taobaowangwangheader header_btn" id="faiscoTypeOfTaoBaoWangWang" name="faiscoServicesType">淘宝旺旺</div>',
          "</div>",
          "</div>",
          '<div id="xheDialogQQ" class="qq_panel IM_panel">',
          '<div><div style="clear:both;float:left; width:60px; line-height:25px;margin-left: 5px;">QQ 号码：</div><div style="float:left;margin-left: 12px;"><input type="text" id="xheQQ" value="" class="xheText" style="height: 16px;width: 194px;"/></div></div>',
          '<div style="clear:both;"><div style="float:left; width:60px; line-height:25px; text-align:right; margin-top:4px;margin-left: 5px;">显示名称：</div><div style="float:left; margin-top:4px;margin-left: 12px;"><input type="text" id="xheName" value="" class="xheText" style="height: 16px;width: 194px;"/></div></div>',
          '<div style="clear:both;"><div style="float:left; width:60px; line-height:23px; margin-top:4px;margin-left: 5px;">风&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;格：</div><div style="float:left; width:100px; margin-top:4px;margin-left: 6px;"><input type="radio" checked=checked style="border:none;vertical-align: middle;" name="displayStyle" id="displayStyle45" value="45" /><span style="cursor:default;" onclick="$(\'#displayStyle45\')[0].click()"><img src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa45.gif" border=0 style="vertical-align: middle;"/></span></div><div style="float:left; width:100px; margin-top:7px;"><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" id="displayStyle4" value="4" /><span style="cursor:default;" onclick="$(\'#displayStyle4\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa4.gif" border=0 /></span></div></div>',
          '<div style="clear:both;"><div style="float:left; width:60px; line-height:23px;margin-left: 5px; ">&nbsp;</div><div style="float:left; width:100px;margin-left: 6px; "><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" id="displayStyle1" value="1"/><span style="cursor:default;" onclick="$(\'#displayStyle1\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa1.gif" border=0 /></span></div><div style="float:left; width:105px;"><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" id="displayStyle3" value="3" /><span style="cursor:default;" onclick="$(\'#displayStyle3\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa3.gif" border=0 /></span></div></div>',
          '<div style="clear:both;"><div style="float:left; width:60px;margin-left: 5px; ">&nbsp;</div><div style="float:left; width:100px;margin-left: 6px;"><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" value="7" id="displayStyle7" /><span style="cursor:default;" onclick="$(\'#displayStyle7\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa7.gif" border=0 /></span></div><div style="float:left; width:100px;"><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" value="6" id="displayStyle6" /><span style="cursor:default;" onclick="$(\'#displayStyle6\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa6.gif" border=0 /></span></div></div>',
          '<div style="clear:both;"><div style="float:left; width:60px;margin-left: 5px; ">&nbsp;</div><div style="float:left; width:100px;margin-left: 6px;"><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" value="10" id="displayStyle10" /><span style="cursor:default;" onclick="$(\'#displayStyle10\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa10.gif" border=0 /></span></div><div style="float:left; width:100px;"><input type="radio" style="border:none;vertical-align: middle;" name="displayStyle" value="5" id="displayStyle5" /><span style="cursor:default;" onclick="$(\'#displayStyle5\')[0].click()"><img style="vertical-align: middle;" src="' +
            me.options.BUS_UEDITOR_HOME_URL_IMAGE +
            '/image/menu/pa5.gif" border=0 /></span></div></div>',
          '<div style="margin-left: 5px;margin-top: 30px;"><a href="http://shang.qq.com/v3/widget.html" target="_blank" style="color:red;">开通QQ商家</a></div>',
          '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>',
          "</div>",
          '<div id="xheDialogMSN" class="msn_panel IM_panel" style="display:none;width: 280px;margin-top: 15px;height: 220px;">',
          '<div class="xheDialog">',
          '<div style="float:left; width:80px; text-align:right;">MSN帐号：</div><div style="float:left;"><input type="text" id="xheMSN" value="" style="width: 170px;height: 16px;" class="xheText"></div>',
          '<div style="float:left; width:80px; text-align:right;margin-top: 7px;">显示名称：</div><div style="float:left;"><input type="text" id="xheNameMSN" style="width: 170px;height: 16px;margin-top: 5px;" value="" class="xheText"></div>',
          '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>',
          "</div>",
          "</div>",
          '<div id="xheDialogSkype" class="skype_panel IM_panel" style="display:none;width: 280px;margin-top: 15px;height: 220px;">',
          '<div class="xheDialog">',
          '<div style="float:left; width:80px; text-align:right;">Skype帐号：</div><div style="float:left;"><input type="text" id="xheSkype" value="" style="width: 170px;height: 16px;" class="xheText"></div>',
          '<div style="float:left; width:80px; text-align:right;margin-top: 7px;">显示名称：</div><div style="float:left;"><input type="text" id="xheNameSkype" style="width: 170px;height: 16px;margin-top: 5px;" value="" class="xheText"></div>',
          '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>',
          "</div>",
          "</div>",
          '<div id="xheDialogAliWangWang" class="aliwangwang_panel IM_panel" style="display:none;width: 280px;margin-top: 15px;height: 220px;">',
          '<div class="xheDialog">',
          '<div style="float:left; width:80px; text-align:right;">用户名：</div><div style="float:left;"><input type="text" id="xheAliWangWang" value="" style="width: 170px;height: 16px;" class="xheText"></div>',
          '<div style="float:left; width:80px; text-align:right;margin-top: 7px;">显示名称：</div><div style="float:left;"><input type="text" id="xheNameAliWangWang" style="width: 170px;height: 16px;margin-top: 5px;" value="" class="xheText"></div>',
          '<div style="clear:both;"><div style="float:left; width:80px; line-height:23px; text-align:right;">状态：</div><div style="float:left; width:100px;"><input type="radio" checked="checked" style="border:none;" name="showAliWangWangstate" id="showAliWangWangstate0" value="0">&nbsp;<span style="cursor:default;" onclick="$(\'#showAliWangWangstate0\')[0].click()">一直在线</span></div><div style="float:left; width:100px;"><input type="radio" style="border:none;" name="showAliWangWangstate" id="showAliWangWangstate1" value="1">&nbsp;<span style="cursor:default;" onclick="$(\'#showAliWangWangstate1\')[0].click()">实时</span></div></div>' +
            //'<div style="text-align:right; clear:both; "><div style="float:left; height:30px; padding:10px 5px 0px 0px;">'+
            '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>',
          "</div>",
          "</div>",
          '<div id="xheDialogTaoBaoWangWang" class="taobaowangwang_panel IM_panel" style="display:none;width: 280px;margin-top: 15px;height: 220px;">',
          '<div class="xheDialog">',
          '<div style="float:left; width:80px; text-align:right;">用户名：</div><div style="float:left;"><input type="text" id="xheTaoBaoWangWang" value="" style="width: 170px;height: 16px;" class="xheText"></div>',
          '<div style="float:left; width:80px; text-align:right;margin-top: 7px;">显示名称：</div><div style="float:left;"><input type="text" id="xheNameTaoBaoWangWang" style="width: 170px;height: 16px;margin-top: 5px;" value="" class="xheText"></div>',
          '<div style="clear:both;"><div style="float:left; width:80px; line-height:23px; text-align:right;">状态：</div><div style="float:left; width:100px;"><input type="radio" checked="checked" style="border:none;" name="showTaoBaoWangWangstate" id="showTaoBaoWangWangstate0" value="0">&nbsp;<span style="cursor:default;" onclick="$(\'#showTaoBaoWangWangstate0\')[0].click()">一直在线</span></div><div style="float:left; width:100px;"><input type="radio" style="border:none;" name="showTaoBaoWangWangstate" id="showTaoBaoWangWangstate1" value="1">&nbsp;<span style="cursor:default;" onclick="$(\'#showTaoBaoWangWangstate1\')[0].click()">实时</span></div></div>' +
            //'<div style="text-align:right; clear:both; "><div style="float:left; height:30px; padding:10px 5px 0px 0px;">'+
            '<div class="btn_group"><button class="btn_sure">确定</button><button class="btn_cancel">取消</button></div>',
          "</div>",
          "</div>"
        ].join("");
      }
    };

    utils.inherits(QQSetPicker, UIBase);
  })();
  (function () {
    var utils = baidu.editor.utils,
      Popup = baidu.editor.ui.Popup,
      QQSetPicker = baidu.editor.ui.QQSetPicker,
      SplitButton = baidu.editor.ui.SplitButton,
      QQSetButton = (baidu.editor.ui.QQSetButton = function (options) {
        this.initOptions(options);
        this.initQQSetButtion();
      });

    QQSetButton.prototype = {
      initQQSetButtion: function () {
        var me = this;
        this.popup = new Popup({
          content: new QQSetPicker({ editor: me.editor }),
          className: "edui-for-qqservice",
          editor: me.editor,
          hide: function () {
            if (!this._hidden && this.getDom()) {
              this.getDom().style.display = "none";
              this._hidden = true;
              this.fireEvent("hide");
            }
          }
        });
        var flag = 0;
        this.popup.addListener("postRenderAfter", function () {
          var popupUI = this;
          if (flag) return;
          var cont = this.getDom(),
            btnQQ = cont.getElementsByTagName("button")[0],
            btnQQCancel = cont.getElementsByTagName("button")[1],
            btnMSN = cont.getElementsByTagName("button")[2],
            btnMSNCancel = cont.getElementsByTagName("button")[3],
            btnSkype = cont.getElementsByTagName("button")[4],
            btnSkypeCancel = cont.getElementsByTagName("button")[5],
            btnAliWangWang = cont.getElementsByTagName("button")[6],
            btnAliWangWangCancel = cont.getElementsByTagName("button")[7],
            btnTaoBaoWangWang = cont.getElementsByTagName("button")[8],
            btnTaoBaoWangWangCancel = cont.getElementsByTagName("button")[9];
          btnQQ.onclick = function () {
            me.editor.execCommand("qqservice", me, cont);
          };
          btnMSN.onclick = function () {
            me.editor.execCommand("msnservice", me, cont);
          };
          btnSkype.onclick = function () {
            me.editor.execCommand("skypeservice", me, cont);
          };
          btnAliWangWang.onclick = function () {
            me.editor.execCommand("aliwangwangservice", me, cont);
          };
          btnTaoBaoWangWang.onclick = function () {
            me.editor.execCommand("taobaowangwangservice", me, cont);
          };

          btnMSNCancel.onclick = function () {
            popupUI.hide();
          };
          btnQQCancel.onclick = function () {
            popupUI.hide();
          };
          btnSkypeCancel.onclick = function () {
            popupUI.hide();
          };
          btnAliWangWangCancel.onclick = function () {
            popupUI.hide();
          };
          btnTaoBaoWangWangCancel.onclick = function () {
            popupUI.hide();
          };

          $(cont)
            .find(".header_btn")
            .on("click", function () {
              $(this).siblings(".header_btn").removeClass("active");
              $(this).addClass("active");
              var curType = $(this)
                .attr("class")
                .split(" ")[0]
                .match(/([a-zA-Z]+)header/)[1];
              $(cont)
                .find(".IM_panel")
                .hide()
                .filter("." + curType + "_panel")
                .show();
            });

          flag = 1;
        });
        this.initSplitButton();
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="edui-box %%">' +
          "<div " +
          (this.title ? 'title="' + this.title + '"' : "") +
          ' id="##_state" stateful><div class="%%-body">' +
          '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onArrowClick(event, this);">' +
          '<div class="edui-box edui-icon"></div>' +
          "</div>" +
          '<div class="edui-box edui-splitborder"></div>' +
          //'<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
          "</div></div></div>"
        );
      },
      _onArrowClick: function (event, el) {
        if (!this.isDisabled()) {
          this.showPopup();
          if (typeof this.editor.options.ueditorChangeEvent == "function") {
            this.editor.options.ueditorChangeEvent();
          }

          var me = this,
            editor = me.editor,
            range = editor.selection.getRange();
          var qqName,
            qqNumber,
            msnNumber,
            msnName,
            qqStyleVlaue,
            skyNumber,
            skyName,
            qqStateVlaue,
            aliWangWang,
            aliWangWangName,
            showAliWangWangstate,
            taobaoWangWang,
            taobaoWangWangName,
            showTaoBaoWangWangstate;
          var xheQQ = document.getElementById("xheQQ"),
            xheName = document.getElementById("xheName");
          var xheMSN = document.getElementById("xheMSN"),
            xheNameMSN = document.getElementById("xheNameMSN");
          var xheSkype = document.getElementById("xheSkype"),
            xheNameSkype = document.getElementById("xheNameSkype");
          var xheAliWangWang = document.getElementById("xheAliWangWang"),
            xheNameAliWangWang = document.getElementById("xheNameAliWangWang");
          var xheTaoBaoWangWang = document.getElementById("xheTaoBaoWangWang"),
            xheNameTaoBaoWangWang = document.getElementById(
              "xheNameTaoBaoWangWang"
            );
          var qqservice = range.collapsed
              ? editor.queryCommandValue("link")
              : editor.selection.getStart(),
            qqservice = domUtils.findParentByTagName(qqservice, "a", true);

          if (qqservice) {
            qqName = qqservice.getAttribute("qqName");
            qqNumber = qqservice.getAttribute("qqNumber");
            msnNumber = qqservice.getAttribute("msnNumber");
            msnName = qqservice.getAttribute("msnName");
            qqStyleVlaue = qqservice.getAttribute("qqStyleVlaue");
            skyNumber = qqservice.getAttribute("skyNumber");
            skyName = qqservice.getAttribute("skyName");
            aliWangWang = qqservice.getAttribute("aliWangWang");
            aliWangWangName = qqservice.getAttribute("aliWangWangName");
            showAliWangWangstate = qqservice.getAttribute(
              "aliwangwangstatevalue"
            );
            taobaoWangWang = qqservice.getAttribute("taobaoWangWang");
            taobaoWangWangName = qqservice.getAttribute("taobaoWangWangName");
            showTaoBaoWangWangstate = qqservice.getAttribute(
              "taobaowangwangstatevalue"
            );
          }
          var tabQQ = document.getElementById("faiscoTypeOfQQ");
          var tabMSN = document.getElementById("faiscoTypeOfMSN");
          var tabSkype = document.getElementById("faiscoTypeOfSkype");
          var tabAliWangWang = document.getElementById(
            "faiscoTypeOfAliWangWang"
          );
          var tabTaoBaoWangWang = document.getElementById(
            "faiscoTypeOfTaoBaoWangWang"
          );

          var panelQQ = document.getElementById("xheDialogQQ");
          var panelMSN = document.getElementById("xheDialogMSN");
          var panelSkype = document.getElementById("xheDialogSkype");
          var panelAliWangWang = document.getElementById(
            "xheDialogAliWangWang"
          );
          var panelTaoBaoWangWang = document.getElementById(
            "xheDialogTaoBaoWangWang"
          );

          if (qqNumber) {
            $(tabQQ)
              .addClass("active")
              .siblings(".header_btn")
              .removeClass("active");
            $(panelQQ).show().siblings(".IM_panel").hide();
          }
          if (msnNumber) {
            $(tabMSN)
              .addClass("active")
              .siblings(".header_btn")
              .removeClass("active");
            $(panelMSN).show().siblings(".IM_panel").hide();
          }
          if (skyNumber) {
            $(tabSkype)
              .addClass("active")
              .siblings(".header_btn")
              .removeClass("active");
            $(panelSkype).show().siblings(".IM_panel").hide();
          }
          if (aliWangWang) {
            $(tabAliWangWang)
              .addClass("active")
              .siblings(".header_btn")
              .removeClass("active");
            $(panelAliWangWang).show().siblings(".IM_panel").hide();
          }
          if (taobaoWangWang) {
            $(tabTaoBaoWangWang)
              .addClass("active")
              .siblings(".header_btn")
              .removeClass("active");
            $(panelTaoBaoWangWang).show().siblings(".IM_panel").hide();
          }

          xheQQ.value = qqNumber ? qqNumber : "";
          xheName.value = qqName ? UE.utils.html(qqName) : "";
          if (qqStyleVlaue) {
            $("#displayStyle" + qqStyleVlaue)[0].click();
          } else {
            $("#displayStyle45")[0].click();
          }

          if (showAliWangWangstate) {
            $("#showAliWangWangstate" + showAliWangWangstate)[0].click();
          } else {
            $("#showAliWangWangstate0")[0].click();
          }

          if (showTaoBaoWangWangstate) {
            $("#showTaoBaoWangWangstate" + showTaoBaoWangWangstate)[0].click();
          } else {
            $("#showTaoBaoWangWangstate0")[0].click();
          }

          xheMSN.value = msnNumber ? msnNumber : "";
          xheNameMSN.value = msnName ? UE.utils.html(msnName) : "";
          xheSkype.value = skyNumber ? skyNumber : "";
          xheNameSkype.value = skyName ? skyName : "";
          xheAliWangWang.value = aliWangWang ? aliWangWang : "";
          xheNameAliWangWang.value = aliWangWangName ? aliWangWangName : "";
          xheTaoBaoWangWang.value = taobaoWangWang ? taobaoWangWang : "";
          xheNameTaoBaoWangWang.value = taobaoWangWangName
            ? taobaoWangWangName
            : "";
        }
      }
    };

    utils.inherits(QQSetButton, SplitButton);
  })();
  //tool.js start
  //浮动工具
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      domUtils = baidu.editor.dom.domUtils;
    var tool = (baidu.editor.ui.tool = {
      editor: null, //ueditor实例
      popup: null, //浮动工具弹窗
      ele: null, //当前选中的元素节点
      node: null, //浮动工具的顶层节点
      options: null, //初始化视图必须的数据
      // isLocked: false,//当二级弹窗弹出时锁定，阻止再hover弹出新的float tool，点击时再解锁
      isBanHidePopupWhenScroll: false, //当输入宽高时需要设置为true，禁止宽高突变时触发scroll时把tool隐藏带来不便
      utils: {
        // getTriangleStyle: function(type){
        //     //三角形要出现在选中元素一半宽度上。
        //     var triangleWidth = 6;
        //     var offsetRight = editor.window.innerWidth - tool.ele.offsetLeft;
        //     var html = '<div id="calc_tool_width" class="edui-tool-'+type+'" style="position: absolute;z-index: -1;visibility: hidden;"><div class="edui-tool-base'+(type == 'a' && editor.options.openSetLinkStyle ? ' open_set_style' : '')+'"></div></div>';
        //     var toolWidth = $('body').append(html).find('#calc_tool_width')[0].offsetWidth;
        //     var triangleOffset = (tool.ele.offsetWidth - triangleWidth) / 2;
        //     var halfOffset = (toolWidth - triangleWidth) / 2;
        //     triangleOffset = triangleOffset > halfOffset ? halfOffset : triangleOffset;
        //     return (offsetRight > toolWidth ? 'left': 'right')+': '+triangleOffset+'px';
        // },
        updatePanelWH: function () {
          var $body = $(tool.node)
            .parents(".edui-popup-body")
            .width("auto")
            .height("auto");
          $body.width($body[0].clientWidth).height($body[0].clientHeight);
        },
        initPanel: function (dom) {
          $(tool.node).children("div").hide().end().append(dom);
          this.updatePanelWH();
          // tool.isLocked = true;
        },
        closePanel: function () {
          $(tool.node).find(".edui-tool-panel").remove();
          $(tool.node).children("div").show();
          this.updatePanelWH();
          // tool.isLocked = false;
        },
        setFocus: function () {
          var input = $(tool.node).find(".edui-tool-panel input:first")[0];
          // input.focus();
          // input.value = input.value;
          input && input.select();
        },
        //删除节点，需要把range移回当前文档，不然range将会留在被删元素中
        deleteNode: function ($ele) {
          if ($ele[0].parentNode) {
            var range = editor.selection.getRange();
            // range.selectNode($ele[0].parentNode).select();
            range.setCursor(true);
          }
          $ele.remove();
          tool.popup.hide();
          tool.editor.undoManger.save();
        },
        isNumKey: function (keyCode) {
          return (
            (keyCode > 47 && keyCode < 58) || (keyCode > 95 && keyCode < 106)
          );
        },
        isBackSpaceKey: function (keyCode) {
          return keyCode === 8;
        },
        isEnterKey: function (keyCode) {
          return keyCode === 13;
        },
        isDirectionKey: function (keyCode) {
          return (
            keyCode == 37 || keyCode == 38 || keyCode == 39 || keyCode == 40
          );
        }
      },
      html: {
        // getTriangle: function(type){
        //     return '<div class="edui-tool-triangle" style="'+tool.utils.getTriangleStyle(type)+'"></div>';
        // },
        getWH: function (options) {
          var options = tool.options;
          return (
            '<input type="text" value="' +
            options.width +
            '" class="edui-tool-box edui-tool-input edui-tool-input-num edui-tool-width" maxlength="4"/>' +
            '<div class="edui-tool-icon edui-tool-box edui-tool-ml7 edui-tool-lock' +
            (options.isLockedWH ? " selected" : "") +
            (options.isBanUnlocked ? " disabled" : "") +
            '" title="锁定宽高比例"></div>' +
            '<input type="text" value="' +
            options.height +
            '" class="edui-tool-box edui-tool-input edui-tool-input-num edui-tool-height edui-tool-ml7" maxlength="4"/>'
          );
        },
        getPostion: function (options) {
          var options = tool.options;
          return (
            '<div data-position="none" class="edui-tool-icon edui-tool-icon-default edui-tool-box edui-tool-ml3' +
            (options.position == "default" ? " selected" : "") +
            '" title="默认"></div>' +
            '<div data-position="center" class="edui-tool-icon edui-tool-icon-center edui-tool-box edui-tool-ml3' +
            (options.position == "center" ? " selected" : "") +
            '" title="居中"></div>' +
            '<div data-position="left" class="edui-tool-icon edui-tool-icon-left edui-tool-box edui-tool-ml3' +
            (options.position == "left" ? " selected" : "") +
            '" title="左环绕"></div>' +
            '<div data-position="right" class="edui-tool-icon edui-tool-icon-right edui-tool-box edui-tool-ml3' +
            (options.position == "right" ? " selected" : "") +
            '" title="右环绕"></div>'
          );
        },
        getSplit: function (ml) {
          return (
            '<div class="edui-tool-split edui-tool-box' +
            (ml ? " edui-tool-ml" + ml : "") +
            '"></div>'
          );
        },
        getLink: function () {
          return '<div id="edui-tool-link" class="edui-tool-icon edui-tool-icon-link edui-tool-box edui-tool-ml3" title="链接"></div>';
        },
        getDesc: function () {
          return '<div class="edui-tool-icon edui-tool-icon-desc edui-tool-box edui-tool-ml3" title="描述"></div>';
        },
        getMargin: function () {
          return '<div id="edui-tool-margin" class="edui-tool-icon edui-tool-icon-margin edui-tool-box edui-tool-ml3" title="边距设置"></div>';
        },
        getHoverImg: function () {
          return '<div class="edui-tool-icon edui-tool-icon-hoverimg edui-tool-box edui-tool-ml3" title="修改鼠标悬停图片"></div>';
        },
        getDelete: function () {
          return '<div class="edui-tool-icon edui-tool-icon-delete edui-tool-box edui-tool-ml3" title="删除"></div>';
        },
        getText: function (text, ml) {
          return (
            '<div class="edui-tool-text edui-tool-box' +
            (ml ? " edui-tool-ml" + ml : "") +
            '">' +
            text +
            "</div>"
          );
        },
        getInput: function (value, isNotLimit) {
          return (
            '<input class="edui-tool-input edui-tool-box edui-tool-ml7" type="text" value="' +
            value +
            '"' +
            (isNotLimit ? "" : ' maxlength="100"') +
            "/>"
          );
        },
        getRadio: function (clazz, isChecked, text, ml) {
          return (
            '<div class="edui-tool-radio edui-tool-box' +
            (clazz ? " edui-tool-" + clazz : "") +
            (isChecked ? " checked" : "") +
            (ml ? " edui-tool-ml" + ml : "") +
            '">' +
            '<div class="edui-tool-radio_icon edui-tool-box"></div>' +
            this.getText(text, 6) +
            "</div>"
          );
        },
        getBtn: function (tips, clazz) {
          return (
            '<div class="edui-tool-' +
            (clazz ? clazz : "apply") +
            ' edui-tool-box">' +
            (tips ? tips : "应用") +
            "</div>"
          );
        },
        getImgTextBtn: function (clazz, tips, ml) {
          return (
            '<div class="edui-tool-img_text_btn edui-tool-' +
            clazz +
            " edui-tool-box" +
            (ml ? " edui-tool-ml" + ml : "") +
            '">' +
            tips +
            "</div>"
          );
        },
        getLinkTool: function () {
          var options = tool.options;
          return tool.options.hasLink
            ? '<div class="edui-tool-link-con edui-tool-line">' +
                '<div class="edui-tool-text edui-tool-box" title="' +
                options.linkAddress +
                '">' +
                "链接 : " +
                options.linkAddress +
                "</div>" +
                '<div id="edui-tool-link-alter" class="edui-tool-img_text_btn edui-tool-alter edui-tool-box edui-tool-ml7">更改</div>' +
                this.getSplit(3) +
                this.getImgTextBtn("remove", "移除", 3) +
                "</div>"
            : "";
        },
        getDescTool: function () {
          return tool.options.desc
            ? '<div class="edui-tool-desc-con edui-tool-line">' +
                '<div class="edui-tool-text edui-tool-box" title="' +
                tool.options.desc +
                '">' +
                "描述 : " +
                tool.options.desc +
                "</div>" +
                this.getImgTextBtn("alter", "更改", 7) +
                this.getSplit(3) +
                this.getImgTextBtn("remove", "移除", 3) +
                "</div>"
            : "";
        },
        getVideoCtrl: function () {
          var options = tool.options;
          return (
            '<div class="edui-tool-video_ctrl edui-tool-line">' +
            // this.getRadio('autoplay', options.isAutoPlay, '自动播放') +
            this.getRadio("loop", options.isLoop, "循环播放", 0) +
            this.getSplit(152) +
            this.getImgTextBtn("alter", "更换", 10) +
            "</div>"
          );
        },
        getMusicCtrl: function (element) {
          var options = tool.options;
          return (
            '<div class="edui-tool-audio_ctrl edui-tool-line">' +
            '<div style="width:140px;" class="edui-tool-text edui-tool-box">' +
            "音频 : " +
            element.attr("name") +
            "</div>" +
            '<div class="edui-tool-float">' +
            this.getImgTextBtn("alter", "更换", 0) +
            this.getSplit(6) +
            this.getRadio("loop", options.isLoop, "循环播放", 10) +
            // this.getSplit(69) +
            "</div>"
          );
        }
      },
      img: {
        panel: {
          alterLink: {
            initView: function () {
              var options = tool.options;
              var html = tool.html;
              var dom =
                '<div class="edui-tool-panel edui-tool-panel-alterLink edui-tool-line">' +
                html.getText("链接") +
                html.getInput(options.linkAddress, true) +
                html.getRadio("loop", options.isNewTab, "新窗口打开", 6) +
                html.getBtn() +
                "</div>";
              tool.utils.initPanel(dom);
              tool.utils.setFocus();
              this.initEvent();
            },
            initEvent: function () {
              var options = tool.options;
              var $ele = $(tool.ele);
              var $tool = $(tool.node);
              var editor = tool.editor;
              $tool
                .find(".edui-tool-panel-alterLink .edui-tool-apply")
                .bind("click", function () {
                  var href = $(this).siblings(".edui-tool-input").val().trim();
                  if (!!href && !/https?:\/\/|ftp:\/\//.test(href)) {
                    href = "http://" + href;
                  }

                  var target = $(this)
                    .siblings(".edui-tool-radio")
                    .hasClass("checked")
                    ? "_blank"
                    : "";
                  var obj = {
                    href: href,
                    data_ue_src: href,
                    target: target
                  };
                  options.linkAddress = UE.utils.encodeHtml(href);
                  options.isNewTab =
                    target && target == "_blank" ? true : false;

                  var range = editor.selection.getRange();
                  range.selectNode($ele[0]).select();
                  editor.execCommand("link", obj);

                  tool.img.init();
                });
              $tool
                .find(".edui-tool-panel-alterLink .edui-tool-radio")
                .bind("click", function () {
                  $(this).toggleClass("checked");
                });
              $tool
                .find(".edui-tool-panel-alterLink .edui-tool-input")
                .bind("keyup", function (event) {
                  tool.utils.isEnterKey(event.keyCode) &&
                    $(this).siblings(".edui-tool-apply").trigger("click");
                });
            }
          },
          alterDesc: {
            initView: function () {
              var options = tool.options;
              var html = tool.html;
              var dom =
                '<div class="edui-tool-panel edui-tool-panel-alterDesc edui-tool-line">' +
                html.getText("描述") +
                html.getInput(options.desc) +
                html.getBtn() +
                "</div>";
              tool.utils.initPanel(dom);
              tool.utils.setFocus();
              this.initEvent();
            },
            initEvent: function () {
              var options = tool.options;
              var $ele = $(tool.ele);
              var $tool = $(tool.node);
              $tool
                .find(".edui-tool-panel-alterDesc .edui-tool-apply")
                .bind("click", function () {
                  var desc = $(this).siblings(".edui-tool-input").val().trim();
                  $ele.attr({
                    title: desc,
                    alt: desc
                  });
                  desc = UE.utils.encodeHtml(desc);
                  options.desc = desc;

                  // desc ?
                  // $tool.find('.edui-tool-desc').html(tool.html.getDescTool()):
                  // $tool.find('.edui-tool-desc .edui-tool-desc-con').remove();
                  // tool.utils.closePanel();
                  tool.img.init();
                });
              $tool
                .find(".edui-tool-panel-alterDesc .edui-tool-input")
                .bind("keyup", function (event) {
                  tool.utils.isEnterKey(event.keyCode) &&
                    $(this).siblings(".edui-tool-apply").trigger("click");
                });
            }
          }
        },
        init: function () {
          var ele = tool.ele;
          var editor = tool.editor;
          var options = (tool.options = {
            type: "img",
            maxWidth: 362,
            maxHeight: 121,
            width: isNaN(parseInt(ele.style.width))
              ? ele.width
              : parseInt(ele.style.width),
            height: isNaN(parseInt(ele.style.height))
              ? ele.height
              : parseInt(ele.style.height),
            desc: UE.utils.encodeHtml((ele.title || ele.alt).trim()),
            isLockedWH: !ele.getAttribute("unlocked")
              ? true
              : ele.getAttribute("unlocked") == "1"
              ? false
              : true,
            linkAddress: "",
            isNewTab: false
          });
          var floatVal = $(ele).css("float");
          var isCenter = $(ele).css("text-align") == "center";
          options.position =
            floatVal == "left"
              ? "left"
              : floatVal == "right"
              ? "right"
              : isCenter
              ? "center"
              : "default";
          var linkEle = $(ele).parents("a")[0];
          var hasLink = (options.hasLink = !!linkEle);
          if (hasLink) {
            options.linkAddress = UE.utils.encodeHtml(
              linkEle.getAttribute("data_ue_src") ||
                linkEle.getAttribute("href") ||
                ""
            );
            var target = linkEle.getAttribute("target");
            options.isNewTab = target && target == "_blank" ? true : false;
          }

          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var html = tool.html;
          var options = tool.options;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            ' edui-tool-content">' +
            // html.getTriangle(options.type)+
            '<div class="edui-tool-base edui-tool-line">' +
            html.getWH() +
            html.getSplit(10) +
            html.getPostion() +
            html.getSplit(3) +
            html.getLink() +
            html.getDesc() +
            html.getDelete() +
            // html.getDelete()+
            "</div>" +
            '<div class="edui-tool-link">' +
            html.getLinkTool() +
            "</div>" +
            '<div class="edui-tool-desc">' +
            html.getDescTool() +
            "</div>";
          ("</div>");

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = ele;
          ele.offsetWidth > options.maxWidth &&
          ele.offsetHeight > options.maxHeight
            ? popup.showTool(popup.anchorEl)
            : popup.showAnchor(popup.anchorEl);

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var me = this;
          var $ele = $(tool.ele);
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;

          //锁定宽高比例
          var scale = options.width / options.height;
          $tool.find(".edui-tool-lock").bind("click", function () {
            $(this).toggleClass("selected");
            options.isLockedWH = !options.isLockedWH;
            options.isLockedWH &&
              (scale =
                $tool.find(".edui-tool-width").val() /
                $tool.find(".edui-tool-height").val());
            $ele.attr("unlocked", options.isLockedWH ? 0 : 1);
          });
          //输入值实时改变宽高
          var inputTimer = null,
            oldValue;
          $tool
            .find(".edui-tool-width, .edui-tool-height")
            .bind("keydown", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
              if (
                !(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)
              ) {
                event.preventDefault();
              } else {
                oldValue = this.value;
              }
            })
            .bind("keyup", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isLockedWH = options.isLockedWH;
              var curInput = this;
              var update = function (type) {
                var curAttr = $(curInput).is(".edui-tool-width")
                  ? "width"
                  : "height";
                var otherAttr = curAttr == "width" ? "height" : "width";
                var curValue = curInput.value || 0;
                var otherValue;
                if (isLockedWH) {
                  otherValue = Math.round(
                    otherAttr == "width" ? curValue * scale : curValue / scale
                  );
                  !isNaN(scale) &&
                    scale != "Infinity" &&
                    scale != 0 &&
                    $tool.find(".edui-tool-" + otherAttr).val(otherValue);
                }

                function render() {
                  $ele.css(curAttr, curValue).removeAttr(curAttr);
                  isLockedWH &&
                    $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
                  //如果是减小宽高，判断下是否在视角内，如果不在则滚到视角内，避免宽高瞬间减少导致元素消失在视野中
                  if (oldValue > curInput.value) {
                    var rect = uiUtils.getClientRect($ele[0]);
                    var isIntoView = rect.top > 0;
                    if (!isIntoView) {
                      $ele[0].scrollIntoView();
                    }
                  }
                  editor.fireEvent("selectionchange", true);
                  // 解决data-w值不更新的问题
                  let dataW = curAttr === "width" ? curValue : otherValue;
                  let dataH = curAttr === "width" ? otherValue : curValue;
                  editor.fireEvent("changeDataWH", $ele[0], dataW, dataH);
                }
                clearTimeout(inputTimer);
                if (type == "input") {
                  inputTimer = setTimeout(render, 500);
                } else if (type == "enter") {
                  render();
                  curInput.blur();
                }
              };
              if (isNumKey || isBackSpaceKey) {
                update("input");
              } else if (isEnterKey) {
                update("enter");
              }
            })
            .bind("focus", function () {
              tool.isBanHidePopupWhenScroll = true;
            })
            .bind("blur", function () {
              tool.isBanHidePopupWhenScroll = false;
            });

          //位置
          $tool
            .find(".edui-tool-icon[data-position]")
            .bind("click", function () {
              var range = editor.selection.getRange();
              range.selectNode($ele[0]).select();
              var position = $(this).data("position");
              if (position == options.position) {
                return;
              }
              editor.execCommand("imagefloat", position);
              popup.hide();
            });

          //描述(图标)
          $tool.find(".edui-tool-icon-desc").bind("click", function () {
            me.panel.alterDesc.initView();
          });
          //修改描述(按钮)
          $tool
            .find(".edui-tool-desc .edui-tool-alter")
            .bind("click", function () {
              me.panel.alterDesc.initView();
            });
          //移除描述
          $tool
            .find(".edui-tool-desc .edui-tool-remove")
            .bind("click", function () {
              $ele.removeAttr("title alt");
              $(this).parent(".edui-tool-desc-con").remove();
              options.desc = "";
              tool.utils.updatePanelWH();
            });

          //链接
          $tool.find(".edui-tool-icon-link").bind("click", function () {
            me.panel.alterLink.initView();
          });
          $tool
            .find(".edui-tool-link .edui-tool-alter")
            .bind("click", function () {
              me.panel.alterLink.initView();
            });
          $tool
            .find(".edui-tool-link .edui-tool-remove")
            .bind("click", function () {
              var range = editor.selection.getRange();
              range.selectNode($ele[0]).select();
              editor.execCommand("unlink");
              range = editor.selection.getRange();
              range.setCursor(true);
              tool.img.init();
            });
          //删除
          $tool.find(".edui-tool-icon-delete").bind("click", function () {
            tool.utils.deleteNode(options.hasLink ? $ele.parent() : $ele);
          });

          $tool.bind("click", function () {
            $(editor.container).find("#edui1_imagescale_cover").length &&
              $(editor.container).find("#edui1_imagescale_cover").remove();
            $(editor.container).find("#edui1_imagescale").length &&
              $(editor.container).find("#edui1_imagescale").remove();
          });
        }
      },
      hoverimg: {
        panel: {
          alterLink: {
            initView: function () {
              var options = tool.options;
              var html = tool.html;
              var dom =
                '<div class="edui-tool-panel edui-tool-panel-alterLink edui-tool-line">' +
                html.getText("链接") +
                html.getInput(options.linkAddress, true) +
                html.getRadio("loop", options.isNewTab, "新窗口打开", 6) +
                html.getBtn() +
                "</div>";
              tool.utils.initPanel(dom);
              tool.utils.setFocus();
              this.initEvent();
            },
            initEvent: function () {
              var options = tool.options;
              var $ele = $(tool.ele);
              var $tool = $(tool.node);
              var editor = tool.editor;
              $tool
                .find(".edui-tool-panel-alterLink .edui-tool-apply")
                .on("click", function () {
                  var href = $(this).siblings(".edui-tool-input").val().trim();
                  if (!!href && !/https?:\/\/|ftp:\/\//.test(href)) {
                    href = "http://" + href;
                  }

                  var target = $(this)
                    .siblings(".edui-tool-radio")
                    .hasClass("checked")
                    ? "_blank"
                    : "";
                  var obj = {
                    href: href,
                    data_ue_src: href,
                    target: target
                  };
                  options.linkAddress = UE.utils.encodeHtml(href);
                  options.isNewTab =
                    target && target == "_blank" ? true : false;

                  var range = editor.selection.getRange();
                  range.selectNode($ele.parent()[0]).select();
                  editor.execCommand("link", obj);

                  tool.hoverimg.init();
                });
              $tool
                .find(".edui-tool-panel-alterLink .edui-tool-radio")
                .on("click", function () {
                  $(this).toggleClass("checked");
                });
              $tool
                .find(".edui-tool-panel-alterLink .edui-tool-input")
                .on("keyup", function (event) {
                  tool.utils.isEnterKey(event.keyCode) &&
                    $(this).siblings(".edui-tool-apply").trigger("click");
                });
            }
          },
          alterImg: {
            initView: function () {
              var options = tool.options;
              var dom =
                '<div class="edui-tool-panel edui-tool-panel-hoverimg">' +
                '<div class="edui-hoverimg-default edui-hoverimg-alter edui-tool-box" style="background-image: url(' +
                options.defImg +
                ')"></div>' +
                '<div class="edui-hoverimg-arrow edui-tool-box" title="换位"></div>' +
                '<div class="edui-hoverimg-hover edui-hoverimg-alter edui-tool-box" style="background-image: url(' +
                options.hovImg +
                ')"></div>' +
                tool.html.getBtn() +
                "</div>";
              tool.utils.initPanel(dom);
              this.initEvent();
            },
            initEvent: function () {
              var $ele = $(tool.ele);
              var $tool = $(tool.node);
              var options = tool.options;
              var editor = tool.editor;
              $tool.find(".edui-hoverimg-alter").on("click", function () {
                var upload_setting = {
                  title: "替换图片",
                  maxSize: 5,
                  type: ["jpg", "jpeg", "bmp", "png", "gif"],
                  imgMode: 2,
                  maxChoiceList: 1,
                  netFileMode: true,
                  entry: "editor",
                  openIcon: true
                };
                var changeHoverImage = function (result) {
                  if (result) {
                    var data = $.parseJSON(result).data;
                    var filePath = data[0].filePath;
                    $(this).css("background-image", 'url("' + filePath + '")');
                  }
                }.bind(this);
                editor.options.outerFunction.fileUpload2 &&
                  editor.options.outerFunction.fileUpload2(
                    "",
                    upload_setting,
                    changeHoverImage
                  );
              });
              $tool.find(".edui-hoverimg-arrow").on("click", function () {
                var $default = $(this).prev();
                var $hover = $(this).next();
                var defImg = $default.css("background-image");
                var hovImg = $hover.css("background-image");
                $default.css("background-image", hovImg);
                $hover.css("background-image", defImg);
              });
              $tool
                .find(".edui-tool-panel-hoverimg .edui-tool-apply")
                .on("click", function () {
                  var reg = /^\s*url\(['"]?(.+)['"]?\)$/;
                  var defImg = $(this)
                    .siblings(".edui-hoverimg-default")
                    .css("background-image")
                    .match(reg)[1];
                  var hovImg = $(this)
                    .siblings(".edui-hoverimg-hover")
                    .css("background-image")
                    .match(reg)[1];
                  $ele.attr({
                    _defImg: defImg,
                    _hovImg: hovImg,
                    src: defImg
                  });
                  $ele.siblings("img").attr("src", hovImg);
                  options.defImg = defImg;
                  options.hovImg = hovImg;

                  // tool.utils.closePanel();
                  tool.hoverimg.init();
                });
            }
          },
          alterDesc: {
            initView: function () {
              var options = tool.options;
              var dom =
                '<div class="edui-tool-panel edui-tool-panel-alterDesc edui-tool-line">' +
                tool.html.getText("描述") +
                tool.html.getInput(options.desc) +
                tool.html.getBtn() +
                "</div>";
              tool.utils.initPanel(dom);
              tool.utils.setFocus();
              this.initEvent();
            },
            initEvent: function () {
              var options = tool.options;
              var $ele = $(tool.ele);
              var $tool = $(tool.node);
              $tool
                .find(".edui-tool-panel-alterDesc .edui-tool-apply")
                .on("click", function () {
                  var desc = $(this).siblings(".edui-tool-input").val().trim();
                  $ele
                    .attr({
                      title: desc,
                      alt: desc
                    })
                    .siblings("img")
                    .attr({
                      title: desc,
                      alt: desc
                    });
                  desc = UE.utils.encodeHtml(desc);
                  options.desc = desc;

                  // desc ?
                  // $tool.find('.edui-tool-desc').html(tool.html.getDescTool()):
                  // $tool.find('.edui-tool-desc .edui-tool-desc-con').remove();
                  // tool.utils.closePanel();
                  tool.hoverimg.init();
                });
              $tool
                .find(".edui-tool-panel-alterDesc .edui-tool-input")
                .on("keyup", function (event) {
                  tool.utils.isEnterKey(event.keyCode) &&
                    $(this).siblings(".edui-tool-apply").trigger("click");
                });
            }
          }
        },
        init: function () {
          var ele = tool.ele;
          var editor = tool.editor;
          var options = (tool.options = {
            type: "hoverimg",
            maxWidth: 362,
            maxHeight: 121,
            width: isNaN(parseInt(ele.style.width))
              ? ele.width
              : parseInt(ele.style.width),
            height: isNaN(parseInt(ele.style.height))
              ? ele.height
              : parseInt(ele.style.height),
            desc: UE.utils.encodeHtml((ele.title || ele.alt).trim()),
            isLockedWH: !ele.getAttribute("unlocked")
              ? true
              : ele.getAttribute("unlocked") == "1"
              ? false
              : true,
            defImg: ele.getAttribute("_defImg"),
            hovImg: ele.getAttribute("_hovImg"),
            linkAddress: "",
            isNewTab: false
          });
          var floatVal = $(ele).parent().css("float");
          var isCenter = $(ele).css("text-align") == "center";
          options.position =
            floatVal == "left"
              ? "left"
              : floatVal == "right"
              ? "right"
              : isCenter
              ? "center"
              : "default";

          var linkEle = $(ele).parents("a")[0];
          var hasLink = (options.hasLink = !!linkEle);
          if (hasLink) {
            options.linkAddress = UE.utils.encodeHtml(
              linkEle.getAttribute("data_ue_src") ||
                linkEle.getAttribute("href") ||
                ""
            );
            var target = linkEle.getAttribute("target");
            options.isNewTab = target && target == "_blank" ? true : false;
          }

          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var html = tool.html;
          var options = tool.options;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            ' edui-tool-content">' +
            // html.getTriangle(options.type)+
            '<div class="edui-tool-base edui-tool-line">' +
            html.getWH() +
            html.getSplit(10) +
            html.getPostion() +
            html.getSplit(3) +
            html.getHoverImg() +
            html.getLink() +
            html.getDesc() +
            html.getDelete() +
            "</div>" +
            '<div class="edui-tool-link">' +
            html.getLinkTool() +
            "</div>" +
            '<div class="edui-tool-desc">' +
            html.getDescTool() +
            "</div>" +
            "</div>";

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = ele;
          ele.offsetWidth > options.maxWidth &&
          ele.offsetHeight > options.maxHeight
            ? popup.showTool(popup.anchorEl)
            : popup.showAnchor(popup.anchorEl);

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var me = this;
          var $ele = $(tool.ele);
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;

          //锁定宽高比例
          var scale = options.width / options.height;
          $tool.find(".edui-tool-lock").on("click", function () {
            $(this).toggleClass("selected");
            options.isLockedWH = !options.isLockedWH;
            options.isLockedWH &&
              (scale =
                $tool.find(".edui-tool-width").val() /
                $tool.find(".edui-tool-height").val());
            $ele.attr("unlocked", options.isLockedWH ? 0 : 1);
          });

          //输入值实时改变宽高
          var inputTimer = null;
          $tool
            .find(".edui-tool-width, .edui-tool-height")
            .on("keydown", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
              if (
                !(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)
              ) {
                event.preventDefault();
              }
            })
            .on("keyup", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isLockedWH = options.isLockedWH;
              var curInput = this;
              var update = function (type) {
                var curAttr = $(curInput).is(".edui-tool-width")
                  ? "width"
                  : "height";
                var otherAttr = curAttr == "width" ? "height" : "width";
                var curValue = curInput.value || 0;
                var otherValue;
                if (isLockedWH) {
                  otherValue = Math.round(
                    otherAttr == "width" ? curValue * scale : curValue / scale
                  );
                  !isNaN(scale) &&
                    scale != "Infinity" &&
                    scale != 0 &&
                    $tool.find(".edui-tool-" + otherAttr).val(otherValue);
                }

                function render() {
                  $ele
                    .css(curAttr, curValue)
                    .removeAttr(curAttr)
                    .siblings("img")
                    .css(curAttr, curValue)
                    .removeAttr(curAttr)
                    .parent(".J_hoverImageParent")
                    .css(curAttr, curValue);
                  isLockedWH &&
                    $ele
                      .css(otherAttr, otherValue)
                      .removeAttr(otherAttr)
                      .siblings("img")
                      .css(otherAttr, otherValue)
                      .removeAttr(otherAttr)
                      .parent(".J_hoverImageParent")
                      .css(otherAttr, otherValue);
                }
                clearTimeout(inputTimer);
                if (type == "input") {
                  inputTimer = setTimeout(render, 500);
                } else if (type == "enter") {
                  render();
                  curInput.blur();
                }
              };
              if (isNumKey || isBackSpaceKey) {
                update("input");
              } else if (isEnterKey) {
                update("enter");
              }
            })
            .on("focus", function () {
              tool.isBanHidePopupWhenScroll = true;
            })
            .on("blur", function () {
              tool.isBanHidePopupWhenScroll = false;
            });

          //位置
          $tool.find(".edui-tool-icon[data-position]").on("click", function () {
            var range = editor.selection.getRange();
            range.selectNode($ele[0]).select();
            var position = $(this).data("position");
            if (position == options.position) {
              return;
            }
            editor.execCommand("imagefloat", position);
            popup.hide();
          });

          //修改悬停换图
          $tool.find(".edui-tool-icon-hoverimg").on("click", function () {
            me.panel.alterImg.initView();
          });

          //修改描述(图标)
          $tool.find(".edui-tool-icon-desc").on("click", function () {
            me.panel.alterDesc.initView();
          });
          //修改描述(按钮)
          $tool
            .find(".edui-tool-desc .edui-tool-alter")
            .on("click", function () {
              me.panel.alterDesc.initView();
            });
          //移除描述
          $tool
            .find(".edui-tool-desc .edui-tool-remove")
            .on("click", function () {
              $ele
                .removeAttr("title alt")
                .siblings("img")
                .removeAttr("title alt");
              $(this).parent(".edui-tool-desc-con").remove();
              options.desc = "";
              tool.utils.updatePanelWH();
            });

          //链接
          $tool.find(".edui-tool-icon-link").on("click", function () {
            me.panel.alterLink.initView();
          });
          $tool
            .find(".edui-tool-link .edui-tool-alter")
            .on("click", function () {
              me.panel.alterLink.initView();
            });
          $tool
            .find(".edui-tool-link .edui-tool-remove")
            .on("click", function () {
              var range = editor.selection.getRange();
              range.selectNode($ele[0]).select();
              editor.execCommand("unlink");
              range = editor.selection.getRange();
              range.setCursor(true);
              tool.hoverimg.init();
            });
          //删除
          $tool.find(".edui-tool-delete").on("click", function () {
            tool.utils.deleteNode(
              options.hasLink ? $ele.parents("a") : $ele.parent()
            );
          });
        }
      },
      video: {
        init: function () {
          var ele = tool.ele;
          var options = (tool.options = {
            type: "video",
            maxWidth: 304,
            maxHeight: 80,
            width: isNaN(parseInt(ele.style.width))
              ? ele.width
              : parseInt(ele.style.width),
            height: isNaN(parseInt(ele.style.height))
              ? ele.height
              : parseInt(ele.style.height),
            isLockedWH: !ele.getAttribute("unlocked")
              ? true
              : ele.getAttribute("unlocked") == "1"
              ? false
              : true,
            isAutoPlay: !!ele.getAttribute("autoplay"),
            isLoop: !!ele.getAttribute("loop")
          });
          var floatVal = $(ele).css("float");
          var isCenter = $(ele).css("text-align") == "center";
          options.position =
            floatVal == "left"
              ? "left"
              : floatVal == "right"
              ? "right"
              : isCenter
              ? "center"
              : "default";
          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var isNetVideo =
            ele.getAttribute("key") === "netVideo" ? "edui-tool-vedio_net" : "";

          var html = tool.html;
          var options = tool.options;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            " edui-tool-content " +
            isNetVideo +
            '">' +
            // html.getTriangle(options.type)+
            '<div class="edui-tool-base edui-tool-line">' +
            html.getWH() +
            html.getSplit(10) +
            html.getPostion() +
            html.getSplit(3) +
            html.getDelete() +
            (isNetVideo
              ? html.getSplit(6) +
                html.getImgTextBtn("alter", "更换", 10) +
                "</div>"
              : "</div>" + html.getVideoCtrl()) +
            "</div>";

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = ele;
          ele.offsetWidth > options.maxWidth &&
          ele.offsetHeight > options.maxHeight
            ? popup.showTool(popup.anchorEl)
            : popup.showAnchor(popup.anchorEl);

          // 点击视频的时候range指向视频，方便工具栏的段落对齐使用
          if (ele.getAttribute("key") === "local") {
            editor.selection.getRange().selectNode(ele).select();
          }
          // console.log($(ele).parent()[0])
          // if(ele.getAttribute('key') == 'netVideo'){
          //     ele = $(ele).parent()[0];
          //     editor.selection.getRange().selectNode(ele).select();
          // }
          // console.log(editor.selection.getRange())

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var me = this;
          var $ele = $(tool.ele);
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;

          // 对通过通用代码上传的视频的backspace和delete删除键做特殊处理
          if ($ele && $ele.hasClass("netVideo")) {
            $ele.attr("tabindex", 0);
            $ele.focus();
            $ele.on("keydown", function (event) {
              var e =
                event || window.event || arguments.callee.caller.arguments[0];
              if (e && (e.keyCode == 46 || e.keyCode == 8)) {
                // 按 delete 或 backspace
                $ele.parents(".netVideoCon").remove();
              }
            });
          }

          //锁定宽高比例
          var scale = options.width / options.height;
          $tool.find(".edui-tool-lock").on("click", function () {
            $(this).toggleClass("selected");
            options.isLockedWH = !options.isLockedWH;
            options.isLockedWH &&
              (scale =
                $tool.find(".edui-tool-width").val() /
                $tool.find(".edui-tool-height").val());
            $ele.attr("unlocked", options.isLockedWH ? 0 : 1);
          });
          //输入值实时改变宽高
          var inputTimer = null;
          $tool
            .find(".edui-tool-width, .edui-tool-height")
            .on("keydown", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
              if (
                !(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)
              ) {
                event.preventDefault();
              }
            })
            .on("keyup", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isLockedWH = options.isLockedWH;
              var curInput = this;
              var update = function (type) {
                var curAttr = $(curInput).is(".edui-tool-width")
                  ? "width"
                  : "height";
                var otherAttr = curAttr == "width" ? "height" : "width";
                var curValue = curInput.value || 0;
                var otherValue;

                if (isLockedWH) {
                  otherValue = Math.round(
                    otherAttr == "width" ? curValue * scale : curValue / scale
                  );
                  !isNaN(scale) &&
                    scale != "Infinity" &&
                    scale != 0 &&
                    $tool.find(".edui-tool-" + otherAttr).val(otherValue);
                }

                function render() {
                  $ele.css(curAttr, curValue).removeAttr(curAttr);
                  isLockedWH &&
                    $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
                  if ($ele.attr("key") == "netVideo") {
                    var $video = $ele.find("embed");
                    $video.css(curAttr, curValue).removeAttr(curAttr);
                    isLockedWH &&
                      $video.css(otherAttr, otherValue).removeAttr(otherAttr);
                  }
                }
                clearTimeout(inputTimer);
                if (type == "input") {
                  inputTimer = setTimeout(render, 3000);
                } else if (type == "enter") {
                  render();
                  curInput.blur();
                }
              };
              if (
                navigator.userAgent.indexOf("Edge") > -1 &&
                event.keyCode == 229
              ) {
                update("input");
              }
              if (isNumKey || isBackSpaceKey) {
                update("input");
              } else if (isEnterKey) {
                update("enter");
              }
            })
            .on("focus", function () {
              tool.isBanHidePopupWhenScroll = true;
            })
            .on("blur", function () {
              tool.isBanHidePopupWhenScroll = false;
            });

          //位置
          $tool.find(".edui-tool-icon[data-position]").on("click", function () {
            var range = editor.selection.getRange();
            range.selectNode($ele[0]).select();
            var position = $(this).data("position");
            if (position == options.position) {
              return;
            }
            // 视频的直接上传和使用通用代码上传
            if ($ele.attr("key") == "netVideo") {
              editor.execCommand("imagefloat", position, true);
            } else {
              editor.execCommand("imagefloat", position);
            }

            popup.hide();
          });

          //播放控制
          $tool.find(".edui-tool-autoplay").on("click", function () {
            $(this).toggleClass("checked");
            options.isAutoPlay = !options.isAutoPlay;
            options.isAutoPlay
              ? $ele.attr("autoplay", true)
              : $ele.removeAttr("autoplay");
          });
          $tool.find(".edui-tool-loop").on("click", function () {
            $(this).toggleClass("checked");
            options.isLoop = !options.isLoop;
            options.isLoop ? $ele.attr("loop", true) : $ele.removeAttr("loop");
          });
          //更换视频
          $tool.find(".edui-tool-alter").on("click", function () {
            // var changeVideo = function(result){
            //     if(result){
            //         result = JSON.parse(result);
            //         if(result.data[0]){
            // var dom = $ele[0].outerHTML;
            // dom && $ele.replaceWith(dom.replace(/http.+?\.mp4/g, result.data[0].filePath));
            //         }
            //     }
            //     popup.hide();
            // };
            // editor.options.outerFunction.htmlChangeMP4 &&  editor.options.outerFunction.htmlChangeMP4(changeVideo);
            $ele.attr("value", "alter");
            popup.hide();
            domUtils.UEPopup();
            // console.log(window.document.getElementsByTagName('body'))
          });
          //删除视频
          $tool.find(".edui-tool-icon-delete").on("click", function () {
            if ($ele.attr("key") === "netVideo") {
              // 视频通用代码上传
              tool.utils.deleteNode($ele.parent());
            } else {
              // 视频直接上传
              tool.utils.deleteNode($ele);
            }
          });
        }
      },
      flash: {
        init: function () {
          var ele = tool.ele;
          var options = (tool.options = {
            type: "flash",
            maxWidth: 369,
            maxHeight: 80,
            //flash初始没有宽高，embed元素默认300*150
            width: isNaN(parseInt(ele.style.width))
              ? ele.offsetWidth
              : parseInt(ele.style.width),
            height: isNaN(parseInt(ele.style.height))
              ? ele.offsetHeight
              : parseInt(ele.style.height),
            isLockedWH: !ele.getAttribute("unlocked")
              ? true
              : ele.getAttribute("unlocked") == "1"
              ? false
              : true,
            isLockedWH: true
            // isBanUnlocked: true
          });
          var floatVal = $(ele).css("float");
          var isCenter = $(ele).css("text-align") == "center";
          options.position =
            floatVal == "left"
              ? "left"
              : floatVal == "right"
              ? "right"
              : isCenter
              ? "center"
              : "default";
          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var html = tool.html;
          var options = tool.options;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            ' edui-tool-content">' +
            // html.getTriangle(options.type)+
            '<div class="edui-tool-base edui-tool-line">' +
            html.getWH() +
            html.getSplit(10) +
            html.getPostion() +
            html.getSplit(3) +
            html.getDelete() +
            html.getSplit(3) +
            html.getImgTextBtn("alter", "更换", 7) +
            "</div>" +
            "</div>";

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = ele;
          ele.offsetWidth > options.maxWidth &&
          ele.offsetHeight > options.maxHeight
            ? popup.showTool(popup.anchorEl)
            : popup.showAnchor(popup.anchorEl);

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var me = this;
          var $ele = $(tool.ele);
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;

          //锁定宽高比例
          var scale = options.width / options.height;
          $tool.find(".edui-tool-lock").on("click", function () {
            $(this).toggleClass("selected");
            options.isLockedWH = !options.isLockedWH;
            options.isLockedWH &&
              (scale =
                $tool.find(".edui-tool-width").val() /
                $tool.find(".edui-tool-height").val());
            $ele.attr("unlocked", options.isLockedWH ? 0 : 1);
          });

          //输入值实时改变宽高
          var inputTimer = null;
          $tool
            .find(".edui-tool-width, .edui-tool-height")
            .on("keydown", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
              if (
                !(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)
              ) {
                event.preventDefault();
              }
            })
            .on("keyup", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isLockedWH = options.isLockedWH;
              var curInput = this;
              var update = function (type) {
                var curAttr = $(curInput).is(".edui-tool-width")
                  ? "width"
                  : "height";
                var otherAttr = curAttr == "width" ? "height" : "width";
                var curValue = curInput.value || 0;
                var otherValue;
                if (isLockedWH) {
                  otherValue = Math.round(
                    otherAttr == "width" ? curValue * scale : curValue / scale
                  );
                  !isNaN(scale) &&
                    scale != "Infinity" &&
                    $tool.find(".edui-tool-" + otherAttr).val(otherValue);
                }

                function render() {
                  if ($ele.hasClass("netVideo")) {
                    var $videoEmbed = $ele.find("iframe");
                    $videoEmbed.attr(curAttr, curValue);
                    $ele.css(curAttr, curValue).removeAttr(curAttr);
                    isLockedWH && $videoEmbed.attr(otherAttr, otherValue);
                    isLockedWH &&
                      $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
                  } else {
                    $ele.css(curAttr, curValue).removeAttr(curAttr);
                    isLockedWH &&
                      $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
                    $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
                  }
                }
                clearTimeout(inputTimer);
                if (type == "input") {
                  inputTimer = setTimeout(render, 500);
                } else if (type == "enter") {
                  render();
                  curInput.blur();
                }
              };
              if (isNumKey || isBackSpaceKey) {
                update("input");
              } else if (isEnterKey) {
                update("enter");
              }
            })
            .on("focus", function () {
              tool.isBanHidePopupWhenScroll = true;
            })
            .on("blur", function () {
              tool.isBanHidePopupWhenScroll = false;
            });

          //位置
          $tool.find(".edui-tool-icon[data-position]").on("click", function () {
            var range = editor.selection.getRange();
            range.selectNode($ele[0]).select();
            var position = $(this).data("position");
            if (position == options.position) {
              return;
            }
            if ($ele.hasClass("netVideo")) {
              editor.execCommand("imagefloat", position, true);
            } else {
              editor.execCommand("imagefloat", position);
            }

            popup.hide();
          });

          //更换flash
          $tool.find(".edui-tool-alter").on("click", function () {
            // 视频flash更换
            if (
              $ele.attr("id") === "netVideoTran" ||
              $ele.hasClass("netVideo")
            ) {
              $ele.attr("value", "alter");
              popup.hide();
              domUtils.UEPopup();
            } else {
              var changeFlash = function (result) {
                if (result) {
                  result = JSON.parse(result);
                  if (result.data[0]) {
                    var dom = $ele[0].outerHTML;
                    dom &&
                      $ele.replaceWith(
                        dom.replace(/http.+\.swf/, result.data[0].filePath)
                      );
                  }
                }
                popup.hide();
              };
              editor.options.outerFunction.htmlChangeFlash &&
                editor.options.outerFunction.htmlChangeFlash(changeFlash);
            }
          });
          //删除flash
          $tool.find(".edui-tool-icon-delete").on("click", function () {
            if ($ele.hasClass("netVideo")) {
              tool.utils.deleteNode($ele.parent());
            } else {
              tool.utils.deleteNode($ele);
            }
          });
        }
      },
      table: {
        init: function () {
          var editor = tool.editor;
          var options = (tool.options = {
            type: "table"
          });
          var tableList = [
            "deletetable",
            "edittd",
            "insertparagraphbeforetable",
            "insertrow",
            "deleterow",
            "insertcol",
            "deletecol",
            "mergecells",
            "mergeright",
            "mergedown",
            "splittocells",
            "splittorows",
            "splittocols"
          ];
          var lang = UE.I18N[editor.options.lang].labelMap;
          var tableConf = tableList.map(function (cmdName) {
            var opr = {
              label: lang[cmdName],
              cmdName: cmdName
            };
            if (cmdName == "edittd") {
              opr.exec = function () {
                if (UE.ui["edittd"]) {
                  new UE.ui["edittd"](this);
                }
                editor.ui._dialogs["edittdDialog"].open();
              };
            }
            return opr;
          });
          options.tableConf = tableConf;
          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            ' edui-tool-content">' +
            // tool.html.getTriangle(options.type)+
            '<div class="edui-tool-base edui-tool-line">' +
            options.tableConf.reduce(function (curStr, opr) {
              return (
                curStr +
                '<div class="edui-tool-icon-' +
                opr.cmdName +
                " edui-tool-icon edui-tool-box edui-tool-ml3" +
                (editor.queryCommandState(opr.cmdName) > -1
                  ? ""
                  : " disabled") +
                '" title="' +
                opr.label +
                '"></div>'
              );
            }, "") +
            "</div>" +
            "</div>";

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = ele;
          popup.showAnchor(popup.anchorEl);

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var $ele = $(tool.ele);
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          options.tableConf.forEach(function (opr) {
            var exec = opr.exec
              ? function () {
                  opr.exec.call(editor);
                }
              : function () {
                  editor.execCommand(opr.cmdName);
                };
            $tool
              .find(".edui-tool-icon-" + opr.cmdName)
              .bind("click", function () {
                if (editor.queryCommandState(opr.cmdName) == -1) {
                  return;
                }
                if (opr.cmdName == "deletecol") {
                  domUtils.resetRange();
                }
                if (opr.cmdName == "edittd") {
                  domUtils.editTablePopup();
                } else {
                  exec();
                }
                opr.cmdName == "insertparagraphbeforetable" ||
                opr.cmdName == "deletetable" ||
                !$ele.find("td").length
                  ? tool.popup.hide()
                  : tool.table.init();
              });
          });
        }
      },
      a: {
        panel: {
          setLink: {
            initView: function () {
              var options = tool.options;
              var html = tool.html;
              var dom =
                '<div class="edui-tool-panel edui-tool-panel-setLink">' +
                '<div class="edui-setLink-text edui-tool-line">' +
                html.getText("文本") +
                html.getInput(options.text) +
                "</div>" +
                '<div class="edui-setLink-href edui-tool-line">' +
                html.getText("链接") +
                html.getInput(options.linkAddress, true) +
                "</div>" +
                '<div class="edui-setLink-opr edui-tool-line">' +
                html.getBtn() +
                "</div>" +
                "</div>";
              tool.utils.initPanel(dom);
              this.initEvent();
            },
            initEvent: function () {
              var options = tool.options;
              var $ele = $(tool.ele);
              var $tool = $(tool.node);
              var editor = tool.editor;
              var popup = tool.popup;

              $tool
                .find(".edui-tool-panel-setLink .edui-tool-apply")
                .bind("click", function () {
                  var text = UE.utils.encodeHtml(
                    $tool.find(".edui-setLink-text .edui-tool-input").val()
                  );
                  if (text != options.text) {
                    options.text = text;
                    editor.selection.getRange().setCursor(true);
                    $ele.text(text);
                  }

                  var href = $tool
                    .find(".edui-setLink-href .edui-tool-input")
                    .val()
                    .trim();
                  if (!!href && !/https?:\/\/|ftp:\/\//.test(href)) {
                    href = "http://" + href;
                  }
                  if (href != options.linkAddress) {
                    var obj = {
                      href: href,
                      data_ue_src: href,
                      target: options.isNewTab ? "_blank" : ""
                    };
                    options.linkAddress = UE.utils.encodeHtml(href);

                    var range = editor.selection.getRange();
                    range.selectNode($ele[0]).select();
                    editor.execCommand("link", obj);
                    // editor.selection.getRange().setCursor(true);
                  }
                  popup.hide();
                });
            }
          }
        },
        init: function () {
          var ele = tool.ele;
          if (ele.getAttribute("phonenumber")) {
            return;
          }
          var options = (tool.options = {
            type: "a",
            text: UE.utils.encodeHtml(ele.textContent),
            linkAddress: "",
            isNewTab: false
          });
          options.linkAddress = UE.utils.encodeHtml(
            ele.getAttribute("data_ue_src") || ele.getAttribute("href") || ""
          );
          var target = ele.getAttribute("target");
          options.isNewTab = target && target == "_blank" ? true : false;

          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var html = tool.html;
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            ' edui-tool-content">' +
            '<div class="edui-tool-base edui-tool-line' +
            (editor.options.openSetLinkStyle ? " open_set_style" : "") +
            '">' +
            '<div class="edui-tool-icon edui-tool-icon-link edui-tool-box no_hover"></div>' +
            '<div class="edui-tool-text edui-tool-box" title="' +
            options.linkAddress +
            '">' +
            options.linkAddress +
            "</div>" +
            html.getSplit(3) +
            '<div id="edui-tool-link-alter" class="edui-tool-img_text_btn edui-tool-alter edui-tool-box edui-tool-ml6">更改</div>' +
            (editor.options.openSetLinkStyle
              ? html.getImgTextBtn("style", "样式", 6)
              : "") +
            html.getImgTextBtn("remove", "移除", 6) +
            "</div>" +
            "</div>";

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = ele;
          popup.showAnchor(popup.anchorEl);

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var me = this;
          var $ele = $(tool.ele);
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;

          $tool.find(".edui-tool-alter").bind("click", function () {
            me.panel.setLink.initView();
          });
          $tool.find(".edui-tool-remove").bind("click", function () {
            var range = editor.selection.getRange();
            range.selectNode($ele[0]).select();
            editor.execCommand("unlink");
            range = editor.selection.getRange();
            range.setCursor(true);
            popup.hide();
          });
        }
      },
      /**
            *自定义音乐的工具
            music: {
                // init: function(){
                //     console.log(2);
                // }
                init: function() {
                    var ele = tool.ele;
                    var eleAudio = $(ele).find('audio')[0];
                    var eleChild = $(ele).find('.audioPlay')[0];
                    var eleSpeed = $(ele).find('.audioSpeed')[0];
                    var eleTime = $(ele).find('.audioTime')[0];
                    var eleVolume = $(ele).find('.audioVolume')[0];
                    var audioLength = parseInt(eleChild.style.width)+parseInt(eleSpeed.style.width)+parseInt(eleTime.style.width)+parseInt(eleVolume.style.width)+2;
                    var options = tool.options = {
                        type: 'audio',
                        maxWidth: 304,
                        maxHeight: 80,
                        width: isNaN(parseInt(eleChild.style.width)) ? eleChild.width : audioLength,
                        height: isNaN(parseInt(eleChild.style.height)) ? eleChild.height : parseInt(eleChild.style.height),
                        // isLockedWH: !ele.getAttribute('unlocked') ? true : ele.getAttribute('unlocked') == '1' ? false : true,
                        isLoop: !!eleAudio.getAttribute('loop')
                    };
                    var floatVal = $(ele).css('float');
                    var isCenter = $(ele).css('text-align') == 'center';
                    options.position = floatVal == 'left' ? 'left' : floatVal == 'right' ? 'right' : isCenter ? 'center' : 'default';
                    this.initView();
                },
                initView: function() {
                    var ele = tool.ele;
                    var eleChild = $(ele).find('.audioPlay')[0];
                    var $eleAudio = $(ele).find('#audioPlayer');
                    var html = tool.html;
                    var options = tool.options;
                    var popup = tool.popup;
                    var dom =
                        '<div id="edui-tool-' + options.type + '" class="edui-tool-' + options.type + ' edui-tool-content">' +
                        // html.getTriangle(options.type)+
                        '<div class="edui-tool-base edui-tool-line">' +
                        html.getWH() +
                        html.getSplit(10) +
                        html.getPostion() +
                        html.getSplit(3) +
                        html.getDelete()+
                        '</div>' +
                        html.getMusicCtrl($eleAudio) +
                        '</div>';

                    var content = popup.getDom('content');
                    content.innerHTML = dom;
                    popup.anchorEl = eleChild;
                    // ele.offsetWidth > options.maxWidth && ele.offsetHeight > options.maxHeight ?
                        // popup.showTool(popup.anchorEl):
                    popup.showAnchor(popup.anchorEl);

                    tool.node = content.firstChild;
                    this.initEvent();
                },
                initEvent: function() {

                    var me = this;
                    var ele = tool.ele;
                    var $ele = $(tool.ele);
                    var $eleAudio = $(ele).find('audio');
                    var $eleAduioDiv = $(ele).find('.audioDiv');
                    var $elePlay = $(ele).find('.audioPlay');
                    var $eleSpeed = $(ele).find('.audioSpeed');
                    var $eleTime = $(ele).find('.audioTime');
                    var $eleVolume = $(ele).find('.audioVolume');
                    var $eleVolumeAdjust = $(ele).find('.volumeAdjust');
                    var $tool = $(tool.node);
                    var options = tool.options;
                    var editor = tool.editor;
                    var popup = tool.popup;

                    //输入值实时改变宽高
                    var inputTimer = null;
                    $tool.find('.edui-tool-width, .edui-tool-height').on('keydown', function(event) {
                        var isNumKey = tool.utils.isNumKey(event.keyCode);
                        var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
                        var isEnterKey = tool.utils.isEnterKey(event.keyCode);
                        var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
                        if (!(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)) {
                            event.preventDefault();
                        }
                    }).on('keyup', function(event) {
                        var isNumKey = tool.utils.isNumKey(event.keyCode);
                        var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
                        var isEnterKey = tool.utils.isEnterKey(event.keyCode);
                        var isLockedWH = options.isLockedWH;
                        var curInput = this;
                        // var va = curInput.value;
                        var update = function(type) {
                            var curAttr = $(curInput).is('.edui-tool-width') ? 'width' : 'height';
                            var otherAttr = curAttr == 'width' ? 'height' : 'width';
                            var curValue = curInput.value || 0;
                            var otherValue;
                            if(curAttr == 'height' && (curValue<40||curValue>80)){return;}
                            // if (isLockedWH) {
                            //     otherValue = Math.round(otherAttr == 'width' ? curValue * scale : curValue / scale);
                            //     !isNaN(scale) && scale != 'Infinity' && scale !=0 && $tool.find('.edui-tool-' + otherAttr).val(otherValue);
                            // }
                            var audioLength = $elePlay.width()+$eleSpeed.width()+$eleTime.width()+$eleVolume.width()+2;
                            function render() {
                                if(curAttr == 'height'){
                                    otherValue = audioLength - 2 - 100 - 2*curValue;
                                    $elePlay.css(curAttr, curValue).removeAttr(curAttr);
                                    $elePlay.css(otherAttr, curValue).removeAttr(otherAttr);
                                    $eleVolume.css(curAttr, curValue).removeAttr(curAttr);
                                    $eleVolume.css(otherAttr, curValue).removeAttr(otherAttr);
                                    $eleVolumeAdjust.css(otherAttr,curValue).removeAttr(otherAttr);
                                    // $eleVolumeAdjust.css('top',curValue+'px');console.log($eleVolumeAdjust.css('top'))
                                    $eleTime.css(curAttr, curValue).removeAttr(curAttr);
                                    $eleSpeed.css(curAttr, curValue).removeAttr(curAttr);
                                    $eleSpeed.css(otherAttr, otherValue).removeAttr(otherAttr);
                                }else if(curAttr == 'width'){
                                    otherValue = curValue - 2*parseInt($elePlay.width()) - 100 -2;
                                    $eleSpeed.css(curAttr, otherValue).removeAttr(curAttr);
                                    $eleAduioDiv.css(curAttr,curValue).removeAttr(curAttr);
                                }

                            }
                            clearTimeout(inputTimer);
                            if (type == 'input') {
                                inputTimer = setTimeout(render, 500);
                            } else if (type == 'enter') {
                                render();
                                curInput.blur();
                            }
                        }
                        if (isNumKey || isBackSpaceKey) {
                            update('input');
                        } else if (isEnterKey) {
                            update('enter');
                        }
                    }).on('focus', function(){
                        tool.isBanHidePopupWhenScroll = true;
                    }).on('blur', function(){
                        tool.isBanHidePopupWhenScroll = false;
                    });

                    //位置--居中、左对齐、右对齐
                    $tool.find('.edui-tool-icon[data-position]').on('click', function() {
                        var range = editor.selection.getRange();
                        range.selectNode($ele[0]).select();
                        var position = $(this).data('position');
                        if (position == options.position) {
                            return;
                        }
                        editor.execCommand('imagefloat', position, true);
                        popup.hide();
                    });

                    //是否循环播放
                    $tool.find('.edui-tool-loop').on('click', function() {
                        $(this).toggleClass('checked');
                        options.isLoop = !options.isLoop;
                        options.isLoop ?
                            $eleAudio.attr('loop', true) :
                            $eleAudio.removeAttr('loop');
                    });
                    //更换音乐
                    $tool.find('.edui-tool-alter').on('click', function(){
                        var changeAudio = function(result){
                            if(result){
                                result = JSON.parse(result);
                                if(result.data[0]){
                                    $ele.find('.audioCurTime').text('00:00');
                                    $ele.find('.audioDuraTime').text('00:00');
                                    $ele.find('.progressBar').css('width','0');
                                    $ele.find('.progressDot').css('left','0');
                                    $ele.find('.vProgressBar').css('height','100%');
                                    $ele.find('.vProgressDot').css('top','100%');
                                    $ele.find('#audioPlayer').attr('name',result.data[0].fileName);
                                    var dom = $ele[0].outerHTML;
                                    dom && $ele.replaceWith(dom.replace(/http.+?\.mp3/g, result.data[0].filePath));
                                }
                                // UE.commands['uploadBackMp3'].execCommand(result);
                            }
                            popup.hide();
                        };
                        editor.options.outerFunction.htmlChangeMP3 && editor.options.outerFunction.htmlChangeMP3(changeAudio);
                    });
                    //删除音乐
                    $tool.find('.edui-tool-icon-delete').on('click', function() {
                        tool.utils.deleteNode($ele);
                    });
                }
            }
            */
      music: {
        init: function () {
          var ele = tool.ele;
          var eleAudio = $(ele).find("#audioPlayer")[0];
          var options = (tool.options = {
            type: "audio",
            // maxWidth: 304,
            // maxHeight: 80,
            width: isNaN(parseInt(ele.style.width))
              ? ele.width
              : parseInt(ele.style.width),
            height: "32",
            // isLockedWH: !ele.getAttribute('unlocked') ? true : ele.getAttribute('unlocked') == '1' ? false : true,
            // isAutoPlay: !!ele.getAttribute('autoplay'),
            isLoop: !!eleAudio.getAttribute("loop")
          });
          var floatVal = $(ele).css("float");
          var isCenter = $(ele).css("text-align") == "center";
          options.position =
            floatVal == "left"
              ? "left"
              : floatVal == "right"
              ? "right"
              : isCenter
              ? "center"
              : "default";
          this.initView();
        },
        initView: function () {
          var ele = tool.ele;
          var eleAudio = $(ele).find("#audioPlayer")[0];
          var $eleAudio = $(eleAudio);
          var html = tool.html;
          var options = tool.options;
          var popup = tool.popup;
          var dom =
            '<div id="edui-tool-' +
            options.type +
            '" class="edui-tool-' +
            options.type +
            ' edui-tool-content">' +
            // html.getTriangle(options.type)+
            '<div class="edui-tool-base edui-tool-line">' +
            html.getWH() +
            html.getSplit(10) +
            html.getPostion() +
            html.getSplit(3) +
            html.getDelete() +
            "</div>" +
            html.getMusicCtrl($eleAudio) +
            "</div>";

          var content = popup.getDom("content");
          content.innerHTML = dom;
          popup.anchorEl = eleAudio;
          // eleAudio.offsetWidth > options.maxWidth && eleAudio.offsetHeight > options.maxHeight ?
          //     popup.showTool(popup.anchorEl):
          popup.showAnchor(popup.anchorEl);

          // if(eleAudio.tagName.toLowerCase() == 'audio'){
          //     console.log('true')
          // }
          // $($(ele).find('.music-mask')).css({'background':'#387ed6','opacity':'0.8'});

          tool.node = content.firstChild;
          this.initEvent();
        },
        initEvent: function () {
          var me = this;
          var $ele = $(tool.ele);
          var $eleAudio = $ele.find("#audioPlayer");
          var $tool = $(tool.node);
          var options = tool.options;
          var editor = tool.editor;
          var popup = tool.popup;

          // 对backspace和delete删除键做特殊处理
          if ($ele && $ele.hasClass("audioDiv")) {
            $ele.attr("tabindex", 0);
            $ele.focus();
            $ele.on("keydown", function (event) {
              var e =
                event || window.event || arguments.callee.caller.arguments[0];
              if (e && (e.keyCode == 46 || e.keyCode == 8)) {
                // 按 delete 或 backspace
                $ele.parents("#audio_parents").remove();
                popup.hide();
              }
            });
          }

          //锁定宽高比例
          // var scale = options.width / options.height;
          // $tool.find('.edui-tool-lock').on('click', function() {
          //     $(this).toggleClass('selected');
          //     options.isLockedWH = !options.isLockedWH;
          //     options.isLockedWH && (scale = $tool.find('.edui-tool-width').val() / $tool.find('.edui-tool-height').val());
          //     $ele.attr('unlocked', options.isLockedWH ? 0 : 1);
          // });
          $tool.find(".edui-tool-height").attr("disabled", "disabled");
          $tool.find(".edui-tool-lock").attr("title", "");
          //输入值实时改变宽高
          var inputTimer = null;
          $tool
            .find(".edui-tool-width, .edui-tool-height")
            .on("keydown", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
              if (
                !(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)
              ) {
                event.preventDefault();
              }
            })
            .on("keyup", function (event) {
              var isNumKey = tool.utils.isNumKey(event.keyCode);
              var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
              var isEnterKey = tool.utils.isEnterKey(event.keyCode);
              var isLockedWH = options.isLockedWH;
              var curInput = this;
              var update = function (type) {
                var curAttr = $(curInput).is(".edui-tool-width")
                  ? "width"
                  : "height";
                var otherAttr = curAttr == "width" ? "height" : "width";
                var curValue = curInput.value || 0;
                var otherValue;
                // if (isLockedWH) {
                //     otherValue = Math.round(otherAttr == 'width' ? curValue * scale : curValue / scale);
                //     !isNaN(scale) && scale != 'Infinity' && scale !=0 && $tool.find('.edui-tool-' + otherAttr).val(otherValue);
                // }
                if (curAttr == "width" && (curValue < 400 || curValue > 900)) {
                  return;
                }
                function render() {
                  // $ele.css(curAttr, curValue).removeAttr(curAttr);
                  // isLockedWH && $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
                  if (curAttr === "width") {
                    $ele.css(curAttr, curValue).removeAttr(curAttr);
                    $eleAudio.css(curAttr, curValue).removeAttr(curAttr);
                  }
                }
                clearTimeout(inputTimer);
                if (type == "input") {
                  inputTimer = setTimeout(render, 500);
                } else if (type == "enter") {
                  render();
                  curInput.blur();
                }
              };
              if (isNumKey || isBackSpaceKey) {
                update("input");
              } else if (isEnterKey) {
                update("enter");
              }
            })
            .on("focus", function () {
              tool.isBanHidePopupWhenScroll = true;
            })
            .on("blur", function () {
              tool.isBanHidePopupWhenScroll = false;
            });

          // $tool.find('.edui-tool-width, .edui-tool-height').on('mousedown', function(){
          //     this.click();
          // })

          //位置
          $tool.find(".edui-tool-icon[data-position]").on("click", function () {
            var range = editor.selection.getRange();
            range.selectNode($ele[0]).select();
            var position = $(this).data("position");
            if (position == options.position) {
              return;
            }
            editor.execCommand("imagefloat", position, true);
            popup.hide();
          });

          //循环播放控制
          // $tool.find('.edui-tool-autoplay').on('click', function() {
          //     $(this).toggleClass('checked');
          //     options.isAutoPlay = !options.isAutoPlay;
          //     options.isAutoPlay ?
          //         $ele.attr('autoplay', true) :
          //         $ele.removeAttr('autoplay');
          // });
          $tool.find(".edui-tool-loop").on("click", function () {
            $(this).toggleClass("checked");
            options.isLoop = !options.isLoop;
            options.isLoop
              ? $eleAudio.attr("loop", true)
              : $eleAudio.removeAttr("loop");
          });
          //更换音乐
          $tool.find(".edui-tool-alter").on("click", function () {
            var changeAudio = function (result) {
              if (result) {
                result = JSON.parse(result);
                if (result.data[0]) {
                  $eleAudio.attr("name", result.data[0].fileName);
                  var dom = $ele[0].outerHTML;
                  dom &&
                    $ele.replaceWith(
                      dom.replace(/http.+?\.mp3/g, result.data[0].filePath)
                    );
                }
              }
              popup.hide();
            };
            editor.options.outerFunction.htmlChangeMP3 &&
              editor.options.outerFunction.htmlChangeMP3(changeAudio);
          });
          //删除视频
          $tool.find(".edui-tool-icon-delete").on("click", function () {
            tool.utils.deleteNode($ele.parent());
          });
        }
      }
    });
    // setTimeout(function(){
    //     baidu.editor.ui.tool.img = {
    //         panel: {
    //             alterLink: {
    //                 initView: function() {
    //                     var options = tool.options;
    //                     var html = tool.html;
    //                     var dom =
    //                         '<div class="edui-tool-panel edui-tool-panel-alterLink edui-tool-line">' +
    //                         html.getText('链接') +
    //                         html.getInput(options.linkAddress) +
    //                         html.getRadio('loop', options.isNewTab, '新窗口打开', 6) +
    //                         html.getBtn() +
    //                         '</div>';
    //                     tool.utils.initPanel(dom);
    //                     tool.utils.setFocus();
    //                     this.initEvent();
    //                 },
    //                 initEvent: function() {
    //                     var options = tool.options;
    //                     var $ele = $(tool.ele);
    //                     var $tool = $(tool.node);
    //                     var editor = tool.editor;
    //                     $tool.find('.edui-tool-panel-alterLink .edui-tool-apply').on('click', function() {
    //                         var href = $(this).siblings('.edui-tool-input').val().trim();
    //                         if (!!href && !/https?:\/\/|ftp:\/\//.test(href)) {
    //                             href = "http://" + href;
    //                         }

    //                         var target = $(this).siblings('.edui-tool-radio').hasClass('checked') ? '_blank' : '';
    //                         var obj = {
    //                             href: href,
    //                             data_ue_src: href,
    //                             target: target
    //                         };
    //                         options.linkAddress = UE.utils.encodeHtml(href);
    //                         options.isNewTab = target && target == '_blank' ? true : false;

    //                         var range = editor.selection.getRange();
    //                         range.selectNode($ele[0]).select();
    //                         editor.execCommand('link', obj);

    //                         tool.img.init();
    //                     });
    //                     $tool.find('.edui-tool-panel-alterLink .edui-tool-radio').on('click', function() {
    //                         $(this).toggleClass('checked');
    //                     });
    //                     $tool.find('.edui-tool-panel-alterLink .edui-tool-input').on('keyup', function(event) {
    //                         tool.utils.isEnterKey(event.keyCode) && $(this).siblings('.edui-tool-apply').trigger('click');
    //                     });
    //                 }
    //             },
    //             alterDesc: {
    //                 initView: function() {
    //                     var options = tool.options;
    //                     var html = tool.html;
    //                     var dom =
    //                         '<div class="edui-tool-panel edui-tool-panel-alterDesc edui-tool-line">' +
    //                         html.getText('描述') +
    //                         html.getInput(options.desc) +
    //                         html.getBtn() +
    //                         '</div>';
    //                     tool.utils.initPanel(dom);
    //                     tool.utils.setFocus();
    //                     this.initEvent();
    //                 },
    //                 initEvent: function() {
    //                     var options = tool.options;
    //                     var $ele = $(tool.ele);
    //                     var $tool = $(tool.node);
    //                     $tool.find('.edui-tool-panel-alterDesc .edui-tool-apply').on('click', function() {
    //                         var desc = $(this).siblings('.edui-tool-input').val().trim();
    //                         $ele.attr({
    //                             title: desc,
    //                             alt: desc
    //                         });
    //                         desc = UE.utils.encodeHtml(desc);
    //                         options.desc = desc;

    //                         // desc ?
    //                         // $tool.find('.edui-tool-desc').html(tool.html.getDescTool()):
    //                         // $tool.find('.edui-tool-desc .edui-tool-desc-con').remove();
    //                         // tool.utils.closePanel();
    //                         tool.img.init();
    //                     });
    //                     $tool.find('.edui-tool-panel-alterDesc .edui-tool-input').on('keyup', function(event) {
    //                         tool.utils.isEnterKey(event.keyCode) && $(this).siblings('.edui-tool-apply').trigger('click');
    //                     });
    //                 }
    //             }
    //         },
    //         init: function() {console.log(2)
    //             var ele = tool.ele;
    //             var editor = tool.editor;
    //             var options = tool.options = {
    //                 type: 'img',
    //                 maxWidth: 362,
    //                 maxHeight: 121,
    //                 width: isNaN(parseInt(ele.style.width)) ? ele.width : parseInt(ele.style.width),
    //                 height: isNaN(parseInt(ele.style.height)) ? ele.height : parseInt(ele.style.height),
    //                 desc: UE.utils.encodeHtml((ele.title || ele.alt).trim()),
    //                 isLockedWH: !ele.getAttribute('unlocked') ? true : ele.getAttribute('unlocked') == '1' ? false : true,
    //                 linkAddress: '',
    //                 isNewTab: false
    //             };
    //             var floatVal = $(ele).css('float');
    //             var isCenter = $(ele).css('text-align') == 'center';
    //             options.position = floatVal == 'left' ? 'left' : floatVal == 'right' ? 'right' : isCenter ? 'center' : 'default';
    //             var linkEle = $(ele).parents('a')[0];
    //             var hasLink = options.hasLink = !!linkEle;
    //             if (hasLink) {
    //                 options.linkAddress = UE.utils.encodeHtml(linkEle.getAttribute('data_ue_src') || linkEle.getAttribute('href') || '');
    //                 var target = linkEle.getAttribute('target');
    //                 options.isNewTab = target && target == '_blank' ? true : false;
    //             }

    //             this.initView();
    //         },
    //         initView: function() {
    //             var ele = tool.ele;
    //             var html = tool.html;
    //             var options = tool.options;
    //             var popup = tool.popup;
    //             var dom =
    //                 '<div id="edui-tool-' + options.type + '" class="edui-tool-' + options.type + ' edui-tool-content">' +
    //                 // html.getTriangle(options.type)+
    //                 '<div class="edui-tool-base edui-tool-line">' +
    //                 html.getWH() +
    //                 html.getSplit(10) +
    //                 html.getPostion() +
    //                 html.getSplit(3) +
    //                 html.getMargin() +
    //                 html.getLink() +
    //                 html.getDesc() +
    //                 html.getDelete()+
    //                 // html.getDelete()+
    //                 '</div>' +
    //                 '<div class="edui-tool-link">' +
    //                 html.getLinkTool() +
    //                 '</div>' +
    //                 '<div class="edui-tool-desc">' +
    //                 html.getDescTool() +
    //                 '</div>'
    //             '</div>';

    //             var content = popup.getDom('content');
    //             content.innerHTML = dom;
    //             popup.anchorEl = ele;
    //             ele.offsetWidth > options.maxWidth && ele.offsetHeight > options.maxHeight ?
    //                 popup.showTool(popup.anchorEl) :
    //                 popup.showAnchor(popup.anchorEl);

    //             tool.node = content.firstChild;
    //             this.initEvent();
    //         },
    //         initEvent: function() {
    //             var me = this;
    //             var $ele = $(tool.ele);
    //             var $tool = $(tool.node);
    //             var options = tool.options;
    //             var editor = tool.editor;
    //             var popup = tool.popup;

    //             //锁定宽高比例
    //             var scale = options.width / options.height;
    //             $tool.find('.edui-tool-lock').on('click', function() {
    //                 $(this).toggleClass('selected');
    //                 options.isLockedWH = !options.isLockedWH;
    //                 options.isLockedWH && (scale = $tool.find('.edui-tool-width').val() / $tool.find('.edui-tool-height').val());
    //                 $ele.attr('unlocked', options.isLockedWH ? 0 : 1);
    //             });
    //             //输入值实时改变宽高
    //             var inputTimer = null, oldValue;
    //             $tool.find('.edui-tool-width, .edui-tool-height').on('keydown', function(event) {
    //                 var isNumKey = tool.utils.isNumKey(event.keyCode);
    //                 var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
    //                 var isEnterKey = tool.utils.isEnterKey(event.keyCode);
    //                 var isDirectionKey = tool.utils.isDirectionKey(event.keyCode);
    //                 if (!(isNumKey || isBackSpaceKey || isEnterKey || isDirectionKey)) {
    //                     event.preventDefault();
    //                 }else{
    //                     oldValue = this.value;
    //                 }
    //             }).on('keyup', function(event) {
    //                 var isNumKey = tool.utils.isNumKey(event.keyCode);
    //                 var isBackSpaceKey = tool.utils.isBackSpaceKey(event.keyCode);
    //                 var isEnterKey = tool.utils.isEnterKey(event.keyCode);
    //                 var isLockedWH = options.isLockedWH;
    //                 var curInput = this;
    //                 var update = function(type) {
    //                     var curAttr = $(curInput).is('.edui-tool-width') ? 'width' : 'height';
    //                     var otherAttr = curAttr == 'width' ? 'height' : 'width';
    //                     var curValue = curInput.value || 0;
    //                     var otherValue;
    //                     if (isLockedWH) {
    //                         otherValue = Math.round(otherAttr == 'width' ? curValue * scale : curValue / scale);
    //                         !isNaN(scale) && scale != 'Infinity' && scale !=0 && $tool.find('.edui-tool-' + otherAttr).val(otherValue);
    //                     }

    //                     function render() {
    //                         $ele.css(curAttr, curValue).removeAttr(curAttr);
    //                         isLockedWH && $ele.css(otherAttr, otherValue).removeAttr(otherAttr);
    //                         //如果是减小宽高，判断下是否在视角内，如果不在则滚到视角内，避免宽高瞬间减少导致元素消失在视野中
    //                         if(oldValue > curInput.value){
    //                             var rect = uiUtils.getClientRect($ele[0]);
    //                             var isIntoView = rect.top > 0;
    //                             if(!isIntoView){
    //                                 $ele[0].scrollIntoView();
    //                             }
    //                         }
    //                     }
    //                     clearTimeout(inputTimer);
    //                     if (type == 'input') {
    //                         inputTimer = setTimeout(render, 500);
    //                     } else if (type == 'enter') {
    //                         render();
    //                         curInput.blur();
    //                     }
    //                 }
    //                 if (isNumKey || isBackSpaceKey) {
    //                     update('input');
    //                 } else if (isEnterKey) {
    //                     update('enter');
    //                 }
    //             }).on('focus', function(){
    //                 tool.isBanHidePopupWhenScroll = true;
    //             }).on('blur', function(){
    //                 tool.isBanHidePopupWhenScroll = false;
    //             });

    //             //位置
    //             $tool.find('.edui-tool-icon[data-position]').on('click', function() {
    //                 var range = editor.selection.getRange();
    //                 range.selectNode($ele[0]).select();
    //                 var position = $(this).data('position');
    //                 if (position == options.position) {
    //                     return;
    //                 }
    //                 editor.execCommand('imagefloat', position);
    //                 popup.hide();
    //             });

    //             //描述(图标)
    //             $tool.find('.edui-tool-icon-desc').on('click', function() {
    //                 me.panel.alterDesc.initView();
    //             });
    //             //修改描述(按钮)
    //             $tool.find('.edui-tool-desc .edui-tool-alter').on('click', function() {
    //                 me.panel.alterDesc.initView();
    //             });
    //             //移除描述
    //             $tool.find('.edui-tool-desc .edui-tool-remove').on('click', function() {
    //                 $ele.removeAttr('title alt');
    //                 $(this).parent('.edui-tool-desc-con').remove();
    //                 options.desc = '';
    //                 tool.utils.updatePanelWH();
    //             });

    //             //链接
    //             $tool.find('.edui-tool-icon-link').on('click', function() {
    //                 me.panel.alterLink.initView();
    //             });
    //             $tool.find('.edui-tool-link .edui-tool-alter').on('click', function() {
    //                 me.panel.alterLink.initView();
    //             });
    //             $tool.find('.edui-tool-link .edui-tool-remove').on('click', function() {
    //                 var range = editor.selection.getRange();
    //                 range.selectNode($ele[0]).select();
    //                 editor.execCommand('unlink');
    //                 range = editor.selection.getRange();
    //                 range.setCursor(true);
    //                 tool.img.init();
    //             });
    //             //删除
    //             $tool.find('.edui-tool-icon-delete').on('click', function() {
    //                 tool.utils.deleteNode(options.hasLink ? $ele.parent() : $ele);
    //             });

    //             // 边距
    //             $tool.find('.edui-tool-icon-margin').on('click', function() {
    //                 domUtils.imgMarginPopup();
    //                 popup.hide();
    //             });
    //         }
    //     };
    // }, 1000)
  })();
  //tool.js end
  //editorui.js start
  // $_*********
  //ui跟编辑器的适配層
  //那个按钮弹出是dialog，是下拉筐等都是在这个js中配置
  //自己写的ui也要在这里配置，放到baidu.editor.ui下边，当编辑器实例化的时候会根据editor_config中的toolbars找到相应的进行实例化
  //uedior 工具栏按钮的
  (function () {
    var utils = baidu.editor.utils;
    var editorui = baidu.editor.ui;
    var _Dialog = editorui.Dialog;
    editorui.Dialog = function (options) {
      var dialog = new _Dialog(options);
      dialog.addListener("hide", function () {
        if (dialog.editor) {
          var editor = dialog.editor;
          try {
            if (browser.gecko) {
              var y = editor.window.scrollY,
                x = editor.window.scrollX;
              editor.body.focus();
              editor.window.scrollTo(x, y);
            } else {
              editor.focus();
            }
          } catch (ex) {}
        }
      });
      return dialog;
    };

    var iframeUrlMap = {
      insertimage: "/manage/fileUploadV2.jsp",
      inserttable: "~//js/comm/ueditor/dialogs/table/table.html",
      edittd: "~//js/comm/ueditor/dialogs/table/table.html"
    };
    //为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起
    var btnCmds = [
      "bold",
      "italic",
      "underline",
      "undo",
      "redo",
      "formatmatch",
      "source",
      "indent",
      "strikethrough",
      "selectall",
      "pasteplain",
      "pagebreak",
      "horizontal",
      "subscript",
      "superscript",
      "zhspace",
      //'unlink',
      "deletetable",
      "insertparagraphbeforetable",
      "insertrow",
      "deleterow",
      "insertcol",
      "deletecol",
      "mergecells",
      "mergeright",
      "mergedown",
      "splittocells",
      "splittorows",
      "splittocols"
    ];

    for (var i = 0, ci; (ci = btnCmds[i++]); ) {
      ci = ci.toLowerCase();
      editorui[ci] = (function (cmd) {
        return function (editor) {
          var ui = new editorui.Button({
            className: "edui-for-" + cmd,
            title:
              editor.options.labelMap[cmd] ||
              editor.getLang("labelMap." + cmd) ||
              "",
            onclick: function () {
              editor.execCommand(cmd);
            },
            showText: false
          });
          editor.addListener(
            "selectionchange",
            function (type, causeByUi, uiReady) {
              var state = editor.queryCommandState(cmd);

              if (state == -1) {
                ui.setDisabled(true);
                ui.setChecked(false);
              } else {
                if (!uiReady) {
                  ui.setDisabled(false);
                  ui.setChecked(state);
                }
              }
            }
          );
          return ui;
        };
      })(ci);
    }

    //字体颜色和背景颜色
    for (var i = 0, ci; (ci = ["backcolor", "forecolor"][i++]); ) {
      editorui[ci] = (function (cmd) {
        return function (editor) {
          var ui = new editorui.ColorButton({
            className: "edui-for-" + cmd,
            color: "default",
            title:
              editor.options.labelMap[cmd] ||
              editor.getLang("labelMap." + cmd) ||
              "",
            editor: editor,
            onpickcolor: function (t, color) {
              editor.execCommand(cmd, color);
            },
            onpicknocolor: function () {
              editor.execCommand(cmd, "default");
              this.setColor("transparent");
              this.color = "default";
            },
            onbuttonclick: function () {
              editor.execCommand(cmd, this.color);
            }
          });
          editor.addListener("selectionchange", function () {
            ui.setDisabled(editor.queryCommandState(cmd) == -1);
          });
          return ui;
        };
      })(ci);
    }

    var dialogBtns = {
      noOk: [],
      ok: ["link", "insertimage"]
    };

    for (var p in dialogBtns) {
      (function (type, vals) {
        for (var i = 0, ci; (ci = vals[i++]); ) {
          //todo opera下存在问题
          if (browser.opera && ci === "searchreplace") {
            continue;
          }
          (function (cmd) {
            editorui[cmd] = function (editor, iframeUrl, title) {
              iframeUrl =
                iframeUrl ||
                (editor.options.iframeUrlMap || {})[cmd] ||
                iframeUrlMap[cmd];
              title =
                editor.options.labelMap[cmd] ||
                editor.getLang("labelMap." + cmd) ||
                "";

              var dialog;
              //没有iframeUrl不创建dialog
              if (iframeUrl) {
                dialog = new editorui.Dialog(
                  utils.extend(
                    {
                      iframeUrl: editor.ui.mapUrl(iframeUrl),
                      editor: editor,
                      className: "edui-for-" + cmd,
                      title: title,
                      closeDialog: editor.getLang("closeDialog")
                    },
                    type == "ok"
                      ? {
                          buttons: [
                            {
                              className: "edui-okbutton",
                              label: editor.getLang("ok"),
                              onclick: function () {
                                dialog.close(true);
                              }
                            },
                            {
                              className: "edui-cancelbutton",
                              label: editor.getLang("cancel"),
                              onclick: function () {
                                dialog.close(false);
                              }
                            }
                          ]
                        }
                      : {}
                  )
                );

                editor.ui._dialogs[cmd + "Dialog"] = dialog;
              }

              var ui = new editorui.Button({
                className: "edui-for-" + cmd,
                title: title,
                onclick: function () {
                  if (dialog) {
                    switch (cmd) {
                      case "wordimage":
                        editor.execCommand("wordimage", "word_img");
                        if (editor.word_img) {
                          dialog.render();
                          dialog.open();
                        }
                        break;
                      case "scrawl":
                        if (editor.queryCommandState("scrawl") != -1) {
                          dialog.render();
                          dialog.open();
                        }

                        break;
                      default:
                        dialog.render();
                        dialog.open();
                    }
                  }
                },
                disabled:
                  cmd == "scrawl" && editor.queryCommandState("scrawl") == -1
              });
              editor.addListener("selectionchange", function () {
                //只存在于右键菜单而无工具栏按钮的ui不需要检测状态
                var unNeedCheckState = { edittd: 1, edittable: 1 };
                if (cmd in unNeedCheckState) return;

                var state = editor.queryCommandState(cmd);
                ui.setDisabled(state == -1);
                ui.setChecked(state);
              });

              return ui;
            };
          })(ci.toLowerCase());
        }
      })(p, dialogBtns[p]);
    }
    editorui.justify = function (editor) {
      var vals = editor.options.wordagejustify,
        _onMenuClick = function () {
          editor.execCommand("justify", this.value);
        },
        items = [];

      for (var i in vals) {
        items.push({
          label: vals[i],
          value: i,
          onclick: _onMenuClick
        });
      }

      var ui = new editorui.MenuButton({
        editor: editor,
        className: "edui-for-justify",
        title: "段落对齐",
        items: items,
        onbuttonclick: function () {
          var value = editor.queryCommandValue("justify");
          editor.execCommand("justify", value);
        }
      });
      editor.addListener("selectionchange", function () {
        var state = editor.queryCommandState("justify");
        if (state == -1) {
          ui.setDisabled(true);
        } else {
          ui.setDisabled(false);
          var value = editor.queryCommandValue("justify");
          ui.setValue(value);
          ui.setChecked(state);
        }
      });
      return ui;
    };
    editorui.bgcolortoggle = function (editor) {
      var ui = new editorui.Button({
        editor: editor,
        title:
          editor.options.labelMap["bgcolortoggle"] ||
          editor.getLang("labelMap.bgcolortoggle") ||
          "",
        className: "edui-for-bgcolortoggle",
        onclick: function () {
          if (editor.body.getAttribute("isChangeBg") == "true") {
            var deleteOptions = {
              tips: "仅用于预览编辑，不改变页面实际背景"
            };
            domUtils.ing(deleteOptions);

            $(editor.body).addClass("changeBgColor");
            // $(editor.container).find('textarea').addClass('changeBgColor');
            editor.body.setAttribute("isChangeBg", "");
            this.setChecked(true);
          } else {
            $(editor.body).removeClass("changeBgColor");
            // $(editor.container).find('textarea').removeClass('changeBgColor');
            editor.body.setAttribute("isChangeBg", "true");
            this.setChecked(false);
          }
        },
        showText: false
      });
      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("bgcolortoggle") == -1);
        // var state = editor.queryCommandState( 'bgcolortoggle' );
        // ui.setDisabled( state == -1 );
        // ui.setChecked(false);
      });
      // editor.addListener('selectionchange', function () {
      //     var state = editor.queryCommandState( 'bgcolortoggle' );
      //     console.log(editor.queryCommandValue( 'bgcolortoggle' ))
      //     if ( state == -1 ) {
      //         ui.setDisabled( true );
      //     } else {
      //     //     ui.setDisabled( false );
      //         var value = editor.queryCommandValue( 'bgcolortoggle' );
      //         // ui.setValue( value );
      //         ui.setChecked( 1 );
      //     }
      //     // ui.setDisabled(editor.queryCommandState('bgcolortoggle') == -1);
      // });
      return ui;
    };
    editorui.swfuploadword = function (editor) {
      if (!editor.options.swfuploadSrc || !editor.options.uploadH5Src) {
        return;
      }
      // if(!editor.options.swfuploadSrc) editor.options.swfuploadSrc = "";
      // if(!editor.options.uploadH5Src) editor.options.uploadH5Src = "";

      var script = document.createElement("script");
      script.type = "text/javascript";
      script.src = editor.options.swfuploadSrc;
      var script1 = document.createElement("script");
      script1.type = "text/javascript";
      script1.src = editor.options.uploadH5Src;
      if (UE.browser.ie || editor.options.uploadH5Src == "") {
        //按需加载
        document.getElementsByTagName("head")[0].appendChild(script);
      } else {
        document.getElementsByTagName("head")[0].appendChild(script1);
      }

      //上传进度显示
      function uploadProgress(options) {
        //options.status
        //start:开始
        if (options.status == "start") {
          //去掉开始上传背景
          $("#showNewUploadFileContent").removeClass("startToUpload");

          var tr2 = [
            '<div id="progressBody_' +
              options.id +
              '" class="bodyDisable_1"></div>',
            '<div id="progressWrap_' +
              options.id +
              '" class="bodyProgressWrap_1">',
            '<div class="progressCenter"></div>',
            '<div class="progressIngBody_1">',
            '<div class="progressIngTitle">' +
              options.title +
              "  正在导入...</div>",
            '<div class="progressIngMission">',
            '<div class="mission"><div id="progress" class="progress"></div></div>',
            '<div id="progressNum" class="progressNum">100%</div>',
            "</div>",
            '<div class="progressInfo"><span class="progressFileSize">文件大小:' +
              Fai.parseFileSize(options.size) +
              '</span><a class="progressCancel">取消</a></div>',
            "</div>",
            "</div>"
          ];

          $("body").append(tr2.join(""));
          $("#progressWrap_" + options.id + " .progressCancel").live(
            "click",
            function () {
              var opt = { status: "end", id: options.id };
              uploadProgress(opt);
              if (typeof editor.swfObj != "undefined") {
                editor.swfObj.cancelUpload();
              }
              isCancel = true;
            }
          );
        } else if (options.status == "ing") {
          $("#progress").css("width", options.percent + "%");
          $("#progressNum").html(options.percent + "%");
        } else if (options.status == "end") {
          $("#progressBody_" + options.id).remove();
          $("#progressWrap_" + options.id).remove();
        } else if (options.status == "error") {
          $("#progress").addClass("progressError");
        }
      }
      // 非常奇怪，如果mobi 调用 site 的UE， 上传文件的按钮会有一个播放的图标覆盖，mobi 不能写文件上传的 button_image_url
      var btImageUrl =
        top.window.location.href &&
        top.window.location.href.indexOf("mobiDesign.jsp") >= 0
          ? ""
          : editor.options.BUS_UEDITOR_HOME_URL + "/image/word.png";
      editor.swfObj,
        editor.uploadH5,
        (setting_objects = {
          file_post_name: "Filedata",
          upload_url: "/ajax/updocx.jsp?cmd=add",
          button_placeholder_id: "ueditor_swfuploadButton",
          file_size_limit:
            (top.Fai.top.file_size_limit ? top.Fai.top.file_size_limit : 20) +
            "MB",
          file_types: "*.doc;*.docx;",
          button_width: 23,
          button_height: 23,
          button_image_url: btImageUrl,
          upload_start_handler: function (file) {
            //文件开始上传
            var tmpOptions = {
              status: "start",
              id: file.id,
              title: file.name,
              size: file.size
            };
            uploadProgress(tmpOptions);
            isCancel = false;
            if (typeof editor.options.ueditorChangeEvent == "function") {
              editor.options.ueditorChangeEvent();
            }
          },
          file_queue_error_handler: function (file, errCode, message) {
            switch (errCode) {
              case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
                domUtils.ing({
                  tips:
                    "导入word文档不能超过" +
                    (top.Fai.top.file_size_limit
                      ? top.Fai.top.file_size_limit
                      : 20) +
                    "MB"
                });
                break;
              case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
                domUtils.ing({
                  tips: "不允许0字节文件"
                });
                break;
              case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
                domUtils.ing({
                  tips: "不允许的文件类型"
                });
                break;
              default:
                domUtils.ing({
                  tips: "系统错误"
                });
                break;
            }
          },
          file_dialog_complete_handler: function (
            selectFilesNum,
            queuedFilesNum
          ) {
            if (queuedFilesNum > 0) {
              this.startUpload();
            }
          },
          upload_success_handler: function (file, result) {
            var data = jQuery.parseJSON(result);

            if (data.success) {
              !isCancel &&
                domUtils.ing({ tips: "word文档 " + file.name + " 导入成功" });

              var html = editor.getContent();
              if ($(data.docx).length > 0 && $(data.docx).find(".window1")[0]) {
                html += isCancel
                  ? ""
                  : $(data.docx).find(".window1")[0].innerHTML;
              }

              editor.setContent(html);

              //editor.execCommand('inserthtml' , html, true);
              if ($("#progress").length > 0) {
                var tmpOptions = {
                  status: "end",
                  id: file.id,
                  title: file.name
                };
                uploadProgress(tmpOptions);
              }
              editor.fireEvent("contentchange");
            } else {
              domUtils.ing({
                tips:
                  "word文档" +
                  file.name +
                  "，" +
                  (data.msg ? data.msg : "文件已经损坏")
              });
              var tmpOptions = {
                status: "error",
                id: file.id,
                title: file.name,
                size: file.size
              };
              uploadProgress(tmpOptions);
            }
          },
          view_progress: function (file, bytesLoaded, bytesTotal, percent) {
            if ($("#progress").length > 0) {
              var tmpOptions = {
                status: "ing",
                percent: percent,
                id: file.id,
                title: file.name,
                size: file.size
              };
              uploadProgress(tmpOptions);
            }
          },
          upload_error_handler: function (file, errorCode, message) {
            switch (errorCode) {
              case SWFUpload.UPLOAD_ERROR.IO_ERROR:
                domUtils.ing({
                  tips: "文件太大，建议使用火狐浏览器上传或者分成多个文件上传"
                });
                $("#progressBody_" + file.id).remove();
                $("#progressWrap_" + file.id).remove();
                break;
              default:
                domUtils.ing({
                  tips: "系统错误"
                });
                break;
            }
          }
        });

      var advance_setting = {
        siteFree: false,
        updateUrlViewRes: "",
        fileObjName: "Filedata",
        auto: true,
        fileTypeExts: "*.doc;*.docx;",
        multi: false,
        fileSizeLimit:
          (top.Fai.top.file_size_limit ? top.Fai.top.file_size_limit : 20) *
          1024 *
          1024,
        breakPoints: true,
        saveInfoLocal: false,
        showUploadedPercent: false, //是否实时显示上传的百分比，如20%
        showUploadedSize: false,
        removeTimeout: 9999999,
        isBurst: false,
        fileSplitSize:
          (top.Fai.top.file_size_limit ? top.Fai.top.file_size_limit : 20) *
          1024 *
          1024,
        buttonText: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
        uploader:
          "/ajax/updocx.jsp?cmd=add&_TOKEN=" + $("#_TOKEN").attr("value"),
        onUploadSuccess: function (file, result) {
          var data = jQuery.parseJSON(result);
          var range = editor.selection.getRange(); //全屏下使用
          if (data.success) {
            !isCancel &&
              domUtils.ing({ tips: "word文档 " + file.name + " 导入成功" });

            var html = editor.getContent();
            var subStr_1 = new RegExp("<li", "ig");
            data.docx = data.docx.replace(subStr_1, "<p");
            var subStr_2 = new RegExp("</li>", "ig");
            data.docx = data.docx.replace(subStr_2, "</p>");
            //将HTML数据中的空格&nbsp转为换行<br/>,这样保持数据时才会换行
            var docxArr = $(data.docx)
              .find(".window1")[0]
              .innerHTML.split("&nbsp;");
            var htmlStr = docxArr.join("<br/>");

            if ($(data.docx).length > 0 && $(data.docx).find(".window1")[0]) {
              // html += isCancel ? "" : $(data.docx).find(".window1")[0].innerHTML;
              html += isCancel ? "" : htmlStr;
            }
            // 非全屏和全屏下word文档的淡入方法：全屏下直接在range插入；非全屏下获取整个编辑区再插入（原来的方法）
            // if(editor.container.getAttribute('isfullscreen') === 'fullScreen'){
            // range.insertNode($(htmlStr.replace(/\s/g,""))[0])
            // var length = $(htmlStr.replace(/\s/g,"")).length;

            var length = $(htmlStr).length;
            for (var i = 0; i < length; i++) {
              range.insertNode($(htmlStr)[length - i - 1]);
            }
            // }else{
            //     editor.setContent(html);
            // }

            //editor.execCommand('inserthtml' , html, true);
            if ($("#progress").length > 0) {
              var tmpOptions = { status: "end", id: file.id, title: file.name };
              uploadProgress(tmpOptions);
            }
            editor.fireEvent("contentchange");
          } else {
            domUtils.ing({
              tips:
                "word文档" +
                file.name +
                "，" +
                (data.msg ? data.msg : "文件已经损坏")
            });
            var tmpOptions = {
              status: "end",
              id: file.id,
              title: file.name,
              size: file.size
            };
            uploadProgress(tmpOptions);
          }
        },
        onSelect: function (file) {
          if (
            file[0].size >
            (top.Fai.top.file_size_limit ? top.Fai.top.file_size_limit : 20) *
              1024 *
              1024
          ) {
            domUtils.ing({
              tips:
                "导入word文档不能超过" +
                (top.Fai.top.file_size_limit
                  ? top.Fai.top.file_size_limit
                  : 20) +
                "MB"
            });
            return false;
          }
          return true;
        },
        onUploadError: function (file, text) {
          //如果因为文件过大导致的上传失败，根据最小惊讶法则不要提示用户网络繁忙，在这里单独添加一个提示文件过大的逻辑
          if (file.size > 20 * 1024 * 1024) {
            domUtils.ing({
              tips: "导入文件不能超过20MB"
            });
            return false;
          }

          domUtils.ing({
            tips: "网络繁忙，文件:" + file.name + "上传失败，请稍后重试"
          });
        },
        onUploadStart: function (file) {
          $("#progressBody_" + file.id).remove();
          $("#progressWrap_" + file.id).remove();
          var tmpOptions = {
            status: "start",
            id: file.id,
            title: file.name,
            size: file.size
          };
          uploadProgress(tmpOptions);
          isCancel = false;
          if (typeof editor.options.ueditorChangeEvent == "function") {
            editor.options.ueditorChangeEvent();
          }
        }
      };

      var ui = new editorui.Button({
        postRender: function () {
          this.Stateful_postRender();
          this.setDisabled(this.disabled);
          if (UE.browser.ie || editor.options.uploadH5Src == "") {
            //若uploadH5的js没加载出来，也用flash版的
            script.onload = script.onreadystatechange = function () {
              setTimeout(function () {
                editor.swfObj = SWFUploadCreator.create(setting_objects);
              }, 0);
            };
          } else {
            script1.onload = script.onreadystatechange = function () {
              setTimeout(function () {
                editor.uploadH5 = $("#ueditor_swfuploadButton").uploadify(
                  advance_setting
                );
                $("#ueditor_swfuploadButton").find("a")[0].onclick = function (
                  e
                ) {
                  e.stopPropagation();
                };
                $("#ueditor_swfuploadButton").find(
                  "input"
                )[0].onchange = function (e) {
                  e.stopPropagation();
                };
              }, 0);
            };
          }
        },
        getHtmlTpl: function () {
          return (
            '<div id="##" class="edui-box %% edui-for-swfuploadword">' +
            '<div id="##_state" stateful>' +
            '<div class="%%-wrap"><div id="##_body" unselectable="on" title="word文档导入"' +
            'class="%%-body">' +
            '<div class="edui-box edui-icon">' +
            '<span id="ueditor_swfuploadButton"></span>' +
            "</div>" +
            "</div>" +
            "</div>" +
            "</div></div>"
          );
        },
        _onArrowClick: function (event, el) {},
        _onButtonClick: function () {}
      });
      editor.addListener("selectionchange", function () {
        var state = editor.queryCommandState("swfuploadword");
        if (state == -1) {
          ui.setDisabled(true);
        } else {
          ui.setDisabled(false);
        }
      });
      return ui;
    };

    editorui.fontfamily = function (editor, list, title) {
      list = editor.options["fontfamily"] || [];
      title =
        editor.options.labelMap["fontfamily"] ||
        editor.getLang("labelMap.fontfamily") ||
        "";

      for (var i = 0, ci, items = []; (ci = list[i]); i++) {
        items.push({
          label: ci.second,
          value: ci.first,
          renderLabelHtml: function () {
            return (
              '<div class="edui-label %%-label" style="font-family:' +
              utils.unhtml(this.value) +
              '">' +
              (this.label || "") +
              "</div>"
            );
          }
        });
      }
      var ui = new editorui.Combox({
        editor: editor,
        items: items,
        // getHtmlTpl: function (){
        //     return '<div id="##" class="edui-box %%">' +
        //         '<div '+ (this.title ? 'title="' + this.title + '"' : '') +' id="##_state" stateful><div class="%%-body">' +
        //         '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
        //         '<div class="edui-box edui-icon '+this.className+'_background "></div>' +
        //         '</div>' +
        //         '</div></div></div>';
        // },
        onselect: function (t, index) {
          editor.execCommand("FontFamily", this.items[index].value);
          //2015-11-01 统计site字体使用频率
          editor.options.outerFunction.logFontFamilyUse &&
            editor.options.outerFunction.logFontFamilyUse(
              this.items[index].value
            );
        },
        onbuttonclick: function () {
          this.showPopup();
        },
        title: title,
        initValue: title,
        className: "edui-for-fontfamily",
        indexByValue: function (value) {
          if (value) {
            for (var i = 0, ci; (ci = this.items[i]); i++) {
              if (ci.value.indexOf(value) != -1) return i;
            }
          }
          return -1;
        }
      });
      editor.addListener(
        "selectionchange",
        function (type, causeByUi, uiReady) {
          if (!uiReady) {
            var state = editor.queryCommandState("FontFamily");
            if (state == -1) {
              ui.setDisabled(true);
            } else {
              ui.setDisabled(false);
              var value = editor.queryCommandValue("FontFamily");
              //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
              value && (value = value.replace(/['"]/g, "").split(",")[0]);
              ui.setValue(value);
              ui.setChecked(state);
            }
          }
        }
      );
      return ui;
    };

    editorui.qqface = function (editor) {
      var ui = new editorui.QQFacerButton({
        editor: editor,
        title:
          editor.options.labelMap["qqface"] ||
          editor.getLang("labelMap.qqface") ||
          "",
        className: "edui-for-qqface",
        onbuttonclick: function () {
          editor.execCommand("qqface");
        }
      });
      //editorui.buttons['qqface'] = ui;
      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("qqface") == -1);
      });
      return ui;
    };

    editorui.fontsize = function (editor, list, title) {
      if (editor.options.isMobiRich) {
        title = "14px";
      } else {
        title =
          editor.options.labelMap["fontsize"] ||
          editor.getLang("labelMap.fontsize") ||
          "";
      }
      list = list || editor.options["fontsize"] || [];

      if (!editor.options.useDefaultFontsizeComBox) {
        //新的字体大小滚动条
        var ui = new editorui.FontsizeSlider({
          editor: editor,
          title: title,
          initValue: 12,
          minValue: 12,
          maxValue: 999,
          sliderMaxValue: 60,
          getHtmlTpl: function () {
            return (
              '<div id="##" class="edui-box %%">' +
              "<div " +
              (this.title ? 'title="' + this.title + '"' : "") +
              ' id="##_state" stateful>' +
              '<div class="%%-body">' +
              '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
              '<div class="edui-box edui-icon ' +
              this.className +
              '_background "></div>' +
              "</div></div></div></div>"
            );
          },
          onbuttonclick: function () {
            this.showPopup();
            editor.fireEvent("selectionchange");
          },
          className: "edui-for-fontsize"
        });
        editor.addListener(
          "selectionchange",
          function (type, causeByUi, uiReady) {
            if (!uiReady) {
              var state = editor.queryCommandState("FontSize");
              if (state == -1) {
                ui.setDisabled(true);
              } else {
                ui.setDisabled(false);
                ui.setValue(editor.queryCommandValue("FontSize"));
              }
            }
          }
        );
        editor.addListener(
          "fontsizeChange",
          function (type, causeByUi, uiReady) {
            if (!uiReady) {
              var state = editor.queryCommandState("FontSize");
              if (state == -1) {
                ui.setDisabled(true);
              } else {
                ui.setDisabled(false);
                editor.execCommand("FontSize", ui.getValue());
              }
            }
          }
        );
        return ui;
      } else {
        //默认的字体大小下拉框
        var items = [];
        for (var i = 0; i < list.length; i++) {
          var size = list[i] + "px";
          items.push({
            label: size,
            value: size,
            renderLabelHtml: function () {
              // return '<div class="edui-label %%-label" style="line-height:1;font-size:' +
              //         this.value + '">' + (this.label || '') + '</div>';
              return (
                '<div class="edui-label %%-label">' +
                (this.label || "") +
                "</div>"
              );
            }
          });
        }
        var ui = new editorui.Combox({
          editor: editor,
          items: items,
          title: title,
          initValue: title,
          hasInput: true,
          unit: "px",
          maxValue: 999,
          minValue: 12,
          command: "FontSize",
          // getHtmlTpl: function (){
          //     return '<div id="##" class="edui-box %%">' +
          //         '<div '+ (this.title ? 'title="' + this.title + '"' : '') +' id="##_state" stateful><div class="%%-body">' +
          //         '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
          //         '<div class="edui-box edui-icon '+this.className+'_background "></div>' +
          //         '</div>' +
          //         //'<div class="edui-box edui-splitborder"></div>' +
          //         //'<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
          //         '</div></div></div>';
          // },
          onselect: function (t, index) {
            editor.execCommand("FontSize", this.items[index].value);
          },
          onbuttonclick: function () {
            this.showPopup();
          },
          className: "edui-for-fontsize"
        });
        editor.addListener(
          "selectionchange",
          function (type, causeByUi, uiReady) {
            if (!uiReady) {
              var state = editor.queryCommandState("FontSize");
              if (state == -1) {
                ui.setDisabled(true);
              } else {
                ui.setDisabled(false);
                ui.setValue(editor.queryCommandValue("FontSize"));
                ui.setChecked(state);
              }
            }
          }
        );
        return ui;
      }
    };

    editorui.edittd = function (editor, iframeUrl, title) {
      iframeUrl =
        iframeUrl ||
        (editor.options.iframeUrlMap || {})["edittd"] ||
        iframeUrlMap["edittd"];
      title =
        editor.options.labelMap["edittd"] ||
        editor.getLang("labelMap.edittd") ||
        "";
      var $G = function (id) {
        return document.getElementById(id);
      };
      var dialog;
      //没有iframeUrl不创建dialog
      if (iframeUrl) {
        dialog = new editorui.Dialog({
          iframeUrl: editor.ui.mapUrl(iframeUrl),
          editor: editor,
          className: "edui-for-edittd",
          title: title,
          closeDialog: editor.getLang("closeDialog"),

          getContentHtml: function () {
            var contentHtml = "";
            var iframeContent = "";
            if (typeof this.content == "string") {
              contentHtml = this.content;
            } else if (this.iframeUrl) {
              contentHtml =
                '<span id="' +
                this.id +
                '_contmask" class="dialogcontmask"></span><div id="' +
                this.id +
                'divContetnt" ></div>';
              // '<iframe id="'+ this.id +'_iframe" class="%%-iframe" disabled=true height="100%" width="100%" frameborder="0"></iframe>';
            }

            return contentHtml;
          },
          reset: function () {
            this.getDom("content").innerHTML = this.getContentHtml();
          },
          open: function () {
            if (this.autoReset) {
              //有可能还没有渲染
              try {
                this.reset();
              } catch (e) {
                this.render();
                this.open();
              }
            }
            this.showAtCenter();
            this.insertIframeHtml();
            // baidu.editor._internal(this.id);
            editor.execCommand("inittablepopup", this.id);
            this._insettd();

            editor.options.ueditorChangeEvent &&
              editor.options.ueditorChangeEvent();
          },
          _insettd: function () {
            var me = this;
            addColorPickListener();
            var $radios = $(me.getDom()).find('input[name="isTransparent"]');

            $("#" + me.id + "_edittd_id").find(
              "button"
            )[0].onclick = function () {
              var isTransparent = $radios[0].checked;
              if (isTransparent) {
                bgColor = "transparent";
              } else {
                var bgColor = $("#" + me.id + "bgColor").css(
                  "background-color"
                );
                // var bgColor = $G( me.id+"bgColor" ).value;
                // if(!/^#?[0-9a-fA-F]{6}$/.test(bgColor)){
                //     domUtils.ing({
                //         tips: '您输入的十六进制颜色值无效！'
                //     });
                //     return;
                // }
              }

              var tdItem = {
                bgColor: bgColor,
                align: $G(me.id + "align").getAttribute("value") || "",
                vAlign: $G(me.id + "vAlign").getAttribute("value") || "",
                borderSize: $G(me.id + "borderSize").value || "",
                borderColor:
                  $("#" + me.id + "borderColor").css("background-color") || "",
                unitBorderStyle: $G(me.id + "unitBorderStyle").value || "solid",
                borderSelectShow:
                  borderSelect || "['top','right','bottom','left']"
              };
              editor.execCommand("edittd", tdItem);
              var dialog = window.self.$EDITORUI[me.id];
              dialog.close(true);
              // close(true)并不会删除me.id,这样再次打开会影响到input radio的显示
              $("#" + me.id).remove();
            };
            $("#" + me.id + "_edittd_id").find(
              "button"
            )[1].onclick = function () {
              var dialog = window.self.$EDITORUI[me.id];
              dialog.close(true);

              $("#" + me.id).remove();
            };

            // $('#'+me.id+'borderSize').focus(function(){
            //     $(this).val("");
            // })

            // $('#'+me.id+'_titlebar').find('.edui-button-body')[0].onmouseup = function () {
            //     console.log('button');
            //     $('#'+me.id).remove();
            // };

            $radios.on("change", function () {
              if (this.getAttribute("value") == "true") {
                $G(me.id + "bgColor").setAttribute("disabled", true);
                $G(me.id + "bgColor").removeAttribute("readonly");
                $G(me.id + "bgColor").style.cursor = "";
              } else {
                $G(me.id + "bgColor").removeAttribute("disabled");
                $G(me.id + "bgColor").setAttribute("readonly", true);
                $G(me.id + "bgColor").style.cursor = "pointer";
              }
            });

            // 禁止输入负数
            // $('#'+me.id+'borderSize').on("input",function(event){
            //    event.target.value = event.target.value.replace(/\-/g,"");
            // });
            $("#" + me.id + "borderSize").on("focus", function () {
              if (parseInt(this.value)) {
                this.value = parseInt(this.value);
              }
              $(this).select();
            });
            $("#" + me.id + "borderSize").on("blur", function (ev) {
              this.value = parseInt(this.value) + "px";
            });
            $("#" + me.id + "borderSize").on("keypress", function (ev) {
              return ev.keyCode >= 48 && ev.keyCode <= 57;
            });

            // 记录四条边框的显示与否
            var borderValue,
              borderSelect = ["top", "right", "bottom", "left"];
            $("#" + me.id + "_edittd_id")
              .find(".top,.right,.bottom,.left")
              .on("click", function () {
                borderValue = this.getAttribute("value");
                if ($(this).hasClass("clickBef")) {
                  $(this).removeClass("clickBef");
                  $(this).addClass("clickAft");
                  if (borderSelect.indexOf(borderValue) >= 0) {
                    borderSelect.splice(borderSelect.indexOf(borderValue), 1);
                  }
                } else {
                  $(this).removeClass("clickAft");
                  $(this).addClass("clickBef");
                  if (borderSelect.indexOf(borderValue) < 0) {
                    borderSelect.push(borderValue);
                  }
                }
              });

            // 表格单元格的对齐设置
            $("#" + me.id + "vAlign")
              .find(".top,.bottom,.middle")
              .on("click", function () {
                var vAlign = $("#" + me.id + "vAlign").children();
                for (var i = 0; i < vAlign.length; i++) {
                  if (this === vAlign[i]) {
                    $(vAlign[i]).addClass("active");
                    $("#" + me.id + "vAlign").attr(
                      "value",
                      $(vAlign[i]).attr("name")
                    );
                  } else {
                    $(vAlign[i]).removeClass("active");
                  }
                }
              });
            $("#" + me.id + "align")
              .find(".left,.right,.center")
              .on("click", function () {
                var align = $("#" + me.id + "align").children();
                for (var i = 0; i < align.length; i++) {
                  if (this === align[i]) {
                    $(align[i]).addClass("active");
                    $("#" + me.id + "align").attr(
                      "value",
                      $(align[i]).attr("name")
                    );
                  } else {
                    $(align[i]).removeClass("active");
                  }
                }
              });
            //
            // $('#'+me.id+'borderShow').find('.borderShowMask').on('click', function(e){
            //     if(!$('#'+me.id+'borderShow').find('.borderShowIcon').hasClass('active')){
            //         $('#'+me.id+'borderShow').find('.borderShowIcon').addClass('active');
            //         $('#'+me.id+'borderShow').find('.borderSelect').css('display','block');
            //     }else{
            //         $('#'+me.id+'borderShow').find('.borderShowIcon').removeClass('active');
            //         $('#'+me.id+'borderShow').find('.borderSelect').css('display','none');
            //     }
            // });
            //
            // $('#'+me.id+'unitBorderStyle').find('.borderStyleMask').on('click', function(e){
            //     if(!$('#'+me.id+'unitBorderStyle').find('.borderStyleIcon').hasClass('active')){
            //         $('#'+me.id+'unitBorderStyle').find('.borderStyleIcon').addClass('active');
            //         $('#'+me.id+'unitBorderStyle').find('.borderStyleCon').css('display','block');
            //     }else{
            //         $('#'+me.id+'unitBorderStyle').find('.borderStyleIcon').removeClass('active');
            //         $('#'+me.id+'unitBorderStyle').find('.borderStyleCon').css('display','none');
            //     }
            // });
            $("#" + me.id + "unitBorderStyle")
              .find("li")
              .on("click", function (e) {
                $("#" + me.id + "unitBorderStyle").find(
                  ".borderStyleInner"
                )[0].innerHTML = this.innerHTML;
                $("#" + me.id + "unitBorderStyle")
                  .find(".borderStyleCon")
                  .css("display", "none");
                $("#" + me.id + "unitBorderStyle")
                  .find(".borderStyleIcon")
                  .removeClass("active");
                $("#" + me.id + "unitBorderStyle").attr(
                  "value",
                  this.getAttribute("value")
                );
              });
            var hasUnitSelects = [];
            hasUnitSelects.push(
              $("#" + me.id + "_edittd_id").find(".borderStyleMask")[0],
              $("#" + me.id + "_edittd_id").find(".borderShow")[0]
            );

            var unitSelectUis = $("#" + me.id + "_edittd_id").find(".unitCon");
            var unitSelectIcons = $("#" + me.id + "_edittd_id").find(
              ".unitIcon"
            );
            for (var i = 0; i < hasUnitSelects.length; i++) {
              hasUnitSelects[i].index = i;
              hasUnitSelects[i].onclick = function (e) {
                var e = e || window.event;
                var This = this;
                for (var i = 0; i < unitSelectUis.length; i++) {
                  unitSelectUis[i].style.display = "none";
                  $(unitSelectIcons[i]).removeClass("active");
                }
                unitSelectUis[this.index].style.display = "block";
                $(this).find(".unitIcon").addClass("active");

                document.onclick = function () {
                  unitSelectUis[This.index].style.display = "none";
                  $(unitSelectIcons[This.index]).removeClass("active");
                };
                e.cancelBubble = true;
              };
            }

            // console.log(borderSelect);
            (function () {
              if (!editor.currentSelectedArr.length) {
                var range = editor.selection.getRange();
                var td = domUtils.findParentByTagName(
                  range.startContainer,
                  "td",
                  true
                );
                var table = domUtils.findParentByTagName(
                  range.startContainer,
                  "table",
                  true
                );
                if (td) {
                  var bgColor = td.bgColor || table.bgColor;
                  var isTransparent = false;
                  if (!bgColor || bgColor == "transparent") {
                    isTransparent = true;
                  }
                  if (isTransparent) {
                    $radios[0].checked = true;
                    $G(me.id + "bgColor").setAttribute("disabled", true);
                  } else {
                    $radios[1].checked = true;
                  }

                  // 表格单元格的对齐设置初始化
                  for (
                    var i = 0;
                    i < $("#" + me.id + "vAlign").children().length;
                    i++
                  ) {
                    if (
                      td.vAlign ===
                      $("#" + me.id + "vAlign")
                        .children()
                        [i].getAttribute("name")
                    ) {
                      $($("#" + me.id + "vAlign").children()[i]).addClass(
                        "active"
                      );
                      $("#" + me.id + "vAlign").attr("value", td.vAlign);
                    } else {
                      $($("#" + me.id + "vAlign").children()[i]).removeClass(
                        "active"
                      );
                    }
                  }
                  for (
                    var i = 0;
                    i < $("#" + me.id + "align").children().length;
                    i++
                  ) {
                    td.align = td.align ? td.align : "left";
                    if (
                      td.align ===
                      $("#" + me.id + "align")
                        .children()
                        [i].getAttribute("name")
                    ) {
                      $($("#" + me.id + "align").children()[i]).addClass(
                        "active"
                      );
                      $("#" + me.id + "align").attr("value", td.align);
                    } else {
                      $($("#" + me.id + "align").children()[i]).removeClass(
                        "active"
                      );
                    }
                  }
                  // 表格单元格的边框选择初始化
                  if ($(td).attr("bSelect")) {
                    var borderArr = ["top", "right", "bottom", "left"];
                    var bSelectArr = $(td).attr("bSelect").split(",");
                    for (var i = 0; i < borderArr.length; i++) {
                      if (bSelectArr.indexOf(borderArr[i]) < 0) {
                        $("#" + me.id + "borderShow")
                          .find("." + borderArr[i])
                          .removeClass("clickBef");
                        $("#" + me.id + "borderShow")
                          .find("." + borderArr[i])
                          .addClass("clickAft");
                      }
                    }
                  }
                  // 边框style的初始化
                  // var uBorderStyle = td.style.borderBottomStyle || "solid";

                  var uBorderStyle =
                    !td.style.borderBottomStyle ||
                    td.style.borderBottomStyle === "none"
                      ? "solid"
                      : td.style.borderBottomStyle;
                  $("#" + me.id + "unitBorderStyle").find(
                    ".borderStyleInner"
                  )[0].innerHTML = $("#" + me.id + "unitBorderStyle").find(
                    'li[value="' + uBorderStyle + '"]'
                  )[0].innerHTML;
                  $("#" + me.id + "unitBorderStyle").attr(
                    "value",
                    uBorderStyle
                  );

                  $("#" + me.id + "bgColor").css(
                    "background-color",
                    (isTransparent ? "" : bgColor).toUpperCase()
                  );
                  // $G( me.id+"bgColor" ).value = (isTransparent ? "" : bgColor).toUpperCase();
                  // $G( me.id+"align" ).value = td.align || "";
                  // $G( me.id+"vAlign" ).setAttribute('value',td.vAlign || "") ;
                  // $G( me.id+"unitBorderStyle" ).value = td.unitBorderStyle || "solid";
                  $G(me.id + "borderSize").value = parseInt(
                    td.style.borderBottomWidth
                  )
                    ? parseInt(td.style.borderBottomWidth) + "px"
                    : "1px";
                  // $G( me.id+"borderColor" ).value = td.getAttribute('borderColor') || "#000000";
                  $("#" + me.id + "borderColor").css(
                    "background-color",
                    td.getAttribute("borderColor") || "#000000"
                  );
                  // $G( me.id+"unitBorderStyle").setAttribute('value',td.style.borderStyle || "solid") ;
                }
              }
            })();
            /**
             * 绑定取色器监听事件
             */
            function addColorPickListener() {
              var colorPicker = getColorPicker(),
                ids = [me.id + "bgColor", me.id + "borderColor"];
              for (var i = 0, ci; (ci = $G(ids[i++])); ) {
                domUtils.on(ci, "click", function () {
                  var me = this;
                  showColorPicker(colorPicker, me);
                  colorPicker.content.onpickcolor = function (t, color) {
                    // me.value = color.toUpperCase();
                    $(me).css("background-color", color.toUpperCase());
                    colorPicker.hide();
                  };
                  colorPicker.content.onpicknocolor = function () {
                    // me.value = '';
                    $(me).css("background-color", "");
                    colorPicker.hide();
                  };
                });
                domUtils.on(ci, "keyup", function () {
                  colorPicker.hide();
                });
              }
              domUtils.on(document, "mousedown", function () {
                //UE.ui.Popup.postHide( this );
              });
            }

            /**
             * 实例化一个colorpicker对象
             */
            function getColorPicker() {
              return new UE.ui.Popup({
                content: new UE.ui.ColorPicker({
                  noColorText: "",
                  editor: editor
                })
              });
            }

            /**
             * 在anchorObj上显示colorpicker
             * @param anchorObj
             */
            function showColorPicker(colorPicker, anchorObj) {
              colorPicker.showAnchor(anchorObj);
            }
          },
          insertIframeHtml: function () {
            var iframe = document.getElementById(this.id + "divContetnt");

            document.getElementById(this.id + "_body").style.width = "454px";
            document.getElementById(this.id + "_body").style.height = "356px";
            document.getElementById(this.id).style.top = "54px";
            document.getElementById(this.id).style.left = "148px";
            // document.getElementById(this.id+'_body').style.backgroundColor = '#ffffff';
            // $(this.id).css({"top":"0px","left":"0px"});
            $(".edui-dialog-draghandle").css("height", "60px");
            $(".edui-dialog-closebutton").css({ top: "22px", right: "22px" });
            $(".edui-dialog-caption").css({
              "line-height": "60px",
              "font-size": "16px",
              "font-weight": "normal",
              "padding-left": "35px"
            });
            $(".edui-dialog-wrap").css("border", "none");
            document.getElementById(this.id + "_titlebar").style.height =
              "64px";
            // document.getElementById(this.id+'_content').style.height = '460px';
            // document.getElementById(this.id+'_content').style.width = '713px';
            document.getElementById(this.id + "_titlebar").style.background =
              "none";
            //把原来的弹出框的确定与取消按钮隐藏了
            $("#" + this.id)
              .parent()
              .css("z-index", "1000");
            document.getElementById(
              this.id + "_content"
            ).style.backgroundColor = "#ffffff";
            var iframeContent = [
              '<table id="' +
                this.id +
                '_edittd_id" class="cellStyle" style=" margin: 0px 10px 5px 35px;font-size: 12px;border-collapse:separate; border-spacing:0 20px;">',
              '<tr style="height: 25px;">',
              '<td width="70"><span class="strong" style="font-size:14px;color:#333;"><var id="lang_borderSet"></var></span></td>',
              "<td>",
              '<input id="' +
                this.id +
                'borderColor" name="color" style="width: 70px;height:24px;margin-right: 10px;border: 1px solid #ccc;border-radius:3px;cursor: pointer;" readonly="readonly" type="text">',
              '<input id="' +
                this.id +
                'borderSize" type="text" style="width: 70px;height:24px;margin-right: 0px;border:1px solid #ccc;border-radius:3px;" />',
              // '<select id="'+this.id+'unitBorderStyle" style="width: 78px;height:32px;margin-right: 10px;border-radius:3px;">',
              //    '<option value="solid">———</option>',
              //    '<option value="dashed">-------</option>',
              //    '<option value="dotted">· · · · · ·</option>',
              // '</select>',
              "</td>",
              "<td>",
              '<div id="' +
                this.id +
                'unitBorderStyle" class="unitSelect" style="width: 76px;height:30px;margin-left: 10px;position:relative;border:1px solid #ccc;border-radius:3px;">',
              '<div class="borderStyleInner" style="width: 34px;height:30px;position:relative;overflow: hidden;margin-left:10px;display:inline-block;"><div style="width: 50px;height: 1px;box-sizing: border-box;border-bottom: 1px solid #000;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></div>',
              '<p class="borderStyleIcon unitIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
              '<p class="borderStyleMask unitMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
              '<ul class="borderStyleCon unitCon" style="width: 78px;height:97px;box-sizing: border-box;padding-top:8px;position:absolute;top:36px;left:-1px;border:1px solid #ccc;border-radius:3px;background-color:#fff;display:none;">',
              '<li value="solid"><div class="liSolid" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
              '<li value="dashed"><div class="liDashed" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
              '<li value="dotted"><div class="liDotted" style="width: 50px;height: 1px;box-sizing: border-box;position: absolute;bottom: 0;top: 0;right: 0;left: 0; margin: auto;"></div></li>',
              "</ul>",
              "</div>",

              // '<select style="width:58px;height:58px;display:inline-block;margin-right: 10px;">',

              // '</select>',
              "</td>",
              '<td style="display:none;">',
              '<div id="' +
                this.id +
                'borderShow" class="borderShow unitSelect" style="width: 78px;height:32px;position:relative;margin-right: 10px;border:1px solid #ccc;border-radius:3px;cursor:pointer;">',
              '<p style="width:20px;height:20px;position:absolute;top:5px;left:12px;border:1px solid #333;border-left-style:dotted;"></p>',
              '<p class="borderShowIcon unitIcon" style="width:12px;height:12px;position:absolute;top:10px;right:8px;"></p>',
              '<p class="borderShowMask unitMask" style="position:absolute;top:0;left:0;right:0;bottom:0;"></p>',
              '<div class="borderSelect unitCon" style="width:100px;height:100px;position:absolute;top:40px;box-shadow:0 0 8px 1px rgba(0,0,0,0.14);display:none;">',
              '<div class="top topClickBef clickBef" value="top">',
              // '<span style="width:39px;height:1px;display:inline-block;background-color:#000;position:absolute;top:3px;left:-5px;"></span>',
              "</div>",
              '<div class="right rightClickBef clickBef" value="right">',
              // '<span style="height:39px;width:1px;display:inline-block;background-color:#000;position:absolute;left:5px;top:-7px;"></span>',
              "</div>",
              '<div class="bottom bottomClickBef clickBef" value="bottom">',
              // '<span style="width:39px;height:1px;display:inline-block;background-color:#000;position:absolute;top:4px;left:-5px;"></span>',
              "</div>",
              '<div class="left leftClickBef clickBef" value="left">',
              // '<span style="height:39px;width:1px;display:inline-block;background-color:#000;position:absolute;left:5px;top:-7px;"></span>',
              "</div>",
              "</div>",
              "</div>",

              "</td>",
              "</tr>",
              '<tr style="height: 25px">',
              '<td width="70"><span class="strong" style="font-size:14px;color:#333;"><var id="lang_background"></var></span></td>',
              '<td><span class="edittd_transparent" style="margin-right:14px;"><input id="cellRadioFir" type="radio" name="isTransparent" value="true"/><label for="cellRadioFir" style="font-size:14px;">透明</label></span><span class="edittd_transparent"><input id="cellRadioSec" type="radio" name="isTransparent" value="false"/><label for="cellRadioSec" style="font-size:14px;">非透明</label></span></td>',
              '<td><input id="' +
                this.id +
                'bgColor" name="color" style="width: 70px;height:24px;margin-left:-30px;border: 1px solid #ccc;border-radius:3px;" type="text"></td>',
              "</tr>",
              // '<tr style="height: 25px">',
              //     '<td></td>',
              //     '<td><input id="'+this.id+'bgColor" name="color" style="width: 110px;border: 1px solid #ccc;" type="text"></td>',
              // '</tr>',
              '<tr style="height: 25px">',
              '<td><span class="strong" style="font-size:14px;color:#333;"><var id="lang_alignment"></var></span></td>',
              "<td>",
              // '<var id="lang_horizontal"></var>：',
              // '<select style="width: 78px;height:32px;margin-left:6px\9;border-radius:3px;" id="'+this.id+'align">',
              //     '<option value="">默认</option>',
              //     '<option value="center">居中</option>',
              //     '<option value="left">居左</option>',
              //     '<option value="right">居右</option>',
              // '</select>',
              '<div id="' +
                this.id +
                'align" value="left" class="align" style="width:101px;height:32px;border:1px solid #e3e2e8;border-radius:3px;">',
              '<div class="left active" name="left"></div>',
              '<div class="center" name="center"></div>',
              '<div class="right" name="right"></div>',
              "</div>",
              "</td>",
              "<td>",
              // '<var id="lang_vertical"></var>：',
              // '<select style="width: 78px;height:32px;margin-left:6px\9;border-radius:3px;" id="'+this.id+'vAlign">',
              //     '<option value="">默认</option>',
              //     '<option value="middle">居中</option>',
              //     '<option value="top">顶端对齐</option>',
              //     '<option value="bottom">底端对齐</option>',
              // '</select>',
              '<div id="' +
                this.id +
                'vAlign" value="top" class="vAlign" style="width:101px;height:32px;border:1px solid #e3e2e8;border-radius:3px;margin-left:-54px;">',
              '<div class="top active" name="top"></div>',
              '<div class="middle" name="middle"></div>',
              '<div class="bottom" name="bottom"></div>',
              "</div>",
              "</td>",
              '</tr style="height: 25px">',
              // '<tr style="height: 25px">',
              //     '<td><var id="lang_vertical"></var>：<select style="width: 76px;margin-left:6px\9;" id="'+this.id+'vAlign">',
              //             '<option value="">默认</option>',
              //             '<option value="middle">居中</option>',
              //             '<option value="top">顶端对齐</option>',
              //             '<option value="bottom">底端对齐</option>',
              //         '</select>',
              //     '</td>',
              // '</tr>',
              '<tr style="height: 74px">',
              "<td></td>",
              "<td>",
              '<button style=" height: 34px;width: 100px;margin-top:45px;border: 1px solid #5874d8;border-radius: 3px;background-color: #5874d8;color: #fff;font-size: 12px;text-align: center;cursor: pointer;line-height: 18px;">确定</button>',

              "</td>",
              "<td>",

              '<button style="height: 34px;width: 100px;margin-top:45px;margin-left: -22px;border: 1px solid #ccc;border-radius: 3px;background-color: #fff;color: #333;font-size: 12px;text-align: center;cursor: pointer;line-height: 18px;">取消</button>',
              "</td>",
              "</tr>",
              "</table>"
            ];
            iframe.innerHTML = iframeContent.join("");

            $("#" + this.id + "_body").before(
              ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: white;" frameborder="0" width="100%" height="100%" src="javascript:"></iframe>'
            );
          }
        });
        dialog.render();
        editor.ui._dialogs["edittdDialog"] = dialog;
      }

      var ui = new editorui.Button({
        className: "edui-for-edittd",
        title: title,
        onclick: function () {
          if (dialog) {
            dialog.render();
            dialog.open();
          }
        }
      });
      ////鼠标在table区域内，table下拉菜单的编辑TD显示
      editor.addListener("selectionchange", function () {
        //只存在于右键菜单而无工具栏按钮的ui不需要检测状态
        var unNeedCheckState = { edittd: 1, edittable: 1 };
        if ("edittd" in unNeedCheckState) return;

        var state = editor.queryCommandState("edittd");
        ui.setDisabled(state == -1);
        ui.setChecked(state);
      });

      //鼠标在table区域内，标题栏的编辑TD显示
      editor.addListener(
        "selectionchange",
        function (type, causeByUi, uiReady) {
          var state = editor.queryCommandState("edittd");

          if (state == -1) {
            ui.setDisabled(true);
            ui.setChecked(false);
          } else {
            if (!uiReady) {
              ui.setDisabled(false);
              ui.setChecked(state);
            }
          }
        }
      );

      return ui;
    };

    // 修改为domUtils.src.js的弹窗模式
    editorui.inserttable = function (editor, iframeUrl, title) {
      iframeUrl =
        iframeUrl ||
        (editor.options.iframeUrlMap || {})["inserttable"] ||
        iframeUrlMap["inserttable"];
      var ueditorUrl = iframeUrl;
      title =
        editor.options.labelMap["inserttable"] ||
        editor.getLang("labelMap.inserttable") ||
        "";
      if (iframeUrl) {
        var dialog = new editorui.Dialog({
          iframeUrl: editor.ui.mapUrl(iframeUrl),
          editor: editor,
          className: "edui-for-inserttable",
          title: title,
          getContentHtml: function () {
            var contentHtml = "";
            var iframeContent = "";
            if (typeof this.content == "string") {
              contentHtml = this.content;
            } else if (this.iframeUrl) {
              contentHtml =
                '<span id="' +
                this.id +
                '_contmask" class="dialogcontmask"></span><div id="' +
                this.id +
                'divContetnt" ></div>';
              // '<iframe id="'+ this.id +'_iframe" class="%%-iframe" disabled=true height="100%" width="100%" frameborder="0"></iframe>';
            }

            return contentHtml;
          },
          reset: function () {
            this.getDom("content").innerHTML = this.getContentHtml();
          },
          open: function () {
            if (this.autoReset) {
              //有可能还没有渲染
              try {
                this.reset();
              } catch (e) {
                this.render();
                this.open();
              }
            }
            this.showAtCenter();
            if (this.iframeUrl) {
              try {
                this.getDom("iframe").focus();
              } catch (ex) {}
            }
            this.insertIframeHtml();
          },
          alterTableOpen: function () {
            if (this.autoReset) {
              //有可能还没有渲染
              try {
                this.reset();
              } catch (e) {
                this.render();
                this.open();
              }
            }
            this.showAtCenter();
            this.insertIframeHtml();
            // baidu.editor._internal(this.id);
            editor.execCommand("inittablepopup", this.id);
            // baidu.editor._inserttable(this);
            editor.execCommand("tablepopupevent", this);

            if (typeof editor.options.ueditorChangeEvent == "function") {
              editor.options.ueditorChangeEvent();
            }
          },

          insertIframeHtml: function () {
            var iframe = document.getElementById(this.id + "divContetnt");
            //把原来的弹出框的确定与取消按钮隐藏了
            $("#" + this.id)
              .parent()
              .css("z-index", "1000");
            if (browser.version < 9) {
              document.getElementById(this.id + "_body").style.height = "332px";
            } else {
              document.getElementById(this.id + "_body").style.height = "532px";
            }
            document.getElementById(this.id + "_body").style.width = "715px";
            document.getElementById(this.id).style.top = "12px";
            document.getElementById(this.id).style.left = "0";
            document.getElementById(this.id + "_body").style.backgroundColor =
              "#ffffff";
            $(this.id).css({ top: "0px", left: "0px" });
            $(".edui-dialog-draghandle").css("height", "60px");
            $(".edui-dialog-closebutton").css({ top: "22px", right: "12px" });
            $(".edui-dialog-caption").css({
              "line-height": "60px",
              "font-size": "16px",
              "font-weight": "normal",
              "padding-left": "20px"
            });
            document.getElementById(this.id + "_titlebar").style.height =
              "60px";
            document.getElementById(this.id + "_content").style.height =
              "460px";
            document.getElementById(this.id + "_content").style.width = "713px";
            document.getElementById(this.id + "_titlebar").style.background =
              "none";
            var iframeContent = [
              '<div class="wrapper" id="tablewrapper_id" style="height: 460px;background-color:#ffffff;">',
              '<fieldset  class="base">',
              '<legend style="margin-left: 5px; font-weight: bold;font-size: 12px;color: #0066cc;">',
              // '<var id="lang_baseInfo"></var>',
              "</legend>",
              '<table style="margin-left: 15px;float: left;">',
              '<tr style="margin:10px 0 0 0;"><td>基础信息</td></tr>',
              "<tr>",
              '<td width="170"><label for="numRows"><var id="lang_rows"></var>：</label><input id="numRows" maxLength="2" value="5" type="text" style="border:1px solid #ccc;" /> <var id="lang_rowUnit"></var></td>',
              '<td width="170">',
              '<label for="ueditorWidth"><var id="lang_width"></var>：</label><input id="ueditorWidth" type="text" style="border:1px solid #ccc;" />',
              '<label for="ueditorWidthUnit"> px</label>',
              /*'<select id="ueditorWidthUnit" style="width: 50px">',

                                                                    '<option value="px">px</option>',
                                                                    '<option value="%">%</option>',
                                                                '</select>',*/
              "</td>",
              "</tr>",
              "<tr>",
              '<td width="170"><label for="numCols"><var id="lang_cols"></var>：</label><input id="numCols" maxLength="2" value="5" type="text" style="border:1px solid #ccc;" /> <var id="lang_colUnit"></var></td>',
              '<td width="170">',
              '<label for="ueditorHeight"><var id="lang_height"></var>：</label><input id="ueditorHeight" type="text" style="border:1px solid #ccc;" />',
              '<label for="ueditorHeightUnit"> px</label>',
              /*'<select id="ueditorHeightUnit" style="width: 50px">',

                                                                    '<option value="px">px</option>',
                                                                    '<option value="%">%</option>',*/
              "</select>",
              "</td>",
              "</tr>",
              "</table>",
              '<div id="message" style="display: none">',
              '<p><var id="lang_warmPrompt"></var>：</p>',
              '<p id="messageContent"><var id="lang_maxPadding"></var></p>',
              "</div>",
              "</fieldset>",
              "<div>",
              '<fieldset  class="extend">',
              '<legend style="color: #0066cc;font-weight: bold;">',
              // '<var id="lang_extendInfo"></var><span style="font-weight: normal;">(<var id="lang_preview"></var>)</span>',
              "</legend>",
              '<table style="margin-left:15px;">',
              '<tr style="margin:10px 0;"><td>扩展信息(可预览)</td></tr>',
              "<tr>",
              // '<td width="60"><span class="bold"><var id="lang_tableBorder"></var></span>：</td>',
              '<td width="182"><label for="border"><var id="lang_borderSize"></var>：</label><input id="border" type="text" style="border:1px solid #ccc;" /> px&nbsp;</td>',
              // '<td><label for="borderColor"><var id="lang_borderColor"></var>: </label><input id="borderColor" type="text" style="width: 55px;border:1px solid #ccc;" /></td>',
              '<td colspan="3">',
              '<span class="bold"><var id="lang_borderStyle"></var></span>：',
              // '<select id="borderStyle" style="height:32px;width:78px;">',
              //     '<option value="solid"></option>',
              //     '<option value="dashed"></option>',
              //     '<option value="dotted"></option>',
              // '</select>',

              "</td>",
              "<td>",
              '<div id="borderStyle" style="width: 76px;height:30px;margin-right: 10px;position:relative;border:1px solid #ccc;border-radius:3px;" value="solid">',
              '<nobr class="borderStyleInner" style="width: 34px;overflow: hidden;margin: 6px 0 0 10px;display:inline-block;">————</nobr>',
              '<p class="borderStyleIcon tableIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
              '<p class="borderStyleMask tableMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
              '<ul class="borderStyleCon" style="width: 78px;height:97px;box-sizing: border-box;padding-top:8px;position:absolute;top:36px;left:-1px;border:1px solid #ccc;border-radius:3px;background-color:#fff;display:none;">',
              '<li value="solid">————</li>',
              '<li value="dashed">----------</li>',
              '<li value="dotted">·················</li>',
              "</ul>",
              "</div>",
              "</td>",
              "</tr>",
              "<tr>",
              '<td width="182"><label for="borderColor"><var id="lang_borderColor"></var>：</label><input id="borderColor" type="text" style="border:1px solid #ccc;" /></td>',
              '<td colspan="3"><span class="bold"><var id="lang_table_background"></var></span>：<input id="bgColor" type="text" style="border:1px solid #ccc;" /></td>',
              "</tr>",
              "<tr>",
              // '<td><span class="bold"><var id="lang_mar_pad"></var></span>：</td>',
              '<td width="158" style="padding-left:24px;"><label for="cellPadding"><var id="lang_margin"></var>：</label><input id="cellPadding" type="text" style="border:1px solid #ccc;" /> px&nbsp;</td>',
              '<td style="padding-left:24px;"><label for="cellSpacing"><var id="lang_padding"></var>：</label><input id="cellSpacing" type="text" style="border:1px solid #ccc;" /> px </td>',
              "</tr>",
              // '<tr>',
              //     '<td colspan="3"><span class="bold"><var id="lang_table_background"></var></span>：',
              //         '<input id="bgColor" type="text" style="width: 90px;border:1px solid #ccc;" />',
              //     '</td>',
              // '</tr>',
              "<tr>",
              '<td colspan="3"><span class="bold"><var id="lang_table_alignment"></var></span>：',
              // '<select id="align" style="width: 110px;height:32px;border-radius:3px;">',
              //     '<option value=""></option>',
              //     '<option value="center"></option>',
              //     '<option value="left"></option>',
              //     '<option value="right"></option>',
              // '</select>',
              "</td>",
              "<td>",
              '<div id="align" style="width: 108px;height:30px;margin-right: 10px;position:relative;border:1px solid #ccc;border-radius:3px;" value="left">',
              '<nobr class="alignInner" style="margin: 6px 0 0 10px;display:inline-block;">左对齐</nobr>',
              '<p class="alignIcon tableIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
              '<p class="alignMask tableMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
              '<ul class="alignCon" style="width: 110px;height:106px;box-sizing: border-box;padding-top:8px;position:absolute;top:36px;left:-1px;border:1px solid #ccc;border-radius:3px;background-color:#fff;z-index:999;display:none;">',
              '<li value="left">左对齐</li>',
              '<li value="center">居中对齐</li>',
              '<li value="right">右对齐</li>',
              "</ul>",
              "</div>",
              "</td>",
              "</tr>",
              "<tr>",
              '<td colspan="3">',
              '<span class="bold"><var id="lang_borderFor"></var></span>：',
              // '<select id="borderType" style="width: 110px;height:32px;border-radius:3px;">',
              //     '<option value="0"></option>',
              //     '<option value="1"></option>',
              // '</select>',
              "</td>",
              "<td>",
              '<div id="borderType" style="width: 108px;height:30px;margin-right: 10px;position:relative;border:1px solid #ccc;border-radius:3px;" value="0">',
              '<nobr class="borderTypeInner" style="margin: 6px 0 0 10px;display:inline-block;">所有单元格</nobr>',
              '<p class="borderTypeIcon tableIcon" style="width: 12px;height: 12px;position:absolute;top:10px;right:8px;"></p>',
              '<p class="borderTypeMask tableMask" style="position:absolute;top:0;left:0;right:0;bottom:0;cursor:pointer;"></p>',
              '<ul class="borderTypeCon" style="width: 110px;height:72px;box-sizing: border-box;padding-top:8px;position:absolute;top:36px;left:-1px;border:1px solid #ccc;border-radius:3px;background-color:#fff;display:none;">',
              '<li value="0">所有单元格</li>',
              '<li value="1">仅表格</li>',
              "</ul>",
              "</div>",
              "</td>",
              "</tr>",
              /*'<tr>',
                                                               '<td colspan="3">',
                                                                   '<span class="bold"><var id="lang_cellPadding"></var></span>：',
                                                                   '<select id="commCellPadding">',
                                                                       '<option value="0"></option>',
                                                                       '<option value="1"></option>',
                                                                   '</select>',
                                                               '</td>',
                                                            '</tr>',*/

              "</table>",
              "</fieldset>",

              '<div id="preview">',
              '<table border="1" borderColor="#000" cellpadding="0" cellspacing="0" style="border-collapse: collapse;">',
              '<tr><td colspan="3" style="width:90px;"><var id="lang_forPreview"></var></td></tr>',
              "<tr><td></td><td></td><td></td></tr>",
              "<tr><td></td><td></td><td></td></tr>",
              "</table>",
              "</div>",
              "</div>",
              '<div style="float: right;margin: 10px 240px 10px 0px; _width:200px;_margin-right:0px;">',
              '<button style=" height: 37px;margin-right: 20px;width: 104px;border:1px solid #5874d8;border-radius:3px;background-color:#5874d8;color:#fff;font-size: 12px;line-height: 18px;text-align: center;cursor: pointer;line-height: 18px;">确定</button>',
              '<button style=" height: 37px;width: 104px;border:1px solid #ccc;border-radius:3px;background-color:#fff;color:#333;font-size: 12px;line-height: 18px;text-align: center;cursor: pointer;line-height: 18px;">取消</button>',
              "</div>",
              "</div>"
            ];

            iframe.innerHTML = iframeContent.join("");
            if (
              $("#" + this.id + "_body")
                .parent()
                .find(">iframe").length == 0
            ) {
              $("#" + this.id + "_body").before(
                ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: white;" frameborder="0" width="100%" height="100%" src="javascript:"></iframe>'
              );
            }
          }
        });

        dialog.render();
        editor.ui._dialogs["inserttableDialog"] = dialog;
      }
      var openDialog = function () {
        if (dialog) {
          //打开后再关闭再打开是为了解决fieldset文字错位问题
          if (browser.webkit) {
            dialog.open();
            dialog.close();
          }
          dialog.open();
        }
      };
      var ui = new editorui.TableButton({
        dialogId: dialog.id,
        editor: editor,
        title: title,
        className: "edui-for-inserttable",
        onpicktable: function (t, numCols, numRows) {
          editor.execCommand("InsertTable", {
            numRows: numRows,
            numCols: numCols,
            border: 1
          });
        },
        onmore: openDialog,
        onbuttonclick: openDialog
      });
      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("inserttable") == -1);
      });
      return ui;
    };
    /*
        editorui.shrinkopenup = function( editor ){
            var title = editor.options.labelMap['shrinkopenup'] || editor.getLang( 'labelMap.shrinkopenup') || '';
            var me = this;
            var shrinkHeight;
            var ui = new editorui.Button({
                className : 'edui-for-shrinkopenup',
                title : title,
                onclick : function(){
                    var $shrink = $(this.getDom());
                    if(!shrinkHeight){
                        shrinkHeight = parseInt($shrink.height());
                    }
                    var iframePar = editor.iframe.parentNode;
                    if(this.isChecked()){
                        this.removeState('checked');
                        $(iframePar).height(parseInt($(iframePar).height()) + shrinkHeight);
                        $shrink.find('.edui-button-body').attr('title', '展开').end().parent().addClass('shrinkopenup');
                    }
                    else{
                        this.addState('checked');
                        $(iframePar).height(parseInt($(iframePar).height()) - shrinkHeight);
                        $shrink.find('.edui-button-body').attr('title', '收缩').end().parent().removeClass('shrinkopenup');
                    }

                    // var shrinkopenupDom = this.getDom(),
                    //     toolbarDom = shrinkopenupDom.parentNode,
                    //     eduiBody = document.getElementById(this.id + '_body'),
                    //     eduiIcon = $('#'+this.id+' .edui-icon');
                    // if(domUtils.hasClass(toolbarDom, "shrinkopenup")){
                    //     domUtils.removeClasses(toolbarDom, "shrinkopenup");
                    //     var toolBarsHeight = toolbarDom.offsetHeight,
                    //         editorBodyHeight = editor.iframe.clientHeight;

                    //     editor.iframe.parentNode.style.height = editorBodyHeight - Math.floor(toolBarsHeight/2) + 'px';

                    //     eduiBody.title = '收缩';

                    //     eduiIcon.css('background-position','-850px -42px');
                    //     toolbarDom.style.height = toolbarDom.offsetHeight + 'px';
                    // }else{

                    //     var toolBarsHeight = toolbarDom.offsetHeight,
                    //         editorBodyHeight = editor.iframe.clientHeight;
                    //     editor.iframe.parentNode.style.height = editorBodyHeight + Math.floor(toolBarsHeight/2) + 'px';

                    //     eduiBody.title = '展开';
                    //     eduiIcon.css('background-position','-830px -42px');
                    //     domUtils.addClass(toolbarDom, "shrinkopenup");
                    //     toolbarDom.style.height = '';
                    // }
                }
            });
            editor.addListener( 'selectionchange', function(){
                ui.setDisabled( editor.queryCommandState( 'shrinkopenup' ) == -1 );
            });
            return ui;
        };*/

    //清除格式
    editorui.removeformat = function (editor) {
      var val = editor.options.removeformatSelect;
      for (var i = 0, ci, items = []; (ci = val[i++]); ) {
        items.push({
          label: ci,
          value: ci,
          onclick: function () {
            editor.execCommand("removeformat", "", "", "", "", this.value);
          }
        });
      }

      var ui = new editorui.MenuButton({
        editor: editor,
        className: "edui-for-removeformat",
        title: editor.getLang("labelMap.removeformat") || "",
        items: items,
        onbuttonclick: function () {
          var value = editor.queryCommandValue("removeformat") || this.value;
          editor.execCommand("removeformat", "", "", "", "", value);
        }
      });

      editor.addListener("selectionchange", function () {
        var state = editor.queryCommandState("removeformat");
        if (state == -1) {
          ui.setDisabled(true);
        } else {
          ui.setDisabled(false);
          var value = editor.queryCommandValue("removeformat");
          value && ui.setValue((value + "").replace(/cm/, ""));
          ui.setChecked(state);
        }
      });
      return ui;
    };
    editorui.link = function (editor) {
      var ui = new editorui.LinkSetButton({
        editor: editor,
        title:
          editor.options.labelMap["link"] ||
          editor.getLang("labelMap.link") ||
          "",
        className: "edui-for-link",
        onbuttonclick: function () {
          editor.execCommand("link");
        }
      });
      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("link") == -1);
      });
      return ui;
    };
    editorui.phone = function (editor) {
      var ui = new editorui.PhoneSetButton({
        editor: editor,
        title:
          editor.options.labelMap["phone"] ||
          editor.getLang("labelMap.phone") ||
          "",
        className: "edui-for-phone"
      });

      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("phoneservice") == -1);
      });
      return ui;
    };
    editorui.hoverimage = function (editor) {
      var ui = new editorui.UploadHoverImgSetButton({
        className: "edui-for-hoverimage",
        title:
          editor.options.labelMap["hoverimage"] ||
          editor.getLang("labelMap.hoverimage") ||
          "",
        editor: editor
      });

      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("hoverimage") == -1);
      });

      return ui;
    };
    editorui.fullscreen = function (editor, title) {
      title =
        editor.options.labelMap["fullscreen"] ||
        editor.getLang("labelMap.fullscreen") ||
        "";
      var ui = new editorui.Button({
        className: "edui-for-fullscreen",
        title: title,
        onclick: function () {
          if (editor.ui) {
            editor.ui.setFullScreen(!editor.ui.isFullScreen());
          }
          this.setChecked(editor.ui.isFullScreen());
          // var con = editor.container;
          // var topBody = window.parent.document.getElementsByTagName('body')[0];
          // console.log(editor);
          // $(topBody).append(con);
        }
      });
      editor.addListener("selectionchange", function () {
        var state = editor.queryCommandState("fullscreen");
        ui.setDisabled(state == -1);
        ui.setChecked(editor.ui.isFullScreen());
      });
      return ui;
    };

    editorui.insertmp4 = function (editor, title) {
      title =
        editor.options.labelMap["insertmp4"] ||
        editor.getLang("labelMap.insertmp4") ||
        "";
      var ui = new editorui.Button({
        className: "edui-for-insertmp4",
        title: title,
        onclick: function () {
          domUtils.UEPopup(editor.options);
          // editor.options.outerFunction.htmlChoiceMP4 && editor.options.outerFunction.htmlChoiceMP4(editor);
        }
      });
      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("insertmp4") == -1);
      });
      return ui;
    };
    editorui.insertmp3 = function (editor, title) {
      title =
        editor.options.labelMap["insertmp3"] ||
        editor.getLang("labelMap.insertmp3") ||
        "";
      var ui = new editorui.Button({
        className: "edui-for-insertmp3",
        title: title,
        onclick: function () {
          editor.options.outerFunction.htmlChoiceMP3 &&
            editor.options.outerFunction.htmlChoiceMP3(
              UE.commands["uploadBackMp3"].execCommand
            );
        }
      });
      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("insertmp3") == -1);
      });
      return ui;
    };

    var rowspacings = ["top", "bottom"];
    for (var r = 0, ri; (ri = rowspacings[r++]); ) {
      (function (cmd) {
        editorui["rowspacing" + cmd] = function (editor) {
          var val = editor.options["rowspacing" + cmd];

          for (var i = 0, ci, items = []; (ci = val[i++]); ) {
            items.push({
              label: ci,
              value: ci,
              onclick: function () {
                editor.execCommand("rowspacing", this.value, cmd);
              }
            });
          }
          var ui = new editorui.MenuButton({
            editor: editor,
            className: "edui-for-rowspacing" + cmd,
            title:
              editor.options.labelMap["rowspacing" + cmd] ||
              editor.getLang("labelMap.rowspacing" + cmd) ||
              "",
            items: items,
            onbuttonclick: function () {
              var value =
                editor.queryCommandValue("rowspacing", cmd) || this.value;
              editor.execCommand("rowspacing", value, cmd);
            }
          });
          editor.addListener("selectionchange", function () {
            var state = editor.queryCommandState("rowspacing", cmd);
            if (state == -1) {
              ui.setDisabled(true);
            } else {
              ui.setDisabled(false);
              var value = editor.queryCommandValue("rowspacing", cmd);
              value && ui.setValue((value + "").replace(/%/, ""));
              ui.setChecked(state);
            }
          });
          return ui;
        };
      })(ri);
    }

    editorui.lineheight = function (editor) {
      var val = editor.options.lineheight;
      for (var i = 0, ci, items = []; (ci = val[i++]); ) {
        items.push({
          //todo:写死了
          label: ci,
          value: ci,
          onclick: function () {
            editor.execCommand("lineheight", this.value);
          }
        });
      }
      var ui = new editorui.MenuButton({
        editor: editor,
        className: "edui-for-lineheight",
        title:
          editor.options.labelMap["lineheight"] ||
          editor.getLang("labelMap.lineheight") ||
          "",
        items: items,
        onbuttonclick: function () {
          var value = editor.queryCommandValue("LineHeight") || this.value;
          editor.execCommand("LineHeight", value);
        }
      });
      editor.addListener("selectionchange", function () {
        var state = editor.queryCommandState("LineHeight");
        if (state == -1) {
          ui.setDisabled(true);
        } else {
          ui.setDisabled(false);
          var value = editor.queryCommandValue("LineHeight");
          value && ui.setValue((value + "").replace(/cm/, ""));
          ui.setChecked(state);
        }
      });
      return ui;
    };

    //有序，无序列表
    var lists = ["insertorderedlist", "insertunorderedlist"];
    for (var l = 0, cl; (cl = lists[l++]); ) {
      (function (cmd) {
        editorui[cmd] = function (editor) {
          var vals = editor.options[cmd],
            _onMenuClick = function () {
              editor.execCommand(cmd, this.value);
            },
            items = [];
          for (var i in vals) {
            items.push({
              label: vals[i] || editor.getLang()[cmd][i] || "",
              value: i,
              onclick: _onMenuClick
            });
          }
          var ui = new editorui.MenuButton({
            editor: editor,
            className: "edui-for-" + cmd,
            title: editor.getLang("labelMap." + cmd) || "",
            items: items,
            onbuttonclick: function () {
              var value = editor.queryCommandValue(cmd) || this.value;
              editor.execCommand(cmd, value);
            }
          });
          editor.addListener("selectionchange", function () {
            var state = editor.queryCommandState(cmd);
            if (state == -1) {
              ui.setDisabled(true);
            } else {
              ui.setDisabled(false);
              var value = editor.queryCommandValue(cmd);
              ui.setValue(value);
              ui.setChecked(state);
            }
          });
          return ui;
        };
      })(cl);
    }

    editorui.insertimage = function (editor) {
      var ui = new editorui.UpLoadImgSetButton({
        editor: editor,
        title:
          editor.options.labelMap["insertimage"] ||
          editor.getLang("labelMap.insertimage") ||
          "",
        className: "edui-for-insertimage"
      });

      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("insertimage") == -1);
      });
      return ui;
    };

    editorui.qqservice = function (editor) {
      var ui = new editorui.QQSetButton({
        editor: editor,
        title:
          editor.options.labelMap["qqservice"] ||
          editor.getLang("labelMap.qqservice") ||
          "",
        className: "edui-for-qqservice"
      });

      editor.addListener("selectionchange", function () {
        ui.setDisabled(editor.queryCommandState("qqservice") == -1);
      });
      return ui;
    };
    //         for(var i in baidu.editor.ui){
    // console.log(baidu.editor.ui[i])
    //         }
  })();
  //editorui.js end
  //editor.js start
  // EditorUI
  ///import core
  ///commands editor.js
  ///commandsName editor.js
  ///commandsTitle  editor.js
  (function () {
    var utils = baidu.editor.utils,
      uiUtils = baidu.editor.ui.uiUtils,
      UIBase = baidu.editor.ui.UIBase,
      Stateful = baidu.editor.ui.Stateful,
      domUtils = baidu.editor.dom.domUtils;

    function EditorUI(options) {
      this.initOptions(options);
      this.initEditorUI();
    }

    EditorUI.prototype = {
      uiName: "editor",
      initEditorUI: function () {
        this.editor.ui = this;
        this._dialogs = {};
        this.initUIBase();
        this._initToolbars();
        this.Stateful_init();
        var editor = this.editor,
          me = this;

        var tool = baidu.editor.ui.tool;
        tool.editor = editor;

        editor.addListener("ready", function () {
          //提供getDialog方法
          editor.getDialog = function (name) {
            return editor.ui._dialogs[name + "Dialog"];
          };
          domUtils.on(editor.window, "scroll", function () {
            // if(tool.ele){
            //     var bcr = tool.ele.getBoundingClientRect();
            //     if(bcr.top + tool.height < editor.window.innerHeight && bcr.bottom - tool.height> 0){
            //         tool.type && tool[tool.type] && tool[tool.type].init();
            //     }
            //     else{

            //     }
            // }
            !tool.isBanHidePopupWhenScroll && baidu.editor.ui.Popup.postHide();
            // tool.isLocked = false;
          });

          //display bottom-bar label based on config
          if (editor.options.elementPathEnabled) {
            editor.ui.getDom("elementpath").innerHTML =
              '<div class="edui-editor-breadcrumb">' +
              editor.getLang("elementPathTip") +
              ":</div>";
          }
          if (editor.options.wordCount) {
            editor.ui.getDom("wordcount").innerHTML = editor.getLang(
              "wordCountTip"
            );
            //为wordcount捕获中文输入法的空格
            editor.addListener("keyup", function (type, evt) {
              var keyCode = evt.keyCode || evt.which;
              if (keyCode == 32) {
                me._wordCount();
              }
            });
          }
          if (!editor.options.elementPathEnabled && !editor.options.wordCount) {
            if (editor.ui.getDom("elementpath")) {
              editor.ui.getDom("elementpath").style.display = "none";
            }
            editor.ui.getDom("wordcount").style.display = "none";
          }

          if (!editor.selection.isFocus()) return;
          editor.fireEvent("selectionchange", false, true);
        });

        editor.addListener("mousedown", function (t, evt) {
          evt.button == 2 &&
            editor.options.ueditorChangeEvent &&
            editor.options.ueditorChangeEvent();

          var el = evt.target || evt.srcElement;
          baidu.editor.ui.Popup.postHide(el);
        });
        editor.addListener("contextmenu", function (t, evt) {
          baidu.editor.ui.Popup.postHide();
        });
        editor.addListener("selectionchange", function () {
          //if(!editor.selection.isFocus())return;
          if (editor.options.elementPathEnabled) {
            me[
              (editor.queryCommandState("elementpath") == -1 ? "dis" : "en") +
                "ableElementPath"
            ]();
          }
          if (editor.options.wordCount) {
            me[
              (editor.queryCommandState("wordcount") == -1 ? "dis" : "en") +
                "ableWordCount"
            ]();
          }
        });
        var popup = new baidu.editor.ui.Popup({
          editor: editor,
          content: "",
          // className:'edui-tool4',
          className: "edui-tool",
          _onEditButtonClick: function () {
            this.hide();
            editor.ui._dialogs.linkDialog.open();
          },
          _onImgEditButtonClick: function (name) {
            this.hide();
            editor.ui._dialogs[name] && editor.ui._dialogs[name].open();
          },
          _onImgSetFloat: function (value) {
            this.hide();
            editor.execCommand("imagefloat", value);
          },
          _setIframeAlign: function (value) {
            var frame = popup.anchorEl;
            var newFrame = frame.cloneNode(true);
            switch (value) {
              case -2:
                newFrame.setAttribute("align", "");
                break;
              case -1:
                newFrame.setAttribute("align", "left");
                break;
              case 1:
                newFrame.setAttribute("align", "right");
                break;
              case 2:
                newFrame.setAttribute("align", "middle");
                break;
            }
            frame.parentNode.insertBefore(newFrame, frame);
            domUtils.remove(frame);
            popup.anchorEl = newFrame;
            popup.showAnchor(popup.anchorEl);
          },
          _updateIframe: function () {
            editor._iframe = popup.anchorEl;
            editor.ui._dialogs.insertframeDialog.open();
            popup.hide();
          },
          _onRemoveButtonClick: function (cmdName) {
            editor.execCommand(cmdName);
            this.hide();
          },
          queryAutoHide: function (el) {
            if (el && el.ownerDocument == editor.document) {
              if (
                el.tagName.toLowerCase() == "img" ||
                domUtils.findParentByTagName(el, "a", true)
              ) {
                return el !== popup.anchorEl;
              }
            }
            return baidu.editor.ui.Popup.prototype.queryAutoHide.call(this, el);
          }
        });
        popup.render();
        tool.popup = popup;
        domUtils.on(popup.getDom(), "mousedown", function () {
          editor.options.ueditorChangeEvent &&
            editor.options.ueditorChangeEvent();
        });
        editor.addListener("keydown", function (t, event) {
          if (
            event.keyCode == 46 ||
            event.keyCode == 13 ||
            event.keyCode == 8
          ) {
            $(editor.container).find("#edui1_imagescale_cover").length &&
              $(editor.container).find("#edui1_imagescale_cover").remove();
            $(editor.container).find("#edui1_imagescale").length &&
              $(editor.container).find("#edui1_imagescale").remove();
          }
          $(editor.container)
            .parents("body")
            .find(".edui-tool")
            .css("display", "none");

          // if(event.keyCode == 32){
          //     editor.execCommand('inserthtml','&nbsp');
          //     event.preventDefault()
          // }
        });

        // editor.addListener( 'mouseover click', function ( t, event ) {
        //flash不支持点击事件，所以用mouseup
        editor.addListener("mouseup", function (t, event) {
          var ele = event.target;
          if (editor.options.isHideTool || !ele) {
            return;
          }
          // console.log(event.target.tagName == 'IMG')
          if (
            event.target.tagName == "IMG" &&
            $(event.target).parents("p").length
          ) {
            var targetNode = event.target;
            while ($(targetNode).parent()[0].tagName != "P") {
              targetNode = $(targetNode).parent()[0];
              if (
                $(targetNode).parent()[0].tagName == "DIV" ||
                $(targetNode).parent()[0].tagName == "BODY"
              ) {
                targetNode = event.target;
                break;
              }
            }
            var imageIndex = [].indexOf.call(
              $(event.target).parents("p")[0].childNodes,
              targetNode
            );
            editor.options.imgLinkSet = true;
            editor.options.imaIndex = imageIndex;
            editor.options.imgParent = $(event.target).parents("p")[0];
            editor.options.imgTarget = event.target;
          } else {
            editor.options.imgLinkSet = false;
          }
          var type = ele.nodeName.toLowerCase();
          var $ele = $(ele);
          type == "img" &&
            (type =
              $ele.hasClass("hoverImage") || $ele.hasClass("J_hoverImage")
                ? "hoverimg"
                : "img");
          type == "hoverimg" &&
            (ele = $ele.is(".hoverImage")
              ? ele
              : $ele.siblings(".hoverImage")[0]);
          type == "embed" && (type = "flash");
          //图片的链接内嵌在图片的浮动工具中，不作为普通链接显示。
          if (type != "img" && type != "hoverimg" && $ele.parents("a")[0]) {
            type = "a";
            ele = $ele.parents("a")[0];
          }
          //音乐
          if ($ele.parents('div[key="audio"]').length) {
            type = "music";
            ele = $ele.parents('div[key="audio"]')[0];
            var audioLength = $(ele).parents("body").find(".music-mask_2")
              .length;
            for (var i = 0; i < audioLength; i++) {
              $($(ele).parents("body").find(".music-mask_2")[i]).removeClass(
                "music-mask-color"
              );
            }
            $(ele).find(".music-mask_2").addClass("music-mask-color");
          } else {
            $(ele).find(".music-mask_2").removeClass("music-mask-color");
          }

          // 优酷视频通用代码
          if ($ele.parents('div[key="netVideo"]').length) {
            type = "flash";
            ele = $ele.parents('div[key="netVideo"]')[0];
          }

          // if($ele.hasClass('netVideoCon')){
          //     $ele.attr("tabindex",0);
          //     $ele.focus()
          //     $ele.on('keydown',function(event){
          //         var e = event || window.event || arguments.callee.caller.arguments[0];
          //         if(e && (e.keyCode == 13 )){ // 按 enter
          //             e.stopPropagation();
          //             // $ele.remove();
          //             $ele.next().attr("tabindex",0);
          //             $ele.next().focus();
          //             // $ele.next()[0].setSelectionRange(1,1)
          //         }
          //     });
          // }
          // // 通过通用代码上传的视频用delete或backspace删除时做的处理
          // if($ele.hasClass('netVideoCon')){
          //     $ele.attr("tabindex",0);
          //     $ele.focus()
          //     $ele.on('keydown',function(event){
          //         var e = event || window.event || arguments.callee.caller.arguments[0];
          //         if(e && (e.keyCode == 46 || e.keyCode == 8 )){ // 按 delete 或 backspace
          //             $ele.remove();
          //           }
          //     });
          // }

          if (type == "td" || (!tool[type] && $ele.parents("table")[0])) {
            type = "table";
            ele = $ele.parents("table")[0];
          }

          // if(ele == tool.ele && !popup._hidden){
          //     return;
          // }
          if (
            ele.getAttribute &&
            ele.getAttribute("_hidetool") == null &&
            tool[type] &&
            tool[type].init
          ) {
            // editor.selection.getRange().selectNode(ele).select();
            tool.ele = ele;
            tool.type = type;
            tool[type].init();
          }

          // 将自动添加的属性tabindex清除，不然点击会聚集焦点，例如音乐组件，由于外层有div，聚焦会在外层出现边框
          if (
            ele.getAttribute("key") === "audio" &&
            ele.getAttribute("tabindex")
          ) {
            ele.removeAttribute("tabindex");
          }

          // 背景色为深色的时候改变弹窗边框颜色
          if (
            tool.node &&
            ($(editor.body).hasClass("changeBgColor") ||
              $(editor.body).find(".breakPage_0").hasClass("changeBgColor"))
          ) {
            $(tool.node)
              .parents(".edui-popup-body")
              .css("border", "1px solid #888");
          } else {
            $(tool.node).parents(".edui-popup-body").css("border", "none");
          }
          // if(editor.selection.getRange().startContainer && $(editor.selection.getRange().startContainer).find('img').length){
          //     setTimeout(function(){
          //         editor.selection.getRange().collapsed = true;
          //     },1000)
          // }
        });
        // editor.addListener( 'click', function(){
        //     tool.isLocked = false;
        // });
      },
      _initToolbars: function () {
        var editor = this.editor;
        // if (this.toolbars[0].indexOf("fullscreen") >= 0) {
        //   this.toolbars[0].push("bgcolortoggle");
        // }
        var toolbars = this.toolbars || [];
        var toolbarsBlock = this.toolbarsBlock || [];
        var toolbarsClass = this.toolbarsClass;
        var toolbarUis = [];
        // 清空toolbarsBlock[i].toolbarsClass，不然如果有多个UE的话数据会叠加
        for (var i = 0; i < toolbarsBlock.length; i++) {
          // console.log(toolbarsBlock[i].toolbarsClass)
          toolbarsBlock[i].toolbarsClass = [];
        }
        for (var i = 0; i < toolbars.length; i++) {
          var toolbar = toolbars[i];
          var toolbarUi = new baidu.editor.ui.Toolbar();
          for (var j = 0; j < toolbar.length; j++) {
            var toolbarItem = toolbar[j];
            var toolbarItemUi = null;
            if (typeof toolbarItem == "string") {
              toolbarItem = toolbarItem.toLowerCase();

              // if ( toolbarItem == '|' ) {
              //     toolbarItem = 'Separator';
              // }
              // if ( toolbarItem == '||' ) {
              //     toolbarItem = 'NewlineSeparator';
              // }
              // if ( baidu.editor.ui[toolbarItem] ) {
              //     toolbarItemUi = new baidu.editor.ui[toolbarItem]( editor );
              // }
              // //fullscreen这里单独处理一下，放到首行去
              // // if ( toolbarItem == 'fullscreen' ) {
              // //     if ( toolbarUis && toolbarUis[0] ) {
              // //         toolbarUis[0].items.splice( 0, 0, toolbarItemUi );
              // //     } else {
              // //         toolbarItemUi && toolbarUi.items.splice( 0, 0, toolbarItemUi );
              // //     }

              // //     continue;
              // // }
              // //openup这里单独处理一下，放到首行去
              // if( toolbarItem == 'shrinkopenup' ){
              //     if ( toolbarUis && toolbarUis[0] ) {
              //         toolbarUis[0].items.splice( 0, 0, toolbarItemUi );
              //     } else {
              //         toolbarItemUi && toolbarUi.items.splice( 0, 0, toolbarItemUi );
              //     }

              //     continue;
              // }
              // 全
              var toolbarItemId;
              if (toolbarsClass[toolbarItem]) {
                toolbarItemId = toolbarsClass[toolbarItem].id;
              }
              for (var n = 0; n < toolbarsBlock.length; n++) {
                if (
                  toolbarsBlock[n].id === toolbarItemId &&
                  baidu.editor.ui[toolbarItem]
                ) {
                  toolbarsBlock[n].toolbarsClass.push(
                    new baidu.editor.ui[toolbarItem](editor)
                  );
                  toolbarsBlock[n].count++;
                }
              }
            } else {
              toolbarItemUi = toolbarItem;
            }
            // if ( toolbarItemUi ) {
            //     toolbarUi.add( toolbarItemUi );
            // }
          }
          // 全
          for (var x = 0; x < toolbarsBlock.length; x++) {
            toolbarUi.add(toolbarsBlock[x]);
          }
          toolbarUis[i] = toolbarUi;
        }
        this.toolbars = toolbarUis;
        // this.toolbars = toolbarsBlock;

        // console.log(toolbarUis[0].renderHtml())
        // console.log(toolbarsBlock[0].items[0])
      },
      getHtmlTpl: function () {
        return (
          '<div id="##" class="%%">' +
          '<div id="##_toolbarbox" class="%%-toolbarbox" style="border:0;">' +
          (this.toolbars.length
            ? '<div id="##_toolbarboxouter" class="%%-toolbarboxouter">' +
              '<div class="%%-toolbarboxinner">' +
              '<div class="toolbarExit"><div class="toolbarExitIcon"></div><p class="toolbarExitText">退出全屏</p></div>' +
              '<div class="toolbarReturn"><div class="toolbarReturnIcon"></div><p class="toolbarReturnText">返回</p></div>' +
              this.renderToolbarBoxHtml() +
              "</div>" +
              "</div>"
            : "") +
          // '<div id="##_toolbarmsg" class="%%-toolbarmsg" style="display:none;">' +
          //     '<div id = "##_upload_dialog" class="%%-toolbarmsg-upload" onclick="$$.showWordImageDialog();">'+this.editor.getLang("clickToUpload")+'</div>' +
          //     '<div class="%%-toolbarmsg-close" onclick="$$.hideToolbarMsg();">x</div>' +
          //     '<div id="##_toolbarmsg_label" class="%%-toolbarmsg-label"></div>' +
          //     '<div style="height:0;overflow:hidden;clear:both;"></div>' +
          // '</div>' +
          "</div>" +
          '<div id="##_iframeholder" class="%%-iframeholder" style="border:0;"></div>' +
          //modify wdcount by matao
          '<div id="##_bottombar" class="%%-bottomContainer">' +
          '<table style="background-color:#fff;">' +
          "<tr>" +
          // '<td id="##_elementpath" class="%%-bottombar"></td>' +
          '<td id="##_wordcount" class="%%-wordcount"></td>' +
          "</tr>" +
          "</table>" +
          "</div>" +
          "</div>"
        );
      },
      showWordImageDialog: function () {
        this.editor.execCommand("wordimage", "word_img");
        this._dialogs["wordimageDialog"].open();
      },
      renderToolbarBoxHtml: function () {
        var buff = [];
        for (var i = 0; i < this.toolbars.length; i++) {
          buff.push(this.toolbars[i].renderHtml());
        }
        // for ( var i = 0; i < this.toolbars[0].items.length; i++ ) {
        //     buff.push( this.toolbars[0].items[0].items[i].renderHtml() );
        // }
        return buff.join("");
      },
      setFullScreen: function (fullscreen) {
        if (this._fullscreen != fullscreen) {
          this._fullscreen = fullscreen;
          this.editor.fireEvent("beforefullscreenchange", fullscreen);
          var editor = this.editor;
          editor.options.fullscreenCallback &&
            editor.options.fullscreenCallback(fullscreen);
          if (baidu.editor.browser.gecko) {
            var bk = editor.selection.getRange().createBookmark();
          }
          var cursorRange = editor.selection.getRange();
          var backBodyWidth = editor.body.clientWidth;

          var topContent, topNav, topContentPadding;
          if (window.parent.name == "topManageFrame") {
            topContent = $(window.parent.document).find(".content");
            topNav = $(window.parent.document).find(".nav");
            topContentPadding = $(window.parent.document)
              .find(".nav")
              .css("width");
          }
          var tuwenContent =
            $(editor.container).parents(".popupTabBody").find(".tabs-header") ||
            "";
          var tuceContent =
            $(editor.container).parents(".frameTabBody").find(".tabs-header") ||
            "";
          $(editor.container).find("#edui1_imagescale_cover").length &&
            $(editor.container).find("#edui1_imagescale_cover").remove();
          $(editor.container).find("#edui1_imagescale").length &&
            $(editor.container).find("#edui1_imagescale").remove();
          if (fullscreen) {
            // $(this.getDom()).find('#shitu').css({'width':'0px','overflow':'hidden'})
            //有外层iframe嵌套的处理，遍历多层window，找到直接父iframe，然后让iframe脱离父元素控制，达到全屏，目前只做到一层iframe嵌套时的情况。
            if (window.parent != window) {
              var iframes = window.parent.document.getElementsByTagName(
                "iframe"
              );

              // "管理网站中的添加文章"由于有侧边栏做的处理
              if (window.parent.name == "topManageFrame") {
                topContent.css("padding-left", "0");
              }
              if (topNav) {
                topNav.css("top", "-10px");
              }
              if (tuwenContent.length) {
                tuwenContent.css("display", "none");
              }
              if (tuceContent.length) {
                tuceContent.css("display", "none");
              }
              // oss系统“金句一点通”做的处理
              if (
                $(editor.container).parents("#question").length ||
                $(editor.container).parents("#answer").length
              ) {
                $(window.parent.document)
                  .find("#loginBoxHandle")
                  .css("display", "none");
                $(window.top.document)
                  .find(".t_header_nav2")
                  .css("display", "none");
                $(window.top.document)
                  .find("#iframeContent")
                  .css("width", "100%");
                $(window.top.document).find(".t_header").css("display", "none");
                $(window.top.document)
                  .find(".t_header")
                  .next()
                  .css("top", "0px");
              }
              // var iframes = window.parent.parent.document.getElementsByTagName('iframe');
              var parIframe = null;
              utils.each(iframes, function (iframe) {
                if (iframe.contentWindow == window) {
                  // if(iframe.contentWindow == window.parent){
                  parIframe = iframe;
                  return false;
                }
              });

              if (parIframe) {
                //设置iframe父div position为relative，作为iframe参照，同时记录样式，用于还原
                this._bakIframeParCss = parIframe.parentNode.style.cssText;
                // parIframe.parentNode.style.position = 'relative';
                if (parIframe.parentNode.getAttribute("id") !== "loginBox") {
                  parIframe.parentNode.style.position = "relative";
                }
                //记录iframe原始样式，用于退出全屏的还原
                var bcr = parIframe.getBoundingClientRect();
                this._bakIframe = {
                  node: parIframe,
                  cssText: parIframe.style.cssText
                };
                $(parIframe.contentWindow.document.getElementById("tabs")).css(
                  "position",
                  "static"
                );
                $(parIframe).css({
                  position: "absolute",
                  "z-index": 99999,
                  left: -bcr.left,
                  // 'top': -bcr.top,
                  top:
                    $(parIframe).attr("id") == "manageFramePage" ? 0 : -bcr.top,
                  width: "100vw",
                  height: "100vh"
                });
                var iframeParents = $(parIframe).parents(
                  ":not(html):not(body)"
                );
                //记录overflow值为hidden的节点，退出全屏还原为hidden
                var _bakOverflowNode = (this._bakOverflowNode = []);
                iframeParents.each(function () {
                  if ($(this).css("overflow") == "hidden") {
                    _bakOverflowNode.push(this);
                    this.style.overflow = "visible";
                  }
                });
                // window.parent.document.body.insertBefore(parIframe.parentNode, window.parent.document.body.firstChild);
                // $(window.parent.document.body).append($(parIframe).clone(true));
              }
            }

            this._bakHtmlOverflow = document.documentElement.style.overflow;
            this._bakBodyOverflow = document.body.style.overflow;
            this._bakAutoHeight = this.editor.autoHeightEnabled;
            this._bakScrollTop = Math.max(
              document.documentElement.scrollTop,
              document.body.scrollTop
            );
            if (this._bakAutoHeight) {
              //当全屏时不能执行自动长高
              editor.autoHeightEnabled = false;
              this.editor.disableAutoHeight();
            }

            document.documentElement.style.overflow = "hidden";
            document.body.style.overflow = "hidden";

            this._bakCssText = this.getDom().style.cssText;
            this._bakCssText1 = this.getDom("iframeholder").style.cssText;
            this._updateFullScreen();

            $(this.editor.container)
              .find(".edui-editor-bottomContainer table")
              .css({
                "background-color": "#f4f4f4",
                width: "75%",
                margin: "0 auto",
                "max-width": "1200px"
              });
            $(this.editor.container).find(".edui-editor-wordcount").css({
              "border-top": "none"
            });

            // 退出全屏按钮
            $(this.getDom()).find(".toolbarExit").css("display", "block");
            $(this.getDom()).find(".toolbarReturn").css("display", "block");
            var deleteOptions = {
              tips: "按<span style='color:#5293f9'>ESC</span>可退出全屏"
            };
            domUtils.ing(deleteOptions);

            // "网站管理-图册"全屏时做处理
            if ($(this.editor.container).parents(".frameTabBody").length) {
              $(this.editor.container)
                .parents(".frameTabBody")
                .css("padding", "0px");
            }
            if ($(this.editor.container).parents(".tabs-content").length) {
              $(this.editor.container).parents(".tabs-content").css({
                margin: "0px",
                width: "100%",
                height: "100%"
              });
            }

            if (
              $(editor.container).parents("#app").find("#faisco_rich_tip")
                .length
            ) {
              var tipLeft = (parseInt($(editor.body).width()) - 430) * 0.5;
              $(editor.container)
                .parents("#app")
                .find("#faisco_rich_tip")
                .css({ "z-index": "999", left: tipLeft });
            }

            var iframeLeft;
            if (
              $(this.editor.container).find("#edui1_iframeholder").position()
            ) {
              iframeLeft = $(this.editor.container)
                .find("#edui1_iframeholder")
                .position().left;
            } else {
              iframeLeft = 0;
            }

            // var divWidth = parseInt($(this.editor.container).find('#edui1_iframeholder').width() - iframeLeft);
            $(this.editor.body).css({
              // 'height':'802px',
              width: "calc(100% - -8px)",
              "background-color": "#f4f4f4",
              "overflow-y": "",
              "overflow-x": "hidden",
              margin: 0
            });

            // 如果目前状态是“查看源码”，需对textarea的样式做处理
            // var textareaWidth = $(this.editor.container).find('#edui1_iframeholder').width()-iframeLeft;
            $(this.editor.container).find("textarea").css({
              // 'margin-top':'5px',
              "max-width": "1200px",
              width: "75%",
              margin: "auto",
              left: 0,
              right: 0,
              "margin-top": "20px",
              padding: "50px 50px 100px 50px",
              "box-sizing": "border-box"
            });

            // console.log($(editor.container).find('.edui-editor-iframeholder iframe')[0].style)
            // editor.iframe.style.position = "";
            // editor.iframe.style.left = "";
            // editor.iframe.style.top = "";
            var iframeStyle = $(editor.container).find(
              ".edui-editor-iframeholder iframe"
            )[0];
            iframeStyle.style.position = "";
            iframeStyle.style.left = "";
            iframeStyle.style.top = "";

            // $(this.getDom()).find('#edui2').css('margin','0 auto');
            $(this.getDom()).find(".edui-toolbar").css("margin", "0 auto");
            $(this.editor.body).parent().addClass("htmlScroll");
            $(
              '<hr class="pagebreak" noshade="noshade" size="5" style="user-select: none;">'
            ).insertBefore($(editor.body).children().first());
            if ($(editor.body).find("hr.pagebreak").length) {
              for (
                var j = 0;
                j < $(editor.body).find("hr.pagebreak").length;
                j++
              ) {
                var hrContent;
                if (j === 0) {
                  hrContent = $(
                    $(editor.body).find("hr.pagebreak")[j]
                  ).nextUntil($($(editor.body).find("hr.pagebreak")[j + 1]));
                  $(editor.body).find("hr.pagebreak")[j].style.display = "none";
                  $(editor.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div></div>'
                  );
                } else if (
                  j ===
                  $(editor.body).find("hr.pagebreak").length - 1
                ) {
                  hrContent = $(
                    $(editor.body).find("hr.pagebreak")[j]
                  ).nextUntil($(editor.body).find(".breakPageParent"));
                  $(editor.body).find("hr.pagebreak")[j].style.display = "none";
                  $(editor.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div><div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
                  ); // $($(editor.body).find('hr')[j]).remove()
                } else {
                  hrContent = $(
                    $(editor.body).find("hr.pagebreak")[j]
                  ).nextUntil($($(editor.body).find("hr.pagebreak")[j + 1]));
                  $(editor.body).find("hr.pagebreak")[j].style.display = "none";
                  $(editor.body).append(
                    '<div class="breakPageParent" contenteditable="true"><div class="breakPage breakPage_' +
                      j +
                      '" contenteditable="true"></div><div title="双击取消分页" style="font-size:12px; color:#387ed6;line-height:33px;text-align:right;" contenteditable="false" class="pageBreakClose"><div title="点击取消分页" class="pageBreakCloseIcon"></div></div></div>'
                  );
                }
                // $(editor.body).append('<div class="breakPageParent" contenteditable="false"><div class="breakPage breakPage_'+j+'" contenteditable="true"></div><div class="pageBreakClose"></div></div>');
                hrContent.appendTo($(editor.body).find(".breakPage_" + j));
              }
              $(editor.body).children("p").remove();
            } else {
              $(editor.body).append(
                '<div class="breakPage" contenteditable="true"></div>'
              );
              $(editor.body).children().appendTo($(editor.body).find("div"));
            }

            // 添加侧边按钮“html视图”和“背景色”
            var staticBtn =
              '<div contenteditable="false" class="staticBtn">' +
              '<div contenteditable="false" class="htmlBtn"></div>' +
              '<div contenteditable="false" class="backgroundBtn"></div>' +
              "</div>";
            $(staticBtn).prependTo(editor.body);

            // 非全屏下使用了“全选”工具，切换到全屏时要添加selectall属性
            if (
              cursorRange.startContainer.tagName &&
              cursorRange.startContainer.tagName == "BODY"
            ) {
              $(editor.body).attr("selectall", "true");
            }

            // 退出全屏
            $(editor.container).find(".toolbarExit")[0].onclick = function () {
              $(editor.container)
                .find(".edui-for-fullscreen .edui-button-body")
                .click();
            };
            $(editor.container).find(
              ".toolbarReturn"
            )[0].onclick = function () {
              $(editor.container)
                .find(".edui-for-fullscreen .edui-button-body")
                .click();
            };

            // "删除分页"绑定事件
            for (
              var j = 0;
              j < $(editor.body).find(".pageBreakClose").length;
              j++
            ) {
              $(editor.body).find(".pageBreakCloseIcon")[
                j
              ].onclick = function () {
                var closeStart = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                var closeEnd = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                $(this)
                  .parent()
                  .prev()
                  .children()
                  .appendTo(
                    $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find(".breakPage")
                  );
                $(this).parents(".breakPageParent").remove();
                if ($(editor.body).find(".pageBreakClose").length === 0) {
                  var breakPageHeight = $(editor.body).css("height");
                  $(editor.body)
                    .find(".breakPage")
                    .css("min-height", breakPageHeight);
                  $(editor.body).find(".breakPageParent").css("height", "100%");
                }
                // 改变光标的位置
                var closeRange = editor.selection.getRange();
                closeRange.setStart(closeStart, 0);
                closeRange.setEnd(closeEnd, 0);
                closeRange.select(true);
              };
              $(editor.body).find(".pageBreakClose")[
                j
              ].ondblclick = function () {
                var closeStart = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                var closeEnd = $(this)
                  .parents(".breakPageParent")
                  .prev()
                  .find("p")[0];
                $(this)
                  .prev()
                  .children()
                  .appendTo(
                    $(this)
                      .parents(".breakPageParent")
                      .prev()
                      .find(".breakPage")
                  );
                $(this).parents(".breakPageParent").remove();
                if ($(editor.body).find(".pageBreakClose").length === 0) {
                  var breakPageHeight = $(editor.body).css("height");
                  $(editor.body)
                    .find(".breakPage")
                    .css("min-height", breakPageHeight);
                  $(editor.body).find(".breakPageParent").css("height", "100%");
                }
                // 改变光标的位置
                var closeRange = editor.selection.getRange();
                closeRange.setStart(closeStart, 0);
                closeRange.setEnd(closeEnd, 0);
                closeRange.select(true);
              };
            }
            // 如果表格使用的是默认宽度，则全屏切换时宽度也要变化
            if ($(editor.body).find("table").length) {
              var bodyWidth =
                parseInt($(editor.body).find(".breakPage").css("width")) -
                2 *
                  parseInt(
                    $(editor.body).find(".breakPage").css("padding-left")
                  );
              for (var j = 0; j < $(editor.body).find("table").length; j++) {
                if (
                  $(editor.body)
                    .find("table")
                    [j].getAttribute("defaultwidth") == "true"
                ) {
                  $(editor.body)
                    .find("table")
                    [j].setAttribute("width", bodyWidth);
                }
              }
            }

            // ESC退出全屏
            window.onkeydown = function (e) {
              if (e.keyCode == 27) {
                $(editor.container)
                  .find(".edui-for-fullscreen .edui-button-body")
                  .click();
              }
            };
            var copePage;
            var copePage_1;

            // 为了使“全选”和“回退”两个快捷键同事存在，需要contenteditable的值不断切换
            // $(editor.body)[0].onkeydown = function(e){
            domUtils.on($(editor.body)[0], "keydown", function (e) {
              if (e.keyCode == 8) {
                setTimeout(function () {
                  editor.selection.getRange().select(true);
                }, 50);
                var getEndRange = editor.selection.getRange().endContainer;
                var prevElement =
                  getEndRange.tagName == "P"
                    ? $(getEndRange).prev()[0]
                    : $(getEndRange).parents("p").prev()[0];
                for (
                  var j = 0;
                  j < $(editor.body).find(".breakPageParent").length;
                  j++
                ) {
                  if (
                    editor.selection.getRange().endOffset == 0 &&
                    !prevElement
                  ) {
                    $(editor.body)
                      .find(".breakPageParent")
                      [j].setAttribute("contenteditable", "false");
                  }
                }
                // 回退时内容为空的时候再插入<p><br/></p>
                var backRange = editor.selection.getRange();
                setTimeout(function () {
                  for (
                    var j = 0;
                    j < $(editor.body).find(".breakPage").length;
                    j++
                  ) {
                    if (
                      $($(editor.body).find(".breakPage")[j]).children()
                        .length === 0
                    ) {
                      $($(editor.body).find(".breakPage")[j]).append(
                        "<p><br/></p>"
                      );
                    }
                  }
                }, 50);

                var selectRange = editor.selection.getRange();

                // console.log($(selectRange.startContainer).parents('.breakPage')[0] !== $(selectRange.endContainer).parents('.breakPage')[0])
                // if($(selectRange.startContainer).parents('.breakPage')[0] !== $(selectRange.endContainer).parents('.breakPage')[0]){
                if (
                  $(selectRange.startContainer).parents(".breakPage")[0] !==
                    $(selectRange.endContainer).parents(".breakPage")[0] &&
                  navigator.userAgent.indexOf("Edge") == -1
                ) {
                  e.preventDefault(); // 取消事件的默认行为
                  e.stopPropagation(); // 阻止事件的传播
                  var deleteOptions = {
                    tips: "跨页无法删除"
                  };
                  domUtils.ing(deleteOptions);
                  return false;
                }
              } else if (e.keyCode == 17) {
                $(editor.body).attr("ctrlDown", "true");
                this.onkeydown = function (ev) {
                  if (ev.keyCode == 90) {
                    ev.preventDefault(); // 取消事件的默认行为
                    ev.stopPropagation(); // 阻止事件的传播
                    $(editor.container)
                      .find(".edui-for-undo .edui-button-body")
                      .click();
                  } else if (ev.keyCode == 89) {
                    ev.preventDefault(); // 取消事件的默认行为
                    ev.stopPropagation(); // 阻止事件的传播
                    $(editor.container)
                      .find(".edui-for-redo .edui-button-body")
                      .click();
                  } else if (ev.keyCode == 86) {
                    $(editor.body).attr("selectAll", "");
                    $(editor.body).attr("ctrlA", "");
                    copePage = $(
                      editor.selection.getRange().startContainer
                    ).parents(".breakPageParent")[0];
                    copePage_1 = editor.selection.getRange();
                    if (
                      $(copePage_1.startContainer).parents(
                        ".breakPageParent"
                      )[0] !=
                      $(copePage_1.endContainer).parents(".breakPageParent")[0]
                    ) {
                      return false;
                    }
                    if (
                      $(editor.selection.getRange().endContainer).hasClass(
                        "staticBtn"
                      )
                    ) {
                      return false;
                    }
                  } else if (ev.keyCode == 65) {
                    $(editor.body).attr("ctrlA", "true");
                    $(editor.body)
                      .find(".staticBtn")
                      .attr("contenteditable", "true");

                    if (
                      $(editor.body).find(".breakPage").length <= 1 &&
                      $(editor.body).attr("ctrlDown")
                    ) {
                      setTimeout(function () {
                        editor.selection
                          .getRange()
                          .setStart($(editor.body).find(".breakPage_0 p")[0], 0)
                          .select(true);
                      });
                    }
                  }
                };
                // this.onkeyup = function(ev){
                //     domUtils.un(this,'keydown',function(evt){console.log('jiebang la ')})
                // }
              } else if (e.keyCode == 27) {
                $(editor.container)
                  .find(".edui-for-fullscreen .edui-button-body")
                  .click();
              } else if (e.keyCode == 46 || e.keyCode == 13) {
                // 只能在同一个分页里面操作delete，跨页不能执行
                var selectRange = editor.selection.getRange();
                // if($(selectRange.startContainer).parents('.breakPage')[0] !== $(selectRange.endContainer).parents('.breakPage')[0]){
                if (
                  $(selectRange.startContainer).parents(".breakPage")[0] !==
                    $(selectRange.endContainer).parents(".breakPage")[0] &&
                  navigator.userAgent.indexOf("Edge") == -1
                ) {
                  var deleteOptions = {
                    tips: "跨页无法删除"
                  };
                  domUtils.ing(deleteOptions);
                  return false;
                }
              } else {
                $(editor.body).attr("selectAll", "");
                $(editor.body).attr("ctrlA", "");
                for (
                  var j = 0;
                  j < $(editor.body).find(".breakPageParent").length;
                  j++
                ) {
                  $(editor.body)
                    .find(".breakPageParent")
                    [j].setAttribute("contenteditable", "true");
                }
                return false;
              }
            });

            domUtils.on($(editor.body)[0], "keyup", function (e) {
              if (e.keyCode == 65) {
                $(editor.body)
                  .find(".staticBtn")
                  .attr("contenteditable", "false");
                $(editor.body).focus();
              } else if (e.keyCode == 17) {
                $(editor.body).removeAttr("ctrlDown");
              }
            });

            // $(editor.body).parent()[0].onkeydown = function(e){
            domUtils.on($(editor.body).parent()[0], "keydown", function (e) {
              if (e.keyCode == 46 || e.keyCode == 13 || e.keyCode == 8) {
                $(editor.body).attr("ctrlA", "");
                var getEndRange = editor.selection.getRange().endContainer;
                var prevElement =
                  getEndRange.tagName == "P"
                    ? $(getEndRange).prev()[0]
                    : $(getEndRange).parents("p").prev()[0];
                for (
                  var j = 0;
                  j < $(editor.body).find(".breakPageParent").length;
                  j++
                ) {
                  if (
                    editor.selection.getRange().endOffset == 0 &&
                    !prevElement
                  ) {
                    $(editor.body)
                      .find(".breakPageParent")
                      [j].setAttribute("contenteditable", "false");
                  }
                }
                var selectRange = editor.selection.getRange();

                // if($(selectRange.startContainer).parents('.breakPage')[0] !== $(selectRange.endContainer).parents('.breakPage')[0]){
                if (
                  $(selectRange.startContainer).parents(".breakPage")[0] !==
                    $(selectRange.endContainer).parents(".breakPage")[0] &&
                  navigator.userAgent.indexOf("Edge") == -1
                ) {
                  var deleteOptions = {
                    tips: "跨页无法删除"
                  };
                  domUtils.ing(deleteOptions);
                  return false;
                } else {
                  if (
                    $(editor.body).find(".breakPage").length <= 1 &&
                    $(editor.body).attr("ctrlA") == "true"
                  ) {
                    $(editor.body).find(".breakPage_0")[0].innerHTML =
                      '<p style="line-height:1.5em;"><br></p>';
                  }
                }
                // if($(selectRange.startContainer).hasClass('staticBtn')){
                if (
                  $(selectRange.startContainer).hasClass("staticBtn") &&
                  navigator.userAgent.indexOf("Edge") == -1
                ) {
                  var deleteOptions = {
                    tips: "跨页无法删除"
                  };
                  domUtils.ing(deleteOptions);
                  return false;
                }
              } else if (e.keyCode == 17) {
                this.onkeydown = function (ev) {
                  if (ev.keyCode == 65) {
                    $(editor.body).attr("ctrlA", "true");
                  } else {
                    $(editor.body).attr("ctrlA", "");
                  }
                };
              } else {
                $(editor.body).attr("selectAll", "");
                $(editor.body).attr("ctrlA", "");
                for (
                  var j = 0;
                  j < $(editor.body).find(".breakPageParent").length;
                  j++
                ) {
                  $(editor.body)
                    .find(".breakPageParent")
                    [j].setAttribute("contenteditable", "true");
                }
              }
            });

            // console.log(window.history)
            // if (window.history && window.history.pushState) {
            //    history.pushState(null, null, document.URL);
            //  }
            // $(editor.body).find('.breakPage').on('click',function(e){
            //     console.log(e.target)
            //     console.log(editor.selection.getRange())
            // })

            // 复制粘贴时把内容外部的div去掉
            $(editor.body)[0].oninput = function (e) {
              if (!!copePage) {
                setTimeout(function () {
                  var pageLength = $(copePage)
                    .children()
                    .find(".breakPageParent").length;
                  if (pageLength) {
                    for (var i = 0; i < pageLength; i++) {
                      $($(copePage).children().find(".breakPageParent")[0])
                        .find(".pageBreakClose")
                        .remove();
                      // $($(copePage).children().find('.breakPageParent')[0]).replaceWith($($(copePage).children().find('.breakPageParent')[0]).find('.breakPage').children())
                      $($(copePage).children().find(".breakPageParent")[0])
                        .find(".breakPage")
                        .children()
                        .unwrap()
                        .unwrap();
                    }
                  }
                  // 非全屏下复制分页时，全屏下粘贴要把hr remove掉
                  if ($(copePage).find(".breakPage hr").length) {
                    $(copePage).find(".breakPage hr").remove();
                  }
                }, 10);
              }
            };
            // window.focus()
            $(editor.body)[0].onclick = function (e) {
              // cursorRange.select(true);
              // e.stopPropagation()
              if (
                $(editor.selection.getRange().startContainer).parents(
                  ".staticBtn"
                ).length
              ) {
                cursorRange.select(true);
              }
            };
            // 光标位置
            // var Range = editor.selection.getRange();
            // var p = $(editor.body).find('.breakPage')[0]
            // Range.setStart(p,0).collapse(true);
            cursorRange.select(true);

            for (
              var i = 0;
              i < $(editor.body).find("hr.pagebreak").length;
              i++
            ) {
              $(editor.body).find("hr.pagebreak").remove();
            }

            if ($(this.editor.body).find(".breakPage").length === 1) {
              var breakPageHeight = $(editor.body).css("height");
              $(this.editor.body)
                .find(".breakPage")
                .css("min-height", breakPageHeight);
              $(this.editor.body)
                .find(".breakPageParent")
                .css("height", "100%");
            } else {
              $(this.editor.body).find(".breakPageParent").css("height", " ");
            }

            // 添加全屏的標識
            this.toolbars[0]
              .getDom()
              .setAttribute("isFullScreen", "fullScreen");
            editor.container.setAttribute("isFullScreen", "fullScreen");
            // 拖動時自適應
            var ueToolbars = this.toolbars[0];
            var ueToolbarsDom = ueToolbars.getDom();
            uiUtils.toolbarAdjust(ueToolbars);

            // “HTML视图”和“切换背景色”
            var fullIconRight =
              (parseInt($(this.editor.container).width()) -
                parseInt(
                  $(this.editor.container).find(".edui-toolbar").width()
                )) *
                0.5 -
              46;
            $(editor.container).find(".toolbarExit").css("right", "10px");
            $(editor.container).find(".toolbarReturn").css("left", "10px");
            // $(editor.container).find('#shitu').css('visibility','hidden');
            $(editor.container).find("#shitu").css("display", "none");
            // var toolbarNewWidth = $(editor.container).find('.edui-toolbar').width() - 67;
            // $(editor.container).find('.edui-toolbar').css('width',toolbarNewWidth+'px');debugger
            var staticBtnRight =
              (parseInt($(this.editor.container).width()) -
                parseInt(
                  $(this.editor.body).find(".breakPageParent").width()
                )) *
                0.5 -
              131;
            $(editor.body).find(".staticBtn").css("right", staticBtnRight);
            var bgHandle, htmlHandle, setHandle;
            $(editor.body).find(".backgroundBtn")[0].onmouseover = function (
              e
            ) {
              setHandle = setTimeout(function () {
                $(e.target, this).text("黑色背景");
              }, 50);
            };
            $(editor.body).find(".backgroundBtn")[0].onmouseout = function (e) {
              clearTimeout(setHandle);
              $(e.target).text("");
            };
            $(editor.body).find(".htmlBtn")[0].onmouseover = function (e) {
              htmlHandle = setTimeout(function () {
                $(e.target).text("html视图");
              }, 50);
            };
            $(editor.body).find(".htmlBtn")[0].onmouseout = function (e) {
              clearTimeout(htmlHandle);
              $(e.target).text("");
            };
            $(editor.body).find(".htmlBtn")[0].onclick = function (e) {
              $(this).css("background-position", "-595px -296px");
              $(editor.container)
                .find(".edui-for-source .edui-button-body")
                .click();
            };
            // $(editor.body).attr('isChangeBg','true');
            var breakPageLength = $(editor.body).find(".breakPage").length;
            // if($(editor.body).attr('isChangeBg') == 'true'){
            if (!$(editor.body).hasClass("changeBgColor")) {
              for (var i = 0; i < breakPageLength; i++) {
                $($(editor.body).find(".breakPage")[i]).removeClass(
                  "changeBgColor"
                );
              }
            } else {
              $(editor.body)
                .find(".backgroundBtn")
                .css("background-position", "-596px -247px");
              for (var i = 0; i < breakPageLength; i++) {
                $($(editor.body).find(".breakPage")[i]).addClass(
                  "changeBgColor"
                );
              }
            }
            $(editor.body).find(".backgroundBtn")[0].onclick = function () {
              if ($(editor.body).attr("isChangeBg") == "true") {
                var deleteOptions = {
                  tips: "仅用于预览编辑，不改变页面实际背景"
                };
                domUtils.ing(deleteOptions);
                $(this).css("background-position", "-596px -247px");
                var breakPageLength = $(editor.body).find(".breakPage").length;
                for (var i = 0; i < breakPageLength; i++) {
                  $($(editor.body).find(".breakPage")[i]).addClass(
                    "changeBgColor"
                  );
                }
                $(editor.container).find("textarea").addClass("changeBgColor");
                $(editor.body).attr("isChangeBg", "");
              } else {
                $(this).css("background-position", "");
                var breakPageLength = $(editor.body).find(".breakPage").length;
                for (var i = 0; i < breakPageLength; i++) {
                  $($(editor.body).find(".breakPage")[i]).removeClass(
                    "changeBgColor"
                  );
                }
                $(editor.container)
                  .find("textarea")
                  .removeClass("changeBgColor");
                $(editor.body).attr("isChangeBg", "true");
              }
            };

            if ($(editor.container).find("textarea").length) {
              for (
                var i = 0;
                i < $(editor.body).find(".breakPageParent").length;
                i++
              ) {
                $($(editor.body).find(".breakPageParent")[i]).css({
                  left: "-23343px",
                  top: "-23343px"
                });
              }
              $(editor.body)
                .find(".backgroundBtn")
                .addClass("backgroundBtnMask");
            }
            if ($(editor.body).find(".backgroundBtnMask").length) {
              $(editor.body).find(".backgroundBtnMask")[0].onclick = function (
                e
              ) {
                e.preventDefault();
                e.stopPropagation();
                return false;
              };
              $(editor.body).find(
                ".backgroundBtnMask"
              )[0].onmouseover = function (e) {
                $(editor.body).find(".backgroundBtn").css("width", "42px");
                e.preventDefault();
                e.stopPropagation();
                return false;
              };
            }

            // 全屏自适应
            window.onresize = function () {
              // 处理全屏时大小屏切换排列混乱的问题
              setTimeout(function () {
                uiUtils.toolbarAdjust(ueToolbars);
                var toolbarNewWidth =
                  $(editor.container).find(".edui-toolbar").width() - 67;
                $(editor.container)
                  .find(".edui-toolbar")
                  .css("width", toolbarNewWidth + "px");
                //全屏时“退出全屏”和“侧边按钮”两个按钮的自适应
                // var fullIconRight = parseInt($(this.editor.container).find('#shitu').offset().left) + 10;
                // $(editor.container).find('.toolbarExit').css('left',fullIconRight);
                var staticBtnRight =
                  (parseInt($(this.editor.container).width()) -
                    parseInt(
                      $(this.editor.body).find(".breakPageParent").width()
                    )) *
                    0.5 -
                  131;
                $(editor.body).find(".staticBtn").css("right", staticBtnRight);
              }, 100);

              // oss系统“金句一点通”做处理
              if (
                $(editor.container).parents("#question").length ||
                $(editor.container).parents("#answer").length
              ) {
                var parIframeLeft =
                  parseInt($(parIframe).css("left")) -
                  parseInt($(parIframe).offset().left);
                $(parIframe).css("left", parIframeLeft);
                $(window.top.document)
                  .find("#iframeContent")
                  .css("width", "100%");
              }
            };
          } else {
            var hasBgColor = $(editor.body)
              .find(".breakPage_0")
              .hasClass("changeBgColor");
            //iframe相关还原
            this._bakIframe &&
              (this._bakIframe.node.style.cssText = this._bakIframe.cssText);
            // this._bakIframeParCss && (this._bakIframe.node.parentNode.style.cssText = this._bakIframeParCss);
            this._bakOverflowNode &&
              utils.each(this._bakOverflowNode, function (node) {
                node.style.overflow = "hidden";
              });

            this.getDom().style.cssText = this._bakCssText;
            // this.getDom( 'iframeholder' ).style.cssText = this._bakCssText1;
            if ($(editor.container).find("textarea").length) {
              this.getDom("iframeholder").style.cssText =
                this._bakCssText1 + "position:relative;z-index:-1;";
            } else {
              this.getDom("iframeholder").style.cssText = this._bakCssText1;
            }
            if (this._bakAutoHeight) {
              editor.autoHeightEnabled = true;
              this.editor.enableAutoHeight();
            }
            document.documentElement.style.overflow = this._bakHtmlOverflow;
            document.body.style.overflow = this._bakBodyOverflow;
            window.scrollTo(0, this._bakScrollTop);

            // "管理网站中的添加文章"由于有侧边栏做的处理
            if (window.parent.name == "topManageFrame") {
              topContent.css("padding-left", topContentPadding);
            }
            if (topNav) {
              topNav.css("top", "");
            }
            if (tuwenContent.length) {
              tuwenContent.css("display", "");
            }
            if (tuceContent.length) {
              tuceContent.css("display", "");
            }
            // oss系统“金句一点通”做处理
            if (
              $(editor.container).parents("#question").length ||
              $(editor.container).parents("#answer").length
            ) {
              $(window.parent.document)
                .find("#loginBoxHandle")
                .css("display", "");
              $(window.top.document).find(".t_header_nav2").css("display", "");
              $(window.top.document).find(".t_header").css("display", "");
              var iframeContentWidth =
                parseInt($(window.top.document).find("body").css("width")) -
                parseInt(
                  $(window.top.document).find(".t_header_nav2").css("width")
                ) -
                10;
              $(window.top.document)
                .find("#iframeContent")
                .css("width", iframeContentWidth);
              $(window.top.document)
                .find(".t_header")
                .next()
                .css("top", "74px");
            }
            // 全
            $(editor.body).attr("contenteditable", true);
            $(this.editor.body).css({
              width: "",
              border: "",
              "background-color": "",
              "border-radius": "",
              "overflow-x": "",
              margin: "12px 12px 0 12px"
            });
            $(this.editor.container).find(".edui-editor-wordcount").css({
              "border-top": "1px solid rgb(204, 204, 204)"
            });
            $(this.editor.container)
              .find(".edui-editor-bottomContainer table")
              .css({
                "background-color": "#fff",
                width: "100%",
                margin: ""
              });
            // $(editor.container).css('padding','0')

            // 非全屏下解绑ESC按钮事件
            $(editor.body).bind("keydown", function (e) {
              if (e.keyCode == 27) {
                return false;
              }
            });
            window.onkeydown = function (e) {
              if (e.keyCode == 27) {
                return false;
              }
            };

            if (
              $(editor.container).parents("#app").find("#faisco_rich_tip")
                .length
            ) {
              $(editor.container)
                .parents("#app")
                .find("#faisco_rich_tip")
                .css({ "z-index": "", left: "" });
            }

            // 隐藏“退出全屏”按钮
            $(this.getDom()).find(".toolbarExit").css("display", "none");
            $(this.getDom()).find(".toolbarReturn").css("display", "none");
            $(editor.body).find(".staticBtn").remove();

            // 图文展示位display:table，会影响宽度
            $(editor.container).find(".edui-toolbar").css("width", "");

            // "网站管理-图册"全屏时做处理
            if ($(this.editor.container).parents(".frameTabBody").length) {
              $(this.editor.container)
                .parents(".frameTabBody")
                .css("padding", "");
            }
            $(this.editor.container).parents(".tabs-content").attr("style", "");
            // 如果目前状态是“查看源码”，需对textarea的样式做处理
            var textareaWidth =
              $(this.editor.container).find("#edui1_iframeholder").width() -
              iframeLeft;
            $(this.editor.container).find("textarea").css({
              "margin-top": "0",
              width: "100%",
              left: "0",
              padding: "0"
            });
            // $(me.container).find('.edui-editor-iframeholder').css({
            //     'position':'relative',
            // });
            $(this.editor.body).parent().removeClass("htmlScroll");
            $(editor.body).find("hr.pagebreak").remove();
            var breakPageLength = $(editor.body).find(".breakPageParent")
              .length;
            for (var j = 0; j < breakPageLength; j++) {
              $($(editor.body).find(".breakPageParent")[0])
                .find(".breakPage")
                .children()
                .appendTo($(editor.body));
              if (j < breakPageLength - 1) {
                $(editor.body).append(
                  '<hr class="pagebreak" noshade="noshade" size="5" style="user-select: none;">'
                );
              }
              $($(editor.body).find(".breakPageParent")[0]).remove();
            }
            $(this.getDom()).find("#edui2").css("margin", "");

            // 清除全屏的標識
            if (this.toolbars[0].getDom().getAttribute("isFullScreen")) {
              this.toolbars[0].getDom().removeAttribute("isFullScreen");
            }
            if (editor.container.getAttribute("isFullScreen")) {
              editor.container.removeAttribute("isFullScreen");
            }

            // 清除全选的标志
            if ($(editor.body).attr("selectall") == "true") {
              $(editor.body).attr("selectall", "");
            }

            // 如果表格使用的是默认宽度，则全屏切换时宽度也要变化
            if ($(editor.body).find("table").length) {
              var bodyWidth = parseInt($(editor.body).css("width"));
              for (var j = 0; j < $(editor.body).find("table").length; j++) {
                if (
                  $(editor.body)
                    .find("table")
                    [j].getAttribute("defaultwidth") == "true"
                ) {
                  $(editor.body)
                    .find("table")
                    [j].setAttribute("width", bodyWidth);
                }
              }
            }

            // 背景色
            // if($(editor.body).attr('isChangeBg') == 'true'){
            if (!hasBgColor) {
              $(editor.body).removeClass("changeBgColor");
            } else {
              $(editor.body).addClass("changeBgColor");
            }

            $(editor.body)[0].onkeydown = null;

            // 当全屏时复制内容在非全屏下粘贴所做的处理
            $(editor.body)[0].oninput = function (e) {
              setTimeout(function () {
                var pageLength = $(editor.body).find(".breakPageParent").length;
                if (pageLength) {
                  for (var i = 0; i < pageLength; i++) {
                    // $($(copePage).children().find('.breakPageParent')[0]).replaceWith($($(copePage).children().find('.breakPageParent')[0]).find('.breakPage').children())
                    $($(editor.body).find(".breakPageParent")[0])
                      .find(".breakPage")
                      .children()
                      .unwrap()
                      .unwrap();
                  }
                }
              }, 10);
            };

            // 光标位置
            // cursorRange.select(true)

            // 非全屏情況下也需要自適應
            uiUtils.toolbarAdjust(this.toolbars[0]);

            // 隐藏最后“视图”的分块
            // $(editor.container).find('#shitu').css('visibility','');
            $(editor.container).find("#shitu").css("display", "inline-block");

            var ueToolbars = this.toolbars[0];
            window.onresize = function () {
              // 由于快速拖动的话函数会执行不了，导致toolbar排列不齐，所以使用setTimeout来延迟执行
              uiUtils.toolbarAdjust(ueToolbars);
              // 在非全屏下，窗口缩放时需要把工具的弹窗popup隐藏
              for (
                var i = 0;
                i <
                $(editor.container)
                  .parents("body")
                  .find(".edui_fixedlayer .edui-popup").length;
                i++
              ) {
                $(
                  $(editor.container)
                    .parents("body")
                    .find(".edui_fixedlayer .edui-popup")[i]
                ).css("display", "none");
              }
            };
          }
          if (baidu.editor.browser.gecko) {
            var input = document.createElement("input");

            document.body.appendChild(input);

            editor.body.contentEditable = false;
            setTimeout(function () {
              input.focus();
              setTimeout(function () {
                editor.body.contentEditable = true;
                editor.selection.getRange().moveToBookmark(bk).select(true);
                baidu.editor.dom.domUtils.remove(input);

                fullscreen && window.scroll(0, 0);
              });
            });
          }

          this.editor.fireEvent("fullscreenchanged", fullscreen, backBodyWidth);
          this.triggerLayout();
        }
      },
      _wordCount: function () {
        var wdcount = this.getDom("wordcount");
        if (!this.editor.options.wordCount) {
          wdcount.style.display = "none";
          return;
        }
        wdcount.innerHTML = this.editor.queryCommandValue("wordcount");
      },
      disableWordCount: function () {
        var w = this.getDom("wordcount");
        w.innerHTML = "";
        w.style.display = "none";
        this.wordcount = false;
      },
      enableWordCount: function () {
        var w = this.getDom("wordcount");
        w.style.display = "";
        this.wordcount = true;
        this._wordCount();
      },
      _updateFullScreen: function () {
        if (this._fullscreen) {
          //需要预留空间给浮动工具，防止浮动工具显示不全。
          var toolHeight = 40 - this.getDom("wordcount").offsetHeight;
          var vpRect = uiUtils.getViewportRect();
          this.getDom().style.cssText =
            // "border:0;padding:0;position:absolute;left:0;top:" + // origin
            "border:0;padding:0;position:fixed;left:0;top:" +
            (this.editor.options.topOffset || 0) +
            "px;width:" +
            vpRect.width +
            "px;height:" +
            vpRect.height +
            "px;z-index:" +
            // (this.getDom().style.zIndex * 1 + 100); // origin
            (this.getDom().style.zIndex * 1 + 110);
          uiUtils.setViewportOffset(this.getDom(), {
            left: 0,
            top: this.editor.options.topOffset || 0
          });
          this.editor.setHeight(
            vpRect.height -
              this.getDom("toolbarbox").offsetHeight -
              this.getDom("bottombar").offsetHeight -
              (this.editor.options.topOffset || 0) -
              toolHeight
          );
        }
      },
      _updateElementPath: function () {
        var bottom = this.getDom("elementpath"),
          list;
        if (
          this.elementPathEnabled &&
          (list = this.editor.queryCommandValue("elementpath"))
        ) {
          var buff = [];
          for (var i = 0, ci; (ci = list[i]); i++) {
            buff[i] = this.formatHtml(
              '<span unselectable="on" onclick="$$.editor.execCommand(&quot;elementpath&quot;, &quot;' +
                i +
                '&quot;);">' +
                ci +
                "</span>"
            );
          }
          bottom.innerHTML =
            '<div class="edui-editor-breadcrumb" onmousedown="return false;">' +
            this.editor.getLang("elementPathTip") +
            ": " +
            buff.join(" &gt; ") +
            "</div>";
        } else {
          bottom.style.display = "none";
        }
      },
      disableElementPath: function () {
        var bottom = this.getDom("elementpath");
        bottom.innerHTML = "";
        bottom.style.display = "none";
        this.elementPathEnabled = false;
      },
      enableElementPath: function () {
        var bottom = this.getDom("elementpath");
        bottom.style.display = "";
        this.elementPathEnabled = true;
        this._updateElementPath();
      },
      isFullScreen: function () {
        return this._fullscreen;
      },
      postRender: function () {
        UIBase.prototype.postRender.call(this);
        for (var i = 0; i < this.toolbars.length; i++) {
          this.toolbars[i].postRender();
          // this.toolbars[i].items[i].items[0].postRender();
        }
        var me = this;
        var timerId,
          domUtils = baidu.editor.dom.domUtils,
          updateFullScreenTime = function () {
            clearTimeout(timerId);
            timerId = setTimeout(function () {
              me._updateFullScreen();
            });
          };
        domUtils.on(window, "resize", updateFullScreenTime);

        me.addListener("destroy", function () {
          domUtils.un(window, "resize", updateFullScreenTime);
          clearTimeout(timerId);
        });
      },
      showToolbarMsg: function (msg, flag) {
        this.getDom("toolbarmsg_label").innerHTML = msg;
        this.getDom("toolbarmsg").style.display = "";
        //
        if (!flag) {
          var w = this.getDom("upload_dialog");
          w.style.display = "none";
        }
      },
      hideToolbarMsg: function () {
        this.getDom("toolbarmsg").style.display = "none";
      },
      mapUrl: function (url) {
        return url
          ? url.replace(
              "~/",
              this.editor.options.BUS_UEDITOR_HOME_URL_IMAGE || ""
            )
          : "";
      },
      triggerLayout: function () {
        var dom = this.getDom();
        if (dom.style.zoom == "1") {
          dom.style.zoom = "100%";
        } else {
          dom.style.zoom = "1";
        }
      }
    };
    utils.inherits(EditorUI, baidu.editor.ui.UIBase);
    utils.extend(EditorUI.prototype, Stateful, true);

    baidu.editor.ui.Editor = function (options) {
      console.log("options-----------------", options);
      var editor = new baidu.editor.Editor(options);
      editor.options.editor = editor;
      var oldRender = editor.render;
      editor.render = function (holder) {
        utils.domReady(function () {
          editor.langIsReady
            ? renderUI()
            : editor.addListener("langReady", renderUI);
          function renderUI() {
            editor.setOpt({
              labelMap:
                editor.options.labelMap || UE.I18N[editor.options.lang].labelMap
            });
            new EditorUI(editor.options);
            if (holder) {
              if (holder.constructor === String) {
                holder = document.getElementById(holder);
              }
              holder &&
                holder.getAttribute("name") &&
                (editor.options.textarea = holder.getAttribute("name"));
              if (holder && /script|textarea/gi.test(holder.tagName)) {
                var newDiv = document.createElement("div");
                holder.parentNode.insertBefore(newDiv, holder);
                var cont = holder.value || holder.innerHTML;
                editor.options.initialContent = /^[\t\r\n ]*$/.test(cont)
                  ? editor.options.initialContent
                  : cont
                      .replace(/>[\n\r\t]+([ ]{4})+/g, ">")
                      .replace(/[\n\r\t]+([ ]{4})+</g, "<")
                      .replace(/>[\n\r\t]+</g, "><");

                holder.id && (newDiv.id = holder.id);

                holder.className && (newDiv.className = holder.className);
                holder.style.cssText &&
                  (newDiv.style.cssText = holder.style.cssText);
                if (/textarea/i.test(holder.tagName)) {
                  editor.textarea = holder;
                  editor.textarea.style.display = "none";
                } else {
                  holder.parentNode.removeChild(holder);
                }
                holder = newDiv;
                holder.innerHTML = "";
              }
            }
            // setTimeout(function(){console.log(editor.body)})
            editor.ui.render(holder);
            var iframeholder = editor.ui.getDom("iframeholder");
            //给实例添加一个编辑器的容器引用
            editor.container = editor.ui.getDom();
            editor.container.style.zIndex = editor.options.zIndex;
            oldRender.call(editor, iframeholder);
          }
        });
      };
      return editor;
    };
  })();
  //editor.js end
})();

console.log(2222);
